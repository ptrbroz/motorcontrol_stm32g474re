
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001620  08012290  08012290  00022290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138b0  080138b0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080138b0  080138b0  000238b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138b8  080138b8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138b8  080138b8  000238b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138bc  080138bc  000238bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080138c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009390  20000208  08013ac8  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009598  08013ac8  00039598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030982  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e1  00000000  00000000  00060bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00065ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00067c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da09  00000000  00000000  000697f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242e9  00000000  00000000  000971f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b179  00000000  00000000  000bb4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d665b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009480  00000000  00000000  001d66b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012274 	.word	0x08012274

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08012274 	.word	0x08012274

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fceb 	bl	800da30 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_ADC1_Init+0xe8>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001084:	2204      	movs	r2, #4
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001096:	2201      	movs	r2, #1
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010c6:	f005 f94f 	bl	8006368 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d0:	f003 fdcc 	bl	8004c6c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010e0:	f006 f9c4 	bl	800746c <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f003 fdbf 	bl	8004c6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_ADC1_Init+0xec>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	; 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0xe8>)
 800110c:	f005 fce6 	bl	8006adc <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001116:	f003 fda9 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002a4 	.word	0x200002a4
 8001128:	19200040 	.word	0x19200040

0800112c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00c fc79 	bl	800da30 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001140:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <MX_ADC2_Init+0xc4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001146:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800114a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_ADC2_Init+0xc0>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a8:	f005 f8de 	bl	8006368 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011b2:	f003 fd5b 	bl	8004c6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_ADC2_Init+0xc8>)
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011d4:	f005 fc82 	bl	8006adc <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011de:	f003 fd45 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000238 	.word	0x20000238
 80011f0:	50000100 	.word	0x50000100
 80011f4:	1d500080 	.word	0x1d500080

080011f8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00c fc0d 	bl	800da30 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <MX_ADC3_Init+0xe8>)
 800121a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_ADC3_Init+0xe4>)
 800121e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001222:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001226:	2210      	movs	r2, #16
 8001228:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_ADC3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_ADC3_Init+0xe4>)
 800123e:	2204      	movs	r2, #4
 8001240:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_ADC3_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001250:	2201      	movs	r2, #1
 8001252:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_ADC3_Init+0xe4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001280:	f005 f872 	bl	8006368 <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800128a:	f003 fcef 	bl	8004c6c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_ADC3_Init+0xe4>)
 800129a:	f006 f8e7 	bl	800746c <HAL_ADCEx_MultiModeConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f003 fce2 	bl	8004c6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_ADC3_Init+0xec>)
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012b0:	2307      	movs	r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	237f      	movs	r3, #127	; 0x7f
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_ADC3_Init+0xe4>)
 80012c6:	f005 fc09 	bl	8006adc <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012d0:	f003 fccc 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000310 	.word	0x20000310
 80012e0:	50000400 	.word	0x50000400
 80012e4:	32601000 	.word	0x32601000

080012e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001308:	d12d      	bne.n	8001366 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001312:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10b      	bne.n	8001334 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_ADC_MspInit+0x144>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_ADC_MspInit+0x144>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_ADC_MspInit+0x144>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <HAL_ADC_MspInit+0x148>)
 8001360:	f007 fc2a 	bl	8008bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001364:	e05b      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_ADC_MspInit+0x14c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12d      	bne.n	80013cc <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10b      	bne.n	800139a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_MspInit+0x144>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <HAL_ADC_MspInit+0x148>)
 80013c6:	f007 fbf7 	bl	8008bb8 <HAL_GPIO_Init>
}
 80013ca:	e028      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_MspInit+0x150>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ADC_MspInit+0x154>)
 800141a:	f007 fbcd 	bl	8008bb8 <HAL_GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000224 	.word	0x20000224
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800
 8001434:	50000100 	.word	0x50000100
 8001438:	50000400 	.word	0x50000400
 800143c:	48000400 	.word	0x48000400

08001440 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b08c      	sub	sp, #48	; 0x30
 8001446:	af04      	add	r7, sp, #16
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001450:	4bc5      	ldr	r3, [pc, #788]	; (8001768 <order_phases+0x328>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

	static unsigned debugCounter = 0;


	if(!cal->started){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c1b      	ldrb	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <order_phases+0x30>
		printf("Checking phase sign, pole pairs\r\n");
 800145e:	48c3      	ldr	r0, [pc, #780]	; (800176c <order_phases+0x32c>)
 8001460:	f00c ffde 	bl	800e420 <puts>
		cal->started = 1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001770 <order_phases+0x330>
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a05 	vstr	s15, [r3, #20]

	float A = 0.04;
 800148e:	4bb9      	ldr	r3, [pc, #740]	; (8001774 <order_phases+0x334>)
 8001490:	61fb      	str	r3, [r7, #28]
	float f = 10;
 8001492:	4bb9      	ldr	r3, [pc, #740]	; (8001778 <order_phases+0x338>)
 8001494:	61bb      	str	r3, [r7, #24]

	if(debugCounter%10000==0){
 8001496:	4bb9      	ldr	r3, [pc, #740]	; (800177c <order_phases+0x33c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4bb9      	ldr	r3, [pc, #740]	; (8001780 <order_phases+0x340>)
 800149c:	fba3 1302 	umull	r1, r3, r3, r2
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12e      	bne.n	800150e <order_phases+0xce>
		printf("DC %u k, time = %f\n\r", debugCounter/1000, cal->time);
 80014b0:	4bb2      	ldr	r3, [pc, #712]	; (800177c <order_phases+0x33c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4ab3      	ldr	r2, [pc, #716]	; (8001784 <order_phases+0x344>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	099c      	lsrs	r4, r3, #6
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4621      	mov	r1, r4
 80014cc:	48ae      	ldr	r0, [pc, #696]	; (8001788 <order_phases+0x348>)
 80014ce:	f00c ff21 	bl	800e314 <iprintf>
		printf("%f %f %f \r\n", controller->i_a, controller->i_b, controller->i_c);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4680      	mov	r8, r0
 80014de:	4689      	mov	r9, r1
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001500:	e9cd 4500 	strd	r4, r5, [sp]
 8001504:	4642      	mov	r2, r8
 8001506:	464b      	mov	r3, r9
 8001508:	48a0      	ldr	r0, [pc, #640]	; (800178c <order_phases+0x34c>)
 800150a:	f00c ff03 	bl	800e314 <iprintf>
	}

	debugCounter++;
 800150e:	4b9b      	ldr	r3, [pc, #620]	; (800177c <order_phases+0x33c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a99      	ldr	r2, [pc, #612]	; (800177c <order_phases+0x33c>)
 8001516:	6013      	str	r3, [r2, #0]

    //if(cal->time < T1){
	if(cal->time < 15.0){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a05 	vldr	s15, [r3, #20]
 800151e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	f140 80ae 	bpl.w	800168a <order_phases+0x24a>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001540:	3388      	adds	r3, #136	; 0x88
 8001542:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800154a:	3390      	adds	r3, #144	; 0x90
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
        //controller->i_d_des = I_CAL; Ben
        controller->i_d_des = 0.0f;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        //commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]

    	//debug manual rotation
    	controller->dtc_u = 0.5 + A*sin_lut(2*3.14*(f*cal->time));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed93 7a05 	vldr	s14, [r3, #20]
 8001574:	edd7 7a06 	vldr	s15, [r7, #24]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	ee17 0a90 	vmov	r0, s15
 8001580:	f7ff f80a 	bl	8000598 <__aeabi_f2d>
 8001584:	a372      	add	r3, pc, #456	; (adr r3, 8001750 <order_phases+0x310>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee00 3a10 	vmov	s0, r3
 80015a0:	f003 fc86 	bl	8004eb0 <sin_lut>
 80015a4:	eeb0 7a40 	vmov.f32	s14, s0
 80015a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    	controller->dtc_v = 0.5 + A*sin_lut(2*3.14*(f*cal->time)+6.28/3.0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	ee17 0a90 	vmov	r0, s15
 80015d0:	f7fe ffe2 	bl	8000598 <__aeabi_f2d>
 80015d4:	a35e      	add	r3, pc, #376	; (adr r3, 8001750 <order_phases+0x310>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a35c      	add	r3, pc, #368	; (adr r3, 8001758 <order_phases+0x318>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7fe fe76 	bl	80002dc <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb1e 	bl	8000c38 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	ee00 3a10 	vmov	s0, r3
 8001602:	f003 fc55 	bl	8004eb0 <sin_lut>
 8001606:	eeb0 7a40 	vmov.f32	s14, s0
 800160a:	edd7 7a07 	vldr	s15, [r7, #28]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    	controller->dtc_w = 0.5 + A*sin_lut(2*3.14*(f*cal->time)+2*6.28/3.0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	ed93 7a05 	vldr	s14, [r3, #20]
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ffb1 	bl	8000598 <__aeabi_f2d>
 8001636:	a346      	add	r3, pc, #280	; (adr r3, 8001750 <order_phases+0x310>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f804 	bl	8000648 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	a345      	add	r3, pc, #276	; (adr r3, 8001760 <order_phases+0x320>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7fe fe45 	bl	80002dc <__adddf3>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faed 	bl	8000c38 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	ee00 3a10 	vmov	s0, r3
 8001664:	f003 fc24 	bl	8004eb0 <sin_lut>
 8001668:	eeb0 7a40 	vmov.f32	s14, s0
 800166c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60



    	//svm(controller->v_max, A*sin_lut(2*3.14*(f*cal->time)), A*sin_lut(2*3.14*(f*cal->time)+6.28/3.0), A*sin_lut(2*3.14*(f*cal->time)+2*6.28/3.0), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

    	set_dtc(controller);
 8001682:	68b8      	ldr	r0, [r7, #8]
 8001684:	f001 f8d4 	bl	8002830 <set_dtc>


    	return;
 8001688:	e0be      	b.n	8001808 <order_phases+0x3c8>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001690:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001790 <order_phases+0x350>
 8001694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d51d      	bpl.n	80016da <order_phases+0x29a>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016c4:	3388      	adds	r3, #136	; 0x88
 80016c6:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016ce:	332c      	adds	r3, #44	; 0x2c
 80016d0:	4619      	mov	r1, r3
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f001 fd7e 	bl	80031d4 <commutate>
    	return;
 80016d8:	e096      	b.n	8001808 <order_phases+0x3c8>
    }

	reset_foc(controller);
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f001 fc90 	bl	8003000 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f4:	eef0 7ae7 	vabs.f32	s15, s15
 80016f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001794 <order_phases+0x354>
 80016fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001700:	ee16 0a90 	vmov	r0, s13
 8001704:	f7fe ff48 	bl	8000598 <__aeabi_f2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	f010 fa6c 	bl	8011bec <round>
 8001714:	ec53 2b10 	vmov	r2, r3, d0
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a06 	vldr	s15, [r3, #24]
 800172e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd2f      	ble.n	800179c <order_phases+0x35c>
		cal->phase_order = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001744:	4814      	ldr	r0, [pc, #80]	; (8001798 <order_phases+0x358>)
 8001746:	f00c fe6b 	bl	800e420 <puts>
 800174a:	e02e      	b.n	80017aa <order_phases+0x36a>
 800174c:	f3af 8000 	nop.w
 8001750:	51eb851f 	.word	0x51eb851f
 8001754:	40191eb8 	.word	0x40191eb8
 8001758:	8bf258bf 	.word	0x8bf258bf
 800175c:	4000bf25 	.word	0x4000bf25
 8001760:	8bf258bf 	.word	0x8bf258bf
 8001764:	4010bf25 	.word	0x4010bf25
 8001768:	20008f34 	.word	0x20008f34
 800176c:	08012290 	.word	0x08012290
 8001770:	37d1b717 	.word	0x37d1b717
 8001774:	3d23d70a 	.word	0x3d23d70a
 8001778:	41200000 	.word	0x41200000
 800177c:	20000228 	.word	0x20000228
 8001780:	d1b71759 	.word	0xd1b71759
 8001784:	10624dd3 	.word	0x10624dd3
 8001788:	080122b4 	.word	0x080122b4
 800178c:	080122cc 	.word	0x080122cc
 8001790:	3fd06cbe 	.word	0x3fd06cbe
 8001794:	40c90fdb 	.word	0x40c90fdb
 8001798:	080122d8 	.word	0x080122d8
	}
	else{
		cal->phase_order = 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <order_phases+0x3d0>)
 80017a6:	f00c fe3b 	bl	800e420 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4818      	ldr	r0, [pc, #96]	; (8001814 <order_phases+0x3d4>)
 80017b2:	f00c fdaf 	bl	800e314 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe feec 	bl	8000598 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	6978      	ldr	r0, [r7, #20]
 80017c6:	f7fe fee7 	bl	8000598 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9cd 2300 	strd	r2, r3, [sp]
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <order_phases+0x3d8>)
 80017d8:	f00c fd9c 	bl	800e314 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <order_phases+0x3dc>)
 80017e6:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <order_phases+0x3e0>)
 80017f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001810:	080122f0 	.word	0x080122f0
 8001814:	08012308 	.word	0x08012308
 8001818:	0801231c 	.word	0x0801231c
 800181c:	20008f34 	.word	0x20008f34
 8001820:	20000684 	.word	0x20000684

08001824 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7c1b      	ldrb	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10f      	bne.n	800185a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 800183a:	489e      	ldr	r0, [pc, #632]	; (8001ab4 <calibrate_encoder+0x290>)
 800183c:	f00c fdf0 	bl	800e420 <puts>
			cal->started = 1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ab8 <calibrate_encoder+0x294>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a05 	vldr	s15, [r3, #20]
 800187e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d525      	bpl.n	80018d8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800189e:	3388      	adds	r3, #136	; 0x88
 80018a0:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80018a2:	4b86      	ldr	r3, [pc, #536]	; (8001abc <calibrate_encoder+0x298>)
 80018a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018bc:	332c      	adds	r3, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fc87 	bl	80031d4 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80018d6:	e259      	b.n	8001d8c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	ed93 7a05 	vldr	s14, [r3, #20]
 80018de:	4b77      	ldr	r3, [pc, #476]	; (8001abc <calibrate_encoder+0x298>)
 80018e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018e4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001ac0 <calibrate_encoder+0x29c>
 80018e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018ec:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80018f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	f140 808f 	bpl.w	8001a26 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edd3 7a02 	vldr	s15, [r3, #8]
 800190e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001ac4 <calibrate_encoder+0x2a0>
 8001912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001926:	3388      	adds	r3, #136	; 0x88
 8001928:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001930:	332c      	adds	r3, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f001 fc4d 	bl	80031d4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	dc00      	bgt.n	8001952 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001950:	e21c      	b.n	8001d8c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a02 	vldr	s15, [r3, #8]
 8001958:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001ad8 <calibrate_encoder+0x2b4>
 800195c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001960:	4b56      	ldr	r3, [pc, #344]	; (8001abc <calibrate_encoder+0x298>)
 8001962:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001966:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001ac0 <calibrate_encoder+0x29c>
 800196a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	13db      	asrs	r3, r3, #15
 800198a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001992:	4618      	mov	r0, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	441a      	add	r2, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f100 030a 	add.w	r3, r0, #10
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a8:	461d      	mov	r5, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	330a      	adds	r3, #10
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	685c      	ldr	r4, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9cd 2300 	strd	r2, r3, [sp]
 80019ca:	4623      	mov	r3, r4
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4629      	mov	r1, r5
 80019d0:	483d      	ldr	r0, [pc, #244]	; (8001ac8 <calibrate_encoder+0x2a4>)
 80019d2:	f00c fc9f 	bl	800e314 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001acc <calibrate_encoder+0x2a8>
 80019e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <calibrate_encoder+0x298>)
 80019f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019fc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001ad0 <calibrate_encoder+0x2ac>
 8001a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a0c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	f000 81b7 	beq.w	8001d86 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001a24:	e1b2      	b.n	8001d8c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <calibrate_encoder+0x298>)
 8001a2e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a32:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001ad4 <calibrate_encoder+0x2b0>
 8001a36:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a3a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001a3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	f140 80a9 	bpl.w	8001ba8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ac4 <calibrate_encoder+0x2a0>
 8001a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <calibrate_encoder+0x298>)
 8001a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a88:	3388      	adds	r3, #136	; 0x88
 8001a8a:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a92:	332c      	adds	r3, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	f001 fb9c 	bl	80031d4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dc14      	bgt.n	8001adc <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001ab2:	e16a      	b.n	8001d8a <calibrate_encoder+0x566>
 8001ab4:	08012338 	.word	0x08012338
 8001ab8:	37d1b717 	.word	0x37d1b717
 8001abc:	20000684 	.word	0x20000684
 8001ac0:	40c90fdb 	.word	0x40c90fdb
 8001ac4:	3983126e 	.word	0x3983126e
 8001ac8:	08012360 	.word	0x08012360
 8001acc:	3ba0d97c 	.word	0x3ba0d97c
 8001ad0:	43000000 	.word	0x43000000
 8001ad4:	41490fdb 	.word	0x41490fdb
 8001ad8:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8152 	beq.w	8001d8a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aec:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001ad8 <calibrate_encoder+0x2b4>
 8001af0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001af4:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <calibrate_encoder+0x570>)
 8001af6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001afa:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001d98 <calibrate_encoder+0x574>
 8001afe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	13db      	asrs	r3, r3, #15
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	330a      	adds	r3, #10
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001b3e:	4610      	mov	r0, r2
 8001b40:	0fda      	lsrs	r2, r3, #31
 8001b42:	4413      	add	r3, r2
 8001b44:	105b      	asrs	r3, r3, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f100 030a 	add.w	r3, r0, #10
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	330a      	adds	r3, #10
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	685c      	ldr	r4, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd13 	bl	8000598 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9cd 2300 	strd	r2, r3, [sp]
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	6a3a      	ldr	r2, [r7, #32]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	4886      	ldr	r0, [pc, #536]	; (8001d9c <calibrate_encoder+0x578>)
 8001b82:	f00c fbc7 	bl	800e314 <iprintf>
			cal->sample_count--;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b98:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001da0 <calibrate_encoder+0x57c>
 8001b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001ba6:	e0f0      	b.n	8001d8a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f001 fa29 	bl	8003000 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb6:	e00b      	b.n	8001bd0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbc:	330a      	adds	r3, #10
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bc6:	4413      	add	r3, r2
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	3301      	adds	r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd0:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <calibrate_encoder+0x570>)
 8001bd2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbe8      	blt.n	8001bb8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <calibrate_encoder+0x570>)
 8001bf2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001da4 <calibrate_encoder+0x580>
 8001bfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 2a90 	vmov	r2, s15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da01      	bge.n	8001c22 <calibrate_encoder+0x3fe>
 8001c1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c22:	125b      	asrs	r3, r3, #9
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	e0a0      	b.n	8001d6e <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	0fda      	lsrs	r2, r3, #31
 8001c34:	4413      	add	r3, r2
 8001c36:	105b      	asrs	r3, r3, #1
 8001c38:	425b      	negs	r3, r3
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3c:	e068      	b.n	8001d10 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <calibrate_encoder+0x570>)
 8001c4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001da4 <calibrate_encoder+0x580>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001da4 <calibrate_encoder+0x580>
 8001c5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c74:	ee17 3a90 	vmov	r3, s15
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da13      	bge.n	8001ca8 <calibrate_encoder+0x484>
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <calibrate_encoder+0x570>)
 8001c8c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c90:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001da4 <calibrate_encoder+0x580>
 8001c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca6:	e027      	b.n	8001cf8 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <calibrate_encoder+0x570>)
 8001cb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cb8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001da4 <calibrate_encoder+0x580>
 8001cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	dd12      	ble.n	8001cf8 <calibrate_encoder+0x4d4>
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <calibrate_encoder+0x570>)
 8001cde:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ce2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001da4 <calibrate_encoder+0x580>
 8001ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	330a      	adds	r3, #10
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d06:	4413      	add	r3, r2
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	0fda      	lsrs	r2, r3, #31
 8001d14:	4413      	add	r3, r2
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	db8e      	blt.n	8001c3e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2e:	4413      	add	r3, r2
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	2b7f      	cmp	r3, #127	; 0x7f
 8001d36:	dd02      	ble.n	8001d3e <calibrate_encoder+0x51a>
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	3b80      	subs	r3, #128	; 0x80
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d4e:	330a      	adds	r3, #10
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <calibrate_encoder+0x584>)
 8001d64:	f00c fad6 	bl	800e314 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d70:	2b7f      	cmp	r3, #127	; 0x7f
 8001d72:	f77f af5b 	ble.w	8001c2c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001d84:	e002      	b.n	8001d8c <calibrate_encoder+0x568>
				return;
 8001d86:	bf00      	nop
 8001d88:	e000      	b.n	8001d8c <calibrate_encoder+0x568>
		return;
 8001d8a:	bf00      	nop
}
 8001d8c:	3748      	adds	r7, #72	; 0x48
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000684 	.word	0x20000684
 8001d98:	40c90fdb 	.word	0x40c90fdb
 8001d9c:	08012360 	.word	0x08012360
 8001da0:	3ba0d97c 	.word	0x3ba0d97c
 8001da4:	43000000 	.word	0x43000000
 8001da8:	08012370 	.word	0x08012370

08001dac <drv_spi_write>:
#include <drv8353.h>
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f007 f879 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1c9a      	adds	r2, r3, #2
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <drv_spi_write+0x58>)
 8001dd8:	f008 f967 	bl	800a0aa <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001ddc:	bf00      	nop
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <drv_spi_write+0x58>)
 8001de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d0f9      	beq.n	8001dde <drv_spi_write+0x32>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001dea:	2201      	movs	r2, #1
 8001dec:	2110      	movs	r1, #16
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f007 f863 	bl	8008ebc <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	885b      	ldrh	r3, [r3, #2]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20009444 	.word	0x20009444

08001e08 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	463b      	mov	r3, r7
 8001e10:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001e14:	463b      	mov	r3, r7
 8001e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffc6 	bl	8001dac <drv_spi_write>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	463b      	mov	r3, r7
 8001e32:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001e36:	463b      	mov	r3, r7
 8001e38:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ffb5 	bl	8001dac <drv_spi_write>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e5a:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	02db      	lsls	r3, r3, #11
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff99 	bl	8001dac <drv_spi_write>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	f107 0408 	add.w	r4, r7, #8
 8001e8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	02db      	lsls	r3, r3, #11
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff7d 	bl	8001dac <drv_spi_write>
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}

08001eba <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001eba:	b590      	push	{r4, r7, lr}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	f107 0408 	add.w	r4, r7, #8
 8001ec4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	01db      	lsls	r3, r3, #7
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x07FF;
 8001f28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f2c:	82bb      	strh	r3, [r7, #20]
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
 8001f2e:	8afa      	ldrh	r2, [r7, #22]
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff38 	bl	8001dac <drv_spi_write>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	827b      	strh	r3, [r7, #18]
	//printf("loop retval = %d\n\r", (retval&mask));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	f107 0408 	add.w	r4, r7, #8
 8001f52:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	82fb      	strh	r3, [r7, #22]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
 8001f8e:	8afa      	ldrh	r2, [r7, #22]
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff08 	bl	8001dac <drv_spi_write>
}
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}

08001fa4 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	f107 0408 	add.w	r4, r7, #8
 8001fae:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	b21b      	sxth	r3, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	b21a      	sxth	r2, r3
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	82fb      	strh	r3, [r7, #22]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
 8002012:	8afa      	ldrh	r2, [r7, #22]
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fec6 	bl	8001dac <drv_spi_write>
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	463b      	mov	r3, r7
 8002030:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002034:	2202      	movs	r2, #2
 8002036:	463b      	mov	r3, r7
 8002038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203c:	f7ff ff06 	bl	8001e4c <drv_read_register>
 8002040:	4603      	mov	r3, r0
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	81fb      	strh	r3, [r7, #14]
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	2202      	movs	r2, #2
 800204c:	4639      	mov	r1, r7
 800204e:	c903      	ldmia	r1, {r0, r1}
 8002050:	f7ff ff18 	bl	8001e84 <drv_write_register>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	463b      	mov	r3, r7
 8002064:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002068:	2202      	movs	r2, #2
 800206a:	463b      	mov	r3, r7
 800206c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002070:	f7ff feec 	bl	8001e4c <drv_read_register>
 8002074:	4603      	mov	r3, r0
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	81fb      	strh	r3, [r7, #14]
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	2202      	movs	r2, #2
 8002080:	4639      	mov	r1, r7
 8002082:	c903      	ldmia	r1, {r0, r1}
 8002084:	f7ff fefe 	bl	8001e84 <drv_write_register>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	463b      	mov	r3, r7
 8002098:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 800209c:	463b      	mov	r3, r7
 800209e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a2:	f7ff feb1 	bl	8001e08 <drv_read_FSR1>
 80020a6:	4603      	mov	r3, r0
 80020a8:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80020aa:	463b      	mov	r3, r7
 80020ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020b0:	f7ff febb 	bl	8001e2a <drv_read_FSR2>
 80020b4:	4603      	mov	r3, r0
 80020b6:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <drv_print_faults+0x38>
 80020c2:	4857      	ldr	r0, [pc, #348]	; (8002220 <drv_print_faults+0x190>)
 80020c4:	f00c f926 	bl	800e314 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <drv_print_faults+0x48>
 80020d2:	4854      	ldr	r0, [pc, #336]	; (8002224 <drv_print_faults+0x194>)
 80020d4:	f00c f91e 	bl	800e314 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <drv_print_faults+0x58>
 80020e2:	4851      	ldr	r0, [pc, #324]	; (8002228 <drv_print_faults+0x198>)
 80020e4:	f00c f916 	bl	800e314 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <drv_print_faults+0x68>
 80020f2:	484e      	ldr	r0, [pc, #312]	; (800222c <drv_print_faults+0x19c>)
 80020f4:	f00c f90e 	bl	800e314 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <drv_print_faults+0x78>
 8002102:	484b      	ldr	r0, [pc, #300]	; (8002230 <drv_print_faults+0x1a0>)
 8002104:	f00c f906 	bl	800e314 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <drv_print_faults+0x88>
 8002112:	4848      	ldr	r0, [pc, #288]	; (8002234 <drv_print_faults+0x1a4>)
 8002114:	f00c f8fe 	bl	800e314 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <drv_print_faults+0x98>
 8002122:	4845      	ldr	r0, [pc, #276]	; (8002238 <drv_print_faults+0x1a8>)
 8002124:	f00c f8f6 	bl	800e314 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <drv_print_faults+0xa8>
 8002132:	4842      	ldr	r0, [pc, #264]	; (800223c <drv_print_faults+0x1ac>)
 8002134:	f00c f8ee 	bl	800e314 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <drv_print_faults+0xb8>
 8002142:	483f      	ldr	r0, [pc, #252]	; (8002240 <drv_print_faults+0x1b0>)
 8002144:	f00c f8e6 	bl	800e314 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <drv_print_faults+0xc8>
 8002152:	483c      	ldr	r0, [pc, #240]	; (8002244 <drv_print_faults+0x1b4>)
 8002154:	f00c f8de 	bl	800e314 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <drv_print_faults+0xd8>
 8002162:	4839      	ldr	r0, [pc, #228]	; (8002248 <drv_print_faults+0x1b8>)
 8002164:	f00c f8d6 	bl	800e314 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002168:	89bb      	ldrh	r3, [r7, #12]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <drv_print_faults+0xe8>
 8002172:	4836      	ldr	r0, [pc, #216]	; (800224c <drv_print_faults+0x1bc>)
 8002174:	f00c f8ce 	bl	800e314 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <drv_print_faults+0xf8>
 8002182:	4833      	ldr	r0, [pc, #204]	; (8002250 <drv_print_faults+0x1c0>)
 8002184:	f00c f8c6 	bl	800e314 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <drv_print_faults+0x108>
 8002192:	4830      	ldr	r0, [pc, #192]	; (8002254 <drv_print_faults+0x1c4>)
 8002194:	f00c f8be 	bl	800e314 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8002198:	89bb      	ldrh	r3, [r7, #12]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <drv_print_faults+0x118>
 80021a2:	482d      	ldr	r0, [pc, #180]	; (8002258 <drv_print_faults+0x1c8>)
 80021a4:	f00c f8b6 	bl	800e314 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80021a8:	89bb      	ldrh	r3, [r7, #12]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <drv_print_faults+0x128>
 80021b2:	482a      	ldr	r0, [pc, #168]	; (800225c <drv_print_faults+0x1cc>)
 80021b4:	f00c f8ae 	bl	800e314 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80021b8:	89bb      	ldrh	r3, [r7, #12]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <drv_print_faults+0x138>
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <drv_print_faults+0x1d0>)
 80021c4:	f00c f8a6 	bl	800e314 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <drv_print_faults+0x148>
 80021d2:	4824      	ldr	r0, [pc, #144]	; (8002264 <drv_print_faults+0x1d4>)
 80021d4:	f00c f89e 	bl	800e314 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <drv_print_faults+0x158>
 80021e2:	4821      	ldr	r0, [pc, #132]	; (8002268 <drv_print_faults+0x1d8>)
 80021e4:	f00c f896 	bl	800e314 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80021e8:	89bb      	ldrh	r3, [r7, #12]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <drv_print_faults+0x168>
 80021f2:	481e      	ldr	r0, [pc, #120]	; (800226c <drv_print_faults+0x1dc>)
 80021f4:	f00c f88e 	bl	800e314 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <drv_print_faults+0x178>
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <drv_print_faults+0x1e0>)
 8002204:	f00c f886 	bl	800e314 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <drv_print_faults+0x188>
 8002212:	4818      	ldr	r0, [pc, #96]	; (8002274 <drv_print_faults+0x1e4>)
 8002214:	f00c f87e 	bl	800e314 <iprintf>

}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	0801237c 	.word	0x0801237c
 8002224:	08012388 	.word	0x08012388
 8002228:	08012394 	.word	0x08012394
 800222c:	0801239c 	.word	0x0801239c
 8002230:	080123a4 	.word	0x080123a4
 8002234:	080123ac 	.word	0x080123ac
 8002238:	080123b8 	.word	0x080123b8
 800223c:	080123c4 	.word	0x080123c4
 8002240:	080123d0 	.word	0x080123d0
 8002244:	080123dc 	.word	0x080123dc
 8002248:	080123e8 	.word	0x080123e8
 800224c:	080123f4 	.word	0x080123f4
 8002250:	080123fc 	.word	0x080123fc
 8002254:	08012404 	.word	0x08012404
 8002258:	0801240c 	.word	0x0801240c
 800225c:	08012414 	.word	0x08012414
 8002260:	0801241c 	.word	0x0801241c
 8002264:	08012428 	.word	0x08012428
 8002268:	08012434 	.word	0x08012434
 800226c:	08012440 	.word	0x08012440
 8002270:	0801244c 	.word	0x0801244c
 8002274:	08012458 	.word	0x08012458

08002278 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800227e:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <MX_FDCAN2_Init+0x84>)
 8002280:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002290:	2200      	movs	r2, #0
 8002292:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002296:	2200      	movs	r2, #0
 8002298:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800229c:	2200      	movs	r2, #0
 800229e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 12;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022b4:	2203      	movs	r2, #3
 80022b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 3;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022cc:	2203      	movs	r2, #3
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022d8:	2201      	movs	r2, #1
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022de:	2200      	movs	r2, #0
 80022e0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022e4:	f005 fb9a 	bl	8007a1c <HAL_FDCAN_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 80022ee:	f002 fcbd 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000037c 	.word	0x2000037c
 80022fc:	40006800 	.word	0x40006800

08002300 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_FDCAN_MspInit+0x8c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12f      	bne.n	8002382 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002352:	2360      	movs	r3, #96	; 0x60
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002362:	2309      	movs	r3, #9
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_FDCAN_MspInit+0x94>)
 800236e:	f006 fc23 	bl	8008bb8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2056      	movs	r0, #86	; 0x56
 8002378:	f005 fa5b 	bl	8007832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800237c:	2056      	movs	r0, #86	; 0x56
 800237e:	f005 fa72 	bl	8007866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40006800 	.word	0x40006800
 8002390:	40021000 	.word	0x40021000
 8002394:	48000400 	.word	0x48000400

08002398 <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterID1 = CAN_ID;//<<5;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <can_rx_init+0x58>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = 0x7FF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023b0:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterIndex = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.IdType = FDCAN_STANDARD_ID;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3334      	adds	r3, #52	; 0x34
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <can_rx_init+0x5c>)
 80023d2:	f005 fc7d 	bl	8007cd0 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	2202      	movs	r2, #2
 80023de:	2102      	movs	r1, #2
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <can_rx_init+0x5c>)
 80023e2:	f005 fccf 	bl	8007d84 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20008f34 	.word	0x20008f34
 80023f4:	2000037c 	.word	0x2000037c

080023f8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800240c:	615a      	str	r2, [r3, #20]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <can_tx_init+0x54>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
	msg->tx_header.MessageMarker = 0; //???
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20008f34 	.word	0x20008f34

08002450 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8002450:	b084      	sub	sp, #16
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002460:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800246e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002478:	0912      	lsrs	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800248a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002492:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800249c:	0912      	lsrs	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 80024a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80024b2:	4313      	orrs	r3, r2
 80024b4:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <unpack_cmd+0x160>)
 80024b8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80024bc:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <unpack_cmd+0x160>)
 80024be:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80024c2:	2110      	movs	r1, #16
 80024c4:	eef0 0a47 	vmov.f32	s1, s14
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	6978      	ldr	r0, [r7, #20]
 80024ce:	f002 fcbd 	bl	8004e4c <uint_to_float>
 80024d2:	eef0 7a40 	vmov.f32	s15, s0
 80024d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d8:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <unpack_cmd+0x160>)
 80024de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <unpack_cmd+0x160>)
 80024e4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	1d1c      	adds	r4, r3, #4
 80024ec:	210c      	movs	r1, #12
 80024ee:	eef0 0a47 	vmov.f32	s1, s14
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	6938      	ldr	r0, [r7, #16]
 80024f8:	f002 fca8 	bl	8004e4c <uint_to_float>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <unpack_cmd+0x160>)
 8002506:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	f103 0408 	add.w	r4, r3, #8
 8002510:	210c      	movs	r1, #12
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80025b4 <unpack_cmd+0x164>
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f002 fc96 	bl	8004e4c <uint_to_float>
 8002520:	eef0 7a40 	vmov.f32	s15, s0
 8002524:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <unpack_cmd+0x160>)
 800252a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800252e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002530:	f103 040c 	add.w	r4, r3, #12
 8002534:	210c      	movs	r1, #12
 8002536:	eef0 0a67 	vmov.f32	s1, s15
 800253a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80025b4 <unpack_cmd+0x164>
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f002 fc84 	bl	8004e4c <uint_to_float>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <unpack_cmd+0x160>)
 800254e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002552:	eeb1 7a67 	vneg.f32	s14, s15
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <unpack_cmd+0x160>)
 8002558:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800255c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <unpack_cmd+0x160>)
 8002562:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002566:	ee67 6a27 	vmul.f32	s13, s14, s15
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <unpack_cmd+0x160>)
 800256c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <unpack_cmd+0x160>)
 8002572:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <unpack_cmd+0x160>)
 800257c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002586:	f103 0410 	add.w	r4, r3, #16
 800258a:	210c      	movs	r1, #12
 800258c:	eef0 0a67 	vmov.f32	s1, s15
 8002590:	eeb0 0a66 	vmov.f32	s0, s13
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f002 fc59 	bl	8004e4c <uint_to_float>
 800259a:	eef0 7a40 	vmov.f32	s15, s0
 800259e:	edc4 7a00 	vstr	s15, [r4]

    }
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80025ac:	b004      	add	sp, #16
 80025ae:	4770      	bx	lr
 80025b0:	20000684 	.word	0x20000684
 80025b4:	00000000 	.word	0x00000000

080025b8 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 80025b8:	b480      	push	{r7}
 80025ba:	b093      	sub	sp, #76	; 0x4c
 80025bc:	af00      	add	r7, sp, #0
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 80025be:	2300      	movs	r3, #0
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	e02f      	b.n	8002624 <load_from_flash+0x6c>
    	uint32_t address = FLOATS_ADDR + i*4;
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025ca:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    	uint64_t doubleWord = *((uint64_t*)(address));
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	60fb      	str	r3, [r7, #12]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 80025e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	000a      	movs	r2, r1
 80025ee:	2300      	movs	r3, #0
 80025f0:	4613      	mov	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]

    	float float1 = *((float*)(&word1));
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
    	float float2 = *((float*)(&word2));
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]

    	__float_reg[i] =   float1;
 8002604:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <load_from_flash+0x10c>)
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	601a      	str	r2, [r3, #0]
    	__float_reg[i+1] = float2;
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	3301      	adds	r3, #1
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <load_from_flash+0x10c>)
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	601a      	str	r2, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 800261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002620:	3302      	adds	r3, #2
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
 8002624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002626:	2b3f      	cmp	r3, #63	; 0x3f
 8002628:	ddcc      	ble.n	80025c4 <load_from_flash+0xc>

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 800262a:	2300      	movs	r3, #0
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
 800262e:	e03e      	b.n	80026ae <load_from_flash+0xf6>
    	uint32_t address = INTS_ADDR + i*4;
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	461a      	mov	r2, r3
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <load_from_flash+0x110>)
 8002638:	4413      	add	r3, r2
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c

    	uint64_t doubleWord = *((uint64_t*)(address));
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	607b      	str	r3, [r7, #4]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 800264a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	000a      	movs	r2, r1
 8002658:	2300      	movs	r3, #0
 800265a:	4613      	mov	r3, r2
 800265c:	603b      	str	r3, [r7, #0]

		float int1 = *((int*)(&word1));
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float int2 = *((int*)(&word2));
 800266e:	463b      	mov	r3, r7
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		__int_reg[i] =   int1;
 800267e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002686:	ee17 1a90 	vmov	r1, s15
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <load_from_flash+0x114>)
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__int_reg[i+1] = int2;
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	3301      	adds	r3, #1
 8002696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800269a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269e:	ee17 1a90 	vmov	r1, s15
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <load_from_flash+0x114>)
 80026a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 80026a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026aa:	3302      	adds	r3, #2
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
 80026ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b0:	2bff      	cmp	r3, #255	; 0xff
 80026b2:	ddbd      	ble.n	8002630 <load_from_flash+0x78>
    }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	374c      	adds	r7, #76	; 0x4c
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000684 	.word	0x20000684
 80026c8:	0807d900 	.word	0x0807d900
 80026cc:	20008f34 	.word	0x20008f34

080026d0 <erase_reserved_flash>:

/**
  * @brief  Erase used page of flash memory to prepare for reprogramming
  * @retval uint32_t PageError. 0xFFFFFFFF means no problem
  */
int erase_reserved_flash(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef eraseStruct;
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
    eraseStruct.Banks = FLASH_BANK_2;
 80026da:	2302      	movs	r3, #2
 80026dc:	60fb      	str	r3, [r7, #12]
    eraseStruct.Page = RESERVED_PAGE;
 80026de:	237b      	movs	r3, #123	; 0x7b
 80026e0:	613b      	str	r3, [r7, #16]
    eraseStruct.NbPages = 5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	617b      	str	r3, [r7, #20]
    uint32_t error;
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 80026e6:	1d3a      	adds	r2, r7, #4
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f900 	bl	80088f4 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <erase_reserved_flash+0x34>)
 80026f6:	f00b fe0d 	bl	800e314 <iprintf>
    return error;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08012464 	.word	0x08012464

08002708 <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 800270e:	f005 ffc3 	bl	8008698 <HAL_FLASH_Unlock>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 1;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <save_to_flash+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e075      	b.n	800280c <save_to_flash+0x104>

	status = HAL_FLASH_OB_Unlock();
 8002720:	f005 fff6 	bl	8008710 <HAL_FLASH_OB_Unlock>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 2;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <save_to_flash+0x2a>
 800272e:	2302      	movs	r3, #2
 8002730:	e06c      	b.n	800280c <save_to_flash+0x104>

    unsigned int eraseError = erase_reserved_flash();
 8002732:	f7ff ffcd 	bl	80026d0 <erase_reserved_flash>
 8002736:	4603      	mov	r3, r0
 8002738:	613b      	str	r3, [r7, #16]
    if(eraseError!=0xFFFFFFFF) return 3;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d001      	beq.n	8002746 <save_to_flash+0x3e>
 8002742:	2303      	movs	r3, #3
 8002744:	e062      	b.n	800280c <save_to_flash+0x104>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <save_to_flash+0x10c>)
 8002748:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800274c:	611a      	str	r2, [r3, #16]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800274e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002752:	f006 f81f 	bl	8008794 <FLASH_WaitForLastOperation>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
    if(status!=HAL_OK) return 5;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <save_to_flash+0x5c>
 8002760:	2305      	movs	r3, #5
 8002762:	e053      	b.n	800280c <save_to_flash+0x104>

    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e020      	b.n	80027ac <save_to_flash+0xa4>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <save_to_flash+0x110>)
 8002770:	4413      	add	r3, r2
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	e9c7 2300 	strd	r2, r3, [r7]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002780:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 8002784:	0099      	lsls	r1, r3, #2
 8002786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278a:	2000      	movs	r0, #0
 800278c:	f005 ff2e 	bl	80085ec <HAL_FLASH_Program>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <save_to_flash+0x9e>
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <save_to_flash+0x114>)
 800279e:	f00b fdb9 	bl	800e314 <iprintf>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e032      	b.n	800280c <save_to_flash+0x104>
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3302      	adds	r3, #2
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b3f      	cmp	r3, #63	; 0x3f
 80027b0:	dddb      	ble.n	800276a <save_to_flash+0x62>
    }

    for(int i=0;i<INTSCOUNT;i=i+2){
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	e01e      	b.n	80027f6 <save_to_flash+0xee>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <save_to_flash+0x118>)
 80027be:	4413      	add	r3, r2
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <save_to_flash+0x11c>)
 80027cc:	4413      	add	r3, r2
 80027ce:	0099      	lsls	r1, r3, #2
 80027d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d4:	2000      	movs	r0, #0
 80027d6:	f005 ff09 	bl	80085ec <HAL_FLASH_Program>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <save_to_flash+0xe8>
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	4810      	ldr	r0, [pc, #64]	; (8002828 <save_to_flash+0x120>)
 80027e8:	f00b fd94 	bl	800e314 <iprintf>
 80027ec:	2307      	movs	r3, #7
 80027ee:	e00d      	b.n	800280c <save_to_flash+0x104>
    for(int i=0;i<INTSCOUNT;i=i+2){
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	3302      	adds	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2bff      	cmp	r3, #255	; 0xff
 80027fa:	dddd      	ble.n	80027b8 <save_to_flash+0xb0>
    }
    HAL_FLASH_Lock();
 80027fc:	f005 ff6e 	bl	80086dc <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 8002800:	f005 ffac 	bl	800875c <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <save_to_flash+0x124>)
 8002806:	f00b fe0b 	bl	800e420 <puts>
    return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40022000 	.word	0x40022000
 8002818:	20000684 	.word	0x20000684
 800281c:	0801247c 	.word	0x0801247c
 8002820:	20008f34 	.word	0x20008f34
 8002824:	0201f640 	.word	0x0201f640
 8002828:	080124a0 	.word	0x080124a0
 800282c:	080124c4 	.word	0x080124c4

08002830 <set_dtc>:
#include "user_config.h"

#include <stdio.h>


void set_dtc(ControllerStruct *controller){
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002858:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287c:	edc7 7a03 	vstr	s15, [r7, #12]

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <set_dtc+0x140>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d136      	bne.n	80028f6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <set_dtc+0x144>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002896:	edd7 7a05 	vldr	s15, [r7, #20]
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b35      	ldr	r3, [pc, #212]	; (8002974 <set_dtc+0x144>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a6:	ee17 2a90 	vmov	r2, s15
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <set_dtc+0x144>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <set_dtc+0x144>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	ee17 2a90 	vmov	r2, s15
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <set_dtc+0x144>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028de:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <set_dtc+0x144>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80028f4:	e035      	b.n	8002962 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <set_dtc+0x144>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002904:	edd7 7a05 	vldr	s15, [r7, #20]
 8002908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <set_dtc+0x144>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002914:	ee17 2a90 	vmov	r2, s15
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <set_dtc+0x144>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002928:	edd7 7a04 	vldr	s15, [r7, #16]
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <set_dtc+0x144>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002938:	ee17 2a90 	vmov	r2, s15
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <set_dtc+0x144>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800294c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <set_dtc+0x144>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295c:	ee17 2a90 	vmov	r2, s15
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20008f34 	.word	0x20008f34
 8002974:	200094a8 	.word	0x200094a8

08002978 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */

	HAL_ADC_Start(&ADC_CH_IA);
 8002980:	4841      	ldr	r0, [pc, #260]	; (8002a88 <analog_sample+0x110>)
 8002982:	f003 feb3 	bl	80066ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IA, HAL_MAX_DELAY);
 8002986:	f04f 31ff 	mov.w	r1, #4294967295
 800298a:	483f      	ldr	r0, [pc, #252]	; (8002a88 <analog_sample+0x110>)
 800298c:	f003 ff92 	bl	80068b4 <HAL_ADC_PollForConversion>
	HAL_ADC_Start(&ADC_CH_IB);
 8002990:	483e      	ldr	r0, [pc, #248]	; (8002a8c <analog_sample+0x114>)
 8002992:	f003 feab 	bl	80066ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IB, HAL_MAX_DELAY);
 8002996:	f04f 31ff 	mov.w	r1, #4294967295
 800299a:	483c      	ldr	r0, [pc, #240]	; (8002a8c <analog_sample+0x114>)
 800299c:	f003 ff8a 	bl	80068b4 <HAL_ADC_PollForConversion>

	HAL_ADC_Start(&ADC_CH_MAIN);
 80029a0:	4839      	ldr	r0, [pc, #228]	; (8002a88 <analog_sample+0x110>)
 80029a2:	f003 fea3 	bl	80066ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY); //vbus conversion is slower, probably replace with polling IB if vbus is ever removed
 80029a6:	f04f 31ff 	mov.w	r1, #4294967295
 80029aa:	4837      	ldr	r0, [pc, #220]	; (8002a88 <analog_sample+0x110>)
 80029ac:	f003 ff82 	bl	80068b4 <HAL_ADC_PollForConversion>

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80029b0:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <analog_sample+0x118>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10e      	bne.n	80029d6 <analog_sample+0x5e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80029b8:	4833      	ldr	r0, [pc, #204]	; (8002a88 <analog_sample+0x110>)
 80029ba:	f004 f881 	bl	8006ac0 <HAL_ADC_GetValue>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80029c6:	4831      	ldr	r0, [pc, #196]	; (8002a8c <analog_sample+0x114>)
 80029c8:	f004 f87a 	bl	8006ac0 <HAL_ADC_GetValue>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e00d      	b.n	80029f2 <analog_sample+0x7a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80029d6:	482d      	ldr	r0, [pc, #180]	; (8002a8c <analog_sample+0x114>)
 80029d8:	f004 f872 	bl	8006ac0 <HAL_ADC_GetValue>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80029e4:	4828      	ldr	r0, [pc, #160]	; (8002a88 <analog_sample+0x110>)
 80029e6:	f004 f86b 	bl	8006ac0 <HAL_ADC_GetValue>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80029f2:	4828      	ldr	r0, [pc, #160]	; (8002a94 <analog_sample+0x11c>)
 80029f4:	f004 f864 	bl	8006ac0 <HAL_ADC_GetValue>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002a98 <analog_sample+0x120>
 8002a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002a9c <analog_sample+0x124>
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002a9c <analog_sample+0x124>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a6c:	eeb1 7a67 	vneg.f32	s14, s15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	edc3 7a07 	vstr	s15, [r3, #28]


}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200002a4 	.word	0x200002a4
 8002a8c:	20000238 	.word	0x20000238
 8002a90:	20008f34 	.word	0x20008f34
 8002a94:	20000310 	.word	0x20000310
 8002a98:	3c533333 	.word	0x3c533333
 8002a9c:	3ca50000 	.word	0x3ca50000

08002aa0 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	ed87 0a05 	vstr	s0, [r7, #20]
 8002aaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8002aae:	ed87 1a03 	vstr	s2, [r7, #12]
 8002ab2:	60b8      	str	r0, [r7, #8]
 8002ab4:	6079      	str	r1, [r7, #4]
 8002ab6:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002ab8:	ed97 0a05 	vldr	s0, [r7, #20]
 8002abc:	f002 fa32 	bl	8004f24 <cos_lut>
 8002ac0:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002ac4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ac8:	f002 f9f2 	bl	8004eb0 <sin_lut>
 8002acc:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002af6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002ba0 <abc+0x100>
 8002afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002afe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b16:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b1a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002ba4 <abc+0x104>
 8002b1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b22:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b26:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002b44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002ba4 <abc+0x104>
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b54:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b68:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b6c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002ba0 <abc+0x100>
 8002b70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b78:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	edc3 7a00 	vstr	s15, [r3]
    }
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	3f5db3d7 	.word	0x3f5db3d7
 8002ba4:	bf5db3d7 	.word	0xbf5db3d7

08002ba8 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bb2:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bb6:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bba:	edc7 1a02 	vstr	s3, [r7, #8]
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002bc2:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bc6:	f002 f9ad 	bl	8004f24 <cos_lut>
 8002bca:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002bce:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bd2:	f002 f96d 	bl	8004eb0 <sin_lut>
 8002bd6:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002bda:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bea:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002cbc <dq0+0x114>
 8002bee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bf2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002bfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bfe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c12:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002cc0 <dq0+0x118>
 8002c16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c36:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002cc4 <dq0+0x11c>
 8002c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c48:	eeb1 7a67 	vneg.f32	s14, s15
 8002c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c58:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002cc0 <dq0+0x118>
 8002c5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c68:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c80:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002cbc <dq0+0x114>
 8002c84:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002cc4 <dq0+0x11c>
 8002ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	edc3 7a00 	vstr	s15, [r3]

    }
 8002cb2:	bf00      	nop
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	3f5db3d7 	.word	0x3f5db3d7
 8002cc0:	bf5db3d7 	.word	0xbf5db3d7
 8002cc4:	3f2aaaab 	.word	0x3f2aaaab

08002cc8 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	ed2d 8b02 	vpush	{d8}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	ed87 0a07 	vstr	s0, [r7, #28]
 8002cd6:	edc7 0a06 	vstr	s1, [r7, #24]
 8002cda:	ed87 1a05 	vstr	s2, [r7, #20]
 8002cde:	edc7 1a04 	vstr	s3, [r7, #16]
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002ce8:	ed97 1a04 	vldr	s2, [r7, #16]
 8002cec:	edd7 0a05 	vldr	s1, [r7, #20]
 8002cf0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002cf4:	f002 f82d 	bl	8004d52 <fminf3>
 8002cf8:	eeb0 8a40 	vmov.f32	s16, s0
 8002cfc:	ed97 1a04 	vldr	s2, [r7, #16]
 8002d00:	edd7 0a05 	vldr	s1, [r7, #20]
 8002d04:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d08:	f001 ffef 	bl	8004cea <fmaxf3>
 8002d0c:	eef0 7a40 	vmov.f32	s15, s0
 8002d10:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002d14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002d20:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <svm+0x160>)
 8002d22:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d24:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002e2c <svm+0x164>
 8002d3c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d48:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d50:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002e30 <svm+0x168>
 8002d54:	eeb0 0a67 	vmov.f32	s0, s15
 8002d58:	f001 ff8f 	bl	8004c7a <fast_fmaxf>
 8002d5c:	eef0 7a40 	vmov.f32	s15, s0
 8002d60:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002e34 <svm+0x16c>
 8002d64:	eeb0 0a67 	vmov.f32	s0, s15
 8002d68:	f001 ffa3 	bl	8004cb2 <fast_fminf>
 8002d6c:	eef0 7a40 	vmov.f32	s15, s0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d76:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002e2c <svm+0x164>
 8002d8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002e30 <svm+0x168>
 8002da6:	eeb0 0a67 	vmov.f32	s0, s15
 8002daa:	f001 ff66 	bl	8004c7a <fast_fmaxf>
 8002dae:	eef0 7a40 	vmov.f32	s15, s0
 8002db2:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002e34 <svm+0x16c>
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	f001 ff7a 	bl	8004cb2 <fast_fminf>
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ddc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002e2c <svm+0x164>
 8002de0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002de4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002e30 <svm+0x168>
 8002df8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfc:	f001 ff3d 	bl	8004c7a <fast_fmaxf>
 8002e00:	eef0 7a40 	vmov.f32	s15, s0
 8002e04:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002e34 <svm+0x16c>
 8002e08:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0c:	f001 ff51 	bl	8004cb2 <fast_fminf>
 8002e10:	eef0 7a40 	vmov.f32	s15, s0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	edc3 7a00 	vstr	s15, [r3]

    }
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	ecbd 8b02 	vpop	{d8}
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	3ef0a3d7 	.word	0x3ef0a3d7
 8002e2c:	3f933333 	.word	0x3f933333
 8002e30:	00000000 	.word	0x00000000
 8002e34:	3f70a3d7 	.word	0x3f70a3d7

08002e38 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4c:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fce2 	bl	8002830 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e00f      	b.n	8002e92 <zero_current+0x5a>
    	analog_sample(controller);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fd80 	bl	8002978 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	dbeb      	blt.n	8002e72 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	fb92 f2f3 	sdiv	r2, r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <init_controller_params+0x114>)
 8002ecc:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <init_controller_params+0x114>)
 8002ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002ed4:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <init_controller_params+0x118>)
 8002ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eda:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002fdc <init_controller_params+0x11c>
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <init_controller_params+0x118>)
 8002eea:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002fdc <init_controller_params+0x11c>
 8002ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <init_controller_params+0x118>)
 8002efe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002fe0 <init_controller_params+0x120>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002fe4 <init_controller_params+0x124>
 8002f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002f36:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002fe8 <init_controller_params+0x128>
 8002f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002f44:	4b29      	ldr	r3, [pc, #164]	; (8002fec <init_controller_params+0x12c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e036      	b.n	8002fc2 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ff0 <init_controller_params+0x130>
 8002f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f66:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ff4 <init_controller_params+0x134>
 8002f6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f6e:	ee16 0a90 	vmov	r0, s13
 8002f72:	f7fd fb11 	bl	8000598 <__aeabi_f2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	ec43 2b10 	vmov	d0, r2, r3
 8002f7e:	f00e fecf 	bl	8011d20 <exp>
 8002f82:	ec51 0b10 	vmov	r0, r1, d0
 8002f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <init_controller_params+0x138>)
 8002f8c:	f7fd fb5c 	bl	8000648 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <init_controller_params+0x13c>)
 8002f9e:	f7fd f99d 	bl	80002dc <__adddf3>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fe45 	bl	8000c38 <__aeabi_d2f>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	333c      	adds	r3, #60	; 0x3c
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc6:	ddc5      	ble.n	8002f54 <init_controller_params+0x94>
    }

    }
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	3d3851ec 	.word	0x3d3851ec
 8002fd8:	20000684 	.word	0x20000684
 8002fdc:	38d1b717 	.word	0x38d1b717
 8002fe0:	37d1b717 	.word	0x37d1b717
 8002fe4:	40c90fdb 	.word	0x40c90fdb
 8002fe8:	3dcccccd 	.word	0x3dcccccd
 8002fec:	20008f34 	.word	0x20008f34
 8002ff0:	bc000000 	.word	0xbc000000
 8002ff4:	3d03126f 	.word	0x3d03126f
 8002ff8:	3ff33333 	.word	0x3ff33333
 8002ffc:	3ff00000 	.word	0x3ff00000

08003000 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <reset_foc+0xe4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800301a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <reset_foc+0xe4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003026:	ee17 2a90 	vmov	r2, s15
 800302a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <reset_foc+0xe4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <reset_foc+0xe4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304a:	ee17 2a90 	vmov	r2, s15
 800304e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <reset_foc+0xe4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <reset_foc+0xe4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306e:	ee17 2a90 	vmov	r2, s15
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200094a8 	.word	0x200094a8

080030e8 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003102:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003106:	eddf 6a30 	vldr	s13, [pc, #192]	; 80031c8 <field_weaken+0xe0>
 800310a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800311e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80031cc <field_weaken+0xe4>
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f001 fdc4 	bl	8004cb2 <fast_fminf>
 800312a:	eeb0 7a40 	vmov.f32	s14, s0
 800312e:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <field_weaken+0xe8>)
 8003130:	edd3 7a06 	vldr	s15, [r3, #24]
 8003134:	eef1 7a67 	vneg.f32	s15, s15
 8003138:	eef0 0a67 	vmov.f32	s1, s15
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	f001 fd9b 	bl	8004c7a <fast_fmaxf>
 8003144:	eef0 7a40 	vmov.f32	s15, s0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->i_d_des = controller->fw_int;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	f00e fe47 	bl	8011e14 <sqrtf>
 8003186:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003190:	edd7 0a03 	vldr	s1, [r7, #12]
 8003194:	eeb0 0a67 	vmov.f32	s0, s15
 8003198:	f001 fd8b 	bl	8004cb2 <fast_fminf>
 800319c:	eeb0 7a40 	vmov.f32	s14, s0
 80031a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a4:	eef1 7a67 	vneg.f32	s15, s15
 80031a8:	eef0 0a67 	vmov.f32	s1, s15
 80031ac:	eeb0 0a47 	vmov.f32	s0, s14
 80031b0:	f001 fd63 	bl	8004c7a <fast_fmaxf>
 80031b4:	eef0 7a40 	vmov.f32	s15, s0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4


}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	3ba3d70a 	.word	0x3ba3d70a
 80031cc:	00000000 	.word	0x00000000
 80031d0:	20000684 	.word	0x20000684

080031d4 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity*GR;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80031f4:	4bd7      	ldr	r3, [pc, #860]	; (8003554 <commutate+0x380>)
 80031f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	edd3 6a03 	vldr	s13, [r3, #12]
 800320a:	4bd2      	ldr	r3, [pc, #840]	; (8003554 <commutate+0x380>)
 800320c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	ed93 7a05 	vldr	s14, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 6a06 	vldr	s13, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	ed93 6a07 	vldr	s12, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3340      	adds	r3, #64	; 0x40
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	eef0 1a46 	vmov.f32	s3, s12
 8003244:	eeb0 1a66 	vmov.f32	s2, s13
 8003248:	eef0 0a47 	vmov.f32	s1, s14
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f7ff fcaa 	bl	8002ba8 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800325a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003558 <commutate+0x384>
 800325e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003268:	eddf 6abc 	vldr	s13, [pc, #752]	; 800355c <commutate+0x388>
 800326c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003280:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003558 <commutate+0x384>
 8003284:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800328e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800355c <commutate+0x388>
 8003292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032a6:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003560 <commutate+0x38c>
 80032aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80032b4:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003564 <commutate+0x390>
 80032b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003568 <commutate+0x394>
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800356c <commutate+0x398>
 80032d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003570 <commutate+0x39c>
 80032e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80032ea:	4b9a      	ldr	r3, [pc, #616]	; (8003554 <commutate+0x380>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	4610      	mov	r0, r2
 800330c:	f001 fd55 	bl	8004dba <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800331c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003320:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800334a:	edd7 7a07 	vldr	s15, [r7, #28]
 800334e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800335c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003376:	eef0 0a47 	vmov.f32	s1, s14
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	f001 fc98 	bl	8004cb2 <fast_fminf>
 8003382:	eeb0 7a40 	vmov.f32	s14, s0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800338c:	eef1 7a67 	vneg.f32	s15, s15
 8003390:	eef0 0a67 	vmov.f32	s1, s15
 8003394:	eeb0 0a47 	vmov.f32	s0, s14
 8003398:	f001 fc6f 	bl	8004c7a <fast_fmaxf>
 800339c:	eef0 7a40 	vmov.f32	s15, s0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80033b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80033c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80033da:	eef0 0a47 	vmov.f32	s1, s14
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	f001 fc66 	bl	8004cb2 <fast_fminf>
 80033e6:	eeb0 7a40 	vmov.f32	s14, s0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80033f0:	eef1 7a67 	vneg.f32	s15, s15
 80033f4:	eef0 0a67 	vmov.f32	s1, s15
 80033f8:	eeb0 0a47 	vmov.f32	s0, s14
 80033fc:	f001 fc3d 	bl	8004c7a <fast_fmaxf>
 8003400:	eef0 7a40 	vmov.f32	s15, s0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342e:	eeb0 0a67 	vmov.f32	s0, s15
 8003432:	f00e fcef 	bl	8011e14 <sqrtf>
 8003436:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003440:	edd7 7a06 	vldr	s15, [r7, #24]
 8003444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800344e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003452:	edd7 7a04 	vldr	s15, [r7, #16]
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003472:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003476:	edd7 7a06 	vldr	s15, [r7, #24]
 800347a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003494:	eef0 0a47 	vmov.f32	s1, s14
 8003498:	eeb0 0a67 	vmov.f32	s0, s15
 800349c:	f001 fc09 	bl	8004cb2 <fast_fminf>
 80034a0:	eeb0 7a40 	vmov.f32	s14, s0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80034aa:	eef1 7a67 	vneg.f32	s15, s15
 80034ae:	eef0 0a67 	vmov.f32	s1, s15
 80034b2:	eeb0 0a47 	vmov.f32	s0, s14
 80034b6:	f001 fbe0 	bl	8004c7a <fast_fmaxf>
 80034ba:	eef0 7a40 	vmov.f32	s15, s0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80034d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ec:	f00e fc92 	bl	8011e14 <sqrtf>
 80034f0:	eef0 7a40 	vmov.f32	s15, s0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003500:	edd7 0a03 	vldr	s1, [r7, #12]
 8003504:	eeb0 0a67 	vmov.f32	s0, s15
 8003508:	f001 fbd3 	bl	8004cb2 <fast_fminf>
 800350c:	eeb0 7a40 	vmov.f32	s14, s0
 8003510:	edd7 7a03 	vldr	s15, [r7, #12]
 8003514:	eef1 7a67 	vneg.f32	s15, s15
 8003518:	eef0 0a67 	vmov.f32	s1, s15
 800351c:	eeb0 0a47 	vmov.f32	s0, s14
 8003520:	f001 fbab 	bl	8004c7a <fast_fmaxf>
 8003524:	eef0 7a40 	vmov.f32	s15, s0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003540:	eeb0 0a67 	vmov.f32	s0, s15
 8003544:	4610      	mov	r0, r2
 8003546:	f001 fc38 	bl	8004dba <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	e013      	b.n	800357c <commutate+0x3a8>
 8003554:	20000684 	.word	0x20000684
 8003558:	3f7d70a4 	.word	0x3f7d70a4
 800355c:	3c23d70a 	.word	0x3c23d70a
 8003560:	3f666666 	.word	0x3f666666
 8003564:	3dcccccd 	.word	0x3dcccccd
 8003568:	3f933333 	.word	0x3f933333
 800356c:	3f70a3d7 	.word	0x3f70a3d7
 8003570:	3f13cd3a 	.word	0x3f13cd3a
 8003574:	381d4951 	.word	0x381d4951
 8003578:	00000000 	.word	0x00000000
 800357c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003580:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8003574 <commutate+0x3a0>
 8003584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	336c      	adds	r3, #108	; 0x6c
 80035a8:	461a      	mov	r2, r3
 80035aa:	eeb0 1a66 	vmov.f32	s2, s13
 80035ae:	eef0 0a47 	vmov.f32	s1, s14
 80035b2:	eeb0 0a67 	vmov.f32	s0, s15
 80035b6:	f7ff fa73 	bl	8002aa0 <abc>
       //orig svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80035c6:	ed5f 6a14 	vldr	s13, [pc, #-80]	; 8003578 <commutate+0x3a4>
 80035ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80035d4:	ed1f 6a18 	vldr	s12, [pc, #-96]	; 8003578 <commutate+0x3a4>
 80035d8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80035e2:	ed5f 5a1b 	vldr	s11, [pc, #-108]	; 8003578 <commutate+0x3a4>
 80035e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3360      	adds	r3, #96	; 0x60
 80035fa:	461a      	mov	r2, r3
 80035fc:	eef0 1a67 	vmov.f32	s3, s15
 8003600:	eeb0 1a46 	vmov.f32	s2, s12
 8003604:	eef0 0a66 	vmov.f32	s1, s13
 8003608:	eeb0 0a47 	vmov.f32	s0, s14
 800360c:	f7ff fb5c 	bl	8002cc8 <svm>

       set_dtc(controller);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f90d 	bl	8002830 <set_dtc>

    }
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop

08003620 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800363a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800363e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800365e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <torque_control+0x84>)
 8003670:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <torque_control+0x84>)
 8003676:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800367a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800367e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000684 	.word	0x20000684

080036a8 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	printf("ZERO COMMANDS!!");
 80036b0:	4812      	ldr	r0, [pc, #72]	; (80036fc <zero_commands+0x54>)
 80036b2:	f00a fe2f 	bl	800e314 <iprintf>
	controller->t_ff = 0;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	080124d8 	.word	0x080124d8

08003700 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "flash_access.h"

 void run_fsm(FSMStruct * fsmstate){
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	785a      	ldrb	r2, [r3, #1]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d00d      	beq.n	8003730 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f92b 	bl	8003970 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	78db      	ldrb	r3, [r3, #3]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	785a      	ldrb	r2, [r3, #1]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8ba 	bl	80038a4 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b06      	cmp	r3, #6
 8003736:	f200 80a3 	bhi.w	8003880 <run_fsm+0x180>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <run_fsm+0x40>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	0800387f 	.word	0x0800387f
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003833 	.word	0x08003833
 800374c:	08003881 	.word	0x08003881
 8003750:	0800387f 	.word	0x0800387f
 8003754:	08003875 	.word	0x08003875
 8003758:	0800387f 	.word	0x0800387f
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <run_fsm+0x188>)
 800375e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <run_fsm+0x18c>)
 8003768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800376c:	4a46      	ldr	r2, [pc, #280]	; (8003888 <run_fsm+0x188>)
 800376e:	4947      	ldr	r1, [pc, #284]	; (800388c <run_fsm+0x18c>)
 8003770:	4847      	ldr	r0, [pc, #284]	; (8003890 <run_fsm+0x190>)
 8003772:	f7fd fe65 	bl	8001440 <order_phases>
				 save_to_flash();
				 load_from_flash();
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003776:	e083      	b.n	8003880 <run_fsm+0x180>
			 else if(!comm_encoder_cal.done_cal){
 8003778:	4b43      	ldr	r3, [pc, #268]	; (8003888 <run_fsm+0x188>)
 800377a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003782:	4b42      	ldr	r3, [pc, #264]	; (800388c <run_fsm+0x18c>)
 8003784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003788:	4a3f      	ldr	r2, [pc, #252]	; (8003888 <run_fsm+0x188>)
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <run_fsm+0x18c>)
 800378c:	4840      	ldr	r0, [pc, #256]	; (8003890 <run_fsm+0x190>)
 800378e:	f7fe f849 	bl	8001824 <calibrate_encoder>
			 break;
 8003792:	e075      	b.n	8003880 <run_fsm+0x180>
				 E_ZERO = comm_encoder_cal.ezero;
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <run_fsm+0x188>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a3e      	ldr	r2, [pc, #248]	; (8003894 <run_fsm+0x194>)
 800379a:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800379c:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <run_fsm+0x194>)
 800379e:	695c      	ldr	r4, [r3, #20]
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <run_fsm+0x190>)
 80037a2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <run_fsm+0x194>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	425b      	negs	r3, r3
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003898 <run_fsm+0x198>
 80037bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037c4:	eeb0 0a47 	vmov.f32	s0, s14
 80037c8:	f00e faf8 	bl	8011dbc <fmodf>
 80037cc:	eef0 7a40 	vmov.f32	s15, s0
 80037d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800389c <run_fsm+0x19c>
 80037d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d8:	ee17 0a90 	vmov	r0, s15
 80037dc:	f7fc fedc 	bl	8000598 <__aeabi_f2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4621      	mov	r1, r4
 80037e6:	482e      	ldr	r0, [pc, #184]	; (80038a0 <run_fsm+0x1a0>)
 80037e8:	f00a fd94 	bl	800e314 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80037ec:	4a28      	ldr	r2, [pc, #160]	; (8003890 <run_fsm+0x190>)
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <run_fsm+0x188>)
 80037f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037f4:	332c      	adds	r3, #44	; 0x2c
 80037f6:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 80037fa:	4619      	mov	r1, r3
 80037fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003800:	461a      	mov	r2, r3
 8003802:	f00a f907 	bl	800da14 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <run_fsm+0x194>)
 8003808:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <run_fsm+0x188>)
 800380a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800380e:	332c      	adds	r3, #44	; 0x2c
 8003810:	f102 0018 	add.w	r0, r2, #24
 8003814:	4619      	mov	r1, r3
 8003816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800381a:	461a      	mov	r2, r3
 800381c:	f00a f8fa 	bl	800da14 <memcpy>
				 save_to_flash();
 8003820:	f7fe ff72 	bl	8002708 <save_to_flash>
				 load_from_flash();
 8003824:	f7fe fec8 	bl	80025b8 <load_from_flash>
				 update_fsm(fsmstate, 27);
 8003828:	211b      	movs	r1, #27
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f912 	bl	8003a54 <update_fsm>
			 break;
 8003830:	e026      	b.n	8003880 <run_fsm+0x180>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003832:	4b18      	ldr	r3, [pc, #96]	; (8003894 <run_fsm+0x194>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd0a      	ble.n	8003850 <run_fsm+0x150>
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <run_fsm+0x18c>)
 800383c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <run_fsm+0x194>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	dd03      	ble.n	8003850 <run_fsm+0x150>
				 zero_commands(&controller);
 8003848:	4810      	ldr	r0, [pc, #64]	; (800388c <run_fsm+0x18c>)
 800384a:	f7ff ff2d 	bl	80036a8 <zero_commands>
 800384e:	e009      	b.n	8003864 <run_fsm+0x164>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003850:	480e      	ldr	r0, [pc, #56]	; (800388c <run_fsm+0x18c>)
 8003852:	f7ff fee5 	bl	8003620 <torque_control>
				 field_weaken(&controller);
 8003856:	480d      	ldr	r0, [pc, #52]	; (800388c <run_fsm+0x18c>)
 8003858:	f7ff fc46 	bl	80030e8 <field_weaken>
				 commutate(&controller, &comm_encoder);
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <run_fsm+0x190>)
 800385e:	480b      	ldr	r0, [pc, #44]	; (800388c <run_fsm+0x18c>)
 8003860:	f7ff fcb8 	bl	80031d4 <commutate>
			 }
			 controller.timeout ++;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <run_fsm+0x18c>)
 8003866:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800386a:	3301      	adds	r3, #1
 800386c:	4a07      	ldr	r2, [pc, #28]	; (800388c <run_fsm+0x18c>)
 800386e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8003872:	e005      	b.n	8003880 <run_fsm+0x180>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	4806      	ldr	r0, [pc, #24]	; (8003890 <run_fsm+0x190>)
 8003878:	f001 fd16 	bl	80052a8 <ps_print>
			 break;
 800387c:	e000      	b.n	8003880 <run_fsm+0x180>
			 break;
 800387e:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	20000a78 	.word	0x20000a78
 800388c:	20000784 	.word	0x20000784
 8003890:	200003e0 	.word	0x200003e0
 8003894:	20008f34 	.word	0x20008f34
 8003898:	47800000 	.word	0x47800000
 800389c:	40c90fdb 	.word	0x40c90fdb
 80038a0:	080124e8 	.word	0x080124e8

080038a4 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d84d      	bhi.n	8003950 <fsm_enter_state+0xac>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <fsm_enter_state+0x18>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	0800390b 	.word	0x0800390b
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	08003951 	.word	0x08003951
 80038cc:	080038db 	.word	0x080038db
 80038d0:	0800394f 	.word	0x0800394f
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 80038d4:	f000 f980 	bl	8003bd8 <enter_menu_state>
				break;
 80038d8:	e03a      	b.n	8003950 <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 80038da:	f000 f9a9 	bl	8003c30 <enter_setup_state>

				break;
 80038de:	e037      	b.n	8003950 <fsm_enter_state+0xac>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED1, GPIO_PIN_SET );
 80038e0:	2201      	movs	r2, #1
 80038e2:	2104      	movs	r1, #4
 80038e4:	481c      	ldr	r0, [pc, #112]	; (8003958 <fsm_enter_state+0xb4>)
 80038e6:	f005 fae9 	bl	8008ebc <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80038ea:	481c      	ldr	r0, [pc, #112]	; (800395c <fsm_enter_state+0xb8>)
 80038ec:	f7ff fb88 	bl	8003000 <reset_foc>
				drv_enable_gd(drv);
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <fsm_enter_state+0xbc>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4611      	mov	r1, r2
 80038f8:	889a      	ldrh	r2, [r3, #4]
 80038fa:	2300      	movs	r3, #0
 80038fc:	f362 030f 	bfi	r3, r2, #0, #16
 8003900:	4608      	mov	r0, r1
 8003902:	4619      	mov	r1, r3
 8003904:	f7fe fb90 	bl	8002028 <drv_enable_gd>
				break;
 8003908:	e022      	b.n	8003950 <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <fsm_enter_state+0xc0>)
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <fsm_enter_state+0xc0>)
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <fsm_enter_state+0xc0>)
 800391c:	2200      	movs	r2, #0
 800391e:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <fsm_enter_state+0xc4>)
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392c:	2100      	movs	r1, #0
 800392e:	480f      	ldr	r0, [pc, #60]	; (800396c <fsm_enter_state+0xc8>)
 8003930:	f00a f87e 	bl	800da30 <memset>
				drv_enable_gd(drv);
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <fsm_enter_state+0xbc>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2100      	movs	r1, #0
 800393a:	4611      	mov	r1, r2
 800393c:	889a      	ldrh	r2, [r3, #4]
 800393e:	2300      	movs	r3, #0
 8003940:	f362 030f 	bfi	r3, r2, #0, #16
 8003944:	4608      	mov	r0, r1
 8003946:	4619      	mov	r1, r3
 8003948:	f7fe fb6e 	bl	8002028 <drv_enable_gd>
				break;
 800394c:	e000      	b.n	8003950 <fsm_enter_state+0xac>
				break;
 800394e:	bf00      	nop

		}
 }
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	48000800 	.word	0x48000800
 800395c:	20000784 	.word	0x20000784
 8003960:	20009360 	.word	0x20009360
 8003964:	20000a78 	.word	0x20000a78
 8003968:	200003e0 	.word	0x200003e0
 800396c:	2000046c 	.word	0x2000046c

08003970 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d85e      	bhi.n	8003a3e <fsm_exit_state+0xce>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <fsm_exit_state+0x18>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039a1 	.word	0x080039a1
 800398c:	08003a1f 	.word	0x08003a1f
 8003990:	080039b9 	.word	0x080039b9
 8003994:	08003a3f 	.word	0x08003a3f
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b1 	.word	0x080039b1
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	70da      	strb	r2, [r3, #3]
				break;
 80039a6:	e04a      	b.n	8003a3e <fsm_exit_state+0xce>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	70da      	strb	r2, [r3, #3]
				break;
 80039ae:	e046      	b.n	8003a3e <fsm_exit_state+0xce>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	70da      	strb	r2, [r3, #3]
				break;
 80039b6:	e042      	b.n	8003a3e <fsm_exit_state+0xce>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <fsm_exit_state+0xd8>)
 80039ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80039be:	eef0 7ae7 	vabs.f32	s15, s15
 80039c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	d522      	bpl.n	8003a16 <fsm_exit_state+0xa6>
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <fsm_exit_state+0xd8>)
 80039d2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80039d6:	eef0 7ae7 	vabs.f32	s15, s15
 80039da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	d516      	bpl.n	8003a16 <fsm_exit_state+0xa6>
					fsmstate->ready = 1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <fsm_exit_state+0xdc>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	2100      	movs	r1, #0
 80039f4:	4611      	mov	r1, r2
 80039f6:	889a      	ldrh	r2, [r3, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f362 030f 	bfi	r3, r2, #0, #16
 80039fe:	4608      	mov	r0, r1
 8003a00:	4619      	mov	r1, r3
 8003a02:	f7fe fb2b 	bl	800205c <drv_disable_gd>
					reset_foc(&controller);
 8003a06:	4810      	ldr	r0, [pc, #64]	; (8003a48 <fsm_exit_state+0xd8>)
 8003a08:	f7ff fafa 	bl	8003000 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED1, GPIO_PIN_RESET );
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2104      	movs	r1, #4
 8003a10:	480f      	ldr	r0, [pc, #60]	; (8003a50 <fsm_exit_state+0xe0>)
 8003a12:	f005 fa53 	bl	8008ebc <HAL_GPIO_WritePin>
				}
				zero_commands(&controller);		// Set commands to zero
 8003a16:	480c      	ldr	r0, [pc, #48]	; (8003a48 <fsm_exit_state+0xd8>)
 8003a18:	f7ff fe46 	bl	80036a8 <zero_commands>
				break;
 8003a1c:	e00f      	b.n	8003a3e <fsm_exit_state+0xce>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <fsm_exit_state+0xdc>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2100      	movs	r1, #0
 8003a24:	4611      	mov	r1, r2
 8003a26:	889a      	ldrh	r2, [r3, #4]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f362 030f 	bfi	r3, r2, #0, #16
 8003a2e:	4608      	mov	r0, r1
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fe fb13 	bl	800205c <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	70da      	strb	r2, [r3, #3]
				break;
 8003a3c:	bf00      	nop
		}

 }
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000784 	.word	0x20000784
 8003a4c:	20009360 	.word	0x20009360
 8003a50:	48000800 	.word	0x48000800

08003a54 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	2b1b      	cmp	r3, #27
 8003a64:	d106      	bne.n	8003a74 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	70da      	strb	r2, [r3, #3]
		return;
 8003a72:	e0a4      	b.n	8003bbe <update_fsm+0x16a>
	}
	switch(fsmstate->state){
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	f200 80a0 	bhi.w	8003bbe <update_fsm+0x16a>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <update_fsm+0x30>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003a9d 	.word	0x08003a9d
 8003a88:	08003bbf 	.word	0x08003bbf
 8003a8c:	08003bbf 	.word	0x08003bbf
 8003a90:	08003bbf 	.word	0x08003bbf
 8003a94:	08003b83 	.word	0x08003b83
 8003a98:	08003bbf 	.word	0x08003bbf
		case MENU_MODE:
			switch (fsm_input){
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	3b63      	subs	r3, #99	; 0x63
 8003aa0:	2b17      	cmp	r3, #23
 8003aa2:	f200 808b 	bhi.w	8003bbc <update_fsm+0x168>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <update_fsm+0x58>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	08003bbd 	.word	0x08003bbd
 8003ab4:	08003b29 	.word	0x08003b29
 8003ab8:	08003bbd 	.word	0x08003bbd
 8003abc:	08003bbd 	.word	0x08003bbd
 8003ac0:	08003bbd 	.word	0x08003bbd
 8003ac4:	08003bbd 	.word	0x08003bbd
 8003ac8:	08003bbd 	.word	0x08003bbd
 8003acc:	08003bbd 	.word	0x08003bbd
 8003ad0:	08003bbd 	.word	0x08003bbd
 8003ad4:	08003b1b 	.word	0x08003b1b
 8003ad8:	08003bbd 	.word	0x08003bbd
 8003adc:	08003bbd 	.word	0x08003bbd
 8003ae0:	08003bbd 	.word	0x08003bbd
 8003ae4:	08003bbd 	.word	0x08003bbd
 8003ae8:	08003bbd 	.word	0x08003bbd
 8003aec:	08003b37 	.word	0x08003b37
 8003af0:	08003bbd 	.word	0x08003bbd
 8003af4:	08003bbd 	.word	0x08003bbd
 8003af8:	08003bbd 	.word	0x08003bbd
 8003afc:	08003bbd 	.word	0x08003bbd
 8003b00:	08003bbd 	.word	0x08003bbd
 8003b04:	08003bbd 	.word	0x08003bbd
 8003b08:	08003b45 	.word	0x08003b45
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	70da      	strb	r2, [r3, #3]
					break;
 8003b18:	e032      	b.n	8003b80 <update_fsm+0x12c>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	70da      	strb	r2, [r3, #3]
					break;
 8003b26:	e02b      	b.n	8003b80 <update_fsm+0x12c>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	70da      	strb	r2, [r3, #3]
					break;
 8003b34:	e024      	b.n	8003b80 <update_fsm+0x12c>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	70da      	strb	r2, [r3, #3]
					break;
 8003b42:	e01d      	b.n	8003b80 <update_fsm+0x12c>
				case ZERO_CMD:
					printf("Zero pos command entry\n\r");
 8003b44:	481f      	ldr	r0, [pc, #124]	; (8003bc4 <update_fsm+0x170>)
 8003b46:	f00a fbe5 	bl	800e314 <iprintf>
					comm_encoder.m_zero = 0;
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <update_fsm+0x174>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 8003b52:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003bcc <update_fsm+0x178>
 8003b56:	481c      	ldr	r0, [pc, #112]	; (8003bc8 <update_fsm+0x174>)
 8003b58:	f001 fa34 	bl	8004fc4 <ps_sample>
					HAL_Delay(20);
 8003b5c:	2014      	movs	r0, #20
 8003b5e:	f002 f9b5 	bl	8005ecc <HAL_Delay>
					M_ZERO = comm_encoder.count;
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <update_fsm+0x174>)
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <update_fsm+0x17c>)
 8003b68:	6113      	str	r3, [r2, #16]
					//if (!prefs.ready()) prefs.open();
					//    prefs.flush();                                                  // Write new prefs to flash
					//    prefs.close();
					//    prefs.load();
					//spi.SetMechOffset(M_OFFSET);
					save_to_flash();
 8003b6a:	f7fe fdcd 	bl	8002708 <save_to_flash>
					load_from_flash();
 8003b6e:	f7fe fd23 	bl	80025b8 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_ZERO);
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <update_fsm+0x17c>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	4619      	mov	r1, r3
 8003b78:	4816      	ldr	r0, [pc, #88]	; (8003bd4 <update_fsm+0x180>)
 8003b7a:	f00a fbcb 	bl	800e314 <iprintf>
					break;
 8003b7e:	bf00      	nop
				}
			break;
 8003b80:	e01c      	b.n	8003bbc <update_fsm+0x168>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	2b0d      	cmp	r3, #13
 8003b86:	d103      	bne.n	8003b90 <update_fsm+0x13c>
				process_user_input(fsmstate);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f9c5 	bl	8003f18 <process_user_input>
				break;
 8003b8e:	e016      	b.n	8003bbe <update_fsm+0x16a>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7b1b      	ldrb	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <update_fsm+0x14c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	735a      	strb	r2, [r3, #13]
 8003b9e:	e006      	b.n	8003bae <update_fsm+0x15a>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b1b      	ldrb	r3, [r3, #12]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7b1b      	ldrb	r3, [r3, #12]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003bba:	e000      	b.n	8003bbe <update_fsm+0x16a>
			break;
 8003bbc:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	080124fc 	.word	0x080124fc
 8003bc8:	200003e0 	.word	0x200003e0
 8003bcc:	37d1b717 	.word	0x37d1b717
 8003bd0:	20008f34 	.word	0x20008f34
 8003bd4:	08012518 	.word	0x08012518

08003bd8 <enter_menu_state>:


 void enter_menu_state(void){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003bdc:	480c      	ldr	r0, [pc, #48]	; (8003c10 <enter_menu_state+0x38>)
 8003bde:	f00a fb99 	bl	800e314 <iprintf>
	    printf(" Commands:\n\r");
 8003be2:	480c      	ldr	r0, [pc, #48]	; (8003c14 <enter_menu_state+0x3c>)
 8003be4:	f00a fb96 	bl	800e314 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003be8:	480b      	ldr	r0, [pc, #44]	; (8003c18 <enter_menu_state+0x40>)
 8003bea:	f00a fb93 	bl	800e314 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003bee:	480b      	ldr	r0, [pc, #44]	; (8003c1c <enter_menu_state+0x44>)
 8003bf0:	f00a fb90 	bl	800e314 <iprintf>
	    printf(" s - Setup\n\r");
 8003bf4:	480a      	ldr	r0, [pc, #40]	; (8003c20 <enter_menu_state+0x48>)
 8003bf6:	f00a fb8d 	bl	800e314 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003bfa:	480a      	ldr	r0, [pc, #40]	; (8003c24 <enter_menu_state+0x4c>)
 8003bfc:	f00a fb8a 	bl	800e314 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003c00:	4809      	ldr	r0, [pc, #36]	; (8003c28 <enter_menu_state+0x50>)
 8003c02:	f00a fb87 	bl	800e314 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003c06:	4809      	ldr	r0, [pc, #36]	; (8003c2c <enter_menu_state+0x54>)
 8003c08:	f00a fb84 	bl	800e314 <iprintf>

	    //gpio.led->write(0);
 }
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	08012540 	.word	0x08012540
 8003c14:	08012548 	.word	0x08012548
 8003c18:	08012558 	.word	0x08012558
 8003c1c:	0801256c 	.word	0x0801256c
 8003c20:	08012588 	.word	0x08012588
 8003c24:	08012598 	.word	0x08012598
 8003c28:	080125b0 	.word	0x080125b0
 8003c2c:	080125cc 	.word	0x080125cc

08003c30 <enter_setup_state>:

 void enter_setup_state(void){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003c36:	487d      	ldr	r0, [pc, #500]	; (8003e2c <enter_setup_state+0x1fc>)
 8003c38:	f00a fb6c 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003c3c:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <enter_setup_state+0x200>)
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	4b7c      	ldr	r3, [pc, #496]	; (8003e34 <enter_setup_state+0x204>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <enter_setup_state+0x208>)
 8003c46:	4a7d      	ldr	r2, [pc, #500]	; (8003e3c <enter_setup_state+0x20c>)
 8003c48:	497d      	ldr	r1, [pc, #500]	; (8003e40 <enter_setup_state+0x210>)
 8003c4a:	487e      	ldr	r0, [pc, #504]	; (8003e44 <enter_setup_state+0x214>)
 8003c4c:	f00a fb62 	bl	800e314 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003c50:	487d      	ldr	r0, [pc, #500]	; (8003e48 <enter_setup_state+0x218>)
 8003c52:	f00a fbe5 	bl	800e420 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003c56:	4b7d      	ldr	r3, [pc, #500]	; (8003e4c <enter_setup_state+0x21c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fc9c 	bl	8000598 <__aeabi_f2d>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c68:	4b79      	ldr	r3, [pc, #484]	; (8003e50 <enter_setup_state+0x220>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	4b79      	ldr	r3, [pc, #484]	; (8003e54 <enter_setup_state+0x224>)
 8003c6e:	4a7a      	ldr	r2, [pc, #488]	; (8003e58 <enter_setup_state+0x228>)
 8003c70:	497a      	ldr	r1, [pc, #488]	; (8003e5c <enter_setup_state+0x22c>)
 8003c72:	487b      	ldr	r0, [pc, #492]	; (8003e60 <enter_setup_state+0x230>)
 8003c74:	f00a fb4e 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003c78:	4b74      	ldr	r3, [pc, #464]	; (8003e4c <enter_setup_state+0x21c>)
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fc8b 	bl	8000598 <__aeabi_f2d>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c8a:	4b71      	ldr	r3, [pc, #452]	; (8003e50 <enter_setup_state+0x220>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b71      	ldr	r3, [pc, #452]	; (8003e54 <enter_setup_state+0x224>)
 8003c90:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <enter_setup_state+0x234>)
 8003c92:	4975      	ldr	r1, [pc, #468]	; (8003e68 <enter_setup_state+0x238>)
 8003c94:	4875      	ldr	r0, [pc, #468]	; (8003e6c <enter_setup_state+0x23c>)
 8003c96:	f00a fb3d 	bl	800e314 <iprintf>
	    printf("\r\n Control:\r\n");
 8003c9a:	4875      	ldr	r0, [pc, #468]	; (8003e70 <enter_setup_state+0x240>)
 8003c9c:	f00a fbc0 	bl	800e420 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <enter_setup_state+0x21c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc fc77 	bl	8000598 <__aeabi_f2d>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb2:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <enter_setup_state+0x244>)
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <enter_setup_state+0x248>)
 8003cb8:	4a70      	ldr	r2, [pc, #448]	; (8003e7c <enter_setup_state+0x24c>)
 8003cba:	4971      	ldr	r1, [pc, #452]	; (8003e80 <enter_setup_state+0x250>)
 8003cbc:	4871      	ldr	r0, [pc, #452]	; (8003e84 <enter_setup_state+0x254>)
 8003cbe:	f00a fb29 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8003cc2:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <enter_setup_state+0x21c>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc66 	bl	8000598 <__aeabi_f2d>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <enter_setup_state+0x258>)
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4b6c      	ldr	r3, [pc, #432]	; (8003e8c <enter_setup_state+0x25c>)
 8003cda:	4a6d      	ldr	r2, [pc, #436]	; (8003e90 <enter_setup_state+0x260>)
 8003cdc:	496d      	ldr	r1, [pc, #436]	; (8003e94 <enter_setup_state+0x264>)
 8003cde:	4869      	ldr	r0, [pc, #420]	; (8003e84 <enter_setup_state+0x254>)
 8003ce0:	f00a fb18 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <enter_setup_state+0x21c>)
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fc55 	bl	8000598 <__aeabi_f2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cf6:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <enter_setup_state+0x220>)
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <enter_setup_state+0x220>)
 8003cfc:	4a66      	ldr	r2, [pc, #408]	; (8003e98 <enter_setup_state+0x268>)
 8003cfe:	4967      	ldr	r1, [pc, #412]	; (8003e9c <enter_setup_state+0x26c>)
 8003d00:	4860      	ldr	r0, [pc, #384]	; (8003e84 <enter_setup_state+0x254>)
 8003d02:	f00a fb07 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003d06:	4b51      	ldr	r3, [pc, #324]	; (8003e4c <enter_setup_state+0x21c>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc44 	bl	8000598 <__aeabi_f2d>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <enter_setup_state+0x220>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <enter_setup_state+0x220>)
 8003d1e:	4a60      	ldr	r2, [pc, #384]	; (8003ea0 <enter_setup_state+0x270>)
 8003d20:	4960      	ldr	r1, [pc, #384]	; (8003ea4 <enter_setup_state+0x274>)
 8003d22:	4858      	ldr	r0, [pc, #352]	; (8003e84 <enter_setup_state+0x254>)
 8003d24:	f00a faf6 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003d28:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <enter_setup_state+0x21c>)
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fc fc33 	bl	8000598 <__aeabi_f2d>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ea8 <enter_setup_state+0x278>)
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <enter_setup_state+0x25c>)
 8003d40:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <enter_setup_state+0x27c>)
 8003d42:	495b      	ldr	r1, [pc, #364]	; (8003eb0 <enter_setup_state+0x280>)
 8003d44:	484f      	ldr	r0, [pc, #316]	; (8003e84 <enter_setup_state+0x254>)
 8003d46:	f00a fae5 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <enter_setup_state+0x21c>)
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fc22 	bl	8000598 <__aeabi_f2d>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d5c:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <enter_setup_state+0x284>)
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <enter_setup_state+0x25c>)
 8003d62:	4a55      	ldr	r2, [pc, #340]	; (8003eb8 <enter_setup_state+0x288>)
 8003d64:	4955      	ldr	r1, [pc, #340]	; (8003ebc <enter_setup_state+0x28c>)
 8003d66:	4847      	ldr	r0, [pc, #284]	; (8003e84 <enter_setup_state+0x254>)
 8003d68:	f00a fad4 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003d6c:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <enter_setup_state+0x21c>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fc11 	bl	8000598 <__aeabi_f2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d7e:	4b50      	ldr	r3, [pc, #320]	; (8003ec0 <enter_setup_state+0x290>)
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <enter_setup_state+0x25c>)
 8003d84:	4a4f      	ldr	r2, [pc, #316]	; (8003ec4 <enter_setup_state+0x294>)
 8003d86:	4950      	ldr	r1, [pc, #320]	; (8003ec8 <enter_setup_state+0x298>)
 8003d88:	483e      	ldr	r0, [pc, #248]	; (8003e84 <enter_setup_state+0x254>)
 8003d8a:	f00a fac3 	bl	800e314 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <enter_setup_state+0x21c>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fc00 	bl	8000598 <__aeabi_f2d>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003da0:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <enter_setup_state+0x258>)
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <enter_setup_state+0x25c>)
 8003da6:	4a49      	ldr	r2, [pc, #292]	; (8003ecc <enter_setup_state+0x29c>)
 8003da8:	4949      	ldr	r1, [pc, #292]	; (8003ed0 <enter_setup_state+0x2a0>)
 8003daa:	4836      	ldr	r0, [pc, #216]	; (8003e84 <enter_setup_state+0x254>)
 8003dac:	f00a fab2 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <enter_setup_state+0x21c>)
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fbef 	bl	8000598 <__aeabi_f2d>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dc2:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <enter_setup_state+0x2a4>)
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <enter_setup_state+0x25c>)
 8003dc8:	4a43      	ldr	r2, [pc, #268]	; (8003ed8 <enter_setup_state+0x2a8>)
 8003dca:	4944      	ldr	r1, [pc, #272]	; (8003edc <enter_setup_state+0x2ac>)
 8003dcc:	482d      	ldr	r0, [pc, #180]	; (8003e84 <enter_setup_state+0x254>)
 8003dce:	f00a faa1 	bl	800e314 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003dd2:	4843      	ldr	r0, [pc, #268]	; (8003ee0 <enter_setup_state+0x2b0>)
 8003dd4:	f00a fb24 	bl	800e420 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003dd8:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <enter_setup_state+0x2b4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <enter_setup_state+0x2b8>)
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <enter_setup_state+0x224>)
 8003de4:	4a41      	ldr	r2, [pc, #260]	; (8003eec <enter_setup_state+0x2bc>)
 8003de6:	4942      	ldr	r1, [pc, #264]	; (8003ef0 <enter_setup_state+0x2c0>)
 8003de8:	4842      	ldr	r0, [pc, #264]	; (8003ef4 <enter_setup_state+0x2c4>)
 8003dea:	f00a fa93 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <enter_setup_state+0x2b4>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <enter_setup_state+0x2b8>)
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <enter_setup_state+0x224>)
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <enter_setup_state+0x2c8>)
 8003dfc:	493f      	ldr	r1, [pc, #252]	; (8003efc <enter_setup_state+0x2cc>)
 8003dfe:	483d      	ldr	r0, [pc, #244]	; (8003ef4 <enter_setup_state+0x2c4>)
 8003e00:	f00a fa88 	bl	800e314 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <enter_setup_state+0x2b4>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <enter_setup_state+0x2d0>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <enter_setup_state+0x224>)
 8003e10:	4a3c      	ldr	r2, [pc, #240]	; (8003f04 <enter_setup_state+0x2d4>)
 8003e12:	493d      	ldr	r1, [pc, #244]	; (8003f08 <enter_setup_state+0x2d8>)
 8003e14:	483d      	ldr	r0, [pc, #244]	; (8003f0c <enter_setup_state+0x2dc>)
 8003e16:	f00a fa7d 	bl	800e314 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003e1a:	483d      	ldr	r0, [pc, #244]	; (8003f10 <enter_setup_state+0x2e0>)
 8003e1c:	f00a fa7a 	bl	800e314 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003e20:	483c      	ldr	r0, [pc, #240]	; (8003f14 <enter_setup_state+0x2e4>)
 8003e22:	f00a fa77 	bl	800e314 <iprintf>
 }
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	080125e4 	.word	0x080125e4
 8003e30:	08012638 	.word	0x08012638
 8003e34:	08012648 	.word	0x08012648
 8003e38:	08012600 	.word	0x08012600
 8003e3c:	08012604 	.word	0x08012604
 8003e40:	08012610 	.word	0x08012610
 8003e44:	08012618 	.word	0x08012618
 8003e48:	0801264c 	.word	0x0801264c
 8003e4c:	20000684 	.word	0x20000684
 8003e50:	0801268c 	.word	0x0801268c
 8003e54:	08012658 	.word	0x08012658
 8003e58:	0801265c 	.word	0x0801265c
 8003e5c:	08012668 	.word	0x08012668
 8003e60:	0801266c 	.word	0x0801266c
 8003e64:	08012690 	.word	0x08012690
 8003e68:	080126a8 	.word	0x080126a8
 8003e6c:	080126ac 	.word	0x080126ac
 8003e70:	080126cc 	.word	0x080126cc
 8003e74:	0801271c 	.word	0x0801271c
 8003e78:	080126dc 	.word	0x080126dc
 8003e7c:	080126e0 	.word	0x080126e0
 8003e80:	080126f8 	.word	0x080126f8
 8003e84:	080126fc 	.word	0x080126fc
 8003e88:	08012740 	.word	0x08012740
 8003e8c:	08012724 	.word	0x08012724
 8003e90:	08012728 	.word	0x08012728
 8003e94:	0801273c 	.word	0x0801273c
 8003e98:	08012748 	.word	0x08012748
 8003e9c:	08012764 	.word	0x08012764
 8003ea0:	08012768 	.word	0x08012768
 8003ea4:	08012788 	.word	0x08012788
 8003ea8:	080127ac 	.word	0x080127ac
 8003eac:	0801278c 	.word	0x0801278c
 8003eb0:	080127a8 	.word	0x080127a8
 8003eb4:	080127d8 	.word	0x080127d8
 8003eb8:	080127b4 	.word	0x080127b4
 8003ebc:	080127d4 	.word	0x080127d4
 8003ec0:	080127f8 	.word	0x080127f8
 8003ec4:	080127dc 	.word	0x080127dc
 8003ec8:	080127f4 	.word	0x080127f4
 8003ecc:	08012800 	.word	0x08012800
 8003ed0:	08012818 	.word	0x08012818
 8003ed4:	08012838 	.word	0x08012838
 8003ed8:	0801281c 	.word	0x0801281c
 8003edc:	08012834 	.word	0x08012834
 8003ee0:	08012840 	.word	0x08012840
 8003ee4:	20008f34 	.word	0x20008f34
 8003ee8:	08012878 	.word	0x08012878
 8003eec:	0801284c 	.word	0x0801284c
 8003ef0:	08012854 	.word	0x08012854
 8003ef4:	08012858 	.word	0x08012858
 8003ef8:	0801287c 	.word	0x0801287c
 8003efc:	0801288c 	.word	0x0801288c
 8003f00:	080128d0 	.word	0x080128d0
 8003f04:	08012890 	.word	0x08012890
 8003f08:	080128b0 	.word	0x080128b0
 8003f0c:	080128b4 	.word	0x080128b4
 8003f10:	080128d8 	.word	0x080128d8
 8003f14:	08012924 	.word	0x08012924

08003f18 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7b5b      	ldrb	r3, [r3, #13]
 8003f24:	3b61      	subs	r3, #97	; 0x61
 8003f26:	2b17      	cmp	r3, #23
 8003f28:	f200 8266 	bhi.w	80043f8 <process_user_input+0x4e0>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <process_user_input+0x1c>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08004193 	.word	0x08004193
 8003f38:	08003f95 	.word	0x08003f95
 8003f3c:	0800413f 	.word	0x0800413f
 8003f40:	0800430d 	.word	0x0800430d
 8003f44:	080043f9 	.word	0x080043f9
 8003f48:	08004079 	.word	0x08004079
 8003f4c:	080041e7 	.word	0x080041e7
 8003f50:	080040eb 	.word	0x080040eb
 8003f54:	08003fe9 	.word	0x08003fe9
 8003f58:	080043f9 	.word	0x080043f9
 8003f5c:	0800422b 	.word	0x0800422b
 8003f60:	08004025 	.word	0x08004025
 8003f64:	08004007 	.word	0x08004007
 8003f68:	080043f9 	.word	0x080043f9
 8003f6c:	080043f9 	.word	0x080043f9
 8003f70:	08004351 	.word	0x08004351
 8003f74:	080043f9 	.word	0x080043f9
 8003f78:	080043f9 	.word	0x080043f9
 8003f7c:	080043f9 	.word	0x080043f9
 8003f80:	080040cd 	.word	0x080040cd
 8003f84:	080043f9 	.word	0x080043f9
 8003f88:	080043a5 	.word	0x080043a5
 8003f8c:	080043f9 	.word	0x080043f9
 8003f90:	0800426f 	.word	0x0800426f
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f009 fd09 	bl	800d9b0 <atof>
 8003f9e:	ec53 2b10 	vmov	r2, r3, d0
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fc fe47 	bl	8000c38 <__aeabi_d2f>
 8003faa:	4603      	mov	r3, r0
 8003fac:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80042b4 <process_user_input+0x39c>
 8003fb0:	ee00 3a10 	vmov	s0, r3
 8003fb4:	f00d fe7b 	bl	8011cae <fminf>
 8003fb8:	eef0 7a40 	vmov.f32	s15, s0
 8003fbc:	eddf 0abe 	vldr	s1, [pc, #760]	; 80042b8 <process_user_input+0x3a0>
 8003fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc4:	f00d fe58 	bl	8011c78 <fmaxf>
 8003fc8:	eef0 7a40 	vmov.f32	s15, s0
 8003fcc:	4bbb      	ldr	r3, [pc, #748]	; (80042bc <process_user_input+0x3a4>)
 8003fce:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003fd2:	4bba      	ldr	r3, [pc, #744]	; (80042bc <process_user_input+0x3a4>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fade 	bl	8000598 <__aeabi_f2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	48b7      	ldr	r0, [pc, #732]	; (80042c0 <process_user_input+0x3a8>)
 8003fe2:	f00a f997 	bl	800e314 <iprintf>
			 break;
 8003fe6:	e20e      	b.n	8004406 <process_user_input+0x4ee>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f009 fce2 	bl	800d9b6 <atoi>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4ab3      	ldr	r2, [pc, #716]	; (80042c4 <process_user_input+0x3ac>)
 8003ff6:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003ff8:	4bb2      	ldr	r3, [pc, #712]	; (80042c4 <process_user_input+0x3ac>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	48b2      	ldr	r0, [pc, #712]	; (80042c8 <process_user_input+0x3b0>)
 8004000:	f00a f988 	bl	800e314 <iprintf>
			 break;
 8004004:	e1ff      	b.n	8004406 <process_user_input+0x4ee>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f009 fcd3 	bl	800d9b6 <atoi>
 8004010:	4603      	mov	r3, r0
 8004012:	4aac      	ldr	r2, [pc, #688]	; (80042c4 <process_user_input+0x3ac>)
 8004014:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8004016:	4bab      	ldr	r3, [pc, #684]	; (80042c4 <process_user_input+0x3ac>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4619      	mov	r1, r3
 800401c:	48ab      	ldr	r0, [pc, #684]	; (80042cc <process_user_input+0x3b4>)
 800401e:	f00a f979 	bl	800e314 <iprintf>
			 break;
 8004022:	e1f0      	b.n	8004406 <process_user_input+0x4ee>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f009 fcc1 	bl	800d9b0 <atof>
 800402e:	ec53 2b10 	vmov	r2, r3, d0
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	f7fc fdff 	bl	8000c38 <__aeabi_d2f>
 800403a:	4603      	mov	r3, r0
 800403c:	eddf 0aa4 	vldr	s1, [pc, #656]	; 80042d0 <process_user_input+0x3b8>
 8004040:	ee00 3a10 	vmov	s0, r3
 8004044:	f00d fe33 	bl	8011cae <fminf>
 8004048:	eef0 7a40 	vmov.f32	s15, s0
 800404c:	eddf 0aae 	vldr	s1, [pc, #696]	; 8004308 <process_user_input+0x3f0>
 8004050:	eeb0 0a67 	vmov.f32	s0, s15
 8004054:	f00d fe10 	bl	8011c78 <fmaxf>
 8004058:	eef0 7a40 	vmov.f32	s15, s0
 800405c:	4b97      	ldr	r3, [pc, #604]	; (80042bc <process_user_input+0x3a4>)
 800405e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8004062:	4b96      	ldr	r3, [pc, #600]	; (80042bc <process_user_input+0x3a4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fa96 	bl	8000598 <__aeabi_f2d>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4898      	ldr	r0, [pc, #608]	; (80042d4 <process_user_input+0x3bc>)
 8004072:	f00a f94f 	bl	800e314 <iprintf>
			 break;
 8004076:	e1c6      	b.n	8004406 <process_user_input+0x4ee>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f009 fc97 	bl	800d9b0 <atof>
 8004082:	ec53 2b10 	vmov	r2, r3, d0
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fdd5 	bl	8000c38 <__aeabi_d2f>
 800408e:	4603      	mov	r3, r0
 8004090:	eddf 0a91 	vldr	s1, [pc, #580]	; 80042d8 <process_user_input+0x3c0>
 8004094:	ee00 3a10 	vmov	s0, r3
 8004098:	f00d fe09 	bl	8011cae <fminf>
 800409c:	eef0 7a40 	vmov.f32	s15, s0
 80040a0:	eddf 0a99 	vldr	s1, [pc, #612]	; 8004308 <process_user_input+0x3f0>
 80040a4:	eeb0 0a67 	vmov.f32	s0, s15
 80040a8:	f00d fde6 	bl	8011c78 <fmaxf>
 80040ac:	eef0 7a40 	vmov.f32	s15, s0
 80040b0:	4b82      	ldr	r3, [pc, #520]	; (80042bc <process_user_input+0x3a4>)
 80040b2:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 80040b6:	4b81      	ldr	r3, [pc, #516]	; (80042bc <process_user_input+0x3a4>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4885      	ldr	r0, [pc, #532]	; (80042dc <process_user_input+0x3c4>)
 80040c6:	f00a f925 	bl	800e314 <iprintf>
			 break;
 80040ca:	e19c      	b.n	8004406 <process_user_input+0x4ee>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f009 fc70 	bl	800d9b6 <atoi>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a7a      	ldr	r2, [pc, #488]	; (80042c4 <process_user_input+0x3ac>)
 80040da:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80040dc:	4b79      	ldr	r3, [pc, #484]	; (80042c4 <process_user_input+0x3ac>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4619      	mov	r1, r3
 80040e2:	487f      	ldr	r0, [pc, #508]	; (80042e0 <process_user_input+0x3c8>)
 80040e4:	f00a f916 	bl	800e314 <iprintf>
			 break;
 80040e8:	e18d      	b.n	8004406 <process_user_input+0x4ee>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f009 fc5e 	bl	800d9b0 <atof>
 80040f4:	ec53 2b10 	vmov	r2, r3, d0
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	f7fc fd9c 	bl	8000c38 <__aeabi_d2f>
 8004100:	4603      	mov	r3, r0
 8004102:	eddf 0a78 	vldr	s1, [pc, #480]	; 80042e4 <process_user_input+0x3cc>
 8004106:	ee00 3a10 	vmov	s0, r3
 800410a:	f00d fdd0 	bl	8011cae <fminf>
 800410e:	eef0 7a40 	vmov.f32	s15, s0
 8004112:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8004308 <process_user_input+0x3f0>
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	f00d fdad 	bl	8011c78 <fmaxf>
 800411e:	eef0 7a40 	vmov.f32	s15, s0
 8004122:	4b66      	ldr	r3, [pc, #408]	; (80042bc <process_user_input+0x3a4>)
 8004124:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004128:	4b64      	ldr	r3, [pc, #400]	; (80042bc <process_user_input+0x3a4>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fa33 	bl	8000598 <__aeabi_f2d>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	486c      	ldr	r0, [pc, #432]	; (80042e8 <process_user_input+0x3d0>)
 8004138:	f00a f8ec 	bl	800e314 <iprintf>
			 break;
 800413c:	e163      	b.n	8004406 <process_user_input+0x4ee>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f009 fc34 	bl	800d9b0 <atof>
 8004148:	ec53 2b10 	vmov	r2, r3, d0
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f7fc fd72 	bl	8000c38 <__aeabi_d2f>
 8004154:	4603      	mov	r3, r0
 8004156:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80042d0 <process_user_input+0x3b8>
 800415a:	ee00 3a10 	vmov	s0, r3
 800415e:	f00d fda6 	bl	8011cae <fminf>
 8004162:	eef0 7a40 	vmov.f32	s15, s0
 8004166:	eddf 0a68 	vldr	s1, [pc, #416]	; 8004308 <process_user_input+0x3f0>
 800416a:	eeb0 0a67 	vmov.f32	s0, s15
 800416e:	f00d fd83 	bl	8011c78 <fmaxf>
 8004172:	eef0 7a40 	vmov.f32	s15, s0
 8004176:	4b51      	ldr	r3, [pc, #324]	; (80042bc <process_user_input+0x3a4>)
 8004178:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <process_user_input+0x3a4>)
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc fa09 	bl	8000598 <__aeabi_f2d>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4858      	ldr	r0, [pc, #352]	; (80042ec <process_user_input+0x3d4>)
 800418c:	f00a f8c2 	bl	800e314 <iprintf>
			 break;
 8004190:	e139      	b.n	8004406 <process_user_input+0x4ee>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f009 fc0a 	bl	800d9b0 <atof>
 800419c:	ec53 2b10 	vmov	r2, r3, d0
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7fc fd48 	bl	8000c38 <__aeabi_d2f>
 80041a8:	4603      	mov	r3, r0
 80041aa:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80041ae:	ee00 3a10 	vmov	s0, r3
 80041b2:	f00d fd7c 	bl	8011cae <fminf>
 80041b6:	eef0 7a40 	vmov.f32	s15, s0
 80041ba:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004308 <process_user_input+0x3f0>
 80041be:	eeb0 0a67 	vmov.f32	s0, s15
 80041c2:	f00d fd59 	bl	8011c78 <fmaxf>
 80041c6:	eef0 7a40 	vmov.f32	s15, s0
 80041ca:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <process_user_input+0x3a4>)
 80041cc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 80041d0:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <process_user_input+0x3a4>)
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f9df 	bl	8000598 <__aeabi_f2d>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4844      	ldr	r0, [pc, #272]	; (80042f0 <process_user_input+0x3d8>)
 80041e0:	f00a f898 	bl	800e314 <iprintf>
			 break;
 80041e4:	e10f      	b.n	8004406 <process_user_input+0x4ee>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f009 fbe0 	bl	800d9b0 <atof>
 80041f0:	ec53 2b10 	vmov	r2, r3, d0
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7fc fd1e 	bl	8000c38 <__aeabi_d2f>
 80041fc:	4603      	mov	r3, r0
 80041fe:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80042f4 <process_user_input+0x3dc>
 8004202:	ee00 3a10 	vmov	s0, r3
 8004206:	f00d fd37 	bl	8011c78 <fmaxf>
 800420a:	eef0 7a40 	vmov.f32	s15, s0
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <process_user_input+0x3a4>)
 8004210:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <process_user_input+0x3a4>)
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f9bd 	bl	8000598 <__aeabi_f2d>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4835      	ldr	r0, [pc, #212]	; (80042f8 <process_user_input+0x3e0>)
 8004224:	f00a f876 	bl	800e314 <iprintf>
			 break;
 8004228:	e0ed      	b.n	8004406 <process_user_input+0x4ee>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f009 fbbe 	bl	800d9b0 <atof>
 8004234:	ec53 2b10 	vmov	r2, r3, d0
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fcfc 	bl	8000c38 <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80042fc <process_user_input+0x3e4>
 8004246:	ee00 3a10 	vmov	s0, r3
 800424a:	f00d fd15 	bl	8011c78 <fmaxf>
 800424e:	eef0 7a40 	vmov.f32	s15, s0
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <process_user_input+0x3a4>)
 8004254:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <process_user_input+0x3a4>)
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f99b 	bl	8000598 <__aeabi_f2d>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4826      	ldr	r0, [pc, #152]	; (8004300 <process_user_input+0x3e8>)
 8004268:	f00a f854 	bl	800e314 <iprintf>
			 break;
 800426c:	e0cb      	b.n	8004406 <process_user_input+0x4ee>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4618      	mov	r0, r3
 8004274:	f009 fb9c 	bl	800d9b0 <atof>
 8004278:	ec53 2b10 	vmov	r2, r3, d0
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	f7fc fcda 	bl	8000c38 <__aeabi_d2f>
 8004284:	4603      	mov	r3, r0
 8004286:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004308 <process_user_input+0x3f0>
 800428a:	ee00 3a10 	vmov	s0, r3
 800428e:	f00d fcf3 	bl	8011c78 <fmaxf>
 8004292:	eef0 7a40 	vmov.f32	s15, s0
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <process_user_input+0x3a4>)
 8004298:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <process_user_input+0x3a4>)
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f979 	bl	8000598 <__aeabi_f2d>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4816      	ldr	r0, [pc, #88]	; (8004304 <process_user_input+0x3ec>)
 80042ac:	f00a f832 	bl	800e314 <iprintf>
			 break;
 80042b0:	e0a9      	b.n	8004406 <process_user_input+0x4ee>
 80042b2:	bf00      	nop
 80042b4:	44fa0000 	.word	0x44fa0000
 80042b8:	42c80000 	.word	0x42c80000
 80042bc:	20000684 	.word	0x20000684
 80042c0:	08012950 	.word	0x08012950
 80042c4:	20008f34 	.word	0x20008f34
 80042c8:	08012964 	.word	0x08012964
 80042cc:	08012978 	.word	0x08012978
 80042d0:	42200000 	.word	0x42200000
 80042d4:	08012990 	.word	0x08012990
 80042d8:	42040000 	.word	0x42040000
 80042dc:	080129a4 	.word	0x080129a4
 80042e0:	080129bc 	.word	0x080129bc
 80042e4:	43160000 	.word	0x43160000
 80042e8:	080129d4 	.word	0x080129d4
 80042ec:	080129ec 	.word	0x080129ec
 80042f0:	08012a04 	.word	0x08012a04
 80042f4:	3a83126f 	.word	0x3a83126f
 80042f8:	08012a18 	.word	0x08012a18
 80042fc:	38d1b717 	.word	0x38d1b717
 8004300:	08012a28 	.word	0x08012a28
 8004304:	08012a38 	.word	0x08012a38
 8004308:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f009 fb4d 	bl	800d9b0 <atof>
 8004316:	ec53 2b10 	vmov	r2, r3, d0
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f7fc fc8b 	bl	8000c38 <__aeabi_d2f>
 8004322:	4603      	mov	r3, r0
 8004324:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004308 <process_user_input+0x3f0>
 8004328:	ee00 3a10 	vmov	s0, r3
 800432c:	f00d fca4 	bl	8011c78 <fmaxf>
 8004330:	eef0 7a40 	vmov.f32	s15, s0
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <process_user_input+0x51c>)
 8004336:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <process_user_input+0x51c>)
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc f92a 	bl	8000598 <__aeabi_f2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	483b      	ldr	r0, [pc, #236]	; (8004438 <process_user_input+0x520>)
 800434a:	f009 ffe3 	bl	800e314 <iprintf>
			 break;
 800434e:	e05a      	b.n	8004406 <process_user_input+0x4ee>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f009 fb2b 	bl	800d9b0 <atof>
 800435a:	ec53 2b10 	vmov	r2, r3, d0
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fc69 	bl	8000c38 <__aeabi_d2f>
 8004366:	4603      	mov	r3, r0
 8004368:	eddf 0a34 	vldr	s1, [pc, #208]	; 800443c <process_user_input+0x524>
 800436c:	ee00 3a10 	vmov	s0, r3
 8004370:	f00d fc82 	bl	8011c78 <fmaxf>
 8004374:	eef0 7a40 	vmov.f32	s15, s0
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <process_user_input+0x51c>)
 800437a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 800437e:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <process_user_input+0x51c>)
 8004380:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004384:	eef1 7a67 	vneg.f32	s15, s15
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <process_user_input+0x51c>)
 800438a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <process_user_input+0x51c>)
 8004390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f900 	bl	8000598 <__aeabi_f2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4828      	ldr	r0, [pc, #160]	; (8004440 <process_user_input+0x528>)
 800439e:	f009 ffb9 	bl	800e314 <iprintf>
			 break;
 80043a2:	e030      	b.n	8004406 <process_user_input+0x4ee>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f009 fb01 	bl	800d9b0 <atof>
 80043ae:	ec53 2b10 	vmov	r2, r3, d0
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	f7fc fc3f 	bl	8000c38 <__aeabi_d2f>
 80043ba:	4603      	mov	r3, r0
 80043bc:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800443c <process_user_input+0x524>
 80043c0:	ee00 3a10 	vmov	s0, r3
 80043c4:	f00d fc58 	bl	8011c78 <fmaxf>
 80043c8:	eef0 7a40 	vmov.f32	s15, s0
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <process_user_input+0x51c>)
 80043ce:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <process_user_input+0x51c>)
 80043d4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043d8:	eef1 7a67 	vneg.f32	s15, s15
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <process_user_input+0x51c>)
 80043de:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <process_user_input+0x51c>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc f8d6 	bl	8000598 <__aeabi_f2d>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4814      	ldr	r0, [pc, #80]	; (8004444 <process_user_input+0x52c>)
 80043f2:	f009 ff8f 	bl	800e314 <iprintf>
			 break;
 80043f6:	e006      	b.n	8004406 <process_user_input+0x4ee>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4812      	ldr	r0, [pc, #72]	; (8004448 <process_user_input+0x530>)
 8004400:	f009 ff88 	bl	800e314 <iprintf>
			 break;
 8004404:	bf00      	nop
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8004406:	f7fe f97f 	bl	8002708 <save_to_flash>
	 load_from_flash();
 800440a:	f7fe f8d5 	bl	80025b8 <load_from_flash>
	 enter_setup_state();
 800440e:	f7ff fc0f 	bl	8003c30 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3304      	adds	r3, #4
 8004422:	2208      	movs	r2, #8
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f009 fb02 	bl	800da30 <memset>
 }
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000684 	.word	0x20000684
 8004438:	08012a4c 	.word	0x08012a4c
 800443c:	00000000 	.word	0x00000000
 8004440:	08012a60 	.word	0x08012a60
 8004444:	08012a74 	.word	0x08012a74
 8004448:	08012a88 	.word	0x08012a88

0800444c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004452:	f107 0314 	add.w	r3, r7, #20
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004462:	4b39      	ldr	r3, [pc, #228]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	4a38      	ldr	r2, [pc, #224]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004468:	f043 0320 	orr.w	r3, r3, #32
 800446c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <MX_GPIO_Init+0xfc>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	4a32      	ldr	r2, [pc, #200]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <MX_GPIO_Init+0xfc>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800449e:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <MX_GPIO_Init+0xfc>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <MX_GPIO_Init+0xfc>)
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <MX_GPIO_Init+0xfc>)
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <MX_GPIO_Init+0xfc>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80044c2:	2200      	movs	r2, #0
 80044c4:	210c      	movs	r1, #12
 80044c6:	4821      	ldr	r0, [pc, #132]	; (800454c <MX_GPIO_Init+0x100>)
 80044c8:	f004 fcf8 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80044cc:	2200      	movs	r2, #0
 80044ce:	f648 0110 	movw	r1, #34832	; 0x8810
 80044d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044d6:	f004 fcf1 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80044da:	2200      	movs	r2, #0
 80044dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044e0:	481b      	ldr	r0, [pc, #108]	; (8004550 <MX_GPIO_Init+0x104>)
 80044e2:	f004 fceb 	bl	8008ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044e6:	230c      	movs	r3, #12
 80044e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4619      	mov	r1, r3
 80044fc:	4813      	ldr	r0, [pc, #76]	; (800454c <MX_GPIO_Init+0x100>)
 80044fe:	f004 fb5b 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8004502:	f648 0310 	movw	r3, #34832	; 0x8810
 8004506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004508:	2301      	movs	r3, #1
 800450a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004510:	2300      	movs	r3, #0
 8004512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4619      	mov	r1, r3
 800451a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800451e:	f004 fb4b 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004528:	2301      	movs	r3, #1
 800452a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004534:	f107 0314 	add.w	r3, r7, #20
 8004538:	4619      	mov	r1, r3
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <MX_GPIO_Init+0x104>)
 800453c:	f004 fb3c 	bl	8008bb8 <HAL_GPIO_Init>

}
 8004540:	bf00      	nop
 8004542:	3728      	adds	r7, #40	; 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	48000800 	.word	0x48000800
 8004550:	48000400 	.word	0x48000400

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	; (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045ae:	f001 fc1c 	bl	8005dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045b2:	f000 fae7 	bl	8004b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045b6:	f7ff ff49 	bl	800444c <MX_GPIO_Init>
  MX_ADC1_Init();
 80045ba:	f7fc fd3f 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 80045be:	f7fd fe5b 	bl	8002278 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80045c2:	f000 feb7 	bl	8005334 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80045c6:	f001 fb2d 	bl	8005c24 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80045ca:	f000 fef1 	bl	80053b0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80045ce:	f001 fa03 	bl	80059d8 <MX_TIM1_Init>
  MX_ADC2_Init();
 80045d2:	f7fc fdab 	bl	800112c <MX_ADC2_Init>
  MX_ADC3_Init();
 80045d6:	f7fc fe0f 	bl	80011f8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */


  /* Load settings from flash */
    load_from_flash();
 80045da:	f7fd ffed 	bl	80025b8 <load_from_flash>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80045de:	4bba      	ldr	r3, [pc, #744]	; (80048c8 <main+0x320>)
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d102      	bne.n	80045ee <main+0x46>
 80045e8:	4bb7      	ldr	r3, [pc, #732]	; (80048c8 <main+0x320>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80045ee:	4bb6      	ldr	r3, [pc, #728]	; (80048c8 <main+0x320>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d102      	bne.n	80045fe <main+0x56>
 80045f8:	4bb3      	ldr	r3, [pc, #716]	; (80048c8 <main+0x320>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80045fe:	4bb3      	ldr	r3, [pc, #716]	; (80048cc <main+0x324>)
 8004600:	edd3 7a02 	vldr	s15, [r3, #8]
 8004604:	eef4 7a67 	vcmp.f32	s15, s15
 8004608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460c:	d609      	bvs.n	8004622 <main+0x7a>
 800460e:	4baf      	ldr	r3, [pc, #700]	; (80048cc <main+0x324>)
 8004610:	edd3 7a02 	vldr	s15, [r3, #8]
 8004614:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004618:	eef4 7a47 	vcmp.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d102      	bne.n	8004628 <main+0x80>
 8004622:	4baa      	ldr	r3, [pc, #680]	; (80048cc <main+0x324>)
 8004624:	4aaa      	ldr	r2, [pc, #680]	; (80048d0 <main+0x328>)
 8004626:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004628:	4ba8      	ldr	r3, [pc, #672]	; (80048cc <main+0x324>)
 800462a:	edd3 7a03 	vldr	s15, [r3, #12]
 800462e:	eef4 7a67 	vcmp.f32	s15, s15
 8004632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004636:	d609      	bvs.n	800464c <main+0xa4>
 8004638:	4ba4      	ldr	r3, [pc, #656]	; (80048cc <main+0x324>)
 800463a:	edd3 7a03 	vldr	s15, [r3, #12]
 800463e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004642:	eef4 7a47 	vcmp.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d102      	bne.n	8004652 <main+0xaa>
 800464c:	4b9f      	ldr	r3, [pc, #636]	; (80048cc <main+0x324>)
 800464e:	4aa1      	ldr	r2, [pc, #644]	; (80048d4 <main+0x32c>)
 8004650:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004652:	4b9e      	ldr	r3, [pc, #632]	; (80048cc <main+0x324>)
 8004654:	edd3 7a06 	vldr	s15, [r3, #24]
 8004658:	eef4 7a67 	vcmp.f32	s15, s15
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d609      	bvs.n	8004676 <main+0xce>
 8004662:	4b9a      	ldr	r3, [pc, #616]	; (80048cc <main+0x324>)
 8004664:	edd3 7a06 	vldr	s15, [r3, #24]
 8004668:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800466c:	eef4 7a47 	vcmp.f32	s15, s14
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	d103      	bne.n	800467e <main+0xd6>
 8004676:	4b95      	ldr	r3, [pc, #596]	; (80048cc <main+0x324>)
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 800467e:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <main+0x320>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d102      	bne.n	800468e <main+0xe6>
 8004688:	4b8f      	ldr	r3, [pc, #572]	; (80048c8 <main+0x320>)
 800468a:	2201      	movs	r2, #1
 800468c:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 800468e:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <main+0x320>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <main+0xf6>
 8004698:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <main+0x320>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 800469e:	4b8a      	ldr	r3, [pc, #552]	; (80048c8 <main+0x320>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d103      	bne.n	80046b0 <main+0x108>
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <main+0x320>)
 80046aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ae:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80046b0:	4b86      	ldr	r3, [pc, #536]	; (80048cc <main+0x324>)
 80046b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80046b6:	eef4 7a67 	vcmp.f32	s15, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d609      	bvs.n	80046d4 <main+0x12c>
 80046c0:	4b82      	ldr	r3, [pc, #520]	; (80048cc <main+0x324>)
 80046c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80046c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046ca:	eef4 7a47 	vcmp.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	d103      	bne.n	80046dc <main+0x134>
 80046d4:	4b7d      	ldr	r3, [pc, #500]	; (80048cc <main+0x324>)
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80046dc:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <main+0x324>)
 80046de:	edd3 7a08 	vldr	s15, [r3, #32]
 80046e2:	eef4 7a67 	vcmp.f32	s15, s15
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	d609      	bvs.n	8004700 <main+0x158>
 80046ec:	4b77      	ldr	r3, [pc, #476]	; (80048cc <main+0x324>)
 80046ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80046f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046f6:	eef4 7a47 	vcmp.f32	s15, s14
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	d102      	bne.n	8004706 <main+0x15e>
 8004700:	4b72      	ldr	r3, [pc, #456]	; (80048cc <main+0x324>)
 8004702:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <main+0x330>)
 8004704:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004706:	4b71      	ldr	r3, [pc, #452]	; (80048cc <main+0x324>)
 8004708:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800470c:	eef4 7a67 	vcmp.f32	s15, s15
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d609      	bvs.n	800472a <main+0x182>
 8004716:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <main+0x324>)
 8004718:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800471c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004720:	eef4 7a47 	vcmp.f32	s15, s14
 8004724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004728:	d102      	bne.n	8004730 <main+0x188>
 800472a:	4b68      	ldr	r3, [pc, #416]	; (80048cc <main+0x324>)
 800472c:	4a6b      	ldr	r2, [pc, #428]	; (80048dc <main+0x334>)
 800472e:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <main+0x324>)
 8004732:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004736:	eef4 7a67 	vcmp.f32	s15, s15
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	d609      	bvs.n	8004754 <main+0x1ac>
 8004740:	4b62      	ldr	r3, [pc, #392]	; (80048cc <main+0x324>)
 8004742:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004746:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800474a:	eef4 7a47 	vcmp.f32	s15, s14
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d102      	bne.n	800475a <main+0x1b2>
 8004754:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <main+0x324>)
 8004756:	4a62      	ldr	r2, [pc, #392]	; (80048e0 <main+0x338>)
 8004758:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800475a:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <main+0x324>)
 800475c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004760:	eef4 7a67 	vcmp.f32	s15, s15
 8004764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004768:	d609      	bvs.n	800477e <main+0x1d6>
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <main+0x324>)
 800476c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004770:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004774:	eef4 7a47 	vcmp.f32	s15, s14
 8004778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477c:	d102      	bne.n	8004784 <main+0x1dc>
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <main+0x324>)
 8004780:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <main+0x33c>)
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004784:	4b51      	ldr	r3, [pc, #324]	; (80048cc <main+0x324>)
 8004786:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800478a:	eef4 7a67 	vcmp.f32	s15, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d609      	bvs.n	80047a8 <main+0x200>
 8004794:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <main+0x324>)
 8004796:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800479a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800479e:	eef4 7a47 	vcmp.f32	s15, s14
 80047a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a6:	d103      	bne.n	80047b0 <main+0x208>
 80047a8:	4b48      	ldr	r3, [pc, #288]	; (80048cc <main+0x324>)
 80047aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80047b0:	4b46      	ldr	r3, [pc, #280]	; (80048cc <main+0x324>)
 80047b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047b6:	eef4 7a67 	vcmp.f32	s15, s15
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	d609      	bvs.n	80047d4 <main+0x22c>
 80047c0:	4b42      	ldr	r3, [pc, #264]	; (80048cc <main+0x324>)
 80047c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047ca:	eef4 7a47 	vcmp.f32	s15, s14
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d103      	bne.n	80047dc <main+0x234>
 80047d4:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <main+0x324>)
 80047d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <main+0x324>)
 80047de:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80047e2:	eef4 7a67 	vcmp.f32	s15, s15
 80047e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ea:	d609      	bvs.n	8004800 <main+0x258>
 80047ec:	4b37      	ldr	r3, [pc, #220]	; (80048cc <main+0x324>)
 80047ee:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80047f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047f6:	eef4 7a47 	vcmp.f32	s15, s14
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d102      	bne.n	8004806 <main+0x25e>
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <main+0x324>)
 8004802:	4a39      	ldr	r2, [pc, #228]	; (80048e8 <main+0x340>)
 8004804:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004806:	4b31      	ldr	r3, [pc, #196]	; (80048cc <main+0x324>)
 8004808:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800480c:	eef4 7a67 	vcmp.f32	s15, s15
 8004810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004814:	d609      	bvs.n	800482a <main+0x282>
 8004816:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <main+0x324>)
 8004818:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800481c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004820:	eef4 7a47 	vcmp.f32	s15, s14
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	d102      	bne.n	8004830 <main+0x288>
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <main+0x324>)
 800482c:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <main+0x338>)
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <main+0x324>)
 8004832:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004836:	eef4 7a67 	vcmp.f32	s15, s15
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	d702      	bvc.n	8004846 <main+0x29e>
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <main+0x324>)
 8004842:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <main+0x344>)
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004846:	4b21      	ldr	r3, [pc, #132]	; (80048cc <main+0x324>)
 8004848:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800484c:	eef4 7a67 	vcmp.f32	s15, s15
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d702      	bvc.n	800485c <main+0x2b4>
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <main+0x324>)
 8004858:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <main+0x348>)
 800485a:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <main+0x324>)
 800485e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004862:	eef4 7a67 	vcmp.f32	s15, s15
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	d702      	bvc.n	8004872 <main+0x2ca>
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <main+0x324>)
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <main+0x34c>)
 8004870:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <main+0x324>)
 8004874:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004878:	eef4 7a67 	vcmp.f32	s15, s15
 800487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004880:	d702      	bvc.n	8004888 <main+0x2e0>
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <main+0x324>)
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <main+0x350>)
 8004886:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004888:	a30d      	add	r3, pc, #52	; (adr r3, 80048c0 <main+0x318>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	481b      	ldr	r0, [pc, #108]	; (80048fc <main+0x354>)
 8004890:	f009 fd40 	bl	800e314 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004894:	481a      	ldr	r0, [pc, #104]	; (8004900 <main+0x358>)
 8004896:	f7fe fb13 	bl	8002ec0 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800489a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800489e:	2100      	movs	r1, #0
 80048a0:	4818      	ldr	r0, [pc, #96]	; (8004904 <main+0x35c>)
 80048a2:	f009 f8c5 	bl	800da30 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <main+0x320>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	4a17      	ldr	r2, [pc, #92]	; (8004908 <main+0x360>)
 80048ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <main+0x320>)
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <main+0x360>)
 80048b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80048ba:	e027      	b.n	800490c <main+0x364>
 80048bc:	f3af 8000 	nop.w
 80048c0:	c0000000 	.word	0xc0000000
 80048c4:	4000cccc 	.word	0x4000cccc
 80048c8:	20008f34 	.word	0x20008f34
 80048cc:	20000684 	.word	0x20000684
 80048d0:	447a0000 	.word	0x447a0000
 80048d4:	42200000 	.word	0x42200000
 80048d8:	42fa0000 	.word	0x42fa0000
 80048dc:	41600000 	.word	0x41600000
 80048e0:	40a00000 	.word	0x40a00000
 80048e4:	41a80000 	.word	0x41a80000
 80048e8:	43fa0000 	.word	0x43fa0000
 80048ec:	41480000 	.word	0x41480000
 80048f0:	c1480000 	.word	0xc1480000
 80048f4:	42820000 	.word	0x42820000
 80048f8:	c2820000 	.word	0xc2820000
 80048fc:	08012ab0 	.word	0x08012ab0
 8004900:	20000784 	.word	0x20000784
 8004904:	20008ca4 	.word	0x20008ca4
 8004908:	200003e0 	.word	0x200003e0
  comm_encoder.ppairs = PPAIRS;
 800490c:	4b8b      	ldr	r3, [pc, #556]	; (8004b3c <main+0x594>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	4a8b      	ldr	r2, [pc, #556]	; (8004b40 <main+0x598>)
 8004912:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004914:	2164      	movs	r1, #100	; 0x64
 8004916:	488a      	ldr	r0, [pc, #552]	; (8004b40 <main+0x598>)
 8004918:	f000 fb1c 	bl	8004f54 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800491c:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <main+0x598>)
 800491e:	4a89      	ldr	r2, [pc, #548]	; (8004b44 <main+0x59c>)
 8004920:	338c      	adds	r3, #140	; 0x8c
 8004922:	f102 0118 	add.w	r1, r2, #24
 8004926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492a:	4618      	mov	r0, r3
 800492c:	f009 f872 	bl	800da14 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004930:	4885      	ldr	r0, [pc, #532]	; (8004b48 <main+0x5a0>)
 8004932:	f001 fedb 	bl	80066ec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004936:	4885      	ldr	r0, [pc, #532]	; (8004b4c <main+0x5a4>)
 8004938:	f001 fed8 	bl	80066ec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800493c:	4884      	ldr	r0, [pc, #528]	; (8004b50 <main+0x5a8>)
 800493e:	f001 fed5 	bl	80066ec <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004942:	2201      	movs	r2, #1
 8004944:	2110      	movs	r1, #16
 8004946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800494a:	f004 fab7 	bl	8008ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800494e:	2201      	movs	r2, #1
 8004950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004958:	f004 fab0 	bl	8008ebc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800495c:	2001      	movs	r0, #1
 800495e:	f001 fab5 	bl	8005ecc <HAL_Delay>
  //drv_calibrate(drv);



  HAL_Delay(1);
 8004962:	2001      	movs	r0, #1
 8004964:	f001 fab2 	bl	8005ecc <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004968:	4b7a      	ldr	r3, [pc, #488]	; (8004b54 <main+0x5ac>)
 800496a:	2201      	movs	r2, #1
 800496c:	9206      	str	r2, [sp, #24]
 800496e:	2200      	movs	r2, #0
 8004970:	9205      	str	r2, [sp, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	9204      	str	r2, [sp, #16]
 8004976:	2200      	movs	r2, #0
 8004978:	9203      	str	r2, [sp, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	9202      	str	r2, [sp, #8]
 800497e:	2201      	movs	r2, #1
 8004980:	9201      	str	r2, [sp, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	9200      	str	r2, [sp, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2000      	movs	r0, #0
 800498a:	4610      	mov	r0, r2
 800498c:	889b      	ldrh	r3, [r3, #4]
 800498e:	2100      	movs	r1, #0
 8004990:	f363 010f 	bfi	r1, r3, #0, #16
 8004994:	2300      	movs	r3, #0
 8004996:	2200      	movs	r2, #0
 8004998:	f7fd fa8f 	bl	8001eba <drv_write_DCR>
	  HAL_Delay(1);
	  //val++;s
  }
  */

  HAL_Delay(1);
 800499c:	2001      	movs	r0, #1
 800499e:	f001 fa95 	bl	8005ecc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 80049a2:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <main+0x5ac>)
 80049a4:	2203      	movs	r2, #3
 80049a6:	9206      	str	r2, [sp, #24]
 80049a8:	2201      	movs	r2, #1
 80049aa:	9205      	str	r2, [sp, #20]
 80049ac:	2201      	movs	r2, #1
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	2201      	movs	r2, #1
 80049b2:	9203      	str	r2, [sp, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	9202      	str	r2, [sp, #8]
 80049b8:	2203      	movs	r2, #3
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	9200      	str	r2, [sp, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	4610      	mov	r0, r2
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	2100      	movs	r1, #0
 80049ca:	f363 010f 	bfi	r1, r3, #0, #16
 80049ce:	2301      	movs	r3, #1
 80049d0:	2200      	movs	r2, #0
 80049d2:	f7fd fae7 	bl	8001fa4 <drv_write_CSACR>
  HAL_Delay(1);
 80049d6:	2001      	movs	r0, #1
 80049d8:	f001 fa78 	bl	8005ecc <HAL_Delay>
  zero_current(&controller);
 80049dc:	485e      	ldr	r0, [pc, #376]	; (8004b58 <main+0x5b0>)
 80049de:	f7fe fa2b 	bl	8002e38 <zero_current>
  HAL_Delay(1);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f001 fa72 	bl	8005ecc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <main+0x5ac>)
 80049ea:	2203      	movs	r2, #3
 80049ec:	9206      	str	r2, [sp, #24]
 80049ee:	2200      	movs	r2, #0
 80049f0:	9205      	str	r2, [sp, #20]
 80049f2:	2200      	movs	r2, #0
 80049f4:	9204      	str	r2, [sp, #16]
 80049f6:	2200      	movs	r2, #0
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	2203      	movs	r2, #3
 8004a00:	9201      	str	r2, [sp, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	9200      	str	r2, [sp, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2000      	movs	r0, #0
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	889b      	ldrh	r3, [r3, #4]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	f363 010f 	bfi	r1, r3, #0, #16
 8004a14:	2301      	movs	r3, #1
 8004a16:	2200      	movs	r2, #0
 8004a18:	f7fd fac4 	bl	8001fa4 <drv_write_CSACR>
  HAL_Delay(1);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f001 fa55 	bl	8005ecc <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <main+0x5ac>)
 8004a24:	220e      	movs	r2, #14
 8004a26:	9202      	str	r2, [sp, #8]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	9201      	str	r2, [sp, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	9200      	str	r2, [sp, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2000      	movs	r0, #0
 8004a34:	4610      	mov	r0, r2
 8004a36:	889b      	ldrh	r3, [r3, #4]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f363 010f 	bfi	r1, r3, #0, #16
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2201      	movs	r2, #1
 8004a42:	f7fd fa81 	bl	8001f48 <drv_write_OCPCR>
  HAL_Delay(1);
 8004a46:	2001      	movs	r0, #1
 8004a48:	f001 fa40 	bl	8005ecc <HAL_Delay>
  drv_disable_gd(drv);
 8004a4c:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <main+0x5ac>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2100      	movs	r1, #0
 8004a52:	4611      	mov	r1, r2
 8004a54:	889a      	ldrh	r2, [r3, #4]
 8004a56:	2300      	movs	r3, #0
 8004a58:	f362 030f 	bfi	r3, r2, #0, #16
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f7fd fafc 	bl	800205c <drv_disable_gd>
  HAL_Delay(1);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f001 fa31 	bl	8005ecc <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <main+0x5b0>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <main+0x5b0>)
 8004a72:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8004a76:	4619      	mov	r1, r3
 8004a78:	4838      	ldr	r0, [pc, #224]	; (8004b5c <main+0x5b4>)
 8004a7a:	f009 fc4b 	bl	800e314 <iprintf>


  HAL_GPIO_WritePin(LED1, 1 );
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2104      	movs	r1, #4
 8004a82:	4837      	ldr	r0, [pc, #220]	; (8004b60 <main+0x5b8>)
 8004a84:	f004 fa1a 	bl	8008ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2108      	movs	r1, #8
 8004a8c:	4834      	ldr	r0, [pc, #208]	; (8004b60 <main+0x5b8>)
 8004a8e:	f004 fa15 	bl	8008ebc <HAL_GPIO_WritePin>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004a92:	2100      	movs	r1, #0
 8004a94:	4833      	ldr	r0, [pc, #204]	; (8004b64 <main+0x5bc>)
 8004a96:	f005 ffad 	bl	800a9f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004a9a:	2104      	movs	r1, #4
 8004a9c:	4831      	ldr	r0, [pc, #196]	; (8004b64 <main+0x5bc>)
 8004a9e:	f005 ffa9 	bl	800a9f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004aa2:	2108      	movs	r1, #8
 8004aa4:	482f      	ldr	r0, [pc, #188]	; (8004b64 <main+0x5bc>)
 8004aa6:	f005 ffa5 	bl	800a9f4 <HAL_TIM_PWM_Start>
  can_tx_init(&can_tx);
  HAL_CAN_Start(&CAN_H); start CAN
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING);  Start can interrupt
	*/

  can_rx_init(&can_rx);
 8004aaa:	482f      	ldr	r0, [pc, #188]	; (8004b68 <main+0x5c0>)
 8004aac:	f7fd fc74 	bl	8002398 <can_rx_init>
  can_tx_init(&can_tx);
 8004ab0:	482e      	ldr	r0, [pc, #184]	; (8004b6c <main+0x5c4>)
 8004ab2:	f7fd fca1 	bl	80023f8 <can_tx_init>


  HAL_FDCAN_Start(&CAN_H);
 8004ab6:	482e      	ldr	r0, [pc, #184]	; (8004b70 <main+0x5c8>)
 8004ab8:	f003 f995 	bl	8007de6 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8004abc:	2200      	movs	r2, #0
 8004abe:	2101      	movs	r1, #1
 8004ac0:	482b      	ldr	r0, [pc, #172]	; (8004b70 <main+0x5c8>)
 8004ac2:	f003 fa93 	bl	8007fec <HAL_FDCAN_ActivateNotification>
  //__HAL_FDCAN_ENABLE_IT(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE); DOES NOT WORK!



  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	2019      	movs	r0, #25
 8004aca:	f7ff fd43 	bl	8004554 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8004ace:	2103      	movs	r1, #3
 8004ad0:	2056      	movs	r0, #86	; 0x56
 8004ad2:	f7ff fd3f 	bl	8004554 <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <main+0x5cc>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <main+0x5cc>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <main+0x5cc>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4923      	ldr	r1, [pc, #140]	; (8004b78 <main+0x5d0>)
 8004aec:	4823      	ldr	r0, [pc, #140]	; (8004b7c <main+0x5d4>)
 8004aee:	f007 fb6f 	bl	800c1d0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004af2:	481c      	ldr	r0, [pc, #112]	; (8004b64 <main+0x5bc>)
 8004af4:	f005 fea4 	bl	800a840 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_WritePin(LED1, 0 );
 8004af8:	2200      	movs	r2, #0
 8004afa:	2104      	movs	r1, #4
 8004afc:	4818      	ldr	r0, [pc, #96]	; (8004b60 <main+0x5b8>)
 8004afe:	f004 f9dd 	bl	8008ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 0 );
 8004b02:	2200      	movs	r2, #0
 8004b04:	2108      	movs	r1, #8
 8004b06:	4816      	ldr	r0, [pc, #88]	; (8004b60 <main+0x5b8>)
 8004b08:	f004 f9d8 	bl	8008ebc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(150);
 8004b0c:	2096      	movs	r0, #150	; 0x96
 8004b0e:	f001 f9dd 	bl	8005ecc <HAL_Delay>
	  drv_print_faults(drv);
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <main+0x5ac>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4611      	mov	r1, r2
 8004b1a:	889a      	ldrh	r2, [r3, #4]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f362 030f 	bfi	r3, r2, #0, #16
 8004b22:	4608      	mov	r0, r1
 8004b24:	4619      	mov	r1, r3
 8004b26:	f7fd fab3 	bl	8002090 <drv_print_faults>
	  printf("Ria,b %d %d \n\r", controller.adc_a_raw, controller.adc_b_raw);
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <main+0x5b0>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <main+0x5b0>)
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4812      	ldr	r0, [pc, #72]	; (8004b80 <main+0x5d8>)
 8004b36:	f009 fbed 	bl	800e314 <iprintf>
	  HAL_Delay(150);
 8004b3a:	e7e7      	b.n	8004b0c <main+0x564>
 8004b3c:	20000684 	.word	0x20000684
 8004b40:	200003e0 	.word	0x200003e0
 8004b44:	20008f34 	.word	0x20008f34
 8004b48:	200002a4 	.word	0x200002a4
 8004b4c:	20000238 	.word	0x20000238
 8004b50:	20000310 	.word	0x20000310
 8004b54:	20009360 	.word	0x20009360
 8004b58:	20000784 	.word	0x20000784
 8004b5c:	08012ad4 	.word	0x08012ad4
 8004b60:	48000800 	.word	0x48000800
 8004b64:	200094a8 	.word	0x200094a8
 8004b68:	20009368 	.word	0x20009368
 8004b6c:	20009334 	.word	0x20009334
 8004b70:	2000037c 	.word	0x2000037c
 8004b74:	20000674 	.word	0x20000674
 8004b78:	20000670 	.word	0x20000670
 8004b7c:	200094f4 	.word	0x200094f4
 8004b80:	08012afc 	.word	0x08012afc

08004b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b0a8      	sub	sp, #160	; 0xa0
 8004b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b8e:	2238      	movs	r2, #56	; 0x38
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f008 ff4c 	bl	800da30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ba8:	463b      	mov	r3, r7
 8004baa:	2254      	movs	r2, #84	; 0x54
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f008 ff3e 	bl	800da30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bb8:	f004 f998 	bl	8008eec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8004bd8:	231e      	movs	r3, #30
 8004bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bde:	2302      	movs	r3, #2
 8004be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004be4:	2302      	movs	r3, #2
 8004be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bea:	2302      	movs	r3, #2
 8004bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f004 fa2d 	bl	8009054 <HAL_RCC_OscConfig>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004c00:	f000 f834 	bl	8004c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c04:	230f      	movs	r3, #15
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c10:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004c14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004c1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c20:	2103      	movs	r1, #3
 8004c22:	4618      	mov	r0, r3
 8004c24:	f004 fd2e 	bl	8009684 <HAL_RCC_ClockConfig>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004c2e:	f000 f81d 	bl	8004c6c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <SystemClock_Config+0xe4>)
 8004c34:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c44:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004c46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 ff34 	bl	8009abc <HAL_RCCEx_PeriphCLKConfig>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004c5a:	f000 f807 	bl	8004c6c <Error_Handler>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	37a0      	adds	r7, #160	; 0xa0
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	00019002 	.word	0x00019002

08004c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c84:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004c88:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c8c:	edd7 7a00 	vldr	s15, [r7]
 8004c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c98:	dd01      	ble.n	8004c9e <fast_fmaxf+0x24>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	e000      	b.n	8004ca0 <fast_fmaxf+0x26>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	ee07 3a90 	vmov	s15, r3
    }
 8004ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <fast_fminf>:

float fast_fminf(float x, float y){
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	ed87 0a01 	vstr	s0, [r7, #4]
 8004cbc:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004cc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cc4:	edd7 7a00 	vldr	s15, [r7]
 8004cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	d501      	bpl.n	8004cd6 <fast_fminf+0x24>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	e000      	b.n	8004cd8 <fast_fminf+0x26>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	ee07 3a90 	vmov	s15, r3
    }
 8004cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cf4:	edc7 0a02 	vstr	s1, [r7, #8]
 8004cf8:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d00:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	dd0c      	ble.n	8004d28 <fmaxf3+0x3e>
 8004d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	dd01      	ble.n	8004d24 <fmaxf3+0x3a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	e00d      	b.n	8004d40 <fmaxf3+0x56>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	e00b      	b.n	8004d40 <fmaxf3+0x56>
 8004d28:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	dd01      	ble.n	8004d3e <fmaxf3+0x54>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	e000      	b.n	8004d40 <fmaxf3+0x56>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	ee07 3a90 	vmov	s15, r3
    }
 8004d44:	eeb0 0a67 	vmov.f32	s0, s15
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <fminf3>:

float fminf3(float x, float y, float z){
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d5c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d60:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004d64:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	d50c      	bpl.n	8004d90 <fminf3+0x3e>
 8004d76:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d501      	bpl.n	8004d8c <fminf3+0x3a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	e00d      	b.n	8004da8 <fminf3+0x56>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	e00b      	b.n	8004da8 <fminf3+0x56>
 8004d90:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	d501      	bpl.n	8004da6 <fminf3+0x54>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	e000      	b.n	8004da8 <fminf3+0x56>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	ee07 3a90 	vmov	s15, r3
    }
 8004dac:	eeb0 0a67 	vmov.f32	s0, s15
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	ed93 7a00 	vldr	s14, [r3]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	edd3 7a00 	vldr	s15, [r3]
 8004dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	edd3 6a00 	vldr	s13, [r3]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dec:	eeb0 0a67 	vmov.f32	s0, s15
 8004df0:	f00d f810 	bl	8011e14 <sqrtf>
 8004df4:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004df8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	dc00      	bgt.n	8004e0c <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004e0a:	e01b      	b.n	8004e44 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	ed93 7a00 	vldr	s14, [r3]
 8004e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	ed93 7a00 	vldr	s14, [r3]
 8004e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e36:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	edc3 7a00 	vstr	s15, [r3]
    }
 8004e44:	bf00      	nop
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <uint_to_float>:
    float offset = x_min;
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
    }
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e58:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004e5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e6a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e84:	2201      	movs	r2, #1
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <sin_lut>:

float sin_lut(float theta){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004eba:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004f18 <sin_lut+0x68>
 8004ebe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ec2:	f00c ff7b 	bl	8011dbc <fmodf>
 8004ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	d506      	bpl.n	8004ee6 <sin_lut+0x36>
 8004ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004edc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004f18 <sin_lut+0x68>
 8004ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ee4:	e001      	b.n	8004eea <sin_lut+0x3a>
 8004ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eea:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004f1c <sin_lut+0x6c>
 8004ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004efe:	ee17 3a90 	vmov	r3, s15
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <sin_lut+0x70>)
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	ee07 3a90 	vmov	s15, r3
}
 8004f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40c90fdb 	.word	0x40c90fdb
 8004f1c:	42a2f983 	.word	0x42a2f983
 8004f20:	08012b78 	.word	0x08012b78

08004f24 <cos_lut>:

float cos_lut(float theta){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004f2e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004f50 <cos_lut+0x2c>
 8004f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	f7ff ffb7 	bl	8004eb0 <sin_lut>
 8004f42:	eef0 7a40 	vmov.f32	s15, s0
}
 8004f46:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	3fc90fdb 	.word	0x3fc90fdb

08004f54 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e023      	b.n	8004fac <ps_warmup+0x58>
		encoder->spi_tx_word = 0x0000;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f74:	f003 ffa2 	bl	8008ebc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	2364      	movs	r3, #100	; 0x64
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2301      	movs	r3, #1
 8004f84:	480e      	ldr	r0, [pc, #56]	; (8004fc0 <ps_warmup+0x6c>)
 8004f86:	f005 f890 	bl	800a0aa <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004f8a:	bf00      	nop
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <ps_warmup+0x6c>)
 8004f8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d0f9      	beq.n	8004f8c <ps_warmup+0x38>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa2:	f003 ff8b 	bl	8008ebc <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dbd7      	blt.n	8004f64 <ps_warmup+0x10>
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200093e0 	.word	0x200093e0

08004fc4 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004fd8:	2313      	movs	r3, #19
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e011      	b.n	8005002 <ps_sample+0x3e>
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dcea      	bgt.n	8004fde <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800500e:	2200      	movs	r2, #0
 8005010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005018:	f003 ff50 	bl	8008ebc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	2364      	movs	r3, #100	; 0x64
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2302      	movs	r3, #2
 8005028:	4899      	ldr	r0, [pc, #612]	; (8005290 <ps_sample+0x2cc>)
 800502a:	f005 f83e 	bl	800a0aa <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800502e:	bf00      	nop
 8005030:	4b97      	ldr	r3, [pc, #604]	; (8005290 <ps_sample+0x2cc>)
 8005032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d0f9      	beq.n	8005030 <ps_sample+0x6c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800503c:	2201      	movs	r2, #1
 800503e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005046:	f003 ff39 	bl	8008ebc <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	885b      	ldrh	r3, [r3, #2]
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	675a      	str	r2, [r3, #116]	; 0x74


	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005058:	125b      	asrs	r3, r3, #9
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	3322      	adds	r3, #34	; 0x22
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506a:	125b      	asrs	r3, r3, #9
 800506c:	3301      	adds	r3, #1
 800506e:	425a      	negs	r2, r3
 8005070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005078:	bf58      	it	pl
 800507a:	4253      	negpl	r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	3322      	adds	r3, #34	; 0x22
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	125b      	asrs	r3, r3, #9
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw + off_interp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80050b2:	4b78      	ldr	r3, [pc, #480]	; (8005294 <ps_sample+0x2d0>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c0:	eddf 6a75 	vldr	s13, [pc, #468]	; 8005298 <ps_sample+0x2d4>
 80050c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d8:	ee17 3a90 	vmov	r3, s15
 80050dc:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800529c <ps_sample+0x2d8>
 80050f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	edd3 7a01 	vldr	s15, [r3, #4]
 8005106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510e:	d507      	bpl.n	8005120 <ps_sample+0x15c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	edd3 7a01 	vldr	s15, [r3, #4]
 8005116:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800529c <ps_sample+0x2d8>
 800511a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800511e:	e002      	b.n	8005126 <ps_sample+0x162>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	edd3 7a01 	vldr	s15, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005136:	4b57      	ldr	r3, [pc, #348]	; (8005294 <ps_sample+0x2d0>)
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005148:	eddf 6a53 	vldr	s13, [pc, #332]	; 8005298 <ps_sample+0x2d4>
 800514c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800515c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005160:	ee17 3a90 	vmov	r3, s15
 8005164:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800529c <ps_sample+0x2d8>
 800517e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800518e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	d507      	bpl.n	80051a8 <ps_sample+0x1e4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800519e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800529c <ps_sample+0x2d8>
 80051a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051a6:	e002      	b.n	80051ae <ps_sample+0x1ea>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80051c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051c4:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){encoder->turns--;}
 80051c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80051cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80052a0 <ps_sample+0x2dc>
 80051d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	dd07      	ble.n	80051ea <ps_sample+0x226>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80051e8:	e00f      	b.n	800520a <ps_sample+0x246>
	else if(angle_diff < -PI_F){encoder->turns++;}
 80051ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80051ee:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80052a4 <ps_sample+0x2e0>
 80051f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	d506      	bpl.n	800520a <ps_sample+0x246>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d107      	bne.n	8005224 <ps_sample+0x260>
		encoder->turns = 0;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	ed93 7a01 	vldr	s14, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005238:	eddf 6a18 	vldr	s13, [pc, #96]	; 800529c <ps_sample+0x2d8>
 800523c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800525a:	edd7 7a00 	vldr	s15, [r7]
 800525e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800527c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005286:	bf00      	nop
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200093e0 	.word	0x200093e0
 8005294:	20008f34 	.word	0x20008f34
 8005298:	47800000 	.word	0x47800000
 800529c:	40c90fdb 	.word	0x40c90fdb
 80052a0:	40490fdb 	.word	0x40490fdb
 80052a4:	c0490fdb 	.word	0xc0490fdb

080052a8 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	4619      	mov	r1, r3
 80052b8:	4818      	ldr	r0, [pc, #96]	; (800531c <ps_print+0x74>)
 80052ba:	f009 f82b 	bl	800e314 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c2:	4619      	mov	r1, r3
 80052c4:	4816      	ldr	r0, [pc, #88]	; (8005320 <ps_print+0x78>)
 80052c6:	f009 f825 	bl	800e314 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb f962 	bl	8000598 <__aeabi_f2d>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4812      	ldr	r0, [pc, #72]	; (8005324 <ps_print+0x7c>)
 80052da:	f009 f81b 	bl	800e314 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb f958 	bl	8000598 <__aeabi_f2d>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	480e      	ldr	r0, [pc, #56]	; (8005328 <ps_print+0x80>)
 80052ee:	f009 f811 	bl	800e314 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fb f94e 	bl	8000598 <__aeabi_f2d>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	480a      	ldr	r0, [pc, #40]	; (800532c <ps_print+0x84>)
 8005302:	f009 f807 	bl	800e314 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530c:	4619      	mov	r1, r3
 800530e:	4808      	ldr	r0, [pc, #32]	; (8005330 <ps_print+0x88>)
 8005310:	f009 f800 	bl	800e314 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	08012b0c 	.word	0x08012b0c
 8005320:	08012b14 	.word	0x08012b14
 8005324:	08012b2c 	.word	0x08012b2c
 8005328:	08012b40 	.word	0x08012b40
 800532c:	08012b54 	.word	0x08012b54
 8005330:	08012b68 	.word	0x08012b68

08005334 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005338:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <MX_SPI1_Init+0x74>)
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <MX_SPI1_Init+0x78>)
 800533c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005348:	2200      	movs	r2, #0
 800534a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <MX_SPI1_Init+0x74>)
 800534e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <MX_SPI1_Init+0x74>)
 800535c:	2201      	movs	r2, #1
 800535e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005368:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <MX_SPI1_Init+0x74>)
 800536a:	2230      	movs	r2, #48	; 0x30
 800536c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005370:	2200      	movs	r2, #0
 8005372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005376:	2200      	movs	r2, #0
 8005378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <MX_SPI1_Init+0x74>)
 800537c:	2200      	movs	r2, #0
 800537e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005382:	2207      	movs	r2, #7
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <MX_SPI1_Init+0x74>)
 800538e:	2200      	movs	r2, #0
 8005390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <MX_SPI1_Init+0x74>)
 8005394:	f004 fdde 	bl	8009f54 <HAL_SPI_Init>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800539e:	f7ff fc65 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20009444 	.word	0x20009444
 80053ac:	40013000 	.word	0x40013000

080053b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <MX_SPI3_Init+0x74>)
 80053b6:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <MX_SPI3_Init+0x78>)
 80053b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80053ba:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <MX_SPI3_Init+0x74>)
 80053bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <MX_SPI3_Init+0x74>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <MX_SPI3_Init+0x74>)
 80053ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80053ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <MX_SPI3_Init+0x74>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <MX_SPI3_Init+0x74>)
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <MX_SPI3_Init+0x74>)
 80053de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <MX_SPI3_Init+0x74>)
 80053e6:	2208      	movs	r2, #8
 80053e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <MX_SPI3_Init+0x74>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <MX_SPI3_Init+0x74>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <MX_SPI3_Init+0x74>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <MX_SPI3_Init+0x74>)
 80053fe:	2207      	movs	r2, #7
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <MX_SPI3_Init+0x74>)
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <MX_SPI3_Init+0x74>)
 800540a:	2208      	movs	r2, #8
 800540c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800540e:	4805      	ldr	r0, [pc, #20]	; (8005424 <MX_SPI3_Init+0x74>)
 8005410:	f004 fda0 	bl	8009f54 <HAL_SPI_Init>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800541a:	f7ff fc27 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200093e0 	.word	0x200093e0
 8005428:	40003c00 	.word	0x40003c00

0800542c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <HAL_SPI_MspInit+0xdc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d129      	bne.n	80054a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800544e:	4b2f      	ldr	r3, [pc, #188]	; (800550c <HAL_SPI_MspInit+0xe0>)
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	4a2e      	ldr	r2, [pc, #184]	; (800550c <HAL_SPI_MspInit+0xe0>)
 8005454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005458:	6613      	str	r3, [r2, #96]	; 0x60
 800545a:	4b2c      	ldr	r3, [pc, #176]	; (800550c <HAL_SPI_MspInit+0xe0>)
 800545c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005466:	4b29      	ldr	r3, [pc, #164]	; (800550c <HAL_SPI_MspInit+0xe0>)
 8005468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <HAL_SPI_MspInit+0xe0>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_SPI_MspInit+0xe0>)
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800547e:	23e0      	movs	r3, #224	; 0xe0
 8005480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	2302      	movs	r3, #2
 8005484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548a:	2300      	movs	r3, #0
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800548e:	2305      	movs	r3, #5
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005492:	f107 031c 	add.w	r3, r7, #28
 8005496:	4619      	mov	r1, r3
 8005498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800549c:	f003 fb8c 	bl	8008bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80054a0:	e02d      	b.n	80054fe <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <HAL_SPI_MspInit+0xe4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d128      	bne.n	80054fe <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b6:	6593      	str	r3, [r2, #88]	; 0x58
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c8:	4a10      	ldr	r2, [pc, #64]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <HAL_SPI_MspInit+0xe0>)
 80054d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e2:	2302      	movs	r3, #2
 80054e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ea:	2300      	movs	r3, #0
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054ee:	2306      	movs	r3, #6
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054f2:	f107 031c 	add.w	r3, r7, #28
 80054f6:	4619      	mov	r1, r3
 80054f8:	4806      	ldr	r0, [pc, #24]	; (8005514 <HAL_SPI_MspInit+0xe8>)
 80054fa:	f003 fb5d 	bl	8008bb8 <HAL_GPIO_Init>
}
 80054fe:	bf00      	nop
 8005500:	3730      	adds	r7, #48	; 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40013000 	.word	0x40013000
 800550c:	40021000 	.word	0x40021000
 8005510:	40003c00 	.word	0x40003c00
 8005514:	48000800 	.word	0x48000800

08005518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800551e:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_MspInit+0x44>)
 8005520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005522:	4a0e      	ldr	r2, [pc, #56]	; (800555c <HAL_MspInit+0x44>)
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	6613      	str	r3, [r2, #96]	; 0x60
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_MspInit+0x44>)
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_MspInit+0x44>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <HAL_MspInit+0x44>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	6593      	str	r3, [r2, #88]	; 0x58
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_MspInit+0x44>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800554e:	f003 fd71 	bl	8009034 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000

08005560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005564:	e7fe      	b.n	8005564 <NMI_Handler+0x4>

08005566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800556a:	e7fe      	b.n	800556a <HardFault_Handler+0x4>

0800556c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005570:	e7fe      	b.n	8005570 <MemManage_Handler+0x4>

08005572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005576:	e7fe      	b.n	8005576 <BusFault_Handler+0x4>

08005578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800557c:	e7fe      	b.n	800557c <UsageFault_Handler+0x4>

0800557e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800559a:	b480      	push	{r7}
 800559c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055ac:	f000 fc70 	bl	8005e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  analog_sample(&controller);
 80055b8:	4814      	ldr	r0, [pc, #80]	; (800560c <TIM1_UP_TIM16_IRQHandler+0x58>)
 80055ba:	f7fd f9dd 	bl	8002978 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 80055be:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005610 <TIM1_UP_TIM16_IRQHandler+0x5c>
 80055c2:	4814      	ldr	r0, [pc, #80]	; (8005614 <TIM1_UP_TIM16_IRQHandler+0x60>)
 80055c4:	f7ff fcfe 	bl	8004fc4 <ps_sample>

  static int ledVal = 1;
  ledVal = !ledVal;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055da:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LED1, ledVal );
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	2104      	movs	r1, #4
 80055e6:	480d      	ldr	r0, [pc, #52]	; (800561c <TIM1_UP_TIM16_IRQHandler+0x68>)
 80055e8:	f003 fc68 	bl	8008ebc <HAL_GPIO_WritePin>

  /* Run Finite State Machine */
  run_fsm(&state);
 80055ec:	480c      	ldr	r0, [pc, #48]	; (8005620 <TIM1_UP_TIM16_IRQHandler+0x6c>)
 80055ee:	f7fe f887 	bl	8003700 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <TIM1_UP_TIM16_IRQHandler+0x58>)
 80055f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <TIM1_UP_TIM16_IRQHandler+0x58>)
 80055fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  //HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005600:	4808      	ldr	r0, [pc, #32]	; (8005624 <TIM1_UP_TIM16_IRQHandler+0x70>)
 8005602:	f005 fb09 	bl	800ac18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000784 	.word	0x20000784
 8005610:	37d1b717 	.word	0x37d1b717
 8005614:	200003e0 	.word	0x200003e0
 8005618:	20000000 	.word	0x20000000
 800561c:	48000800 	.word	0x48000800
 8005620:	20000674 	.word	0x20000674
 8005624:	200094a8 	.word	0x200094a8

08005628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800562e:	4807      	ldr	r0, [pc, #28]	; (800564c <USART2_IRQHandler+0x24>)
 8005630:	f006 fe14 	bl	800c25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <USART2_IRQHandler+0x28>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4619      	mov	r1, r3
 800563e:	4805      	ldr	r0, [pc, #20]	; (8005654 <USART2_IRQHandler+0x2c>)
 8005640:	f7fe fa08 	bl	8003a54 <update_fsm>
  /* USER CODE END USART2_IRQn 1 */
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200094f4 	.word	0x200094f4
 8005650:	20000670 	.word	0x20000670
 8005654:	20000674 	.word	0x20000674

08005658 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	b091      	sub	sp, #68	; 0x44
 800565c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800565e:	486b      	ldr	r0, [pc, #428]	; (800580c <FDCAN2_IT0_IRQHandler+0x1b4>)
 8005660:	f002 fdaa 	bl	80081b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005664:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <FDCAN2_IT0_IRQHandler+0x1b8>)
 8005666:	4a6b      	ldr	r2, [pc, #428]	; (8005814 <FDCAN2_IT0_IRQHandler+0x1bc>)
 8005668:	2140      	movs	r1, #64	; 0x40
 800566a:	4868      	ldr	r0, [pc, #416]	; (800580c <FDCAN2_IT0_IRQHandler+0x1b4>)
 800566c:	f002 fbe4 	bl	8007e38 <HAL_FDCAN_GetRxMessage>
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005670:	4b69      	ldr	r3, [pc, #420]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005672:	785a      	ldrb	r2, [r3, #1]
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005676:	789b      	ldrb	r3, [r3, #2]
 8005678:	4013      	ands	r3, r2
 800567a:	b2da      	uxtb	r2, r3
 800567c:	4b66      	ldr	r3, [pc, #408]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	4013      	ands	r3, r2
 8005682:	b2da      	uxtb	r2, r3
 8005684:	4b64      	ldr	r3, [pc, #400]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	4013      	ands	r3, r2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800568e:	795b      	ldrb	r3, [r3, #5]
 8005690:	4013      	ands	r3, r2
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b60      	ldr	r3, [pc, #384]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005696:	799b      	ldrb	r3, [r3, #6]
 8005698:	4013      	ands	r3, r2
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800569e:	79db      	ldrb	r3, [r3, #7]
 80056a0:	4013      	ands	r3, r2
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2bff      	cmp	r3, #255	; 0xff
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	4b5a      	ldr	r3, [pc, #360]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056b0:	7a1b      	ldrb	r3, [r3, #8]
 80056b2:	2bfc      	cmp	r3, #252	; 0xfc
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	4013      	ands	r3, r2
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <FDCAN2_IT0_IRQHandler+0x76>
	  update_fsm(&state, MOTOR_CMD);
 80056c4:	216d      	movs	r1, #109	; 0x6d
 80056c6:	4855      	ldr	r0, [pc, #340]	; (800581c <FDCAN2_IT0_IRQHandler+0x1c4>)
 80056c8:	f7fe f9c4 	bl	8003a54 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80056cc:	e099      	b.n	8005802 <FDCAN2_IT0_IRQHandler+0x1aa>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80056ce:	4b52      	ldr	r3, [pc, #328]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056d0:	785a      	ldrb	r2, [r3, #1]
 80056d2:	4b51      	ldr	r3, [pc, #324]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	4013      	ands	r3, r2
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056dc:	78db      	ldrb	r3, [r3, #3]
 80056de:	4013      	ands	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2bff      	cmp	r3, #255	; 0xff
 80056e4:	bf0c      	ite	eq
 80056e6:	2301      	moveq	r3, #1
 80056e8:	2300      	movne	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056f0:	791b      	ldrb	r3, [r3, #4]
 80056f2:	2bff      	cmp	r3, #255	; 0xff
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4619      	mov	r1, r3
 80056fe:	4b46      	ldr	r3, [pc, #280]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005700:	795b      	ldrb	r3, [r3, #5]
 8005702:	2bff      	cmp	r3, #255	; 0xff
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	fb03 f301 	mul.w	r3, r3, r1
 8005710:	4013      	ands	r3, r2
 8005712:	4a41      	ldr	r2, [pc, #260]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005714:	7992      	ldrb	r2, [r2, #6]
 8005716:	2aff      	cmp	r2, #255	; 0xff
 8005718:	bf0c      	ite	eq
 800571a:	2201      	moveq	r2, #1
 800571c:	2200      	movne	r2, #0
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	4013      	ands	r3, r2
 8005722:	4a3d      	ldr	r2, [pc, #244]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005724:	79d2      	ldrb	r2, [r2, #7]
 8005726:	2aff      	cmp	r2, #255	; 0xff
 8005728:	bf0c      	ite	eq
 800572a:	2201      	moveq	r2, #1
 800572c:	2200      	movne	r2, #0
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	4013      	ands	r3, r2
 8005732:	4a39      	ldr	r2, [pc, #228]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005734:	7a12      	ldrb	r2, [r2, #8]
 8005736:	2afd      	cmp	r2, #253	; 0xfd
 8005738:	bf0c      	ite	eq
 800573a:	2201      	moveq	r2, #1
 800573c:	2200      	movne	r2, #0
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <FDCAN2_IT0_IRQHandler+0xf8>
	  update_fsm(&state, MENU_CMD);
 8005746:	211b      	movs	r1, #27
 8005748:	4834      	ldr	r0, [pc, #208]	; (800581c <FDCAN2_IT0_IRQHandler+0x1c4>)
 800574a:	f7fe f983 	bl	8003a54 <update_fsm>
}
 800574e:	e058      	b.n	8005802 <FDCAN2_IT0_IRQHandler+0x1aa>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005752:	785a      	ldrb	r2, [r3, #1]
 8005754:	4b30      	ldr	r3, [pc, #192]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	4013      	ands	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800575e:	78db      	ldrb	r3, [r3, #3]
 8005760:	4013      	ands	r3, r2
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2bff      	cmp	r3, #255	; 0xff
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005772:	791b      	ldrb	r3, [r3, #4]
 8005774:	2bff      	cmp	r3, #255	; 0xff
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	2bff      	cmp	r3, #255	; 0xff
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	fb03 f301 	mul.w	r3, r3, r1
 8005792:	4013      	ands	r3, r2
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005796:	7992      	ldrb	r2, [r2, #6]
 8005798:	2aff      	cmp	r2, #255	; 0xff
 800579a:	bf0c      	ite	eq
 800579c:	2201      	moveq	r2, #1
 800579e:	2200      	movne	r2, #0
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	4013      	ands	r3, r2
 80057a4:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057a6:	79d2      	ldrb	r2, [r2, #7]
 80057a8:	2aff      	cmp	r2, #255	; 0xff
 80057aa:	bf0c      	ite	eq
 80057ac:	2201      	moveq	r2, #1
 80057ae:	2200      	movne	r2, #0
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	4013      	ands	r3, r2
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057b6:	7a12      	ldrb	r2, [r2, #8]
 80057b8:	2afe      	cmp	r2, #254	; 0xfe
 80057ba:	bf0c      	ite	eq
 80057bc:	2201      	moveq	r2, #1
 80057be:	2200      	movne	r2, #0
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <FDCAN2_IT0_IRQHandler+0x17a>
	  update_fsm(&state, ZERO_CMD);
 80057c8:	217a      	movs	r1, #122	; 0x7a
 80057ca:	4814      	ldr	r0, [pc, #80]	; (800581c <FDCAN2_IT0_IRQHandler+0x1c4>)
 80057cc:	f7fe f942 	bl	8003a54 <update_fsm>
}
 80057d0:	e017      	b.n	8005802 <FDCAN2_IT0_IRQHandler+0x1aa>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80057d2:	4e11      	ldr	r6, [pc, #68]	; (8005818 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057d4:	4b12      	ldr	r3, [pc, #72]	; (8005820 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80057d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057d8:	466d      	mov	r5, sp
 80057da:	f106 0410 	add.w	r4, r6, #16
 80057de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80057f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80057f6:	f7fc fe2b 	bl	8002450 <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <FDCAN2_IT0_IRQHandler+0x1cc>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005802:	bf00      	nop
 8005804:	3704      	adds	r7, #4
 8005806:	46bd      	mov	sp, r7
 8005808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580a:	bf00      	nop
 800580c:	2000037c 	.word	0x2000037c
 8005810:	20009369 	.word	0x20009369
 8005814:	20009374 	.word	0x20009374
 8005818:	20009368 	.word	0x20009368
 800581c:	20000674 	.word	0x20000674
 8005820:	2000084c 	.word	0x2000084c
 8005824:	20000784 	.word	0x20000784

08005828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
	return 1;
 800582c:	2301      	movs	r3, #1
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_kill>:

int _kill(int pid, int sig)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005842:	f008 f8bd 	bl	800d9c0 <__errno>
 8005846:	4603      	mov	r3, r0
 8005848:	2216      	movs	r2, #22
 800584a:	601a      	str	r2, [r3, #0]
	return -1;
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <_exit>:

void _exit (int status)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005860:	f04f 31ff 	mov.w	r1, #4294967295
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ffe7 	bl	8005838 <_kill>
	while (1) {}		/* Make sure we hang here */
 800586a:	e7fe      	b.n	800586a <_exit+0x12>

0800586c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e00a      	b.n	8005894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800587e:	f3af 8000 	nop.w
 8005882:	4601      	mov	r1, r0
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	60ba      	str	r2, [r7, #8]
 800588a:	b2ca      	uxtb	r2, r1
 800588c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	dbf0      	blt.n	800587e <_read+0x12>
	}

return len;
 800589c:	687b      	ldr	r3, [r7, #4]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e009      	b.n	80058cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	60ba      	str	r2, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fa45 	bl	8005d50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3301      	adds	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dbf1      	blt.n	80058b8 <_write+0x12>
	}
	return len;
 80058d4:	687b      	ldr	r3, [r7, #4]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <_close>:

int _close(int file)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
	return -1;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005906:	605a      	str	r2, [r3, #4]
	return 0;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <_isatty>:

int _isatty(int file)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
	return 1;
 800591e:	2301      	movs	r3, #1
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	return 0;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005950:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <_sbrk+0x5c>)
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <_sbrk+0x60>)
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800595c:	4b13      	ldr	r3, [pc, #76]	; (80059ac <_sbrk+0x64>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <_sbrk+0x64>)
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <_sbrk+0x68>)
 8005968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <_sbrk+0x64>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d207      	bcs.n	8005988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005978:	f008 f822 	bl	800d9c0 <__errno>
 800597c:	4603      	mov	r3, r0
 800597e:	220c      	movs	r2, #12
 8005980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e009      	b.n	800599c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005988:	4b08      	ldr	r3, [pc, #32]	; (80059ac <_sbrk+0x64>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <_sbrk+0x64>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <_sbrk+0x64>)
 8005998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20020000 	.word	0x20020000
 80059a8:	00000400 	.word	0x00000400
 80059ac:	2000022c 	.word	0x2000022c
 80059b0:	20009598 	.word	0x20009598

080059b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <SystemInit+0x20>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <SystemInit+0x20>)
 80059c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	e000ed00 	.word	0xe000ed00

080059d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b09c      	sub	sp, #112	; 0x70
 80059dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	611a      	str	r2, [r3, #16]
 8005a08:	615a      	str	r2, [r3, #20]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	2234      	movs	r2, #52	; 0x34
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f008 f80c 	bl	800da30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005a18:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a1a:	4a52      	ldr	r2, [pc, #328]	; (8005b64 <MX_TIM1_Init+0x18c>)
 8005a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005a1e:	4b50      	ldr	r3, [pc, #320]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a24:	4b4e      	ldr	r3, [pc, #312]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8005a2a:	4b4d      	ldr	r3, [pc, #308]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a32:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005a38:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a3e:	4b48      	ldr	r3, [pc, #288]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a44:	4846      	ldr	r0, [pc, #280]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a46:	f004 fea3 	bl	800a790 <HAL_TIM_Base_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005a50:	f7ff f90c 	bl	8004c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a58:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005a5e:	4619      	mov	r1, r3
 8005a60:	483f      	ldr	r0, [pc, #252]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a62:	f005 fb69 	bl	800b138 <HAL_TIM_ConfigClockSource>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005a6c:	f7ff f8fe 	bl	8004c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a70:	483b      	ldr	r0, [pc, #236]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a72:	f004 ff5d 	bl	800a930 <HAL_TIM_PWM_Init>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005a7c:	f7ff f8f6 	bl	8004c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a80:	2300      	movs	r3, #0
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a84:	2300      	movs	r3, #0
 8005a86:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a90:	4619      	mov	r1, r3
 8005a92:	4833      	ldr	r0, [pc, #204]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005a94:	f006 f928 	bl	800bce8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005a9e:	f7ff f8e5 	bl	8004c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005aa2:	2360      	movs	r3, #96	; 0x60
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005aba:	2300      	movs	r3, #0
 8005abc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4826      	ldr	r0, [pc, #152]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005ac8:	f005 fa26 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005ad2:	f7ff f8cb 	bl	8004c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ada:	2204      	movs	r2, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4820      	ldr	r0, [pc, #128]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005ae0:	f005 fa1a 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005aea:	f7ff f8bf 	bl	8004c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005aee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005af2:	2208      	movs	r2, #8
 8005af4:	4619      	mov	r1, r3
 8005af6:	481a      	ldr	r0, [pc, #104]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005af8:	f005 fa0e 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005b02:	f7ff f8b3 	bl	8004c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005b24:	2300      	movs	r3, #0
 8005b26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005b36:	2300      	movs	r3, #0
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4807      	ldr	r0, [pc, #28]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005b44:	f006 f966 	bl	800be14 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8005b4e:	f7ff f88d 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005b52:	4803      	ldr	r0, [pc, #12]	; (8005b60 <MX_TIM1_Init+0x188>)
 8005b54:	f000 f82e 	bl	8005bb4 <HAL_TIM_MspPostInit>

}
 8005b58:	bf00      	nop
 8005b5a:	3770      	adds	r7, #112	; 0x70
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200094a8 	.word	0x200094a8
 8005b64:	40012c00 	.word	0x40012c00

08005b68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a0d      	ldr	r2, [pc, #52]	; (8005bac <HAL_TIM_Base_MspInit+0x44>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d113      	bne.n	8005ba2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <HAL_TIM_Base_MspInit+0x48>)
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <HAL_TIM_Base_MspInit+0x48>)
 8005b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b84:	6613      	str	r3, [r2, #96]	; 0x60
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <HAL_TIM_Base_MspInit+0x48>)
 8005b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	2019      	movs	r0, #25
 8005b98:	f001 fe4b 	bl	8007832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b9c:	2019      	movs	r0, #25
 8005b9e:	f001 fe62 	bl	8007866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40021000 	.word	0x40021000

08005bb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	60da      	str	r2, [r3, #12]
 8005bca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <HAL_TIM_MspPostInit+0x68>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d11d      	bne.n	8005c12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bd6:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <HAL_TIM_MspPostInit+0x6c>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <HAL_TIM_MspPostInit+0x6c>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <HAL_TIM_MspPostInit+0x6c>)
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005bee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005bf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005c00:	2306      	movs	r3, #6
 8005c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c0e:	f002 ffd3 	bl	8008bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005c12:	bf00      	nop
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40021000 	.word	0x40021000

08005c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c28:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c2a:	4a23      	ldr	r2, [pc, #140]	; (8005cb8 <MX_USART2_UART_Init+0x94>)
 8005c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c2e:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c36:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c42:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c4a:	220c      	movs	r2, #12
 8005c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c6c:	4811      	ldr	r0, [pc, #68]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c6e:	f006 f9c9 	bl	800c004 <HAL_UART_Init>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005c78:	f7fe fff8 	bl	8004c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	480d      	ldr	r0, [pc, #52]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c80:	f007 fdcb 	bl	800d81a <HAL_UARTEx_SetTxFifoThreshold>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005c8a:	f7fe ffef 	bl	8004c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4808      	ldr	r0, [pc, #32]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005c92:	f007 fe00 	bl	800d896 <HAL_UARTEx_SetRxFifoThreshold>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005c9c:	f7fe ffe6 	bl	8004c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ca0:	4804      	ldr	r0, [pc, #16]	; (8005cb4 <MX_USART2_UART_Init+0x90>)
 8005ca2:	f007 fd81 	bl	800d7a8 <HAL_UARTEx_DisableFifoMode>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005cac:	f7fe ffde 	bl	8004c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200094f4 	.word	0x200094f4
 8005cb8:	40004400 	.word	0x40004400

08005cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_UART_MspInit+0x8c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d130      	bne.n	8005d40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf6:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_UART_MspInit+0x90>)
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d0e:	230c      	movs	r3, #12
 8005d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d12:	2302      	movs	r3, #2
 8005d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d1e:	2307      	movs	r3, #7
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d22:	f107 0314 	add.w	r3, r7, #20
 8005d26:	4619      	mov	r1, r3
 8005d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d2c:	f002 ff44 	bl	8008bb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d30:	2200      	movs	r2, #0
 8005d32:	2100      	movs	r1, #0
 8005d34:	2026      	movs	r0, #38	; 0x26
 8005d36:	f001 fd7c 	bl	8007832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d3a:	2026      	movs	r0, #38	; 0x26
 8005d3c:	f001 fd93 	bl	8007866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d40:	bf00      	nop
 8005d42:	3728      	adds	r7, #40	; 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	40021000 	.word	0x40021000

08005d50 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005d58:	1d39      	adds	r1, r7, #4
 8005d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4803      	ldr	r0, [pc, #12]	; (8005d70 <__io_putchar+0x20>)
 8005d62:	f006 f99f 	bl	800c0a4 <HAL_UART_Transmit>
return 0;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	200094f4 	.word	0x200094f4

08005d74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4904      	ldr	r1, [pc, #16]	; (8005d90 <HAL_UART_RxCpltCallback+0x1c>)
 8005d80:	4804      	ldr	r0, [pc, #16]	; (8005d94 <HAL_UART_RxCpltCallback+0x20>)
 8005d82:	f006 fa25 	bl	800c1d0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000670 	.word	0x20000670
 8005d94:	200094f4 	.word	0x200094f4

08005d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d98:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d9c:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005d9e:	490e      	ldr	r1, [pc, #56]	; (8005dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005da0:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <LoopForever+0xe>)
  movs r3, #0
 8005da2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005da4:	e002      	b.n	8005dac <LoopCopyDataInit>

08005da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005daa:	3304      	adds	r3, #4

08005dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db0:	d3f9      	bcc.n	8005da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005db2:	4a0b      	ldr	r2, [pc, #44]	; (8005de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005db4:	4c0b      	ldr	r4, [pc, #44]	; (8005de4 <LoopForever+0x16>)
  movs r3, #0
 8005db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005db8:	e001      	b.n	8005dbe <LoopFillZerobss>

08005dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dbc:	3204      	adds	r2, #4

08005dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc0:	d3fb      	bcc.n	8005dba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005dc2:	f7ff fdf7 	bl	80059b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dc6:	f007 fe01 	bl	800d9cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dca:	f7fe fbed 	bl	80045a8 <main>

08005dce <LoopForever>:

LoopForever:
    b LoopForever
 8005dce:	e7fe      	b.n	8005dce <LoopForever>
  ldr   r0, =_estack
 8005dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dd8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005ddc:	080138c0 	.word	0x080138c0
  ldr r2, =_sbss
 8005de0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005de4:	20009598 	.word	0x20009598

08005de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005de8:	e7fe      	b.n	8005de8 <ADC1_2_IRQHandler>

08005dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005df4:	2003      	movs	r0, #3
 8005df6:	f001 fd11 	bl	800781c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	f000 f80e 	bl	8005e1c <HAL_InitTick>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	e001      	b.n	8005e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e0c:	f7ff fb84 	bl	8005518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e10:	79fb      	ldrb	r3, [r7, #7]

}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e28:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <HAL_InitTick+0x68>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d022      	beq.n	8005e76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_InitTick+0x6c>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <HAL_InitTick+0x68>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fd1c 	bl	8007882 <HAL_SYSTICK_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10f      	bne.n	8005e70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d809      	bhi.n	8005e6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e56:	2200      	movs	r2, #0
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	f001 fce8 	bl	8007832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <HAL_InitTick+0x70>)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e007      	b.n	8005e7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	e004      	b.n	8005e7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e001      	b.n	8005e7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000000c 	.word	0x2000000c
 8005e88:	20000004 	.word	0x20000004
 8005e8c:	20000008 	.word	0x20000008

08005e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_IncTick+0x1c>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_IncTick+0x20>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4a03      	ldr	r2, [pc, #12]	; (8005eac <HAL_IncTick+0x1c>)
 8005ea0:	6013      	str	r3, [r2, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20009584 	.word	0x20009584
 8005eb0:	2000000c 	.word	0x2000000c

08005eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <HAL_GetTick+0x14>)
 8005eba:	681b      	ldr	r3, [r3, #0]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20009584 	.word	0x20009584

08005ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ed4:	f7ff ffee 	bl	8005eb4 <HAL_GetTick>
 8005ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d004      	beq.n	8005ef0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_Delay+0x40>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ef0:	bf00      	nop
 8005ef2:	f7ff ffdf 	bl	8005eb4 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d8f7      	bhi.n	8005ef2 <HAL_Delay+0x26>
  {
  }
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000000c 	.word	0x2000000c

08005f10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	609a      	str	r2, [r3, #8]
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	609a      	str	r2, [r3, #8]
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3360      	adds	r3, #96	; 0x60
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <LL_ADC_SetOffset+0x44>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	03fff000 	.word	0x03fff000

08005fc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3360      	adds	r3, #96	; 0x60
 8005fce:	461a      	mov	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3360      	adds	r3, #96	; 0x60
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	431a      	orrs	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006022:	b480      	push	{r7}
 8006024:	b087      	sub	sp, #28
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3360      	adds	r3, #96	; 0x60
 8006032:	461a      	mov	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	431a      	orrs	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3360      	adds	r3, #96	; 0x60
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	431a      	orrs	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	615a      	str	r2, [r3, #20]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3330      	adds	r3, #48	; 0x30
 80060ea:	461a      	mov	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	4413      	add	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	211f      	movs	r1, #31
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	401a      	ands	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0e9b      	lsrs	r3, r3, #26
 8006112:	f003 011f 	and.w	r1, r3, #31
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3314      	adds	r3, #20
 8006142:	461a      	mov	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	0e5b      	lsrs	r3, r3, #25
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	4413      	add	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	0d1b      	lsrs	r3, r3, #20
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2107      	movs	r1, #7
 8006160:	fa01 f303 	lsl.w	r3, r1, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	401a      	ands	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	0d1b      	lsrs	r3, r3, #20
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	431a      	orrs	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0318 	and.w	r3, r3, #24
 80061aa:	4908      	ldr	r1, [pc, #32]	; (80061cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80061ac:	40d9      	lsrs	r1, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	400b      	ands	r3, r1
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	0007ffff 	.word	0x0007ffff

080061d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 031f 	and.w	r3, r3, #31
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6093      	str	r3, [r2, #8]
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800623c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006240:	d101      	bne.n	8006246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006290:	d101      	bne.n	8006296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062b8:	f043 0201 	orr.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <LL_ADC_IsEnabled+0x18>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <LL_ADC_IsEnabled+0x1a>
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006302:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b04      	cmp	r3, #4
 800632c:	d101      	bne.n	8006332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d101      	bne.n	8006358 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b089      	sub	sp, #36	; 0x24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e1af      	b.n	80066e2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fa ffa9 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ff3f 	bl	800622c <LL_ADC_IsDeepPowerDownEnabled>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff25 	bl	8006208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff5a 	bl	800627c <LL_ADC_IsInternalRegulatorEnabled>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d115      	bne.n	80063fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ff3e 	bl	8006254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063d8:	4b9f      	ldr	r3, [pc, #636]	; (8006658 <HAL_ADC_Init+0x2f0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	099b      	lsrs	r3, r3, #6
 80063de:	4a9f      	ldr	r2, [pc, #636]	; (800665c <HAL_ADC_Init+0x2f4>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	099b      	lsrs	r3, r3, #6
 80063e6:	3301      	adds	r3, #1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063ec:	e002      	b.n	80063f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f9      	bne.n	80063ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ff3c 	bl	800627c <LL_ADC_IsInternalRegulatorEnabled>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	f043 0210 	orr.w	r2, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	f043 0201 	orr.w	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff ff75 	bl	800631a <LL_ADC_REG_IsConversionOngoing>
 8006430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 8148 	bne.w	80066d0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 8144 	bne.w	80066d0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006450:	f043 0202 	orr.w	r2, r3, #2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ff35 	bl	80062cc <LL_ADC_IsEnabled>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d141      	bne.n	80064ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006470:	d004      	beq.n	800647c <HAL_ADC_Init+0x114>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7a      	ldr	r2, [pc, #488]	; (8006660 <HAL_ADC_Init+0x2f8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10f      	bne.n	800649c <HAL_ADC_Init+0x134>
 800647c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006480:	f7ff ff24 	bl	80062cc <LL_ADC_IsEnabled>
 8006484:	4604      	mov	r4, r0
 8006486:	4876      	ldr	r0, [pc, #472]	; (8006660 <HAL_ADC_Init+0x2f8>)
 8006488:	f7ff ff20 	bl	80062cc <LL_ADC_IsEnabled>
 800648c:	4603      	mov	r3, r0
 800648e:	4323      	orrs	r3, r4
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e012      	b.n	80064c2 <HAL_ADC_Init+0x15a>
 800649c:	4871      	ldr	r0, [pc, #452]	; (8006664 <HAL_ADC_Init+0x2fc>)
 800649e:	f7ff ff15 	bl	80062cc <LL_ADC_IsEnabled>
 80064a2:	4604      	mov	r4, r0
 80064a4:	4870      	ldr	r0, [pc, #448]	; (8006668 <HAL_ADC_Init+0x300>)
 80064a6:	f7ff ff11 	bl	80062cc <LL_ADC_IsEnabled>
 80064aa:	4603      	mov	r3, r0
 80064ac:	431c      	orrs	r4, r3
 80064ae:	486f      	ldr	r0, [pc, #444]	; (800666c <HAL_ADC_Init+0x304>)
 80064b0:	f7ff ff0c 	bl	80062cc <LL_ADC_IsEnabled>
 80064b4:	4603      	mov	r3, r0
 80064b6:	4323      	orrs	r3, r4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d012      	beq.n	80064ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ce:	d004      	beq.n	80064da <HAL_ADC_Init+0x172>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a62      	ldr	r2, [pc, #392]	; (8006660 <HAL_ADC_Init+0x2f8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d101      	bne.n	80064de <HAL_ADC_Init+0x176>
 80064da:	4a65      	ldr	r2, [pc, #404]	; (8006670 <HAL_ADC_Init+0x308>)
 80064dc:	e000      	b.n	80064e0 <HAL_ADC_Init+0x178>
 80064de:	4a65      	ldr	r2, [pc, #404]	; (8006674 <HAL_ADC_Init+0x30c>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7ff fd12 	bl	8005f10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7f5b      	ldrb	r3, [r3, #29]
 80064f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80064fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006502:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800650a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800650c:	4313      	orrs	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006516:	2b01      	cmp	r3, #1
 8006518:	d106      	bne.n	8006528 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	045b      	lsls	r3, r3, #17
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4313      	orrs	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	4b4b      	ldr	r3, [pc, #300]	; (8006678 <HAL_ADC_Init+0x310>)
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	69b9      	ldr	r1, [r7, #24]
 8006554:	430b      	orrs	r3, r1
 8006556:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fed1 	bl	800631a <LL_ADC_REG_IsConversionOngoing>
 8006578:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fede 	bl	8006340 <LL_ADC_INJ_IsConversionOngoing>
 8006584:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d17f      	bne.n	800668c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d17c      	bne.n	800668c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006596:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800659e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ae:	f023 0302 	bic.w	r3, r3, #2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	69b9      	ldr	r1, [r7, #24]
 80065b8:	430b      	orrs	r3, r1
 80065ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80065e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6911      	ldr	r1, [r2, #16]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	430b      	orrs	r3, r1
 80065ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80065f2:	e013      	b.n	800661c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006618:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006622:	2b01      	cmp	r3, #1
 8006624:	d12a      	bne.n	800667c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006630:	f023 0304 	bic.w	r3, r3, #4
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800663c:	4311      	orrs	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006642:	4311      	orrs	r1, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006648:	430a      	orrs	r2, r1
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	e019      	b.n	800668c <HAL_ADC_Init+0x324>
 8006658:	20000004 	.word	0x20000004
 800665c:	053e2d63 	.word	0x053e2d63
 8006660:	50000100 	.word	0x50000100
 8006664:	50000400 	.word	0x50000400
 8006668:	50000500 	.word	0x50000500
 800666c:	50000600 	.word	0x50000600
 8006670:	50000300 	.word	0x50000300
 8006674:	50000700 	.word	0x50000700
 8006678:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0201 	bic.w	r2, r2, #1
 800668a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d10c      	bne.n	80066ae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f023 010f 	bic.w	r1, r3, #15
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
 80066ac:	e007      	b.n	80066be <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 020f 	bic.w	r2, r2, #15
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	f043 0201 	orr.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80066ce:	e007      	b.n	80066e0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3724      	adds	r7, #36	; 0x24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	bf00      	nop

080066ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066fc:	d004      	beq.n	8006708 <HAL_ADC_Start+0x1c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a67      	ldr	r2, [pc, #412]	; (80068a0 <HAL_ADC_Start+0x1b4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_ADC_Start+0x20>
 8006708:	4b66      	ldr	r3, [pc, #408]	; (80068a4 <HAL_ADC_Start+0x1b8>)
 800670a:	e000      	b.n	800670e <HAL_ADC_Start+0x22>
 800670c:	4b66      	ldr	r3, [pc, #408]	; (80068a8 <HAL_ADC_Start+0x1bc>)
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fd5e 	bl	80061d0 <LL_ADC_GetMultimode>
 8006714:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fdfd 	bl	800631a <LL_ADC_REG_IsConversionOngoing>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 80b4 	bne.w	8006890 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_ADC_Start+0x4a>
 8006732:	2302      	movs	r3, #2
 8006734:	e0af      	b.n	8006896 <HAL_ADC_Start+0x1aa>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fe0c 	bl	800735c <ADC_Enable>
 8006744:	4603      	mov	r3, r0
 8006746:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 809b 	bne.w	8006886 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a4d      	ldr	r2, [pc, #308]	; (80068a0 <HAL_ADC_Start+0x1b4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_ADC_Start+0x96>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a4e      	ldr	r2, [pc, #312]	; (80068ac <HAL_ADC_Start+0x1c0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d002      	beq.n	800677e <HAL_ADC_Start+0x92>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	e003      	b.n	8006786 <HAL_ADC_Start+0x9a>
 800677e:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_ADC_Start+0x1c4>)
 8006780:	e001      	b.n	8006786 <HAL_ADC_Start+0x9a>
 8006782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	4293      	cmp	r3, r2
 800678c:	d002      	beq.n	8006794 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006798:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ac:	d106      	bne.n	80067bc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b2:	f023 0206 	bic.w	r2, r3, #6
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
 80067ba:	e002      	b.n	80067c2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	221c      	movs	r2, #28
 80067c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a32      	ldr	r2, [pc, #200]	; (80068a0 <HAL_ADC_Start+0x1b4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_ADC_Start+0x104>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a32      	ldr	r2, [pc, #200]	; (80068ac <HAL_ADC_Start+0x1c0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d002      	beq.n	80067ec <HAL_ADC_Start+0x100>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	e003      	b.n	80067f4 <HAL_ADC_Start+0x108>
 80067ec:	4b30      	ldr	r3, [pc, #192]	; (80068b0 <HAL_ADC_Start+0x1c4>)
 80067ee:	e001      	b.n	80067f4 <HAL_ADC_Start+0x108>
 80067f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d008      	beq.n	800680e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b05      	cmp	r3, #5
 8006806:	d002      	beq.n	800680e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d114      	bne.n	8006838 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006824:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fd5e 	bl	80062f2 <LL_ADC_REG_StartConversion>
 8006836:	e02d      	b.n	8006894 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <HAL_ADC_Start+0x1b4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_ADC_Start+0x176>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_ADC_Start+0x1c0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d002      	beq.n	800685e <HAL_ADC_Start+0x172>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	e003      	b.n	8006866 <HAL_ADC_Start+0x17a>
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <HAL_ADC_Start+0x1c4>)
 8006860:	e001      	b.n	8006866 <HAL_ADC_Start+0x17a>
 8006862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006866:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00f      	beq.n	8006894 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800687c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	65da      	str	r2, [r3, #92]	; 0x5c
 8006884:	e006      	b.n	8006894 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800688e:	e001      	b.n	8006894 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006890:	2302      	movs	r3, #2
 8006892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	50000100 	.word	0x50000100
 80068a4:	50000300 	.word	0x50000300
 80068a8:	50000700 	.word	0x50000700
 80068ac:	50000500 	.word	0x50000500
 80068b0:	50000400 	.word	0x50000400

080068b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c6:	d004      	beq.n	80068d2 <HAL_ADC_PollForConversion+0x1e>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a77      	ldr	r2, [pc, #476]	; (8006aac <HAL_ADC_PollForConversion+0x1f8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_ADC_PollForConversion+0x22>
 80068d2:	4b77      	ldr	r3, [pc, #476]	; (8006ab0 <HAL_ADC_PollForConversion+0x1fc>)
 80068d4:	e000      	b.n	80068d8 <HAL_ADC_PollForConversion+0x24>
 80068d6:	4b77      	ldr	r3, [pc, #476]	; (8006ab4 <HAL_ADC_PollForConversion+0x200>)
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fc79 	bl	80061d0 <LL_ADC_GetMultimode>
 80068de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d102      	bne.n	80068ee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80068e8:	2308      	movs	r3, #8
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e037      	b.n	800695e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	d002      	beq.n	8006900 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	d111      	bne.n	8006924 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e0c1      	b.n	8006aa2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800691e:	2304      	movs	r3, #4
 8006920:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006922:	e01c      	b.n	800695e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800692c:	d004      	beq.n	8006938 <HAL_ADC_PollForConversion+0x84>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a5e      	ldr	r2, [pc, #376]	; (8006aac <HAL_ADC_PollForConversion+0x1f8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d101      	bne.n	800693c <HAL_ADC_PollForConversion+0x88>
 8006938:	4b5d      	ldr	r3, [pc, #372]	; (8006ab0 <HAL_ADC_PollForConversion+0x1fc>)
 800693a:	e000      	b.n	800693e <HAL_ADC_PollForConversion+0x8a>
 800693c:	4b5d      	ldr	r3, [pc, #372]	; (8006ab4 <HAL_ADC_PollForConversion+0x200>)
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fc54 	bl	80061ec <LL_ADC_GetMultiDMATransfer>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0a3      	b.n	8006aa2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800695a:	2304      	movs	r3, #4
 800695c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800695e:	f7ff faa9 	bl	8005eb4 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006964:	e021      	b.n	80069aa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d01d      	beq.n	80069aa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800696e:	f7ff faa1 	bl	8005eb4 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d302      	bcc.n	8006984 <HAL_ADC_PollForConversion+0xd0>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d112      	bne.n	80069aa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e07b      	b.n	8006aa2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0d6      	beq.n	8006966 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fb73 	bl	80060b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01c      	beq.n	8006a0e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7f5b      	ldrb	r3, [r3, #29]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d118      	bne.n	8006a0e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d111      	bne.n	8006a0e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d105      	bne.n	8006a0e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	f043 0201 	orr.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a26      	ldr	r2, [pc, #152]	; (8006aac <HAL_ADC_PollForConversion+0x1f8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_ADC_PollForConversion+0x178>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <HAL_ADC_PollForConversion+0x204>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d002      	beq.n	8006a28 <HAL_ADC_PollForConversion+0x174>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	e003      	b.n	8006a30 <HAL_ADC_PollForConversion+0x17c>
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_ADC_PollForConversion+0x208>)
 8006a2a:	e001      	b.n	8006a30 <HAL_ADC_PollForConversion+0x17c>
 8006a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d008      	beq.n	8006a4a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b05      	cmp	r3, #5
 8006a42:	d002      	beq.n	8006a4a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b09      	cmp	r3, #9
 8006a48:	d104      	bne.n	8006a54 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e014      	b.n	8006a7e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <HAL_ADC_PollForConversion+0x1f8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_ADC_PollForConversion+0x1be>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <HAL_ADC_PollForConversion+0x204>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d002      	beq.n	8006a6e <HAL_ADC_PollForConversion+0x1ba>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	e003      	b.n	8006a76 <HAL_ADC_PollForConversion+0x1c2>
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <HAL_ADC_PollForConversion+0x208>)
 8006a70:	e001      	b.n	8006a76 <HAL_ADC_PollForConversion+0x1c2>
 8006a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a76:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d104      	bne.n	8006a8e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e008      	b.n	8006aa0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d103      	bne.n	8006aa0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	220c      	movs	r2, #12
 8006a9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	50000100 	.word	0x50000100
 8006ab0:	50000300 	.word	0x50000300
 8006ab4:	50000700 	.word	0x50000700
 8006ab8:	50000500 	.word	0x50000500
 8006abc:	50000400 	.word	0x50000400

08006ac0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b0b6      	sub	sp, #216	; 0xd8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d102      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x24>
 8006afa:	2302      	movs	r3, #2
 8006afc:	f000 bc13 	b.w	8007326 <HAL_ADC_ConfigChannel+0x84a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fc04 	bl	800631a <LL_ADC_REG_IsConversionOngoing>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 83f3 	bne.w	8007300 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7ff fad7 	bl	80060da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fbf2 	bl	800631a <LL_ADC_REG_IsConversionOngoing>
 8006b36:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fbfe 	bl	8006340 <LL_ADC_INJ_IsConversionOngoing>
 8006b44:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 81d9 	bne.w	8006f04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f040 81d4 	bne.w	8006f04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b64:	d10f      	bne.n	8006b86 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4619      	mov	r1, r3
 8006b72:	f7ff fade 	bl	8006132 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fa85 	bl	800608e <LL_ADC_SetSamplingTimeCommonConfig>
 8006b84:	e00e      	b.n	8006ba4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f7ff facd 	bl	8006132 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fa75 	bl	800608e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	08db      	lsrs	r3, r3, #3
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d022      	beq.n	8006c0c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6919      	ldr	r1, [r3, #16]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bd6:	f7ff f9cf 	bl	8005f78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6919      	ldr	r1, [r3, #16]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f7ff fa1b 	bl	8006022 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	6919      	ldr	r1, [r3, #16]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	7f1b      	ldrb	r3, [r3, #28]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <HAL_ADC_ConfigChannel+0x126>
 8006bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c00:	e000      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x128>
 8006c02:	2300      	movs	r3, #0
 8006c04:	461a      	mov	r2, r3
 8006c06:	f7ff fa27 	bl	8006058 <LL_ADC_SetOffsetSaturation>
 8006c0a:	e17b      	b.n	8006f04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f9d4 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x15c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff f9c9 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	0e9b      	lsrs	r3, r3, #26
 8006c32:	f003 021f 	and.w	r2, r3, #31
 8006c36:	e01e      	b.n	8006c76 <HAL_ADC_ConfigChannel+0x19a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff f9be 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006c66:	2320      	movs	r3, #32
 8006c68:	e004      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c6e:	fab3 f383 	clz	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <HAL_ADC_ConfigChannel+0x1b2>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	0e9b      	lsrs	r3, r3, #26
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	e018      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x1e4>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	e004      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d106      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff f98d 	bl	8005fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff f971 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x222>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2101      	movs	r1, #1
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff f966 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	0e9b      	lsrs	r3, r3, #26
 8006cf8:	f003 021f 	and.w	r2, r3, #31
 8006cfc:	e01e      	b.n	8006d3c <HAL_ADC_ConfigChannel+0x260>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff f95b 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d14:	fa93 f3a3 	rbit	r3, r3
 8006d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006d2c:	2320      	movs	r3, #32
 8006d2e:	e004      	b.n	8006d3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x278>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	0e9b      	lsrs	r3, r3, #26
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	e018      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x2aa>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d60:	fa93 f3a3 	rbit	r3, r3
 8006d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006d68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006d78:	2320      	movs	r3, #32
 8006d7a:	e004      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d80:	fab3 f383 	clz	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d106      	bne.n	8006d98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff f92a 	bl	8005fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f90e 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x2e8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2102      	movs	r1, #2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff f903 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	0e9b      	lsrs	r3, r3, #26
 8006dbe:	f003 021f 	and.w	r2, r3, #31
 8006dc2:	e01e      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x326>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f8f8 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dda:	fa93 f3a3 	rbit	r3, r3
 8006dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006df2:	2320      	movs	r3, #32
 8006df4:	e004      	b.n	8006e00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfa:	fab3 f383 	clz	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_ADC_ConfigChannel+0x33e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	0e9b      	lsrs	r3, r3, #26
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	e016      	b.n	8006e48 <HAL_ADC_ConfigChannel+0x36c>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e26:	fa93 f3a3 	rbit	r3, r3
 8006e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	e004      	b.n	8006e48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e42:	fab3 f383 	clz	r3, r3
 8006e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d106      	bne.n	8006e5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2102      	movs	r1, #2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff f8c9 	bl	8005fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2103      	movs	r1, #3
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff f8ad 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <HAL_ADC_ConfigChannel+0x3aa>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2103      	movs	r1, #3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f8a2 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	0e9b      	lsrs	r3, r3, #26
 8006e80:	f003 021f 	and.w	r2, r3, #31
 8006e84:	e017      	b.n	8006eb6 <HAL_ADC_ConfigChannel+0x3da>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2103      	movs	r1, #3
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff f897 	bl	8005fc0 <LL_ADC_GetOffsetChannel>
 8006e92:	4603      	mov	r3, r0
 8006e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	fa93 f3a3 	rbit	r3, r3
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	e003      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eae:	fab3 f383 	clz	r3, r3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_ADC_ConfigChannel+0x3f2>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	0e9b      	lsrs	r3, r3, #26
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	e011      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x416>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed6:	fa93 f3a3 	rbit	r3, r3
 8006eda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ede:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006ee6:	2320      	movs	r3, #32
 8006ee8:	e003      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eec:	fab3 f383 	clz	r3, r3
 8006ef0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d106      	bne.n	8006f04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	2103      	movs	r1, #3
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff f874 	bl	8005fec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff f9df 	bl	80062cc <LL_ADC_IsEnabled>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 813d 	bne.w	8007190 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f7ff f930 	bl	8006188 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4aa2      	ldr	r2, [pc, #648]	; (80071b8 <HAL_ADC_ConfigChannel+0x6dc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	f040 812e 	bne.w	8007190 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <HAL_ADC_ConfigChannel+0x480>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	0e9b      	lsrs	r3, r3, #26
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2b09      	cmp	r3, #9
 8006f52:	bf94      	ite	ls
 8006f54:	2301      	movls	r3, #1
 8006f56:	2300      	movhi	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	e019      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x4b4>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f64:	fa93 f3a3 	rbit	r3, r3
 8006f68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006f74:	2320      	movs	r3, #32
 8006f76:	e003      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	3301      	adds	r3, #1
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	bf94      	ite	ls
 8006f8a:	2301      	movls	r3, #1
 8006f8c:	2300      	movhi	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d079      	beq.n	8007088 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <HAL_ADC_ConfigChannel+0x4d4>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	0e9b      	lsrs	r3, r3, #26
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	069b      	lsls	r3, r3, #26
 8006faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fae:	e015      	b.n	8006fdc <HAL_ADC_ConfigChannel+0x500>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb8:	fa93 f3a3 	rbit	r3, r3
 8006fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006fc8:	2320      	movs	r3, #32
 8006fca:	e003      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fce:	fab3 f383 	clz	r3, r3
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	069b      	lsls	r3, r3, #26
 8006fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x520>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	0e9b      	lsrs	r3, r3, #26
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	e017      	b.n	800702c <HAL_ADC_ConfigChannel+0x550>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007004:	fa93 f3a3 	rbit	r3, r3
 8007008:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800700a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800700c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800700e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007014:	2320      	movs	r3, #32
 8007016:	e003      	b.n	8007020 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701a:	fab3 f383 	clz	r3, r3
 800701e:	b2db      	uxtb	r3, r3
 8007020:	3301      	adds	r3, #1
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	2101      	movs	r1, #1
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	ea42 0103 	orr.w	r1, r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x576>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	0e9b      	lsrs	r3, r3, #26
 8007042:	3301      	adds	r3, #1
 8007044:	f003 021f 	and.w	r2, r3, #31
 8007048:	4613      	mov	r3, r2
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4413      	add	r3, r2
 800704e:	051b      	lsls	r3, r3, #20
 8007050:	e018      	b.n	8007084 <HAL_ADC_ConfigChannel+0x5a8>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	fa93 f3a3 	rbit	r3, r3
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800706a:	2320      	movs	r3, #32
 800706c:	e003      	b.n	8007076 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	fab3 f383 	clz	r3, r3
 8007074:	b2db      	uxtb	r3, r3
 8007076:	3301      	adds	r3, #1
 8007078:	f003 021f 	and.w	r2, r3, #31
 800707c:	4613      	mov	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007084:	430b      	orrs	r3, r1
 8007086:	e07e      	b.n	8007186 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <HAL_ADC_ConfigChannel+0x5c8>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	0e9b      	lsrs	r3, r3, #26
 800709a:	3301      	adds	r3, #1
 800709c:	069b      	lsls	r3, r3, #26
 800709e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070a2:	e015      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x5f4>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	fa93 f3a3 	rbit	r3, r3
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80070bc:	2320      	movs	r3, #32
 80070be:	e003      	b.n	80070c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	fab3 f383 	clz	r3, r3
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	3301      	adds	r3, #1
 80070ca:	069b      	lsls	r3, r3, #26
 80070cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <HAL_ADC_ConfigChannel+0x614>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	0e9b      	lsrs	r3, r3, #26
 80070e2:	3301      	adds	r3, #1
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	2101      	movs	r1, #1
 80070ea:	fa01 f303 	lsl.w	r3, r1, r3
 80070ee:	e017      	b.n	8007120 <HAL_ADC_ConfigChannel+0x644>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	fa93 f3a3 	rbit	r3, r3
 80070fc:	61fb      	str	r3, [r7, #28]
  return result;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007108:	2320      	movs	r3, #32
 800710a:	e003      	b.n	8007114 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	fab3 f383 	clz	r3, r3
 8007112:	b2db      	uxtb	r3, r3
 8007114:	3301      	adds	r3, #1
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2101      	movs	r1, #1
 800711c:	fa01 f303 	lsl.w	r3, r1, r3
 8007120:	ea42 0103 	orr.w	r1, r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <HAL_ADC_ConfigChannel+0x670>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0e9b      	lsrs	r3, r3, #26
 8007136:	3301      	adds	r3, #1
 8007138:	f003 021f 	and.w	r2, r3, #31
 800713c:	4613      	mov	r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4413      	add	r3, r2
 8007142:	3b1e      	subs	r3, #30
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800714a:	e01b      	b.n	8007184 <HAL_ADC_ConfigChannel+0x6a8>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	fa93 f3a3 	rbit	r3, r3
 8007158:	613b      	str	r3, [r7, #16]
  return result;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007164:	2320      	movs	r3, #32
 8007166:	e003      	b.n	8007170 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	3301      	adds	r3, #1
 8007172:	f003 021f 	and.w	r2, r3, #31
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	3b1e      	subs	r3, #30
 800717e:	051b      	lsls	r3, r3, #20
 8007180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007184:	430b      	orrs	r3, r1
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6892      	ldr	r2, [r2, #8]
 800718a:	4619      	mov	r1, r3
 800718c:	f7fe ffd1 	bl	8006132 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <HAL_ADC_ConfigChannel+0x6e0>)
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80be 	beq.w	800731a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071a6:	d004      	beq.n	80071b2 <HAL_ADC_ConfigChannel+0x6d6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10a      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x6ec>
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80071b4:	e009      	b.n	80071ca <HAL_ADC_ConfigChannel+0x6ee>
 80071b6:	bf00      	nop
 80071b8:	407f0000 	.word	0x407f0000
 80071bc:	80080000 	.word	0x80080000
 80071c0:	50000100 	.word	0x50000100
 80071c4:	50000300 	.word	0x50000300
 80071c8:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_ADC_ConfigChannel+0x854>)
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fec6 	bl	8005f5c <LL_ADC_GetCommonPathInternalCh>
 80071d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a56      	ldr	r2, [pc, #344]	; (8007334 <HAL_ADC_ConfigChannel+0x858>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_ADC_ConfigChannel+0x70c>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a55      	ldr	r2, [pc, #340]	; (8007338 <HAL_ADC_ConfigChannel+0x85c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d13a      	bne.n	800725e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80071e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d134      	bne.n	800725e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071fc:	d005      	beq.n	800720a <HAL_ADC_ConfigChannel+0x72e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a4e      	ldr	r2, [pc, #312]	; (800733c <HAL_ADC_ConfigChannel+0x860>)
 8007204:	4293      	cmp	r3, r2
 8007206:	f040 8085 	bne.w	8007314 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007212:	d004      	beq.n	800721e <HAL_ADC_ConfigChannel+0x742>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a49      	ldr	r2, [pc, #292]	; (8007340 <HAL_ADC_ConfigChannel+0x864>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x746>
 800721e:	4a49      	ldr	r2, [pc, #292]	; (8007344 <HAL_ADC_ConfigChannel+0x868>)
 8007220:	e000      	b.n	8007224 <HAL_ADC_ConfigChannel+0x748>
 8007222:	4a43      	ldr	r2, [pc, #268]	; (8007330 <HAL_ADC_ConfigChannel+0x854>)
 8007224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7fe fe81 	bl	8005f36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007234:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_ADC_ConfigChannel+0x86c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	099b      	lsrs	r3, r3, #6
 800723a:	4a44      	ldr	r2, [pc, #272]	; (800734c <HAL_ADC_ConfigChannel+0x870>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	099b      	lsrs	r3, r3, #6
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	4613      	mov	r3, r2
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800724e:	e002      	b.n	8007256 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b01      	subs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f9      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800725c:	e05a      	b.n	8007314 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a3b      	ldr	r2, [pc, #236]	; (8007350 <HAL_ADC_ConfigChannel+0x874>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d125      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x7d8>
 8007268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800726c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11f      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a31      	ldr	r2, [pc, #196]	; (8007340 <HAL_ADC_ConfigChannel+0x864>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d104      	bne.n	8007288 <HAL_ADC_ConfigChannel+0x7ac>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a34      	ldr	r2, [pc, #208]	; (8007354 <HAL_ADC_ConfigChannel+0x878>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d047      	beq.n	8007318 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007290:	d004      	beq.n	800729c <HAL_ADC_ConfigChannel+0x7c0>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <HAL_ADC_ConfigChannel+0x864>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <HAL_ADC_ConfigChannel+0x7c4>
 800729c:	4a29      	ldr	r2, [pc, #164]	; (8007344 <HAL_ADC_ConfigChannel+0x868>)
 800729e:	e000      	b.n	80072a2 <HAL_ADC_ConfigChannel+0x7c6>
 80072a0:	4a23      	ldr	r2, [pc, #140]	; (8007330 <HAL_ADC_ConfigChannel+0x854>)
 80072a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072aa:	4619      	mov	r1, r3
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7fe fe42 	bl	8005f36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072b2:	e031      	b.n	8007318 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a27      	ldr	r2, [pc, #156]	; (8007358 <HAL_ADC_ConfigChannel+0x87c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d12d      	bne.n	800731a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d127      	bne.n	800731a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <HAL_ADC_ConfigChannel+0x864>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d022      	beq.n	800731a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072dc:	d004      	beq.n	80072e8 <HAL_ADC_ConfigChannel+0x80c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a17      	ldr	r2, [pc, #92]	; (8007340 <HAL_ADC_ConfigChannel+0x864>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d101      	bne.n	80072ec <HAL_ADC_ConfigChannel+0x810>
 80072e8:	4a16      	ldr	r2, [pc, #88]	; (8007344 <HAL_ADC_ConfigChannel+0x868>)
 80072ea:	e000      	b.n	80072ee <HAL_ADC_ConfigChannel+0x812>
 80072ec:	4a10      	ldr	r2, [pc, #64]	; (8007330 <HAL_ADC_ConfigChannel+0x854>)
 80072ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7fe fe1c 	bl	8005f36 <LL_ADC_SetCommonPathInternalCh>
 80072fe:	e00c      	b.n	800731a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007312:	e002      	b.n	800731a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007322:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007326:	4618      	mov	r0, r3
 8007328:	37d8      	adds	r7, #216	; 0xd8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	50000700 	.word	0x50000700
 8007334:	c3210000 	.word	0xc3210000
 8007338:	90c00010 	.word	0x90c00010
 800733c:	50000600 	.word	0x50000600
 8007340:	50000100 	.word	0x50000100
 8007344:	50000300 	.word	0x50000300
 8007348:	20000004 	.word	0x20000004
 800734c:	053e2d63 	.word	0x053e2d63
 8007350:	c7520000 	.word	0xc7520000
 8007354:	50000500 	.word	0x50000500
 8007358:	cb840000 	.word	0xcb840000

0800735c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe ffaf 	bl	80062cc <LL_ADC_IsEnabled>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d14d      	bne.n	8007410 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	4b28      	ldr	r3, [pc, #160]	; (800741c <ADC_Enable+0xc0>)
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00d      	beq.n	800739e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	f043 0210 	orr.w	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e039      	b.n	8007412 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe ff7e 	bl	80062a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80073a8:	f7fe fd84 	bl	8005eb4 <HAL_GetTick>
 80073ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073ae:	e028      	b.n	8007402 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe ff89 	bl	80062cc <LL_ADC_IsEnabled>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe ff6d 	bl	80062a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073ca:	f7fe fd73 	bl	8005eb4 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d914      	bls.n	8007402 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d00d      	beq.n	8007402 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	f043 0210 	orr.w	r2, r3, #16
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e007      	b.n	8007412 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d1cf      	bne.n	80073b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	8000003f 	.word	0x8000003f

08007420 <LL_ADC_IsEnabled>:
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <LL_ADC_IsEnabled+0x18>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <LL_ADC_IsEnabled+0x1a>
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <LL_ADC_REG_IsConversionOngoing>:
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d101      	bne.n	800745e <LL_ADC_REG_IsConversionOngoing+0x18>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b0a1      	sub	sp, #132	; 0x84
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007486:	2302      	movs	r3, #2
 8007488:	e0e7      	b.n	800765a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007492:	2300      	movs	r3, #0
 8007494:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007496:	2300      	movs	r3, #0
 8007498:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a2:	d102      	bne.n	80074aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80074a4:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	e009      	b.n	80074be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6e      	ldr	r2, [pc, #440]	; (8007668 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d102      	bne.n	80074ba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80074b4:	4b6d      	ldr	r3, [pc, #436]	; (800766c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80074b6:	60bb      	str	r3, [r7, #8]
 80074b8:	e001      	b.n	80074be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c8:	f043 0220 	orr.w	r2, r3, #32
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0be      	b.n	800765a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff ffb1 	bl	8007446 <LL_ADC_REG_IsConversionOngoing>
 80074e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff ffab 	bl	8007446 <LL_ADC_REG_IsConversionOngoing>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f040 80a0 	bne.w	8007638 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80074f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 809c 	bne.w	8007638 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007508:	d004      	beq.n	8007514 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a55      	ldr	r2, [pc, #340]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007514:	4b56      	ldr	r3, [pc, #344]	; (8007670 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007516:	e000      	b.n	800751a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007518:	4b56      	ldr	r3, [pc, #344]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800751a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d04b      	beq.n	80075bc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007536:	035b      	lsls	r3, r3, #13
 8007538:	430b      	orrs	r3, r1
 800753a:	431a      	orrs	r2, r3
 800753c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007548:	d004      	beq.n	8007554 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a45      	ldr	r2, [pc, #276]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10f      	bne.n	8007574 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007554:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007558:	f7ff ff62 	bl	8007420 <LL_ADC_IsEnabled>
 800755c:	4604      	mov	r4, r0
 800755e:	4841      	ldr	r0, [pc, #260]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007560:	f7ff ff5e 	bl	8007420 <LL_ADC_IsEnabled>
 8007564:	4603      	mov	r3, r0
 8007566:	4323      	orrs	r3, r4
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e012      	b.n	800759a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007574:	483c      	ldr	r0, [pc, #240]	; (8007668 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007576:	f7ff ff53 	bl	8007420 <LL_ADC_IsEnabled>
 800757a:	4604      	mov	r4, r0
 800757c:	483b      	ldr	r0, [pc, #236]	; (800766c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800757e:	f7ff ff4f 	bl	8007420 <LL_ADC_IsEnabled>
 8007582:	4603      	mov	r3, r0
 8007584:	431c      	orrs	r4, r3
 8007586:	483c      	ldr	r0, [pc, #240]	; (8007678 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007588:	f7ff ff4a 	bl	8007420 <LL_ADC_IsEnabled>
 800758c:	4603      	mov	r3, r0
 800758e:	4323      	orrs	r3, r4
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d056      	beq.n	800764c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800759e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80075a6:	f023 030f 	bic.w	r3, r3, #15
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	6892      	ldr	r2, [r2, #8]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	431a      	orrs	r2, r3
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075ba:	e047      	b.n	800764c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80075bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d0:	d004      	beq.n	80075dc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a23      	ldr	r2, [pc, #140]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10f      	bne.n	80075fc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80075dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80075e0:	f7ff ff1e 	bl	8007420 <LL_ADC_IsEnabled>
 80075e4:	4604      	mov	r4, r0
 80075e6:	481f      	ldr	r0, [pc, #124]	; (8007664 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075e8:	f7ff ff1a 	bl	8007420 <LL_ADC_IsEnabled>
 80075ec:	4603      	mov	r3, r0
 80075ee:	4323      	orrs	r3, r4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bf0c      	ite	eq
 80075f4:	2301      	moveq	r3, #1
 80075f6:	2300      	movne	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e012      	b.n	8007622 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80075fc:	481a      	ldr	r0, [pc, #104]	; (8007668 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075fe:	f7ff ff0f 	bl	8007420 <LL_ADC_IsEnabled>
 8007602:	4604      	mov	r4, r0
 8007604:	4819      	ldr	r0, [pc, #100]	; (800766c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007606:	f7ff ff0b 	bl	8007420 <LL_ADC_IsEnabled>
 800760a:	4603      	mov	r3, r0
 800760c:	431c      	orrs	r4, r3
 800760e:	481a      	ldr	r0, [pc, #104]	; (8007678 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007610:	f7ff ff06 	bl	8007420 <LL_ADC_IsEnabled>
 8007614:	4603      	mov	r3, r0
 8007616:	4323      	orrs	r3, r4
 8007618:	2b00      	cmp	r3, #0
 800761a:	bf0c      	ite	eq
 800761c:	2301      	moveq	r3, #1
 800761e:	2300      	movne	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d012      	beq.n	800764c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800762e:	f023 030f 	bic.w	r3, r3, #15
 8007632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007634:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007636:	e009      	b.n	800764c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763c:	f043 0220 	orr.w	r2, r3, #32
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800764a:	e000      	b.n	800764e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800764c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800765a:	4618      	mov	r0, r3
 800765c:	3784      	adds	r7, #132	; 0x84
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	bf00      	nop
 8007664:	50000100 	.word	0x50000100
 8007668:	50000400 	.word	0x50000400
 800766c:	50000500 	.word	0x50000500
 8007670:	50000300 	.word	0x50000300
 8007674:	50000700 	.word	0x50000700
 8007678:	50000600 	.word	0x50000600

0800767c <__NVIC_SetPriorityGrouping>:
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800768c:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <__NVIC_SetPriorityGrouping+0x44>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007698:	4013      	ands	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076ae:	4a04      	ldr	r2, [pc, #16]	; (80076c0 <__NVIC_SetPriorityGrouping+0x44>)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	60d3      	str	r3, [r2, #12]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <__NVIC_GetPriorityGrouping>:
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <__NVIC_GetPriorityGrouping+0x18>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 0307 	and.w	r3, r3, #7
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <__NVIC_EnableIRQ>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	db0b      	blt.n	800770a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	f003 021f 	and.w	r2, r3, #31
 80076f8:	4907      	ldr	r1, [pc, #28]	; (8007718 <__NVIC_EnableIRQ+0x38>)
 80076fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	2001      	movs	r0, #1
 8007702:	fa00 f202 	lsl.w	r2, r0, r2
 8007706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000e100 	.word	0xe000e100

0800771c <__NVIC_SetPriority>:
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db0a      	blt.n	8007746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	490c      	ldr	r1, [pc, #48]	; (8007768 <__NVIC_SetPriority+0x4c>)
 8007736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773a:	0112      	lsls	r2, r2, #4
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	440b      	add	r3, r1
 8007740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007744:	e00a      	b.n	800775c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4908      	ldr	r1, [pc, #32]	; (800776c <__NVIC_SetPriority+0x50>)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	3b04      	subs	r3, #4
 8007754:	0112      	lsls	r2, r2, #4
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	440b      	add	r3, r1
 800775a:	761a      	strb	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	e000e100 	.word	0xe000e100
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	; 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	2b04      	cmp	r3, #4
 800778c:	bf28      	it	cs
 800778e:	2304      	movcs	r3, #4
 8007790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3304      	adds	r3, #4
 8007796:	2b06      	cmp	r3, #6
 8007798:	d902      	bls.n	80077a0 <NVIC_EncodePriority+0x30>
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3b03      	subs	r3, #3
 800779e:	e000      	b.n	80077a2 <NVIC_EncodePriority+0x32>
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43da      	mvns	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	401a      	ands	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077b8:	f04f 31ff 	mov.w	r1, #4294967295
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	43d9      	mvns	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c8:	4313      	orrs	r3, r2
         );
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3724      	adds	r7, #36	; 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077e8:	d301      	bcc.n	80077ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077ea:	2301      	movs	r3, #1
 80077ec:	e00f      	b.n	800780e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077ee:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <SysTick_Config+0x40>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077f6:	210f      	movs	r1, #15
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	f7ff ff8e 	bl	800771c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <SysTick_Config+0x40>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007806:	4b04      	ldr	r3, [pc, #16]	; (8007818 <SysTick_Config+0x40>)
 8007808:	2207      	movs	r2, #7
 800780a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e000e010 	.word	0xe000e010

0800781c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff29 	bl	800767c <__NVIC_SetPriorityGrouping>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	4603      	mov	r3, r0
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007840:	f7ff ff40 	bl	80076c4 <__NVIC_GetPriorityGrouping>
 8007844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	6978      	ldr	r0, [r7, #20]
 800784c:	f7ff ff90 	bl	8007770 <NVIC_EncodePriority>
 8007850:	4602      	mov	r2, r0
 8007852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ff5f 	bl	800771c <__NVIC_SetPriority>
}
 800785e:	bf00      	nop
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	4603      	mov	r3, r0
 800786e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff33 	bl	80076e0 <__NVIC_EnableIRQ>
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff ffa4 	bl	80077d8 <SysTick_Config>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d005      	beq.n	80078be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e037      	b.n	800792e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 020e 	bic.w	r2, r2, #14
 80078cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	f003 021f 	and.w	r2, r3, #31
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2101      	movs	r1, #1
 80078fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007900:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800790a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00c      	beq.n	800792e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007922:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800792c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d00d      	beq.n	8007980 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2204      	movs	r2, #4
 8007968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	e047      	b.n	8007a10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 020e 	bic.w	r2, r2, #14
 800798e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	f003 021f 	and.w	r2, r3, #31
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	2101      	movs	r1, #1
 80079be:	fa01 f202 	lsl.w	r2, r1, r2
 80079c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00c      	beq.n	80079f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
    }
  }
  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e147      	b.n	8007cbe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fa fc5c 	bl	8002300 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0210 	bic.w	r2, r2, #16
 8007a56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a58:	f7fe fa2c 	bl	8005eb4 <HAL_GetTick>
 8007a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a5e:	e012      	b.n	8007a86 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a60:	f7fe fa28 	bl	8005eb4 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	d90b      	bls.n	8007a86 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a72:	f043 0201 	orr.w	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e11b      	b.n	8007cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d0e5      	beq.n	8007a60 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa4:	f7fe fa06 	bl	8005eb4 <HAL_GetTick>
 8007aa8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aaa:	e012      	b.n	8007ad2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007aac:	f7fe fa02 	bl	8005eb4 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b0a      	cmp	r3, #10
 8007ab8:	d90b      	bls.n	8007ad2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abe:	f043 0201 	orr.w	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2203      	movs	r2, #3
 8007aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0f5      	b.n	8007cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0e5      	beq.n	8007aac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0202 	orr.w	r2, r2, #2
 8007aee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a74      	ldr	r2, [pc, #464]	; (8007cc8 <HAL_FDCAN_Init+0x2ac>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d103      	bne.n	8007b02 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007afa:	4a74      	ldr	r2, [pc, #464]	; (8007ccc <HAL_FDCAN_Init+0x2b0>)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7c1b      	ldrb	r3, [r3, #16]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d108      	bne.n	8007b1c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b18:	619a      	str	r2, [r3, #24]
 8007b1a:	e007      	b.n	8007b2c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c5b      	ldrb	r3, [r3, #17]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d108      	bne.n	8007b46 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b42:	619a      	str	r2, [r3, #24]
 8007b44:	e007      	b.n	8007b56 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b54:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7c9b      	ldrb	r3, [r3, #18]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d108      	bne.n	8007b70 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b6c:	619a      	str	r2, [r3, #24]
 8007b6e:	e007      	b.n	8007b80 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007ba4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0210 	bic.w	r2, r2, #16
 8007bb4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d108      	bne.n	8007bd0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0204 	orr.w	r2, r2, #4
 8007bcc:	619a      	str	r2, [r3, #24]
 8007bce:	e02c      	b.n	8007c2a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d028      	beq.n	8007c2a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d01c      	beq.n	8007c1a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0210 	orr.w	r2, r2, #16
 8007bfe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d110      	bne.n	8007c2a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0220 	orr.w	r2, r2, #32
 8007c16:	619a      	str	r2, [r3, #24]
 8007c18:	e007      	b.n	8007c2a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0220 	orr.w	r2, r2, #32
 8007c28:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c3a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c42:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c52:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c54:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5e:	d115      	bne.n	8007c8c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c6e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	3b01      	subs	r3, #1
 8007c76:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c78:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	3b01      	subs	r3, #1
 8007c82:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c88:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c8a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fc36 	bl	8008514 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40006400 	.word	0x40006400
 8007ccc:	40006500 	.word	0x40006500

08007cd0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ce0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <HAL_FDCAN_ConfigFilter+0x1e>
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d13d      	bne.n	8007d6a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d119      	bne.n	8007d2a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d02:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007d0a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e01d      	b.n	8007d66 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	075a      	lsls	r2, r3, #29
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	079a      	lsls	r2, r3, #30
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4413      	add	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e006      	b.n	8007d78 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6e:	f043 0202 	orr.w	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
  }
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d116      	bne.n	8007dcc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007da6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	011a      	lsls	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	431a      	orrs	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	431a      	orrs	r2, r3
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e006      	b.n	8007dda <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd0:	f043 0204 	orr.w	r2, r3, #4
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
  }
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d110      	bne.n	8007e1c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e006      	b.n	8007e2a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e20:	f043 0204 	orr.w	r2, r3, #4
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b08b      	sub	sp, #44	; 0x2c
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e4c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e4e:	7efb      	ldrb	r3, [r7, #27]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	f040 80bc 	bne.w	8007fce <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b40      	cmp	r3, #64	; 0x40
 8007e5a:	d121      	bne.n	8007ea0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0af      	b.n	8007fdc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9e:	e020      	b.n	8007ee2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e08d      	b.n	8007fdc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	4413      	add	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	440b      	add	r3, r1
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	0c9b      	lsrs	r3, r3, #18
 8007efc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e005      	b.n	8007f12 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	0e1b      	lsrs	r3, r3, #24
 8007f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	0fda      	lsrs	r2, r3, #31
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	3304      	adds	r3, #4
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f80:	2300      	movs	r3, #0
 8007f82:	623b      	str	r3, [r7, #32]
 8007f84:	e00a      	b.n	8007f9c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	440b      	add	r3, r1
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	623b      	str	r3, [r7, #32]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	0c1b      	lsrs	r3, r3, #16
 8007fa2:	4a11      	ldr	r2, [pc, #68]	; (8007fe8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007fa4:	5cd3      	ldrb	r3, [r2, r3]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d3eb      	bcc.n	8007f86 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d105      	bne.n	8007fc0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007fbe:	e004      	b.n	8007fca <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e006      	b.n	8007fdc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	f043 0208 	orr.w	r2, r3, #8
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
  }
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	372c      	adds	r7, #44	; 0x2c
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	08013390 	.word	0x08013390

08007fec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ffe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d003      	beq.n	800800e <HAL_FDCAN_ActivateNotification+0x22>
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b02      	cmp	r3, #2
 800800a:	f040 80c8 	bne.w	800819e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008014:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d03b      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d031      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d027      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f003 0308 	and.w	r3, r3, #8
 8008062:	2b00      	cmp	r3, #0
 8008064:	d01d      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b00      	cmp	r3, #0
 8008078:	d013      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	d009      	beq.n	80080a2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d107      	bne.n	80080b2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d13b      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d131      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d127      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d11d      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d113      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00c      	beq.n	800814e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0202 	orr.w	r2, r2, #2
 800814c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	430a      	orrs	r2, r1
 8008168:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	430a      	orrs	r2, r1
 8008186:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	430a      	orrs	r2, r1
 8008198:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	e006      	b.n	80081ac <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	f043 0202 	orr.w	r2, r3, #2
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d4:	4013      	ands	r3, r2
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	4013      	ands	r3, r2
 80081ee:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081fa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	4013      	ands	r3, r2
 8008206:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8008212:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	4013      	ands	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800822a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4013      	ands	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d006      	beq.n	8008262 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2240      	movs	r2, #64	; 0x40
 800825a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f939 	bl	80084d4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d014      	beq.n	80082a8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008286:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4013      	ands	r3, r2
 8008294:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800829e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8f7 	bl	8008496 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80082b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8b6 	bl	800842a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a3a      	ldr	r2, [r7, #32]
 80082ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80082cc:	6a39      	ldr	r1, [r7, #32]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8b6 	bl	8008440 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80082e2:	69f9      	ldr	r1, [r7, #28]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f8b6 	bl	8008456 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00e      	beq.n	8008316 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8ab 	bl	800846c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01a      	beq.n	800835a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d013      	beq.n	800835a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800833a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4013      	ands	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2280      	movs	r2, #128	; 0x80
 8008350:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f893 	bl	8008480 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00e      	beq.n	8008386 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800837e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f893 	bl	80084ac <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00e      	beq.n	80083b2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80083aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f887 	bl	80084c0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d011      	beq.n	80083e4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80083f2:	6979      	ldr	r1, [r7, #20]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f881 	bl	80084fc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f863 	bl	80084e8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008422:	bf00      	nop
 8008424:	3728      	adds	r7, #40	; 0x28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800851c:	4b30      	ldr	r3, [pc, #192]	; (80085e0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800851e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2f      	ldr	r2, [pc, #188]	; (80085e4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d103      	bne.n	8008532 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008530:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d103      	bne.n	8008544 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008542:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008552:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	041a      	lsls	r2, r3, #16
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008578:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	061a      	lsls	r2, r3, #24
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e005      	b.n	80085c6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3304      	adds	r3, #4
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d3f3      	bcc.n	80085ba <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	4000a400 	.word	0x4000a400
 80085e4:	40006800 	.word	0x40006800
 80085e8:	40006c00 	.word	0x40006c00

080085ec <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80085fe:	4b24      	ldr	r3, [pc, #144]	; (8008690 <HAL_FLASH_Program+0xa4>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_FLASH_Program+0x1e>
 8008606:	2302      	movs	r3, #2
 8008608:	e03e      	b.n	8008688 <HAL_FLASH_Program+0x9c>
 800860a:	4b21      	ldr	r3, [pc, #132]	; (8008690 <HAL_FLASH_Program+0xa4>)
 800860c:	2201      	movs	r2, #1
 800860e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008614:	f000 f8be 	bl	8008794 <FLASH_WaitForLastOperation>
 8008618:	4603      	mov	r3, r0
 800861a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12e      	bne.n	8008680 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <HAL_FLASH_Program+0xa4>)
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d107      	bne.n	800863e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	68b8      	ldr	r0, [r7, #8]
 8008634:	f000 f902 	bl	800883c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008638:	2301      	movs	r3, #1
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	e010      	b.n	8008660 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d002      	beq.n	800864a <HAL_FLASH_Program+0x5e>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d10a      	bne.n	8008660 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	4619      	mov	r1, r3
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f000 f91a 	bl	8008888 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d102      	bne.n	8008660 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800865a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800865e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008664:	f000 f896 	bl	8008794 <FLASH_WaitForLastOperation>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <HAL_FLASH_Program+0xa8>)
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	43db      	mvns	r3, r3
 800867a:	4906      	ldr	r1, [pc, #24]	; (8008694 <HAL_FLASH_Program+0xa8>)
 800867c:	4013      	ands	r3, r2
 800867e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <HAL_FLASH_Program+0xa4>)
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000010 	.word	0x20000010
 8008694:	40022000 	.word	0x40022000

08008698 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <HAL_FLASH_Unlock+0x38>)
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da0b      	bge.n	80086c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <HAL_FLASH_Unlock+0x38>)
 80086ac:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <HAL_FLASH_Unlock+0x3c>)
 80086ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <HAL_FLASH_Unlock+0x38>)
 80086b2:	4a09      	ldr	r2, [pc, #36]	; (80086d8 <HAL_FLASH_Unlock+0x40>)
 80086b4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086b6:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <HAL_FLASH_Unlock+0x38>)
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da01      	bge.n	80086c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80086c2:	79fb      	ldrb	r3, [r7, #7]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	40022000 	.word	0x40022000
 80086d4:	45670123 	.word	0x45670123
 80086d8:	cdef89ab 	.word	0xcdef89ab

080086dc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <HAL_FLASH_Lock+0x30>)
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	4a08      	ldr	r2, [pc, #32]	; (800870c <HAL_FLASH_Lock+0x30>)
 80086ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086f0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <HAL_FLASH_Lock+0x30>)
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da01      	bge.n	80086fe <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80086fe:	79fb      	ldrb	r3, [r7, #7]
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	40022000 	.word	0x40022000

08008710 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <HAL_FLASH_OB_Unlock+0x40>)
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00d      	beq.n	8008742 <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8008726:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <HAL_FLASH_OB_Unlock+0x40>)
 8008728:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <HAL_FLASH_OB_Unlock+0x44>)
 800872a:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <HAL_FLASH_OB_Unlock+0x40>)
 800872e:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <HAL_FLASH_OB_Unlock+0x48>)
 8008730:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <HAL_FLASH_OB_Unlock+0x40>)
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008742:	79fb      	ldrb	r3, [r7, #7]
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	40022000 	.word	0x40022000
 8008754:	08192a3b 	.word	0x08192a3b
 8008758:	4c5d6e7f 	.word	0x4c5d6e7f

0800875c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <HAL_FLASH_OB_Lock+0x34>)
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	4a09      	ldr	r2, [pc, #36]	; (8008790 <HAL_FLASH_OB_Lock+0x34>)
 800876c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008770:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <HAL_FLASH_OB_Lock+0x34>)
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008782:	79fb      	ldrb	r3, [r7, #7]
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	40022000 	.word	0x40022000

08008794 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800879c:	f7fd fb8a 	bl	8005eb4 <HAL_GetTick>
 80087a0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80087a2:	e009      	b.n	80087b8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80087a4:	f7fd fb86 	bl	8005eb4 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d201      	bcs.n	80087b8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e038      	b.n	800882a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80087b8:	4b1e      	ldr	r3, [pc, #120]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c4:	d0ee      	beq.n	80087a4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80087c6:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80087ce:	4013      	ands	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80087d8:	4b17      	ldr	r3, [pc, #92]	; (8008838 <FLASH_WaitForLastOperation+0xa4>)
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4313      	orrs	r3, r2
 80087e0:	4a15      	ldr	r2, [pc, #84]	; (8008838 <FLASH_WaitForLastOperation+0xa4>)
 80087e2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <FLASH_WaitForLastOperation+0x6a>
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087f8:	490e      	ldr	r1, [pc, #56]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	618b      	str	r3, [r1, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <FLASH_WaitForLastOperation+0x7e>
 8008808:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008810:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e009      	b.n	800882a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b01      	cmp	r3, #1
 8008820:	d102      	bne.n	8008828 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008822:	4b04      	ldr	r3, [pc, #16]	; (8008834 <FLASH_WaitForLastOperation+0xa0>)
 8008824:	2201      	movs	r2, #1
 8008826:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40022000 	.word	0x40022000
 8008838:	20000010 	.word	0x20000010

0800883c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008848:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <FLASH_Program_DoubleWord+0x48>)
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	4a0d      	ldr	r2, [pc, #52]	; (8008884 <FLASH_Program_DoubleWord+0x48>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800885a:	f3bf 8f6f 	isb	sy
}
 800885e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	000a      	movs	r2, r1
 800886e:	2300      	movs	r3, #0
 8008870:	68f9      	ldr	r1, [r7, #12]
 8008872:	3104      	adds	r1, #4
 8008874:	4613      	mov	r3, r2
 8008876:	600b      	str	r3, [r1, #0]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	40022000 	.word	0x40022000

08008888 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008888:	b480      	push	{r7}
 800888a:	b089      	sub	sp, #36	; 0x24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800889e:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <FLASH_Program_Fast+0x68>)
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <FLASH_Program_Fast+0x68>)
 80088a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088aa:	f3ef 8310 	mrs	r3, PRIMASK
 80088ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80088b0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80088b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80088b4:	b672      	cpsid	i
}
 80088b6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	3304      	adds	r3, #4
 80088c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	3304      	adds	r3, #4
 80088ca:	617b      	str	r3, [r7, #20]
    row_index--;
 80088cc:	7ffb      	ldrb	r3, [r7, #31]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80088d2:	7ffb      	ldrb	r3, [r7, #31]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1ef      	bne.n	80088b8 <FLASH_Program_Fast+0x30>
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f383 8810 	msr	PRIMASK, r3
}
 80088e2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80088e4:	bf00      	nop
 80088e6:	3724      	adds	r7, #36	; 0x24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	40022000 	.word	0x40022000

080088f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088fe:	4b4c      	ldr	r3, [pc, #304]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_FLASHEx_Erase+0x16>
 8008906:	2302      	movs	r3, #2
 8008908:	e08d      	b.n	8008a26 <HAL_FLASHEx_Erase+0x132>
 800890a:	4b49      	ldr	r3, [pc, #292]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008914:	f7ff ff3e 	bl	8008794 <FLASH_WaitForLastOperation>
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d17d      	bne.n	8008a1e <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008922:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 8008924:	2200      	movs	r2, #0
 8008926:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008928:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008930:	2b00      	cmp	r3, #0
 8008932:	d019      	beq.n	8008968 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008934:	4b3f      	ldr	r3, [pc, #252]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a3e      	ldr	r2, [pc, #248]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 800893a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800893e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008940:	4b3c      	ldr	r3, [pc, #240]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800894c:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a38      	ldr	r2, [pc, #224]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 8008952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008956:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008958:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 800895a:	2203      	movs	r2, #3
 800895c:	771a      	strb	r2, [r3, #28]
 800895e:	e016      	b.n	800898e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008960:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 8008962:	2201      	movs	r2, #1
 8008964:	771a      	strb	r2, [r3, #28]
 8008966:	e012      	b.n	800898e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008968:	4b32      	ldr	r3, [pc, #200]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008970:	2b00      	cmp	r3, #0
 8008972:	d009      	beq.n	8008988 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008974:	4b2f      	ldr	r3, [pc, #188]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a2e      	ldr	r2, [pc, #184]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 800897a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800897e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008980:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 8008982:	2202      	movs	r2, #2
 8008984:	771a      	strb	r2, [r3, #28]
 8008986:	e002      	b.n	800898e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008988:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 800898a:	2200      	movs	r2, #0
 800898c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d113      	bne.n	80089be <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 f84c 	bl	8008a38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089a4:	f7ff fef6 	bl	8008794 <FLASH_WaitForLastOperation>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80089ac:	4b21      	ldr	r3, [pc, #132]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 80089b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089b6:	f023 0304 	bic.w	r3, r3, #4
 80089ba:	6153      	str	r3, [r2, #20]
 80089bc:	e02d      	b.n	8008a1a <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	f04f 32ff 	mov.w	r2, #4294967295
 80089c4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	60bb      	str	r3, [r7, #8]
 80089cc:	e01d      	b.n	8008a0a <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4619      	mov	r1, r3
 80089d4:	68b8      	ldr	r0, [r7, #8]
 80089d6:	f000 f867 	bl	8008aa8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089de:	f7ff fed9 	bl	8008794 <FLASH_WaitForLastOperation>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	4a12      	ldr	r2, [pc, #72]	; (8008a34 <HAL_FLASHEx_Erase+0x140>)
 80089ec:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80089f0:	f023 0302 	bic.w	r3, r3, #2
 80089f4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	601a      	str	r2, [r3, #0]
          break;
 8008a02:	e00a      	b.n	8008a1a <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d3d9      	bcc.n	80089ce <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008a1a:	f000 f889 	bl	8008b30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a1e:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <HAL_FLASHEx_Erase+0x13c>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]

  return status;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000010 	.word	0x20000010
 8008a34:	40022000 	.word	0x40022000

08008a38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8008a40:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d016      	beq.n	8008a7a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008a56:	4b13      	ldr	r3, [pc, #76]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	4a12      	ldr	r2, [pc, #72]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a5c:	f043 0304 	orr.w	r3, r3, #4
 8008a60:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00e      	beq.n	8008a8a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	4a0c      	ldr	r2, [pc, #48]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	6153      	str	r3, [r2, #20]
 8008a78:	e007      	b.n	8008a8a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a84:	f043 0304 	orr.w	r3, r3, #4
 8008a88:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	4a05      	ldr	r2, [pc, #20]	; (8008aa4 <FLASH_MassErase+0x6c>)
 8008a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a94:	6153      	str	r3, [r2, #20]
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40022000 	.word	0x40022000

08008aa8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8008ab2:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <FLASH_PageErase+0x84>)
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <FLASH_PageErase+0x84>)
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <FLASH_PageErase+0x84>)
 8008ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac8:	6153      	str	r3, [r2, #20]
 8008aca:	e011      	b.n	8008af0 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d006      	beq.n	8008ae4 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008ad6:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <FLASH_PageErase+0x84>)
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <FLASH_PageErase+0x84>)
 8008adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ae0:	6153      	str	r3, [r2, #20]
 8008ae2:	e005      	b.n	8008af0 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008ae4:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <FLASH_PageErase+0x84>)
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <FLASH_PageErase+0x84>)
 8008aea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aee:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008af0:	4b0e      	ldr	r3, [pc, #56]	; (8008b2c <FLASH_PageErase+0x84>)
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008b00:	490a      	ldr	r1, [pc, #40]	; (8008b2c <FLASH_PageErase+0x84>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008b06:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <FLASH_PageErase+0x84>)
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	4a08      	ldr	r2, [pc, #32]	; (8008b2c <FLASH_PageErase+0x84>)
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008b12:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <FLASH_PageErase+0x84>)
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	4a05      	ldr	r2, [pc, #20]	; (8008b2c <FLASH_PageErase+0x84>)
 8008b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1c:	6153      	str	r3, [r2, #20]
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40022000 	.word	0x40022000

08008b30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008b36:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <FLASH_FlushCaches+0x80>)
 8008b38:	7f1b      	ldrb	r3, [r3, #28]
 8008b3a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d002      	beq.n	8008b48 <FLASH_FlushCaches+0x18>
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d111      	bne.n	8008b6c <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b60:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b6a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d002      	beq.n	8008b78 <FLASH_FlushCaches+0x48>
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d111      	bne.n	8008b9c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008b78:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a0d      	ldr	r2, [pc, #52]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a07      	ldr	r2, [pc, #28]	; (8008bb4 <FLASH_FlushCaches+0x84>)
 8008b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b9a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <FLASH_FlushCaches+0x80>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	771a      	strb	r2, [r3, #28]
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000010 	.word	0x20000010
 8008bb4:	40022000 	.word	0x40022000

08008bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008bc6:	e15a      	b.n	8008e7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2101      	movs	r1, #1
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 814c 	beq.w	8008e78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d00b      	beq.n	8008c00 <HAL_GPIO_Init+0x48>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d007      	beq.n	8008c00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008bf4:	2b11      	cmp	r3, #17
 8008bf6:	d003      	beq.n	8008c00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b12      	cmp	r3, #18
 8008bfe:	d130      	bne.n	8008c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c10:	43db      	mvns	r3, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4013      	ands	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c36:	2201      	movs	r2, #1
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	43db      	mvns	r3, r3
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4013      	ands	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	f003 0201 	and.w	r2, r3, #1
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	2203      	movs	r2, #3
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43db      	mvns	r3, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4013      	ands	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d003      	beq.n	8008ca2 <HAL_GPIO_Init+0xea>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b12      	cmp	r3, #18
 8008ca0:	d123      	bne.n	8008cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	08da      	lsrs	r2, r3, #3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3208      	adds	r2, #8
 8008caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	220f      	movs	r2, #15
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691a      	ldr	r2, [r3, #16]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	08da      	lsrs	r2, r3, #3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3208      	adds	r2, #8
 8008ce4:	6939      	ldr	r1, [r7, #16]
 8008ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f003 0203 	and.w	r2, r3, #3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 80a6 	beq.w	8008e78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d2c:	4b5b      	ldr	r3, [pc, #364]	; (8008e9c <HAL_GPIO_Init+0x2e4>)
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d30:	4a5a      	ldr	r2, [pc, #360]	; (8008e9c <HAL_GPIO_Init+0x2e4>)
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	6613      	str	r3, [r2, #96]	; 0x60
 8008d38:	4b58      	ldr	r3, [pc, #352]	; (8008e9c <HAL_GPIO_Init+0x2e4>)
 8008d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d44:	4a56      	ldr	r2, [pc, #344]	; (8008ea0 <HAL_GPIO_Init+0x2e8>)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	089b      	lsrs	r3, r3, #2
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	220f      	movs	r2, #15
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	43db      	mvns	r3, r3
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4013      	ands	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008d6e:	d01f      	beq.n	8008db0 <HAL_GPIO_Init+0x1f8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a4c      	ldr	r2, [pc, #304]	; (8008ea4 <HAL_GPIO_Init+0x2ec>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d019      	beq.n	8008dac <HAL_GPIO_Init+0x1f4>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a4b      	ldr	r2, [pc, #300]	; (8008ea8 <HAL_GPIO_Init+0x2f0>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <HAL_GPIO_Init+0x1f0>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a4a      	ldr	r2, [pc, #296]	; (8008eac <HAL_GPIO_Init+0x2f4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00d      	beq.n	8008da4 <HAL_GPIO_Init+0x1ec>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a49      	ldr	r2, [pc, #292]	; (8008eb0 <HAL_GPIO_Init+0x2f8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <HAL_GPIO_Init+0x1e8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a48      	ldr	r2, [pc, #288]	; (8008eb4 <HAL_GPIO_Init+0x2fc>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <HAL_GPIO_Init+0x1e4>
 8008d98:	2305      	movs	r3, #5
 8008d9a:	e00a      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008d9c:	2306      	movs	r3, #6
 8008d9e:	e008      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008da0:	2304      	movs	r3, #4
 8008da2:	e006      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008da4:	2303      	movs	r3, #3
 8008da6:	e004      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e002      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <HAL_GPIO_Init+0x1fa>
 8008db0:	2300      	movs	r3, #0
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	f002 0203 	and.w	r2, r2, #3
 8008db8:	0092      	lsls	r2, r2, #2
 8008dba:	4093      	lsls	r3, r2
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dc2:	4937      	ldr	r1, [pc, #220]	; (8008ea0 <HAL_GPIO_Init+0x2e8>)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	3302      	adds	r3, #2
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008dd0:	4b39      	ldr	r3, [pc, #228]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008df4:	4a30      	ldr	r2, [pc, #192]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	43db      	mvns	r3, r3
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4013      	ands	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e1e:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4013      	ands	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e48:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	43db      	mvns	r3, r3
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e72:	4a11      	ldr	r2, [pc, #68]	; (8008eb8 <HAL_GPIO_Init+0x300>)
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f47f ae9d 	bne.w	8008bc8 <HAL_GPIO_Init+0x10>
  }
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	48000400 	.word	0x48000400
 8008ea8:	48000800 	.word	0x48000800
 8008eac:	48000c00 	.word	0x48000c00
 8008eb0:	48001000 	.word	0x48001000
 8008eb4:	48001400 	.word	0x48001400
 8008eb8:	40010400 	.word	0x40010400

08008ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ecc:	787b      	ldrb	r3, [r7, #1]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ed2:	887a      	ldrh	r2, [r7, #2]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ed8:	e002      	b.n	8008ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008eda:	887a      	ldrh	r2, [r7, #2]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d141      	bne.n	8008f7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008efa:	4b4b      	ldr	r3, [pc, #300]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f06:	d131      	bne.n	8008f6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f08:	4b47      	ldr	r3, [pc, #284]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f0e:	4a46      	ldr	r2, [pc, #280]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f18:	4b43      	ldr	r3, [pc, #268]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f20:	4a41      	ldr	r2, [pc, #260]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f28:	4b40      	ldr	r3, [pc, #256]	; (800902c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2232      	movs	r2, #50	; 0x32
 8008f2e:	fb02 f303 	mul.w	r3, r2, r3
 8008f32:	4a3f      	ldr	r2, [pc, #252]	; (8009030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f34:	fba2 2303 	umull	r2, r3, r2, r3
 8008f38:	0c9b      	lsrs	r3, r3, #18
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f3e:	e002      	b.n	8008f46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f46:	4b38      	ldr	r3, [pc, #224]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f52:	d102      	bne.n	8008f5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f2      	bne.n	8008f40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f5a:	4b33      	ldr	r3, [pc, #204]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f66:	d158      	bne.n	800901a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e057      	b.n	800901c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f6c:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	4a2d      	ldr	r2, [pc, #180]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f7c:	e04d      	b.n	800901a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f84:	d141      	bne.n	800900a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f86:	4b28      	ldr	r3, [pc, #160]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f92:	d131      	bne.n	8008ff8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f94:	4b24      	ldr	r3, [pc, #144]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9a:	4a23      	ldr	r2, [pc, #140]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fa4:	4b20      	ldr	r3, [pc, #128]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fac:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2232      	movs	r2, #50	; 0x32
 8008fba:	fb02 f303 	mul.w	r3, r2, r3
 8008fbe:	4a1c      	ldr	r2, [pc, #112]	; (8009030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc4:	0c9b      	lsrs	r3, r3, #18
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fca:	e002      	b.n	8008fd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fd2:	4b15      	ldr	r3, [pc, #84]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fde:	d102      	bne.n	8008fe6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f2      	bne.n	8008fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff2:	d112      	bne.n	800901a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e011      	b.n	800901c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ff8:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ffe:	4a0a      	ldr	r2, [pc, #40]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009008:	e007      	b.n	800901a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009012:	4a05      	ldr	r2, [pc, #20]	; (8009028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009018:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	40007000 	.word	0x40007000
 800902c:	20000004 	.word	0x20000004
 8009030:	431bde83 	.word	0x431bde83

08009034 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	4a04      	ldr	r2, [pc, #16]	; (8009050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800903e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009042:	6093      	str	r3, [r2, #8]
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40007000 	.word	0x40007000

08009054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e308      	b.n	8009678 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d075      	beq.n	800915e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009072:	4ba3      	ldr	r3, [pc, #652]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 030c 	and.w	r3, r3, #12
 800907a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800907c:	4ba0      	ldr	r3, [pc, #640]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d102      	bne.n	8009092 <HAL_RCC_OscConfig+0x3e>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d002      	beq.n	8009098 <HAL_RCC_OscConfig+0x44>
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d10b      	bne.n	80090b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009098:	4b99      	ldr	r3, [pc, #612]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d05b      	beq.n	800915c <HAL_RCC_OscConfig+0x108>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d157      	bne.n	800915c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e2e3      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b8:	d106      	bne.n	80090c8 <HAL_RCC_OscConfig+0x74>
 80090ba:	4b91      	ldr	r3, [pc, #580]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a90      	ldr	r2, [pc, #576]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	e01d      	b.n	8009104 <HAL_RCC_OscConfig+0xb0>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090d0:	d10c      	bne.n	80090ec <HAL_RCC_OscConfig+0x98>
 80090d2:	4b8b      	ldr	r3, [pc, #556]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a8a      	ldr	r2, [pc, #552]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4b88      	ldr	r3, [pc, #544]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a87      	ldr	r2, [pc, #540]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e00b      	b.n	8009104 <HAL_RCC_OscConfig+0xb0>
 80090ec:	4b84      	ldr	r3, [pc, #528]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a83      	ldr	r2, [pc, #524]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	4b81      	ldr	r3, [pc, #516]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a80      	ldr	r2, [pc, #512]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80090fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d013      	beq.n	8009134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fc fed2 	bl	8005eb4 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009114:	f7fc fece 	bl	8005eb4 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b64      	cmp	r3, #100	; 0x64
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e2a8      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009126:	4b76      	ldr	r3, [pc, #472]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f0      	beq.n	8009114 <HAL_RCC_OscConfig+0xc0>
 8009132:	e014      	b.n	800915e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009134:	f7fc febe 	bl	8005eb4 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800913a:	e008      	b.n	800914e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800913c:	f7fc feba 	bl	8005eb4 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	2b64      	cmp	r3, #100	; 0x64
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e294      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800914e:	4b6c      	ldr	r3, [pc, #432]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f0      	bne.n	800913c <HAL_RCC_OscConfig+0xe8>
 800915a:	e000      	b.n	800915e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800915c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d075      	beq.n	8009256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800916a:	4b65      	ldr	r3, [pc, #404]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 030c 	and.w	r3, r3, #12
 8009172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009174:	4b62      	ldr	r3, [pc, #392]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b0c      	cmp	r3, #12
 8009182:	d102      	bne.n	800918a <HAL_RCC_OscConfig+0x136>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d002      	beq.n	8009190 <HAL_RCC_OscConfig+0x13c>
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11f      	bne.n	80091d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009190:	4b5b      	ldr	r3, [pc, #364]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <HAL_RCC_OscConfig+0x154>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e267      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091a8:	4b55      	ldr	r3, [pc, #340]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	4952      	ldr	r1, [pc, #328]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091bc:	4b51      	ldr	r3, [pc, #324]	; (8009304 <HAL_RCC_OscConfig+0x2b0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fc fe2b 	bl	8005e1c <HAL_InitTick>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d043      	beq.n	8009254 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e253      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d023      	beq.n	8009220 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091d8:	4b49      	ldr	r3, [pc, #292]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a48      	ldr	r2, [pc, #288]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80091de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e4:	f7fc fe66 	bl	8005eb4 <HAL_GetTick>
 80091e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ec:	f7fc fe62 	bl	8005eb4 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e23c      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091fe:	4b40      	ldr	r3, [pc, #256]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f0      	beq.n	80091ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800920a:	4b3d      	ldr	r3, [pc, #244]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	061b      	lsls	r3, r3, #24
 8009218:	4939      	ldr	r1, [pc, #228]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800921a:	4313      	orrs	r3, r2
 800921c:	604b      	str	r3, [r1, #4]
 800921e:	e01a      	b.n	8009256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009220:	4b37      	ldr	r3, [pc, #220]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a36      	ldr	r2, [pc, #216]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800922a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800922c:	f7fc fe42 	bl	8005eb4 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009234:	f7fc fe3e 	bl	8005eb4 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e218      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009246:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <HAL_RCC_OscConfig+0x1e0>
 8009252:	e000      	b.n	8009256 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	2b00      	cmp	r3, #0
 8009260:	d03c      	beq.n	80092dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01c      	beq.n	80092a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800926a:	4b25      	ldr	r3, [pc, #148]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 800926c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009270:	4a23      	ldr	r2, [pc, #140]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927a:	f7fc fe1b 	bl	8005eb4 <HAL_GetTick>
 800927e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009280:	e008      	b.n	8009294 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009282:	f7fc fe17 	bl	8005eb4 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e1f1      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 8009296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0ef      	beq.n	8009282 <HAL_RCC_OscConfig+0x22e>
 80092a2:	e01b      	b.n	80092dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092a4:	4b16      	ldr	r3, [pc, #88]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80092a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092aa:	4a15      	ldr	r2, [pc, #84]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80092ac:	f023 0301 	bic.w	r3, r3, #1
 80092b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b4:	f7fc fdfe 	bl	8005eb4 <HAL_GetTick>
 80092b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092ba:	e008      	b.n	80092ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092bc:	f7fc fdfa 	bl	8005eb4 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e1d4      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80092d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1ef      	bne.n	80092bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80ab 	beq.w	8009440 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092ea:	2300      	movs	r3, #0
 80092ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <HAL_RCC_OscConfig+0x2ac>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <HAL_RCC_OscConfig+0x2b4>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e005      	b.n	800930a <HAL_RCC_OscConfig+0x2b6>
 80092fe:	bf00      	nop
 8009300:	40021000 	.word	0x40021000
 8009304:	20000008 	.word	0x20000008
 8009308:	2300      	movs	r3, #0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00d      	beq.n	800932a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800930e:	4baf      	ldr	r3, [pc, #700]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009312:	4aae      	ldr	r2, [pc, #696]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009318:	6593      	str	r3, [r2, #88]	; 0x58
 800931a:	4bac      	ldr	r3, [pc, #688]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009326:	2301      	movs	r3, #1
 8009328:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800932a:	4ba9      	ldr	r3, [pc, #676]	; (80095d0 <HAL_RCC_OscConfig+0x57c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	2b00      	cmp	r3, #0
 8009334:	d118      	bne.n	8009368 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009336:	4ba6      	ldr	r3, [pc, #664]	; (80095d0 <HAL_RCC_OscConfig+0x57c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4aa5      	ldr	r2, [pc, #660]	; (80095d0 <HAL_RCC_OscConfig+0x57c>)
 800933c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009342:	f7fc fdb7 	bl	8005eb4 <HAL_GetTick>
 8009346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009348:	e008      	b.n	800935c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800934a:	f7fc fdb3 	bl	8005eb4 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d901      	bls.n	800935c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e18d      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800935c:	4b9c      	ldr	r3, [pc, #624]	; (80095d0 <HAL_RCC_OscConfig+0x57c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0f0      	beq.n	800934a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d108      	bne.n	8009382 <HAL_RCC_OscConfig+0x32e>
 8009370:	4b96      	ldr	r3, [pc, #600]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	4a95      	ldr	r2, [pc, #596]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009380:	e024      	b.n	80093cc <HAL_RCC_OscConfig+0x378>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b05      	cmp	r3, #5
 8009388:	d110      	bne.n	80093ac <HAL_RCC_OscConfig+0x358>
 800938a:	4b90      	ldr	r3, [pc, #576]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009390:	4a8e      	ldr	r2, [pc, #568]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009392:	f043 0304 	orr.w	r3, r3, #4
 8009396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800939a:	4b8c      	ldr	r3, [pc, #560]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a0:	4a8a      	ldr	r2, [pc, #552]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093aa:	e00f      	b.n	80093cc <HAL_RCC_OscConfig+0x378>
 80093ac:	4b87      	ldr	r3, [pc, #540]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b2:	4a86      	ldr	r2, [pc, #536]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093bc:	4b83      	ldr	r3, [pc, #524]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c2:	4a82      	ldr	r2, [pc, #520]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093c4:	f023 0304 	bic.w	r3, r3, #4
 80093c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d016      	beq.n	8009402 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d4:	f7fc fd6e 	bl	8005eb4 <HAL_GetTick>
 80093d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093da:	e00a      	b.n	80093f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093dc:	f7fc fd6a 	bl	8005eb4 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e142      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093f2:	4b76      	ldr	r3, [pc, #472]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80093f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0ed      	beq.n	80093dc <HAL_RCC_OscConfig+0x388>
 8009400:	e015      	b.n	800942e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009402:	f7fc fd57 	bl	8005eb4 <HAL_GetTick>
 8009406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009408:	e00a      	b.n	8009420 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800940a:	f7fc fd53 	bl	8005eb4 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	f241 3288 	movw	r2, #5000	; 0x1388
 8009418:	4293      	cmp	r3, r2
 800941a:	d901      	bls.n	8009420 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e12b      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009420:	4b6a      	ldr	r3, [pc, #424]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1ed      	bne.n	800940a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800942e:	7ffb      	ldrb	r3, [r7, #31]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d105      	bne.n	8009440 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009434:	4b65      	ldr	r3, [pc, #404]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	4a64      	ldr	r2, [pc, #400]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800943a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800943e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d03c      	beq.n	80094c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01c      	beq.n	800948e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009454:	4b5d      	ldr	r3, [pc, #372]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800945a:	4a5c      	ldr	r2, [pc, #368]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009464:	f7fc fd26 	bl	8005eb4 <HAL_GetTick>
 8009468:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800946c:	f7fc fd22 	bl	8005eb4 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e0fc      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800947e:	4b53      	ldr	r3, [pc, #332]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0ef      	beq.n	800946c <HAL_RCC_OscConfig+0x418>
 800948c:	e01b      	b.n	80094c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800948e:	4b4f      	ldr	r3, [pc, #316]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009494:	4a4d      	ldr	r2, [pc, #308]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009496:	f023 0301 	bic.w	r3, r3, #1
 800949a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800949e:	f7fc fd09 	bl	8005eb4 <HAL_GetTick>
 80094a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094a4:	e008      	b.n	80094b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094a6:	f7fc fd05 	bl	8005eb4 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e0df      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094b8:	4b44      	ldr	r3, [pc, #272]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80094ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1ef      	bne.n	80094a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80d3 	beq.w	8009676 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094d0:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 030c 	and.w	r3, r3, #12
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	f000 808d 	beq.w	80095f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d15a      	bne.n	800959c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e6:	4b39      	ldr	r3, [pc, #228]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a38      	ldr	r2, [pc, #224]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80094ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f2:	f7fc fcdf 	bl	8005eb4 <HAL_GetTick>
 80094f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094f8:	e008      	b.n	800950c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094fa:	f7fc fcdb 	bl	8005eb4 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e0b5      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800950c:	4b2f      	ldr	r3, [pc, #188]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f0      	bne.n	80094fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009518:	4b2c      	ldr	r3, [pc, #176]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <HAL_RCC_OscConfig+0x580>)
 800951e:	4013      	ands	r3, r2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6a11      	ldr	r1, [r2, #32]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009528:	3a01      	subs	r2, #1
 800952a:	0112      	lsls	r2, r2, #4
 800952c:	4311      	orrs	r1, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009532:	0212      	lsls	r2, r2, #8
 8009534:	4311      	orrs	r1, r2
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800953a:	0852      	lsrs	r2, r2, #1
 800953c:	3a01      	subs	r2, #1
 800953e:	0552      	lsls	r2, r2, #21
 8009540:	4311      	orrs	r1, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009546:	0852      	lsrs	r2, r2, #1
 8009548:	3a01      	subs	r2, #1
 800954a:	0652      	lsls	r2, r2, #25
 800954c:	4311      	orrs	r1, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009552:	06d2      	lsls	r2, r2, #27
 8009554:	430a      	orrs	r2, r1
 8009556:	491d      	ldr	r1, [pc, #116]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009558:	4313      	orrs	r3, r2
 800955a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800955c:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009566:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009568:	4b18      	ldr	r3, [pc, #96]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4a17      	ldr	r2, [pc, #92]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800956e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009574:	f7fc fc9e 	bl	8005eb4 <HAL_GetTick>
 8009578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800957a:	e008      	b.n	800958e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800957c:	f7fc fc9a 	bl	8005eb4 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d901      	bls.n	800958e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e074      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f0      	beq.n	800957c <HAL_RCC_OscConfig+0x528>
 800959a:	e06c      	b.n	8009676 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800959c:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80095a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095a8:	4b08      	ldr	r3, [pc, #32]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4a07      	ldr	r2, [pc, #28]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095b4:	4b05      	ldr	r3, [pc, #20]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	4a04      	ldr	r2, [pc, #16]	; (80095cc <HAL_RCC_OscConfig+0x578>)
 80095ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c4:	f7fc fc76 	bl	8005eb4 <HAL_GetTick>
 80095c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095ca:	e00e      	b.n	80095ea <HAL_RCC_OscConfig+0x596>
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40007000 	.word	0x40007000
 80095d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095d8:	f7fc fc6c 	bl	8005eb4 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e046      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095ea:	4b25      	ldr	r3, [pc, #148]	; (8009680 <HAL_RCC_OscConfig+0x62c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x584>
 80095f6:	e03e      	b.n	8009676 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d101      	bne.n	8009604 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e039      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009604:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <HAL_RCC_OscConfig+0x62c>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f003 0203 	and.w	r2, r3, #3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	429a      	cmp	r2, r3
 8009616:	d12c      	bne.n	8009672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	3b01      	subs	r3, #1
 8009624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009626:	429a      	cmp	r2, r3
 8009628:	d123      	bne.n	8009672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d11b      	bne.n	8009672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009646:	429a      	cmp	r2, r3
 8009648:	d113      	bne.n	8009672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	3b01      	subs	r3, #1
 8009658:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800965a:	429a      	cmp	r2, r3
 800965c:	d109      	bne.n	8009672 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009668:	085b      	lsrs	r3, r3, #1
 800966a:	3b01      	subs	r3, #1
 800966c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800966e:	429a      	cmp	r2, r3
 8009670:	d001      	beq.n	8009676 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3720      	adds	r7, #32
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40021000 	.word	0x40021000

08009684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e11e      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800969c:	4b91      	ldr	r3, [pc, #580]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d910      	bls.n	80096cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096aa:	4b8e      	ldr	r3, [pc, #568]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f023 020f 	bic.w	r2, r3, #15
 80096b2:	498c      	ldr	r1, [pc, #560]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ba:	4b8a      	ldr	r3, [pc, #552]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 030f 	and.w	r3, r3, #15
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d001      	beq.n	80096cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e106      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d073      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d129      	bne.n	8009734 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096e0:	4b81      	ldr	r3, [pc, #516]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e0f4      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80096f0:	f000 f99e 	bl	8009a30 <RCC_GetSysClockFreqFromPLLSource>
 80096f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4a7c      	ldr	r2, [pc, #496]	; (80098ec <HAL_RCC_ClockConfig+0x268>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d93f      	bls.n	800977e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096fe:	4b7a      	ldr	r3, [pc, #488]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009712:	2b00      	cmp	r3, #0
 8009714:	d033      	beq.n	800977e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800971a:	2b00      	cmp	r3, #0
 800971c:	d12f      	bne.n	800977e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800971e:	4b72      	ldr	r3, [pc, #456]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009726:	4a70      	ldr	r2, [pc, #448]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	e024      	b.n	800977e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d107      	bne.n	800974c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800973c:	4b6a      	ldr	r3, [pc, #424]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d109      	bne.n	800975c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0c6      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800974c:	4b66      	ldr	r3, [pc, #408]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e0be      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800975c:	f000 f8ce 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 8009760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4a61      	ldr	r2, [pc, #388]	; (80098ec <HAL_RCC_ClockConfig+0x268>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d909      	bls.n	800977e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800976a:	4b5f      	ldr	r3, [pc, #380]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009772:	4a5d      	ldr	r2, [pc, #372]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009778:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800977a:	2380      	movs	r3, #128	; 0x80
 800977c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800977e:	4b5a      	ldr	r3, [pc, #360]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f023 0203 	bic.w	r2, r3, #3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	4957      	ldr	r1, [pc, #348]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800978c:	4313      	orrs	r3, r2
 800978e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009790:	f7fc fb90 	bl	8005eb4 <HAL_GetTick>
 8009794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009796:	e00a      	b.n	80097ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009798:	f7fc fb8c 	bl	8005eb4 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e095      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ae:	4b4e      	ldr	r3, [pc, #312]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f003 020c 	and.w	r2, r3, #12
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	429a      	cmp	r2, r3
 80097be:	d1eb      	bne.n	8009798 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d023      	beq.n	8009814 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097d8:	4b43      	ldr	r3, [pc, #268]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	4a42      	ldr	r2, [pc, #264]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80097de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d007      	beq.n	8009800 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80097f0:	4b3d      	ldr	r3, [pc, #244]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80097f8:	4a3b      	ldr	r2, [pc, #236]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80097fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009800:	4b39      	ldr	r3, [pc, #228]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	4936      	ldr	r1, [pc, #216]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800980e:	4313      	orrs	r3, r2
 8009810:	608b      	str	r3, [r1, #8]
 8009812:	e008      	b.n	8009826 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b80      	cmp	r3, #128	; 0x80
 8009818:	d105      	bne.n	8009826 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800981a:	4b33      	ldr	r3, [pc, #204]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	4a32      	ldr	r2, [pc, #200]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 8009820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009824:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009826:	4b2f      	ldr	r3, [pc, #188]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d21d      	bcs.n	8009870 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009834:	4b2b      	ldr	r3, [pc, #172]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f023 020f 	bic.w	r2, r3, #15
 800983c:	4929      	ldr	r1, [pc, #164]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	4313      	orrs	r3, r2
 8009842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009844:	f7fc fb36 	bl	8005eb4 <HAL_GetTick>
 8009848:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800984a:	e00a      	b.n	8009862 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800984c:	f7fc fb32 	bl	8005eb4 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	f241 3288 	movw	r2, #5000	; 0x1388
 800985a:	4293      	cmp	r3, r2
 800985c:	d901      	bls.n	8009862 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e03b      	b.n	80098da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009862:	4b20      	ldr	r3, [pc, #128]	; (80098e4 <HAL_RCC_ClockConfig+0x260>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d1ed      	bne.n	800984c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d008      	beq.n	800988e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800987c:	4b1a      	ldr	r3, [pc, #104]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4917      	ldr	r1, [pc, #92]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800988a:	4313      	orrs	r3, r2
 800988c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	490f      	ldr	r1, [pc, #60]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098ae:	f000 f825 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <HAL_RCC_ClockConfig+0x264>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	091b      	lsrs	r3, r3, #4
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	490c      	ldr	r1, [pc, #48]	; (80098f0 <HAL_RCC_ClockConfig+0x26c>)
 80098c0:	5ccb      	ldrb	r3, [r1, r3]
 80098c2:	f003 031f 	and.w	r3, r3, #31
 80098c6:	fa22 f303 	lsr.w	r3, r2, r3
 80098ca:	4a0a      	ldr	r2, [pc, #40]	; (80098f4 <HAL_RCC_ClockConfig+0x270>)
 80098cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RCC_ClockConfig+0x274>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fc faa2 	bl	8005e1c <HAL_InitTick>
 80098d8:	4603      	mov	r3, r0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40022000 	.word	0x40022000
 80098e8:	40021000 	.word	0x40021000
 80098ec:	04c4b400 	.word	0x04c4b400
 80098f0:	08013378 	.word	0x08013378
 80098f4:	20000004 	.word	0x20000004
 80098f8:	20000008 	.word	0x20000008

080098fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009902:	4b2c      	ldr	r3, [pc, #176]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f003 030c 	and.w	r3, r3, #12
 800990a:	2b04      	cmp	r3, #4
 800990c:	d102      	bne.n	8009914 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800990e:	4b2a      	ldr	r3, [pc, #168]	; (80099b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	e047      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009914:	4b27      	ldr	r3, [pc, #156]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 030c 	and.w	r3, r3, #12
 800991c:	2b08      	cmp	r3, #8
 800991e:	d102      	bne.n	8009926 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009920:	4b26      	ldr	r3, [pc, #152]	; (80099bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	e03e      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009926:	4b23      	ldr	r3, [pc, #140]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	2b0c      	cmp	r3, #12
 8009930:	d136      	bne.n	80099a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009932:	4b20      	ldr	r3, [pc, #128]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800993c:	4b1d      	ldr	r3, [pc, #116]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	091b      	lsrs	r3, r3, #4
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	3301      	adds	r3, #1
 8009948:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d10c      	bne.n	800996a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009950:	4a1a      	ldr	r2, [pc, #104]	; (80099bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	4a16      	ldr	r2, [pc, #88]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800995a:	68d2      	ldr	r2, [r2, #12]
 800995c:	0a12      	lsrs	r2, r2, #8
 800995e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009962:	fb02 f303 	mul.w	r3, r2, r3
 8009966:	617b      	str	r3, [r7, #20]
      break;
 8009968:	e00c      	b.n	8009984 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800996a:	4a13      	ldr	r2, [pc, #76]	; (80099b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	4a10      	ldr	r2, [pc, #64]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009974:	68d2      	ldr	r2, [r2, #12]
 8009976:	0a12      	lsrs	r2, r2, #8
 8009978:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800997c:	fb02 f303 	mul.w	r3, r2, r3
 8009980:	617b      	str	r3, [r7, #20]
      break;
 8009982:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009984:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	0e5b      	lsrs	r3, r3, #25
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	3301      	adds	r3, #1
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	fbb2 f3f3 	udiv	r3, r2, r3
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	e001      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80099a4:	693b      	ldr	r3, [r7, #16]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	40021000 	.word	0x40021000
 80099b8:	00f42400 	.word	0x00f42400
 80099bc:	007a1200 	.word	0x007a1200

080099c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099c4:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80099c6:	681b      	ldr	r3, [r3, #0]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000004 	.word	0x20000004

080099d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099dc:	f7ff fff0 	bl	80099c0 <HAL_RCC_GetHCLKFreq>
 80099e0:	4602      	mov	r2, r0
 80099e2:	4b06      	ldr	r3, [pc, #24]	; (80099fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	0a1b      	lsrs	r3, r3, #8
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	4904      	ldr	r1, [pc, #16]	; (8009a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80099ee:	5ccb      	ldrb	r3, [r1, r3]
 80099f0:	f003 031f 	and.w	r3, r3, #31
 80099f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	40021000 	.word	0x40021000
 8009a00:	08013388 	.word	0x08013388

08009a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a08:	f7ff ffda 	bl	80099c0 <HAL_RCC_GetHCLKFreq>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	0adb      	lsrs	r3, r3, #11
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	4904      	ldr	r1, [pc, #16]	; (8009a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a1a:	5ccb      	ldrb	r3, [r1, r3]
 8009a1c:	f003 031f 	and.w	r3, r3, #31
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	40021000 	.word	0x40021000
 8009a2c:	08013388 	.word	0x08013388

08009a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a36:	4b1e      	ldr	r3, [pc, #120]	; (8009ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a40:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d10c      	bne.n	8009a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a54:	4a17      	ldr	r2, [pc, #92]	; (8009ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5c:	4a14      	ldr	r2, [pc, #80]	; (8009ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a5e:	68d2      	ldr	r2, [r2, #12]
 8009a60:	0a12      	lsrs	r2, r2, #8
 8009a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a66:	fb02 f303 	mul.w	r3, r2, r3
 8009a6a:	617b      	str	r3, [r7, #20]
    break;
 8009a6c:	e00c      	b.n	8009a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a6e:	4a12      	ldr	r2, [pc, #72]	; (8009ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a76:	4a0e      	ldr	r2, [pc, #56]	; (8009ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a78:	68d2      	ldr	r2, [r2, #12]
 8009a7a:	0a12      	lsrs	r2, r2, #8
 8009a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	617b      	str	r3, [r7, #20]
    break;
 8009a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a88:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	0e5b      	lsrs	r3, r3, #25
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	3301      	adds	r3, #1
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009aa2:	687b      	ldr	r3, [r7, #4]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	40021000 	.word	0x40021000
 8009ab4:	007a1200 	.word	0x007a1200
 8009ab8:	00f42400 	.word	0x00f42400

08009abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ac8:	2300      	movs	r3, #0
 8009aca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8098 	beq.w	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ada:	2300      	movs	r3, #0
 8009adc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ade:	4b43      	ldr	r3, [pc, #268]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10d      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aea:	4b40      	ldr	r3, [pc, #256]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aee:	4a3f      	ldr	r2, [pc, #252]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af4:	6593      	str	r3, [r2, #88]	; 0x58
 8009af6:	4b3d      	ldr	r3, [pc, #244]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b02:	2301      	movs	r3, #1
 8009b04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b06:	4b3a      	ldr	r3, [pc, #232]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a39      	ldr	r2, [pc, #228]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b12:	f7fc f9cf 	bl	8005eb4 <HAL_GetTick>
 8009b16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b18:	e009      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b1a:	f7fc f9cb 	bl	8005eb4 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d902      	bls.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8009b2c:	e005      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b2e:	4b30      	ldr	r3, [pc, #192]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0ef      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009b3a:	7cfb      	ldrb	r3, [r7, #19]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d159      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b40:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01e      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d019      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b5c:	4b23      	ldr	r3, [pc, #140]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b68:	4b20      	ldr	r3, [pc, #128]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b6e:	4a1f      	ldr	r2, [pc, #124]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b78:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7e:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b88:	4a18      	ldr	r2, [pc, #96]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d016      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9a:	f7fc f98b 	bl	8005eb4 <HAL_GetTick>
 8009b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ba0:	e00b      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ba2:	f7fc f987 	bl	8005eb4 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d902      	bls.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8009bb8:	e006      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bba:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d0ec      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009bc8:	7cfb      	ldrb	r3, [r7, #19]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10b      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	4903      	ldr	r1, [pc, #12]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009be4:	e008      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009be6:	7cfb      	ldrb	r3, [r7, #19]
 8009be8:	74bb      	strb	r3, [r7, #18]
 8009bea:	e005      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009bec:	40021000 	.word	0x40021000
 8009bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	7cfb      	ldrb	r3, [r7, #19]
 8009bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bf8:	7c7b      	ldrb	r3, [r7, #17]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d105      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bfe:	4baf      	ldr	r3, [pc, #700]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c02:	4aae      	ldr	r2, [pc, #696]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c16:	4ba9      	ldr	r3, [pc, #676]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1c:	f023 0203 	bic.w	r2, r3, #3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	49a5      	ldr	r1, [pc, #660]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c38:	4ba0      	ldr	r3, [pc, #640]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3e:	f023 020c 	bic.w	r2, r3, #12
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	499d      	ldr	r1, [pc, #628]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c5a:	4b98      	ldr	r3, [pc, #608]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	4994      	ldr	r1, [pc, #592]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c7c:	4b8f      	ldr	r3, [pc, #572]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	498c      	ldr	r1, [pc, #560]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0310 	and.w	r3, r3, #16
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c9e:	4b87      	ldr	r3, [pc, #540]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	4983      	ldr	r1, [pc, #524]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cc0:	4b7e      	ldr	r3, [pc, #504]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	497b      	ldr	r1, [pc, #492]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ce2:	4b76      	ldr	r3, [pc, #472]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	4972      	ldr	r1, [pc, #456]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d04:	4b6d      	ldr	r3, [pc, #436]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	496a      	ldr	r1, [pc, #424]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d26:	4b65      	ldr	r3, [pc, #404]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	4961      	ldr	r1, [pc, #388]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d48:	4b5c      	ldr	r3, [pc, #368]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d4e:	f023 0203 	bic.w	r2, r3, #3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	4959      	ldr	r1, [pc, #356]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d6a:	4b54      	ldr	r3, [pc, #336]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d78:	4950      	ldr	r1, [pc, #320]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d015      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d8c:	4b4b      	ldr	r3, [pc, #300]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	4948      	ldr	r1, [pc, #288]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009daa:	d105      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dac:	4b43      	ldr	r3, [pc, #268]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4a42      	ldr	r2, [pc, #264]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009db6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d015      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009dc4:	4b3d      	ldr	r3, [pc, #244]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	493a      	ldr	r1, [pc, #232]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de2:	d105      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009de4:	4b35      	ldr	r3, [pc, #212]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a34      	ldr	r2, [pc, #208]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d015      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009dfc:	4b2f      	ldr	r3, [pc, #188]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	492c      	ldr	r1, [pc, #176]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e1a:	d105      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e1c:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	4a26      	ldr	r2, [pc, #152]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d015      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e34:	4b21      	ldr	r3, [pc, #132]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e42:	491e      	ldr	r1, [pc, #120]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e52:	d105      	bne.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e54:	4b19      	ldr	r3, [pc, #100]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	4a18      	ldr	r2, [pc, #96]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d015      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e6c:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	4910      	ldr	r1, [pc, #64]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e8a:	d105      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d018      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb2:	4902      	ldr	r1, [pc, #8]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009eba:	e001      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009ebc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ec8:	d105      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009eca:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ed4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d015      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef0:	4917      	ldr	r1, [pc, #92]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f00:	d105      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	4a12      	ldr	r2, [pc, #72]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f0c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d015      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f1a:	4b0d      	ldr	r3, [pc, #52]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f28:	4909      	ldr	r1, [pc, #36]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f38:	d105      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f3a:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	4a04      	ldr	r2, [pc, #16]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f44:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009f46:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40021000 	.word	0x40021000

08009f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e09d      	b.n	800a0a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d108      	bne.n	8009f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f76:	d009      	beq.n	8009f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	61da      	str	r2, [r3, #28]
 8009f7e:	e005      	b.n	8009f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d106      	bne.n	8009fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fb fa40 	bl	800542c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fcc:	d902      	bls.n	8009fd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e002      	b.n	8009fda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009fe2:	d007      	beq.n	8009ff4 <HAL_SPI_Init+0xa0>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fec:	d002      	beq.n	8009ff4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	431a      	orrs	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a022:	431a      	orrs	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a036:	ea42 0103 	orr.w	r1, r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	0c1b      	lsrs	r3, r3, #16
 800a050:	f003 0204 	and.w	r2, r3, #4
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a070:	ea42 0103 	orr.w	r1, r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b08a      	sub	sp, #40	; 0x28
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_SPI_TransmitReceive+0x26>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e1fb      	b.n	800a4c8 <HAL_SPI_TransmitReceive+0x41e>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0d8:	f7fb feec 	bl	8005eb4 <HAL_GetTick>
 800a0dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a0ec:	887b      	ldrh	r3, [r7, #2]
 800a0ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a0f0:	887b      	ldrh	r3, [r7, #2]
 800a0f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0f4:	7efb      	ldrb	r3, [r7, #27]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d00e      	beq.n	800a118 <HAL_SPI_TransmitReceive+0x6e>
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a100:	d106      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x66>
 800a10a:	7efb      	ldrb	r3, [r7, #27]
 800a10c:	2b04      	cmp	r3, #4
 800a10e:	d003      	beq.n	800a118 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a110:	2302      	movs	r3, #2
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a116:	e1cd      	b.n	800a4b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <HAL_SPI_TransmitReceive+0x80>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <HAL_SPI_TransmitReceive+0x80>
 800a124:	887b      	ldrh	r3, [r7, #2]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d103      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a130:	e1c0      	b.n	800a4b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d003      	beq.n	800a146 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2205      	movs	r2, #5
 800a142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	887a      	ldrh	r2, [r7, #2]
 800a156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	887a      	ldrh	r2, [r7, #2]
 800a15e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	887a      	ldrh	r2, [r7, #2]
 800a16c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	887a      	ldrh	r2, [r7, #2]
 800a172:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a188:	d802      	bhi.n	800a190 <HAL_SPI_TransmitReceive+0xe6>
 800a18a:	8a3b      	ldrh	r3, [r7, #16]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d908      	bls.n	800a1a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	e007      	b.n	800a1b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	d007      	beq.n	800a1d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1d8:	d97c      	bls.n	800a2d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <HAL_SPI_TransmitReceive+0x13e>
 800a1e2:	8a7b      	ldrh	r3, [r7, #18]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d169      	bne.n	800a2bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ec:	881a      	ldrh	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	1c9a      	adds	r2, r3, #2
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a20c:	e056      	b.n	800a2bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d11b      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x1aa>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a220:	b29b      	uxth	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d016      	beq.n	800a254 <HAL_SPI_TransmitReceive+0x1aa>
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d113      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	881a      	ldrh	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	1c9a      	adds	r2, r3, #2
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a246:	b29b      	uxth	r3, r3
 800a248:	3b01      	subs	r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d11c      	bne.n	800a29c <HAL_SPI_TransmitReceive+0x1f2>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d016      	beq.n	800a29c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a278:	b292      	uxth	r2, r2
 800a27a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a280:	1c9a      	adds	r2, r3, #2
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a298:	2301      	movs	r3, #1
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a29c:	f7fb fe0a 	bl	8005eb4 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d807      	bhi.n	800a2bc <HAL_SPI_TransmitReceive+0x212>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b2:	d003      	beq.n	800a2bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a2ba:	e0fb      	b.n	800a4b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1a3      	bne.n	800a20e <HAL_SPI_TransmitReceive+0x164>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d19d      	bne.n	800a20e <HAL_SPI_TransmitReceive+0x164>
 800a2d2:	e0df      	b.n	800a494 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <HAL_SPI_TransmitReceive+0x23a>
 800a2dc:	8a7b      	ldrh	r3, [r7, #18]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	f040 80cb 	bne.w	800a47a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d912      	bls.n	800a314 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	881a      	ldrh	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	1c9a      	adds	r2, r3, #2
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b02      	subs	r3, #2
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a312:	e0b2      	b.n	800a47a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	330c      	adds	r3, #12
 800a31e:	7812      	ldrb	r2, [r2, #0]
 800a320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a33a:	e09e      	b.n	800a47a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b02      	cmp	r3, #2
 800a348:	d134      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x30a>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a34e:	b29b      	uxth	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d02f      	beq.n	800a3b4 <HAL_SPI_TransmitReceive+0x30a>
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	2b01      	cmp	r3, #1
 800a358:	d12c      	bne.n	800a3b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a35e:	b29b      	uxth	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	d912      	bls.n	800a38a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	881a      	ldrh	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	1c9a      	adds	r2, r3, #2
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a37e:	b29b      	uxth	r3, r3
 800a380:	3b02      	subs	r3, #2
 800a382:	b29a      	uxth	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a388:	e012      	b.n	800a3b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	330c      	adds	r3, #12
 800a394:	7812      	ldrb	r2, [r2, #0]
 800a396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d148      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x3aa>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d042      	beq.n	800a454 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d923      	bls.n	800a422 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	1c9a      	adds	r2, r3, #2
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b02      	subs	r3, #2
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d81f      	bhi.n	800a450 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	e016      	b.n	800a450 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f103 020c 	add.w	r2, r3, #12
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	7812      	ldrb	r2, [r2, #0]
 800a430:	b2d2      	uxtb	r2, r2
 800a432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a444:	b29b      	uxth	r3, r3
 800a446:	3b01      	subs	r3, #1
 800a448:	b29a      	uxth	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a450:	2301      	movs	r3, #1
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a454:	f7fb fd2e 	bl	8005eb4 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a460:	429a      	cmp	r2, r3
 800a462:	d803      	bhi.n	800a46c <HAL_SPI_TransmitReceive+0x3c2>
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46a:	d102      	bne.n	800a472 <HAL_SPI_TransmitReceive+0x3c8>
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a478:	e01c      	b.n	800a4b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a47e:	b29b      	uxth	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	f47f af5b 	bne.w	800a33c <HAL_SPI_TransmitReceive+0x292>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f47f af54 	bne.w	800a33c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f933 	bl	800a704 <SPI_EndRxTxTransaction>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d006      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	661a      	str	r2, [r3, #96]	; 0x60
 800a4b0:	e000      	b.n	800a4b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a4b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a4c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3728      	adds	r7, #40	; 0x28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4e0:	f7fb fce8 	bl	8005eb4 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4f0:	f7fb fce0 	bl	8005eb4 <HAL_GetTick>
 800a4f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4f6:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	015b      	lsls	r3, r3, #5
 800a4fc:	0d1b      	lsrs	r3, r3, #20
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	fb02 f303 	mul.w	r3, r2, r3
 800a504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a506:	e054      	b.n	800a5b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50e:	d050      	beq.n	800a5b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a510:	f7fb fcd0 	bl	8005eb4 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	69fa      	ldr	r2, [r7, #28]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d902      	bls.n	800a526 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d13d      	bne.n	800a5a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a53e:	d111      	bne.n	800a564 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a548:	d004      	beq.n	800a554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a552:	d107      	bne.n	800a564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56c:	d10f      	bne.n	800a58e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a58c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e017      	b.n	800a5d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	bf0c      	ite	eq
 800a5c2:	2301      	moveq	r3, #1
 800a5c4:	2300      	movne	r3, #0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d19b      	bne.n	800a508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3720      	adds	r7, #32
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000004 	.word	0x20000004

0800a5e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5ee:	f7fb fc61 	bl	8005eb4 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	1a9b      	subs	r3, r3, r2
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5fe:	f7fb fc59 	bl	8005eb4 <HAL_GetTick>
 800a602:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a604:	4b3e      	ldr	r3, [pc, #248]	; (800a700 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	00da      	lsls	r2, r3, #3
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	0d1b      	lsrs	r3, r3, #20
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800a61c:	e062      	b.n	800a6e4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a624:	d109      	bne.n	800a63a <SPI_WaitFifoStateUntilTimeout+0x5a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	330c      	adds	r3, #12
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800a638:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d050      	beq.n	800a6e4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a642:	f7fb fc37 	bl	8005eb4 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	69fa      	ldr	r2, [r7, #28]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d902      	bls.n	800a658 <SPI_WaitFifoStateUntilTimeout+0x78>
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d13d      	bne.n	800a6d4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a666:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a670:	d111      	bne.n	800a696 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a67a:	d004      	beq.n	800a686 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a684:	d107      	bne.n	800a696 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a694:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d10f      	bne.n	800a6c0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e010      	b.n	800a6f6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d194      	bne.n	800a61e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000004 	.word	0x20000004

0800a704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af02      	add	r7, sp, #8
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ff5f 	bl	800a5e0 <SPI_WaitFifoStateUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72c:	f043 0220 	orr.w	r2, r3, #32
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a734:	2303      	movs	r3, #3
 800a736:	e027      	b.n	800a788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2200      	movs	r2, #0
 800a740:	2180      	movs	r1, #128	; 0x80
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff fec4 	bl	800a4d0 <SPI_WaitFlagStateUntilTimeout>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d007      	beq.n	800a75e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a752:	f043 0220 	orr.w	r2, r3, #32
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e014      	b.n	800a788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2200      	movs	r2, #0
 800a766:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff ff38 	bl	800a5e0 <SPI_WaitFifoStateUntilTimeout>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d007      	beq.n	800a786 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a77a:	f043 0220 	orr.w	r2, r3, #32
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e000      	b.n	800a788 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e049      	b.n	800a836 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7fb f9d6 	bl	8005b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4610      	mov	r0, r2
 800a7d0:	f000 fdf6 	bl	800b3c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	d001      	beq.n	800a858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e054      	b.n	800a902 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0201 	orr.w	r2, r2, #1
 800a86e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a26      	ldr	r2, [pc, #152]	; (800a910 <HAL_TIM_Base_Start_IT+0xd0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d022      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a882:	d01d      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <HAL_TIM_Base_Start_IT+0xd4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d018      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a21      	ldr	r2, [pc, #132]	; (800a918 <HAL_TIM_Base_Start_IT+0xd8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d013      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a1f      	ldr	r2, [pc, #124]	; (800a91c <HAL_TIM_Base_Start_IT+0xdc>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00e      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <HAL_TIM_Base_Start_IT+0xe0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d009      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d004      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x80>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d115      	bne.n	800a8ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689a      	ldr	r2, [r3, #8]
 800a8c6:	4b19      	ldr	r3, [pc, #100]	; (800a92c <HAL_TIM_Base_Start_IT+0xec>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b06      	cmp	r3, #6
 800a8d0:	d015      	beq.n	800a8fe <HAL_TIM_Base_Start_IT+0xbe>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d8:	d011      	beq.n	800a8fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f042 0201 	orr.w	r2, r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ea:	e008      	b.n	800a8fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	e000      	b.n	800a900 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	40012c00 	.word	0x40012c00
 800a914:	40000400 	.word	0x40000400
 800a918:	40000800 	.word	0x40000800
 800a91c:	40000c00 	.word	0x40000c00
 800a920:	40013400 	.word	0x40013400
 800a924:	40014000 	.word	0x40014000
 800a928:	40015000 	.word	0x40015000
 800a92c:	00010007 	.word	0x00010007

0800a930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e049      	b.n	800a9d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f841 	bl	800a9de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f000 fd26 	bl	800b3c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <HAL_TIM_PWM_Start+0x24>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	bf14      	ite	ne
 800aa10:	2301      	movne	r3, #1
 800aa12:	2300      	moveq	r3, #0
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	e03c      	b.n	800aa92 <HAL_TIM_PWM_Start+0x9e>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d109      	bne.n	800aa32 <HAL_TIM_PWM_Start+0x3e>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	bf14      	ite	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	2300      	moveq	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	e02f      	b.n	800aa92 <HAL_TIM_PWM_Start+0x9e>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d109      	bne.n	800aa4c <HAL_TIM_PWM_Start+0x58>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	bf14      	ite	ne
 800aa44:	2301      	movne	r3, #1
 800aa46:	2300      	moveq	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	e022      	b.n	800aa92 <HAL_TIM_PWM_Start+0x9e>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b0c      	cmp	r3, #12
 800aa50:	d109      	bne.n	800aa66 <HAL_TIM_PWM_Start+0x72>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	bf14      	ite	ne
 800aa5e:	2301      	movne	r3, #1
 800aa60:	2300      	moveq	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	e015      	b.n	800aa92 <HAL_TIM_PWM_Start+0x9e>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b10      	cmp	r3, #16
 800aa6a:	d109      	bne.n	800aa80 <HAL_TIM_PWM_Start+0x8c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	bf14      	ite	ne
 800aa78:	2301      	movne	r3, #1
 800aa7a:	2300      	moveq	r3, #0
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	e008      	b.n	800aa92 <HAL_TIM_PWM_Start+0x9e>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	bf14      	ite	ne
 800aa8c:	2301      	movne	r3, #1
 800aa8e:	2300      	moveq	r3, #0
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e0a6      	b.n	800abe8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d104      	bne.n	800aaaa <HAL_TIM_PWM_Start+0xb6>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaa8:	e023      	b.n	800aaf2 <HAL_TIM_PWM_Start+0xfe>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d104      	bne.n	800aaba <HAL_TIM_PWM_Start+0xc6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aab8:	e01b      	b.n	800aaf2 <HAL_TIM_PWM_Start+0xfe>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d104      	bne.n	800aaca <HAL_TIM_PWM_Start+0xd6>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aac8:	e013      	b.n	800aaf2 <HAL_TIM_PWM_Start+0xfe>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b0c      	cmp	r3, #12
 800aace:	d104      	bne.n	800aada <HAL_TIM_PWM_Start+0xe6>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aad8:	e00b      	b.n	800aaf2 <HAL_TIM_PWM_Start+0xfe>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b10      	cmp	r3, #16
 800aade:	d104      	bne.n	800aaea <HAL_TIM_PWM_Start+0xf6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aae8:	e003      	b.n	800aaf2 <HAL_TIM_PWM_Start+0xfe>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2202      	movs	r2, #2
 800aaee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f001 f8ce 	bl	800bc9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a3a      	ldr	r2, [pc, #232]	; (800abf0 <HAL_TIM_PWM_Start+0x1fc>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d018      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x148>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a39      	ldr	r2, [pc, #228]	; (800abf4 <HAL_TIM_PWM_Start+0x200>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x148>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a37      	ldr	r2, [pc, #220]	; (800abf8 <HAL_TIM_PWM_Start+0x204>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00e      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x148>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a36      	ldr	r2, [pc, #216]	; (800abfc <HAL_TIM_PWM_Start+0x208>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x148>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a34      	ldr	r2, [pc, #208]	; (800ac00 <HAL_TIM_PWM_Start+0x20c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x148>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a33      	ldr	r2, [pc, #204]	; (800ac04 <HAL_TIM_PWM_Start+0x210>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d101      	bne.n	800ab40 <HAL_TIM_PWM_Start+0x14c>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e000      	b.n	800ab42 <HAL_TIM_PWM_Start+0x14e>
 800ab40:	2300      	movs	r3, #0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a25      	ldr	r2, [pc, #148]	; (800abf0 <HAL_TIM_PWM_Start+0x1fc>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d022      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab68:	d01d      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a26      	ldr	r2, [pc, #152]	; (800ac08 <HAL_TIM_PWM_Start+0x214>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d018      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a24      	ldr	r2, [pc, #144]	; (800ac0c <HAL_TIM_PWM_Start+0x218>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d013      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a23      	ldr	r2, [pc, #140]	; (800ac10 <HAL_TIM_PWM_Start+0x21c>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00e      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a19      	ldr	r2, [pc, #100]	; (800abf4 <HAL_TIM_PWM_Start+0x200>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d009      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a18      	ldr	r2, [pc, #96]	; (800abf8 <HAL_TIM_PWM_Start+0x204>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d004      	beq.n	800aba6 <HAL_TIM_PWM_Start+0x1b2>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <HAL_TIM_PWM_Start+0x210>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d115      	bne.n	800abd2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <HAL_TIM_PWM_Start+0x220>)
 800abae:	4013      	ands	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b06      	cmp	r3, #6
 800abb6:	d015      	beq.n	800abe4 <HAL_TIM_PWM_Start+0x1f0>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbe:	d011      	beq.n	800abe4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd0:	e008      	b.n	800abe4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0201 	orr.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	e000      	b.n	800abe6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	40012c00 	.word	0x40012c00
 800abf4:	40013400 	.word	0x40013400
 800abf8:	40014000 	.word	0x40014000
 800abfc:	40014400 	.word	0x40014400
 800ac00:	40014800 	.word	0x40014800
 800ac04:	40015000 	.word	0x40015000
 800ac08:	40000400 	.word	0x40000400
 800ac0c:	40000800 	.word	0x40000800
 800ac10:	40000c00 	.word	0x40000c00
 800ac14:	00010007 	.word	0x00010007

0800ac18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d122      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d11b      	bne.n	800ac74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f06f 0202 	mvn.w	r2, #2
 800ac44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fb92 	bl	800b384 <HAL_TIM_IC_CaptureCallback>
 800ac60:	e005      	b.n	800ac6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fb84 	bl	800b370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fb95 	bl	800b398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d122      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b04      	cmp	r3, #4
 800ac8e:	d11b      	bne.n	800acc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0204 	mvn.w	r2, #4
 800ac98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb68 	bl	800b384 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fb5a 	bl	800b370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fb6b 	bl	800b398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0208 	mvn.w	r2, #8
 800acec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2204      	movs	r2, #4
 800acf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fb3e 	bl	800b384 <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fb30 	bl	800b370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fb41 	bl	800b398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0310 	and.w	r3, r3, #16
 800ad26:	2b10      	cmp	r3, #16
 800ad28:	d122      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d11b      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0210 	mvn.w	r2, #16
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2208      	movs	r2, #8
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fb14 	bl	800b384 <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fb06 	bl	800b370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fb17 	bl	800b398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0201 	mvn.w	r2, #1
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fae0 	bl	800b35c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada6:	2b80      	cmp	r3, #128	; 0x80
 800ada8:	d10e      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb4:	2b80      	cmp	r3, #128	; 0x80
 800adb6:	d107      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 f8e2 	bl	800bf8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add6:	d10e      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade2:	2b80      	cmp	r3, #128	; 0x80
 800ade4:	d107      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 f8d5 	bl	800bfa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d10e      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d107      	bne.n	800ae22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fac5 	bl	800b3ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b20      	cmp	r3, #32
 800ae2e:	d10e      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d107      	bne.n	800ae4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f06f 0220 	mvn.w	r2, #32
 800ae46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 f895 	bl	800bf78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae5c:	d10f      	bne.n	800ae7e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae6c:	d107      	bne.n	800ae7e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ae76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 f89b 	bl	800bfb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae8c:	d10f      	bne.n	800aeae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae9c:	d107      	bne.n	800aeae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f001 f88d 	bl	800bfc8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aebc:	d10f      	bne.n	800aede <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aecc:	d107      	bne.n	800aede <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 f87f 	bl	800bfdc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aeec:	d10f      	bne.n	800af0e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aefc:	d107      	bne.n	800af0e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800af06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 f871 	bl	800bff0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d101      	bne.n	800af32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af2e:	2302      	movs	r3, #2
 800af30:	e0fd      	b.n	800b12e <HAL_TIM_PWM_ConfigChannel+0x216>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b14      	cmp	r3, #20
 800af3e:	f200 80f0 	bhi.w	800b122 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800b123 	.word	0x0800b123
 800af50:	0800b123 	.word	0x0800b123
 800af54:	0800b123 	.word	0x0800b123
 800af58:	0800afdd 	.word	0x0800afdd
 800af5c:	0800b123 	.word	0x0800b123
 800af60:	0800b123 	.word	0x0800b123
 800af64:	0800b123 	.word	0x0800b123
 800af68:	0800b01f 	.word	0x0800b01f
 800af6c:	0800b123 	.word	0x0800b123
 800af70:	0800b123 	.word	0x0800b123
 800af74:	0800b123 	.word	0x0800b123
 800af78:	0800b05f 	.word	0x0800b05f
 800af7c:	0800b123 	.word	0x0800b123
 800af80:	0800b123 	.word	0x0800b123
 800af84:	0800b123 	.word	0x0800b123
 800af88:	0800b0a1 	.word	0x0800b0a1
 800af8c:	0800b123 	.word	0x0800b123
 800af90:	0800b123 	.word	0x0800b123
 800af94:	0800b123 	.word	0x0800b123
 800af98:	0800b0e1 	.word	0x0800b0e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fab4 	bl	800b510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0208 	orr.w	r2, r2, #8
 800afb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0204 	bic.w	r2, r2, #4
 800afc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6999      	ldr	r1, [r3, #24]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	619a      	str	r2, [r3, #24]
      break;
 800afda:	e0a3      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fb2e 	bl	800b644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	699a      	ldr	r2, [r3, #24]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699a      	ldr	r2, [r3, #24]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6999      	ldr	r1, [r3, #24]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	021a      	lsls	r2, r3, #8
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	619a      	str	r2, [r3, #24]
      break;
 800b01c:	e082      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fba1 	bl	800b76c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69da      	ldr	r2, [r3, #28]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f042 0208 	orr.w	r2, r2, #8
 800b038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69da      	ldr	r2, [r3, #28]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0204 	bic.w	r2, r2, #4
 800b048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69d9      	ldr	r1, [r3, #28]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	61da      	str	r2, [r3, #28]
      break;
 800b05c:	e062      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fc13 	bl	800b890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69da      	ldr	r2, [r3, #28]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69d9      	ldr	r1, [r3, #28]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	021a      	lsls	r2, r3, #8
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	61da      	str	r2, [r3, #28]
      break;
 800b09e:	e041      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fc86 	bl	800b9b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f042 0208 	orr.w	r2, r2, #8
 800b0ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0204 	bic.w	r2, r2, #4
 800b0ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b0de:	e021      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fcd0 	bl	800ba8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b10a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	021a      	lsls	r2, r3, #8
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	430a      	orrs	r2, r1
 800b11e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b120:	e000      	b.n	800b124 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop

0800b138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d101      	bne.n	800b150 <HAL_TIM_ConfigClockSource+0x18>
 800b14c:	2302      	movs	r3, #2
 800b14e:	e0f5      	b.n	800b33c <HAL_TIM_ConfigClockSource+0x204>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b16e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b17a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a6e      	ldr	r2, [pc, #440]	; (800b344 <HAL_TIM_ConfigClockSource+0x20c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	f000 80c1 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b190:	4a6c      	ldr	r2, [pc, #432]	; (800b344 <HAL_TIM_ConfigClockSource+0x20c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	f200 80c6 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b198:	4a6b      	ldr	r2, [pc, #428]	; (800b348 <HAL_TIM_ConfigClockSource+0x210>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	f000 80b9 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1a0:	4a69      	ldr	r2, [pc, #420]	; (800b348 <HAL_TIM_ConfigClockSource+0x210>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f200 80be 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1a8:	4a68      	ldr	r2, [pc, #416]	; (800b34c <HAL_TIM_ConfigClockSource+0x214>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	f000 80b1 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1b0:	4a66      	ldr	r2, [pc, #408]	; (800b34c <HAL_TIM_ConfigClockSource+0x214>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	f200 80b6 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1b8:	4a65      	ldr	r2, [pc, #404]	; (800b350 <HAL_TIM_ConfigClockSource+0x218>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	f000 80a9 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1c0:	4a63      	ldr	r2, [pc, #396]	; (800b350 <HAL_TIM_ConfigClockSource+0x218>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	f200 80ae 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1c8:	4a62      	ldr	r2, [pc, #392]	; (800b354 <HAL_TIM_ConfigClockSource+0x21c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	f000 80a1 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1d0:	4a60      	ldr	r2, [pc, #384]	; (800b354 <HAL_TIM_ConfigClockSource+0x21c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	f200 80a6 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1d8:	4a5f      	ldr	r2, [pc, #380]	; (800b358 <HAL_TIM_ConfigClockSource+0x220>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	f000 8099 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1e0:	4a5d      	ldr	r2, [pc, #372]	; (800b358 <HAL_TIM_ConfigClockSource+0x220>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	f200 809e 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1ec:	f000 8091 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b1f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1f4:	f200 8096 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1fc:	f000 8089 	beq.w	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b204:	f200 808e 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b20c:	d03e      	beq.n	800b28c <HAL_TIM_ConfigClockSource+0x154>
 800b20e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b212:	f200 8087 	bhi.w	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21a:	f000 8085 	beq.w	800b328 <HAL_TIM_ConfigClockSource+0x1f0>
 800b21e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b222:	d87f      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b224:	2b70      	cmp	r3, #112	; 0x70
 800b226:	d01a      	beq.n	800b25e <HAL_TIM_ConfigClockSource+0x126>
 800b228:	2b70      	cmp	r3, #112	; 0x70
 800b22a:	d87b      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b22c:	2b60      	cmp	r3, #96	; 0x60
 800b22e:	d050      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x19a>
 800b230:	2b60      	cmp	r3, #96	; 0x60
 800b232:	d877      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b234:	2b50      	cmp	r3, #80	; 0x50
 800b236:	d03c      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x17a>
 800b238:	2b50      	cmp	r3, #80	; 0x50
 800b23a:	d873      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d058      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0x1ba>
 800b240:	2b40      	cmp	r3, #64	; 0x40
 800b242:	d86f      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b244:	2b30      	cmp	r3, #48	; 0x30
 800b246:	d064      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b248:	2b30      	cmp	r3, #48	; 0x30
 800b24a:	d86b      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d060      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b250:	2b20      	cmp	r3, #32
 800b252:	d867      	bhi.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
 800b254:	2b00      	cmp	r3, #0
 800b256:	d05c      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0x1da>
 800b258:	2b10      	cmp	r3, #16
 800b25a:	d05a      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b25c:	e062      	b.n	800b324 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	6899      	ldr	r1, [r3, #8]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f000 fcf5 	bl	800bc5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b280:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	609a      	str	r2, [r3, #8]
      break;
 800b28a:	e04e      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	6899      	ldr	r1, [r3, #8]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f000 fcde 	bl	800bc5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2ae:	609a      	str	r2, [r3, #8]
      break;
 800b2b0:	e03b      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6818      	ldr	r0, [r3, #0]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	6859      	ldr	r1, [r3, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f000 fc50 	bl	800bb64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2150      	movs	r1, #80	; 0x50
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fca9 	bl	800bc22 <TIM_ITRx_SetConfig>
      break;
 800b2d0:	e02b      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6818      	ldr	r0, [r3, #0]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	6859      	ldr	r1, [r3, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f000 fc6f 	bl	800bbc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2160      	movs	r1, #96	; 0x60
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fc99 	bl	800bc22 <TIM_ITRx_SetConfig>
      break;
 800b2f0:	e01b      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	6859      	ldr	r1, [r3, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	461a      	mov	r2, r3
 800b300:	f000 fc30 	bl	800bb64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2140      	movs	r1, #64	; 0x40
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fc89 	bl	800bc22 <TIM_ITRx_SetConfig>
      break;
 800b310:	e00b      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4619      	mov	r1, r3
 800b31c:	4610      	mov	r0, r2
 800b31e:	f000 fc80 	bl	800bc22 <TIM_ITRx_SetConfig>
        break;
 800b322:	e002      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b324:	bf00      	nop
 800b326:	e000      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b328:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	00100070 	.word	0x00100070
 800b348:	00100060 	.word	0x00100060
 800b34c:	00100050 	.word	0x00100050
 800b350:	00100040 	.word	0x00100040
 800b354:	00100030 	.word	0x00100030
 800b358:	00100020 	.word	0x00100020

0800b35c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a46      	ldr	r2, [pc, #280]	; (800b4ec <TIM_Base_SetConfig+0x12c>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d017      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3de:	d013      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a43      	ldr	r2, [pc, #268]	; (800b4f0 <TIM_Base_SetConfig+0x130>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d00f      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a42      	ldr	r2, [pc, #264]	; (800b4f4 <TIM_Base_SetConfig+0x134>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d00b      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a41      	ldr	r2, [pc, #260]	; (800b4f8 <TIM_Base_SetConfig+0x138>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d007      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a40      	ldr	r2, [pc, #256]	; (800b4fc <TIM_Base_SetConfig+0x13c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d003      	beq.n	800b408 <TIM_Base_SetConfig+0x48>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a3f      	ldr	r2, [pc, #252]	; (800b500 <TIM_Base_SetConfig+0x140>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d108      	bne.n	800b41a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a33      	ldr	r2, [pc, #204]	; (800b4ec <TIM_Base_SetConfig+0x12c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d023      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b428:	d01f      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a30      	ldr	r2, [pc, #192]	; (800b4f0 <TIM_Base_SetConfig+0x130>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d01b      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a2f      	ldr	r2, [pc, #188]	; (800b4f4 <TIM_Base_SetConfig+0x134>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d017      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a2e      	ldr	r2, [pc, #184]	; (800b4f8 <TIM_Base_SetConfig+0x138>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d013      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a2d      	ldr	r2, [pc, #180]	; (800b4fc <TIM_Base_SetConfig+0x13c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d00f      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a2d      	ldr	r2, [pc, #180]	; (800b504 <TIM_Base_SetConfig+0x144>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00b      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a2c      	ldr	r2, [pc, #176]	; (800b508 <TIM_Base_SetConfig+0x148>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d007      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a2b      	ldr	r2, [pc, #172]	; (800b50c <TIM_Base_SetConfig+0x14c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d003      	beq.n	800b46a <TIM_Base_SetConfig+0xaa>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a26      	ldr	r2, [pc, #152]	; (800b500 <TIM_Base_SetConfig+0x140>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d108      	bne.n	800b47c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a12      	ldr	r2, [pc, #72]	; (800b4ec <TIM_Base_SetConfig+0x12c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d013      	beq.n	800b4d0 <TIM_Base_SetConfig+0x110>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a14      	ldr	r2, [pc, #80]	; (800b4fc <TIM_Base_SetConfig+0x13c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00f      	beq.n	800b4d0 <TIM_Base_SetConfig+0x110>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a14      	ldr	r2, [pc, #80]	; (800b504 <TIM_Base_SetConfig+0x144>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00b      	beq.n	800b4d0 <TIM_Base_SetConfig+0x110>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a13      	ldr	r2, [pc, #76]	; (800b508 <TIM_Base_SetConfig+0x148>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d007      	beq.n	800b4d0 <TIM_Base_SetConfig+0x110>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a12      	ldr	r2, [pc, #72]	; (800b50c <TIM_Base_SetConfig+0x14c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_Base_SetConfig+0x110>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a0d      	ldr	r2, [pc, #52]	; (800b500 <TIM_Base_SetConfig+0x140>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d103      	bne.n	800b4d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	691a      	ldr	r2, [r3, #16]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	615a      	str	r2, [r3, #20]
}
 800b4de:	bf00      	nop
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	40012c00 	.word	0x40012c00
 800b4f0:	40000400 	.word	0x40000400
 800b4f4:	40000800 	.word	0x40000800
 800b4f8:	40000c00 	.word	0x40000c00
 800b4fc:	40013400 	.word	0x40013400
 800b500:	40015000 	.word	0x40015000
 800b504:	40014000 	.word	0x40014000
 800b508:	40014400 	.word	0x40014400
 800b50c:	40014800 	.word	0x40014800

0800b510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f023 0201 	bic.w	r2, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f023 0302 	bic.w	r3, r3, #2
 800b55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	4313      	orrs	r3, r2
 800b566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a30      	ldr	r2, [pc, #192]	; (800b62c <TIM_OC1_SetConfig+0x11c>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d013      	beq.n	800b598 <TIM_OC1_SetConfig+0x88>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a2f      	ldr	r2, [pc, #188]	; (800b630 <TIM_OC1_SetConfig+0x120>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00f      	beq.n	800b598 <TIM_OC1_SetConfig+0x88>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a2e      	ldr	r2, [pc, #184]	; (800b634 <TIM_OC1_SetConfig+0x124>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00b      	beq.n	800b598 <TIM_OC1_SetConfig+0x88>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a2d      	ldr	r2, [pc, #180]	; (800b638 <TIM_OC1_SetConfig+0x128>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d007      	beq.n	800b598 <TIM_OC1_SetConfig+0x88>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a2c      	ldr	r2, [pc, #176]	; (800b63c <TIM_OC1_SetConfig+0x12c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d003      	beq.n	800b598 <TIM_OC1_SetConfig+0x88>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a2b      	ldr	r2, [pc, #172]	; (800b640 <TIM_OC1_SetConfig+0x130>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d10c      	bne.n	800b5b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f023 0308 	bic.w	r3, r3, #8
 800b59e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f023 0304 	bic.w	r3, r3, #4
 800b5b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	; (800b62c <TIM_OC1_SetConfig+0x11c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d013      	beq.n	800b5e2 <TIM_OC1_SetConfig+0xd2>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a1c      	ldr	r2, [pc, #112]	; (800b630 <TIM_OC1_SetConfig+0x120>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00f      	beq.n	800b5e2 <TIM_OC1_SetConfig+0xd2>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a1b      	ldr	r2, [pc, #108]	; (800b634 <TIM_OC1_SetConfig+0x124>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00b      	beq.n	800b5e2 <TIM_OC1_SetConfig+0xd2>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1a      	ldr	r2, [pc, #104]	; (800b638 <TIM_OC1_SetConfig+0x128>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d007      	beq.n	800b5e2 <TIM_OC1_SetConfig+0xd2>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a19      	ldr	r2, [pc, #100]	; (800b63c <TIM_OC1_SetConfig+0x12c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d003      	beq.n	800b5e2 <TIM_OC1_SetConfig+0xd2>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a18      	ldr	r2, [pc, #96]	; (800b640 <TIM_OC1_SetConfig+0x130>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d111      	bne.n	800b606 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4313      	orrs	r3, r2
 800b604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	621a      	str	r2, [r3, #32]
}
 800b620:	bf00      	nop
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	40012c00 	.word	0x40012c00
 800b630:	40013400 	.word	0x40013400
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800
 800b640:	40015000 	.word	0x40015000

0800b644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	f023 0210 	bic.w	r2, r3, #16
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0320 	bic.w	r3, r3, #32
 800b692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a2c      	ldr	r2, [pc, #176]	; (800b754 <TIM_OC2_SetConfig+0x110>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d007      	beq.n	800b6b8 <TIM_OC2_SetConfig+0x74>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a2b      	ldr	r2, [pc, #172]	; (800b758 <TIM_OC2_SetConfig+0x114>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d003      	beq.n	800b6b8 <TIM_OC2_SetConfig+0x74>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a2a      	ldr	r2, [pc, #168]	; (800b75c <TIM_OC2_SetConfig+0x118>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d10d      	bne.n	800b6d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a1f      	ldr	r2, [pc, #124]	; (800b754 <TIM_OC2_SetConfig+0x110>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d013      	beq.n	800b704 <TIM_OC2_SetConfig+0xc0>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a1e      	ldr	r2, [pc, #120]	; (800b758 <TIM_OC2_SetConfig+0x114>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d00f      	beq.n	800b704 <TIM_OC2_SetConfig+0xc0>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <TIM_OC2_SetConfig+0x11c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00b      	beq.n	800b704 <TIM_OC2_SetConfig+0xc0>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a1d      	ldr	r2, [pc, #116]	; (800b764 <TIM_OC2_SetConfig+0x120>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d007      	beq.n	800b704 <TIM_OC2_SetConfig+0xc0>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a1c      	ldr	r2, [pc, #112]	; (800b768 <TIM_OC2_SetConfig+0x124>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d003      	beq.n	800b704 <TIM_OC2_SetConfig+0xc0>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a17      	ldr	r2, [pc, #92]	; (800b75c <TIM_OC2_SetConfig+0x118>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d113      	bne.n	800b72c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b70a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	4313      	orrs	r3, r2
 800b72a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	621a      	str	r2, [r3, #32]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40012c00 	.word	0x40012c00
 800b758:	40013400 	.word	0x40013400
 800b75c:	40015000 	.word	0x40015000
 800b760:	40014000 	.word	0x40014000
 800b764:	40014400 	.word	0x40014400
 800b768:	40014800 	.word	0x40014800

0800b76c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0303 	bic.w	r3, r3, #3
 800b7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a2b      	ldr	r2, [pc, #172]	; (800b878 <TIM_OC3_SetConfig+0x10c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d007      	beq.n	800b7de <TIM_OC3_SetConfig+0x72>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a2a      	ldr	r2, [pc, #168]	; (800b87c <TIM_OC3_SetConfig+0x110>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d003      	beq.n	800b7de <TIM_OC3_SetConfig+0x72>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a29      	ldr	r2, [pc, #164]	; (800b880 <TIM_OC3_SetConfig+0x114>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d10d      	bne.n	800b7fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	021b      	lsls	r3, r3, #8
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a1e      	ldr	r2, [pc, #120]	; (800b878 <TIM_OC3_SetConfig+0x10c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d013      	beq.n	800b82a <TIM_OC3_SetConfig+0xbe>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a1d      	ldr	r2, [pc, #116]	; (800b87c <TIM_OC3_SetConfig+0x110>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00f      	beq.n	800b82a <TIM_OC3_SetConfig+0xbe>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1d      	ldr	r2, [pc, #116]	; (800b884 <TIM_OC3_SetConfig+0x118>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00b      	beq.n	800b82a <TIM_OC3_SetConfig+0xbe>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1c      	ldr	r2, [pc, #112]	; (800b888 <TIM_OC3_SetConfig+0x11c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d007      	beq.n	800b82a <TIM_OC3_SetConfig+0xbe>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1b      	ldr	r2, [pc, #108]	; (800b88c <TIM_OC3_SetConfig+0x120>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d003      	beq.n	800b82a <TIM_OC3_SetConfig+0xbe>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a16      	ldr	r2, [pc, #88]	; (800b880 <TIM_OC3_SetConfig+0x114>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d113      	bne.n	800b852 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	621a      	str	r2, [r3, #32]
}
 800b86c:	bf00      	nop
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	40012c00 	.word	0x40012c00
 800b87c:	40013400 	.word	0x40013400
 800b880:	40015000 	.word	0x40015000
 800b884:	40014000 	.word	0x40014000
 800b888:	40014400 	.word	0x40014400
 800b88c:	40014800 	.word	0x40014800

0800b890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	021b      	lsls	r3, r3, #8
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	031b      	lsls	r3, r3, #12
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a2c      	ldr	r2, [pc, #176]	; (800b9a0 <TIM_OC4_SetConfig+0x110>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d007      	beq.n	800b904 <TIM_OC4_SetConfig+0x74>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a2b      	ldr	r2, [pc, #172]	; (800b9a4 <TIM_OC4_SetConfig+0x114>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d003      	beq.n	800b904 <TIM_OC4_SetConfig+0x74>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <TIM_OC4_SetConfig+0x118>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d10d      	bne.n	800b920 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	031b      	lsls	r3, r3, #12
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	4313      	orrs	r3, r2
 800b916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b91e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a1f      	ldr	r2, [pc, #124]	; (800b9a0 <TIM_OC4_SetConfig+0x110>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <TIM_OC4_SetConfig+0xc0>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a1e      	ldr	r2, [pc, #120]	; (800b9a4 <TIM_OC4_SetConfig+0x114>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00f      	beq.n	800b950 <TIM_OC4_SetConfig+0xc0>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a1e      	ldr	r2, [pc, #120]	; (800b9ac <TIM_OC4_SetConfig+0x11c>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d00b      	beq.n	800b950 <TIM_OC4_SetConfig+0xc0>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1d      	ldr	r2, [pc, #116]	; (800b9b0 <TIM_OC4_SetConfig+0x120>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_OC4_SetConfig+0xc0>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1c      	ldr	r2, [pc, #112]	; (800b9b4 <TIM_OC4_SetConfig+0x124>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_OC4_SetConfig+0xc0>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a17      	ldr	r2, [pc, #92]	; (800b9a8 <TIM_OC4_SetConfig+0x118>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d113      	bne.n	800b978 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b956:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b95e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	019b      	lsls	r3, r3, #6
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	019b      	lsls	r3, r3, #6
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4313      	orrs	r3, r2
 800b976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40012c00 	.word	0x40012c00
 800b9a4:	40013400 	.word	0x40013400
 800b9a8:	40015000 	.word	0x40015000
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	40014800 	.word	0x40014800

0800b9b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b9fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	041b      	lsls	r3, r3, #16
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a19      	ldr	r2, [pc, #100]	; (800ba74 <TIM_OC5_SetConfig+0xbc>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d013      	beq.n	800ba3a <TIM_OC5_SetConfig+0x82>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a18      	ldr	r2, [pc, #96]	; (800ba78 <TIM_OC5_SetConfig+0xc0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00f      	beq.n	800ba3a <TIM_OC5_SetConfig+0x82>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a17      	ldr	r2, [pc, #92]	; (800ba7c <TIM_OC5_SetConfig+0xc4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00b      	beq.n	800ba3a <TIM_OC5_SetConfig+0x82>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a16      	ldr	r2, [pc, #88]	; (800ba80 <TIM_OC5_SetConfig+0xc8>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d007      	beq.n	800ba3a <TIM_OC5_SetConfig+0x82>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a15      	ldr	r2, [pc, #84]	; (800ba84 <TIM_OC5_SetConfig+0xcc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d003      	beq.n	800ba3a <TIM_OC5_SetConfig+0x82>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a14      	ldr	r2, [pc, #80]	; (800ba88 <TIM_OC5_SetConfig+0xd0>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d109      	bne.n	800ba4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	021b      	lsls	r3, r3, #8
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	621a      	str	r2, [r3, #32]
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	40012c00 	.word	0x40012c00
 800ba78:	40013400 	.word	0x40013400
 800ba7c:	40014000 	.word	0x40014000
 800ba80:	40014400 	.word	0x40014400
 800ba84:	40014800 	.word	0x40014800
 800ba88:	40015000 	.word	0x40015000

0800ba8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800baba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800babe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	051b      	lsls	r3, r3, #20
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	4313      	orrs	r3, r2
 800bade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a1a      	ldr	r2, [pc, #104]	; (800bb4c <TIM_OC6_SetConfig+0xc0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d013      	beq.n	800bb10 <TIM_OC6_SetConfig+0x84>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a19      	ldr	r2, [pc, #100]	; (800bb50 <TIM_OC6_SetConfig+0xc4>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00f      	beq.n	800bb10 <TIM_OC6_SetConfig+0x84>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <TIM_OC6_SetConfig+0xc8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00b      	beq.n	800bb10 <TIM_OC6_SetConfig+0x84>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <TIM_OC6_SetConfig+0xcc>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d007      	beq.n	800bb10 <TIM_OC6_SetConfig+0x84>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <TIM_OC6_SetConfig+0xd0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d003      	beq.n	800bb10 <TIM_OC6_SetConfig+0x84>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <TIM_OC6_SetConfig+0xd4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d109      	bne.n	800bb24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	029b      	lsls	r3, r3, #10
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	621a      	str	r2, [r3, #32]
}
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	40012c00 	.word	0x40012c00
 800bb50:	40013400 	.word	0x40013400
 800bb54:	40014000 	.word	0x40014000
 800bb58:	40014400 	.word	0x40014400
 800bb5c:	40014800 	.word	0x40014800
 800bb60:	40015000 	.word	0x40015000

0800bb64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f023 0201 	bic.w	r2, r3, #1
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f023 030a 	bic.w	r3, r3, #10
 800bba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	621a      	str	r2, [r3, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	371c      	adds	r7, #28
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b087      	sub	sp, #28
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f023 0210 	bic.w	r2, r3, #16
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	031b      	lsls	r3, r3, #12
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	621a      	str	r2, [r3, #32]
}
 800bc16:	bf00      	nop
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	f043 0307 	orr.w	r3, r3, #7
 800bc48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	609a      	str	r2, [r3, #8]
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	021a      	lsls	r2, r3, #8
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	609a      	str	r2, [r3, #8]
}
 800bc90:	bf00      	nop
 800bc92:	371c      	adds	r7, #28
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f003 031f 	and.w	r3, r3, #31
 800bcae:	2201      	movs	r2, #1
 800bcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6a1a      	ldr	r2, [r3, #32]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	43db      	mvns	r3, r3
 800bcbe:	401a      	ands	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6a1a      	ldr	r2, [r3, #32]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 031f 	and.w	r3, r3, #31
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	621a      	str	r2, [r3, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d101      	bne.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	e074      	b.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a34      	ldr	r2, [pc, #208]	; (800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d009      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a33      	ldr	r2, [pc, #204]	; (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d004      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a31      	ldr	r2, [pc, #196]	; (800be00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d108      	bne.n	800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a21      	ldr	r2, [pc, #132]	; (800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d022      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd80:	d01d      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a1f      	ldr	r2, [pc, #124]	; (800be04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d018      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a1d      	ldr	r2, [pc, #116]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d013      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a1c      	ldr	r2, [pc, #112]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d00e      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a15      	ldr	r2, [pc, #84]	; (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d009      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a18      	ldr	r2, [pc, #96]	; (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d004      	beq.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a11      	ldr	r2, [pc, #68]	; (800be00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d10c      	bne.n	800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	40012c00 	.word	0x40012c00
 800bdfc:	40013400 	.word	0x40013400
 800be00:	40015000 	.word	0x40015000
 800be04:	40000400 	.word	0x40000400
 800be08:	40000800 	.word	0x40000800
 800be0c:	40000c00 	.word	0x40000c00
 800be10:	40014000 	.word	0x40014000

0800be14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be2c:	2302      	movs	r3, #2
 800be2e:	e096      	b.n	800bf5e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	4313      	orrs	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	4313      	orrs	r3, r2
 800be8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be96:	4313      	orrs	r3, r2
 800be98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	041b      	lsls	r3, r3, #16
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a2f      	ldr	r2, [pc, #188]	; (800bf6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d009      	beq.n	800bec8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a2d      	ldr	r2, [pc, #180]	; (800bf70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d004      	beq.n	800bec8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a2c      	ldr	r2, [pc, #176]	; (800bf74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d106      	bne.n	800bed6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	69db      	ldr	r3, [r3, #28]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a24      	ldr	r2, [pc, #144]	; (800bf6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d009      	beq.n	800bef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a22      	ldr	r2, [pc, #136]	; (800bf70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d004      	beq.n	800bef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a21      	ldr	r2, [pc, #132]	; (800bf74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d12b      	bne.n	800bf4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	051b      	lsls	r3, r3, #20
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d009      	beq.n	800bf3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a10      	ldr	r2, [pc, #64]	; (800bf70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d004      	beq.n	800bf3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a0e      	ldr	r2, [pc, #56]	; (800bf74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d106      	bne.n	800bf4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	40012c00 	.word	0x40012c00
 800bf70:	40013400 	.word	0x40013400
 800bf74:	40015000 	.word	0x40015000

0800bf78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bff8:	bf00      	nop
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e042      	b.n	800c09c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7f9 fe47 	bl	8005cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2224      	movs	r2, #36	; 0x24
 800c032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fb5c 	bl	800c704 <UART_SetConfig>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e022      	b.n	800c09c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fe1a 	bl	800cc98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fea1 	bl	800cddc <UART_CheckIdleState>
 800c09a:	4603      	mov	r3, r0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08a      	sub	sp, #40	; 0x28
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	f040 8083 	bne.w	800c1c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <HAL_UART_Transmit+0x28>
 800c0c6:	88fb      	ldrh	r3, [r7, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e07b      	b.n	800c1c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d101      	bne.n	800c0de <HAL_UART_Transmit+0x3a>
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e074      	b.n	800c1c8 <HAL_UART_Transmit+0x124>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2221      	movs	r2, #33	; 0x21
 800c0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0f6:	f7f9 fedd 	bl	8005eb4 <HAL_GetTick>
 800c0fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	88fa      	ldrh	r2, [r7, #6]
 800c100:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	88fa      	ldrh	r2, [r7, #6]
 800c108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c114:	d108      	bne.n	800c128 <HAL_UART_Transmit+0x84>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d104      	bne.n	800c128 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	e003      	b.n	800c130 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c138:	e02c      	b.n	800c194 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2200      	movs	r2, #0
 800c142:	2180      	movs	r1, #128	; 0x80
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 fe94 	bl	800ce72 <UART_WaitOnFlagUntilTimeout>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e039      	b.n	800c1c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10b      	bne.n	800c172 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c168:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	3302      	adds	r3, #2
 800c16e:	61bb      	str	r3, [r7, #24]
 800c170:	e007      	b.n	800c182 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	781a      	ldrb	r2, [r3, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	3301      	adds	r3, #1
 800c180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c188:	b29b      	uxth	r3, r3
 800c18a:	3b01      	subs	r3, #1
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1cc      	bne.n	800c13a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2140      	movs	r1, #64	; 0x40
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 fe61 	bl	800ce72 <UART_WaitOnFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e006      	b.n	800c1c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e000      	b.n	800c1c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c1c6:	2302      	movs	r3, #2
  }
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d131      	bne.n	800c24c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d002      	beq.n	800c1f4 <HAL_UART_Receive_IT+0x24>
 800c1ee:	88fb      	ldrh	r3, [r7, #6]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e02a      	b.n	800c24e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d101      	bne.n	800c206 <HAL_UART_Receive_IT+0x36>
 800c202:	2302      	movs	r3, #2
 800c204:	e023      	b.n	800c24e <HAL_UART_Receive_IT+0x7e>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a0f      	ldr	r2, [pc, #60]	; (800c258 <HAL_UART_Receive_IT+0x88>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d00e      	beq.n	800c23c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d007      	beq.n	800c23c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c23a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	461a      	mov	r2, r3
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 fe96 	bl	800cf74 <UART_Start_Receive_IT>
 800c248:	4603      	mov	r3, r0
 800c24a:	e000      	b.n	800c24e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c24c:	2302      	movs	r3, #2
  }
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	40008000 	.word	0x40008000

0800c25c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c282:	4013      	ands	r3, r2
 800c284:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d118      	bne.n	800c2be <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d013      	beq.n	800c2be <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	f003 0320 	and.w	r3, r3, #32
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d104      	bne.n	800c2aa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d009      	beq.n	800c2be <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 81fb 	beq.w	800c6aa <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	4798      	blx	r3
      }
      return;
 800c2bc:	e1f5      	b.n	800c6aa <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80ef 	beq.w	800c4a4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4b73      	ldr	r3, [pc, #460]	; (800c498 <HAL_UART_IRQHandler+0x23c>)
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d105      	bne.n	800c2dc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	4b72      	ldr	r3, [pc, #456]	; (800c49c <HAL_UART_IRQHandler+0x240>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 80e4 	beq.w	800c4a4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d010      	beq.n	800c308 <HAL_UART_IRQHandler+0xac>
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2fe:	f043 0201 	orr.w	r2, r3, #1
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d010      	beq.n	800c334 <HAL_UART_IRQHandler+0xd8>
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2202      	movs	r2, #2
 800c322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c32a:	f043 0204 	orr.w	r2, r3, #4
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d010      	beq.n	800c360 <HAL_UART_IRQHandler+0x104>
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2204      	movs	r2, #4
 800c34e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c356:	f043 0202 	orr.w	r2, r3, #2
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	f003 0308 	and.w	r3, r3, #8
 800c366:	2b00      	cmp	r3, #0
 800c368:	d015      	beq.n	800c396 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f003 0320 	and.w	r3, r3, #32
 800c370:	2b00      	cmp	r3, #0
 800c372:	d104      	bne.n	800c37e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	4b48      	ldr	r3, [pc, #288]	; (800c498 <HAL_UART_IRQHandler+0x23c>)
 800c378:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2208      	movs	r2, #8
 800c384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38c:	f043 0208 	orr.w	r2, r3, #8
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d011      	beq.n	800c3c4 <HAL_UART_IRQHandler+0x168>
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00c      	beq.n	800c3c4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ba:	f043 0220 	orr.w	r2, r3, #32
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 816f 	beq.w	800c6ae <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d011      	beq.n	800c3fe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d104      	bne.n	800c3ee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c404:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d004      	beq.n	800c41e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d031      	beq.n	800c482 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fe66 	bl	800d0f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42e:	2b40      	cmp	r3, #64	; 0x40
 800c430:	d123      	bne.n	800c47a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c440:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d013      	beq.n	800c472 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44e:	4a14      	ldr	r2, [pc, #80]	; (800c4a0 <HAL_UART_IRQHandler+0x244>)
 800c450:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c456:	4618      	mov	r0, r3
 800c458:	f7fb fa78 	bl	800794c <HAL_DMA_Abort_IT>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d017      	beq.n	800c492 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c46c:	4610      	mov	r0, r2
 800c46e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c470:	e00f      	b.n	800c492 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f930 	bl	800c6d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c478:	e00b      	b.n	800c492 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f92c 	bl	800c6d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c480:	e007      	b.n	800c492 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f928 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c490:	e10d      	b.n	800c6ae <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c492:	bf00      	nop
    return;
 800c494:	e10b      	b.n	800c6ae <HAL_UART_IRQHandler+0x452>
 800c496:	bf00      	nop
 800c498:	10000001 	.word	0x10000001
 800c49c:	04000120 	.word	0x04000120
 800c4a0:	0800d155 	.word	0x0800d155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	f040 80ab 	bne.w	800c604 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	f003 0310 	and.w	r3, r3, #16
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 80a5 	beq.w	800c604 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	f003 0310 	and.w	r3, r3, #16
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 809f 	beq.w	800c604 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2210      	movs	r2, #16
 800c4cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d8:	2b40      	cmp	r3, #64	; 0x40
 800c4da:	d155      	bne.n	800c588 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c4e6:	893b      	ldrh	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80e2 	beq.w	800c6b2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4f4:	893a      	ldrh	r2, [r7, #8]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	f080 80db 	bcs.w	800c6b2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	893a      	ldrh	r2, [r7, #8]
 800c500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0320 	and.w	r3, r3, #32
 800c510:	2b00      	cmp	r3, #0
 800c512:	d12b      	bne.n	800c56c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c522:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689a      	ldr	r2, [r3, #8]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0201 	bic.w	r2, r2, #1
 800c532:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689a      	ldr	r2, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c542:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2220      	movs	r2, #32
 800c548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0210 	bic.w	r2, r2, #16
 800c560:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c566:	4618      	mov	r0, r3
 800c568:	f7fb f997 	bl	800789a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c578:	b29b      	uxth	r3, r3
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f8b3 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c586:	e094      	b.n	800c6b2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c594:	b29b      	uxth	r3, r3
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 8087 	beq.w	800c6b6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c5a8:	897b      	ldrh	r3, [r7, #10]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 8083 	beq.w	800c6b6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5be:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5ce:	f023 0301 	bic.w	r3, r3, #1
 800c5d2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f022 0210 	bic.w	r2, r2, #16
 800c5f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5f8:	897b      	ldrh	r3, [r7, #10]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f875 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c602:	e058      	b.n	800c6b6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00d      	beq.n	800c62a <HAL_UART_IRQHandler+0x3ce>
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f001 f8a2 	bl	800d76c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c628:	e048      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c630:	2b00      	cmp	r3, #0
 800c632:	d012      	beq.n	800c65a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d104      	bne.n	800c648 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c644:	2b00      	cmp	r3, #0
 800c646:	d008      	beq.n	800c65a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d034      	beq.n	800c6ba <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	4798      	blx	r3
    }
    return;
 800c658:	e02f      	b.n	800c6ba <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c660:	2b00      	cmp	r3, #0
 800c662:	d008      	beq.n	800c676 <HAL_UART_IRQHandler+0x41a>
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fd86 	bl	800d180 <UART_EndTransmit_IT>
    return;
 800c674:	e022      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d008      	beq.n	800c692 <HAL_UART_IRQHandler+0x436>
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 f882 	bl	800d794 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c690:	e014      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00f      	beq.n	800c6bc <HAL_UART_IRQHandler+0x460>
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da0c      	bge.n	800c6bc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 f86c 	bl	800d780 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6a8:	e008      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
      return;
 800c6aa:	bf00      	nop
 800c6ac:	e006      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
    return;
 800c6ae:	bf00      	nop
 800c6b0:	e004      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
      return;
 800c6b2:	bf00      	nop
 800c6b4:	e002      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
      return;
 800c6b6:	bf00      	nop
 800c6b8:	e000      	b.n	800c6bc <HAL_UART_IRQHandler+0x460>
    return;
 800c6ba:	bf00      	nop
  }
}
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop

0800c6c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c704:	b5b0      	push	{r4, r5, r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	689a      	ldr	r2, [r3, #8]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	431a      	orrs	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	431a      	orrs	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	69db      	ldr	r3, [r3, #28]
 800c724:	4313      	orrs	r3, r2
 800c726:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	4bb1      	ldr	r3, [pc, #708]	; (800c9f4 <UART_SetConfig+0x2f0>)
 800c730:	4013      	ands	r3, r2
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	6812      	ldr	r2, [r2, #0]
 800c736:	69f9      	ldr	r1, [r7, #28]
 800c738:	430b      	orrs	r3, r1
 800c73a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4aa6      	ldr	r2, [pc, #664]	; (800c9f8 <UART_SetConfig+0x2f4>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d004      	beq.n	800c76c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	69fa      	ldr	r2, [r7, #28]
 800c768:	4313      	orrs	r3, r2
 800c76a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c776:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6812      	ldr	r2, [r2, #0]
 800c77e:	69f9      	ldr	r1, [r7, #28]
 800c780:	430b      	orrs	r3, r1
 800c782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78a:	f023 010f 	bic.w	r1, r3, #15
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	430a      	orrs	r2, r1
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a97      	ldr	r2, [pc, #604]	; (800c9fc <UART_SetConfig+0x2f8>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d120      	bne.n	800c7e6 <UART_SetConfig+0xe2>
 800c7a4:	4b96      	ldr	r3, [pc, #600]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d816      	bhi.n	800c7e0 <UART_SetConfig+0xdc>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <UART_SetConfig+0xb4>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7d5 	.word	0x0800c7d5
 800c7c0:	0800c7cf 	.word	0x0800c7cf
 800c7c4:	0800c7db 	.word	0x0800c7db
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	76fb      	strb	r3, [r7, #27]
 800c7cc:	e0e7      	b.n	800c99e <UART_SetConfig+0x29a>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	76fb      	strb	r3, [r7, #27]
 800c7d2:	e0e4      	b.n	800c99e <UART_SetConfig+0x29a>
 800c7d4:	2304      	movs	r3, #4
 800c7d6:	76fb      	strb	r3, [r7, #27]
 800c7d8:	e0e1      	b.n	800c99e <UART_SetConfig+0x29a>
 800c7da:	2308      	movs	r3, #8
 800c7dc:	76fb      	strb	r3, [r7, #27]
 800c7de:	e0de      	b.n	800c99e <UART_SetConfig+0x29a>
 800c7e0:	2310      	movs	r3, #16
 800c7e2:	76fb      	strb	r3, [r7, #27]
 800c7e4:	e0db      	b.n	800c99e <UART_SetConfig+0x29a>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a86      	ldr	r2, [pc, #536]	; (800ca04 <UART_SetConfig+0x300>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d132      	bne.n	800c856 <UART_SetConfig+0x152>
 800c7f0:	4b83      	ldr	r3, [pc, #524]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7f6:	f003 030c 	and.w	r3, r3, #12
 800c7fa:	2b0c      	cmp	r3, #12
 800c7fc:	d828      	bhi.n	800c850 <UART_SetConfig+0x14c>
 800c7fe:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <UART_SetConfig+0x100>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c839 	.word	0x0800c839
 800c808:	0800c851 	.word	0x0800c851
 800c80c:	0800c851 	.word	0x0800c851
 800c810:	0800c851 	.word	0x0800c851
 800c814:	0800c845 	.word	0x0800c845
 800c818:	0800c851 	.word	0x0800c851
 800c81c:	0800c851 	.word	0x0800c851
 800c820:	0800c851 	.word	0x0800c851
 800c824:	0800c83f 	.word	0x0800c83f
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c851 	.word	0x0800c851
 800c830:	0800c851 	.word	0x0800c851
 800c834:	0800c84b 	.word	0x0800c84b
 800c838:	2300      	movs	r3, #0
 800c83a:	76fb      	strb	r3, [r7, #27]
 800c83c:	e0af      	b.n	800c99e <UART_SetConfig+0x29a>
 800c83e:	2302      	movs	r3, #2
 800c840:	76fb      	strb	r3, [r7, #27]
 800c842:	e0ac      	b.n	800c99e <UART_SetConfig+0x29a>
 800c844:	2304      	movs	r3, #4
 800c846:	76fb      	strb	r3, [r7, #27]
 800c848:	e0a9      	b.n	800c99e <UART_SetConfig+0x29a>
 800c84a:	2308      	movs	r3, #8
 800c84c:	76fb      	strb	r3, [r7, #27]
 800c84e:	e0a6      	b.n	800c99e <UART_SetConfig+0x29a>
 800c850:	2310      	movs	r3, #16
 800c852:	76fb      	strb	r3, [r7, #27]
 800c854:	e0a3      	b.n	800c99e <UART_SetConfig+0x29a>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a6b      	ldr	r2, [pc, #428]	; (800ca08 <UART_SetConfig+0x304>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d120      	bne.n	800c8a2 <UART_SetConfig+0x19e>
 800c860:	4b67      	ldr	r3, [pc, #412]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c86a:	2b30      	cmp	r3, #48	; 0x30
 800c86c:	d013      	beq.n	800c896 <UART_SetConfig+0x192>
 800c86e:	2b30      	cmp	r3, #48	; 0x30
 800c870:	d814      	bhi.n	800c89c <UART_SetConfig+0x198>
 800c872:	2b20      	cmp	r3, #32
 800c874:	d009      	beq.n	800c88a <UART_SetConfig+0x186>
 800c876:	2b20      	cmp	r3, #32
 800c878:	d810      	bhi.n	800c89c <UART_SetConfig+0x198>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <UART_SetConfig+0x180>
 800c87e:	2b10      	cmp	r3, #16
 800c880:	d006      	beq.n	800c890 <UART_SetConfig+0x18c>
 800c882:	e00b      	b.n	800c89c <UART_SetConfig+0x198>
 800c884:	2300      	movs	r3, #0
 800c886:	76fb      	strb	r3, [r7, #27]
 800c888:	e089      	b.n	800c99e <UART_SetConfig+0x29a>
 800c88a:	2302      	movs	r3, #2
 800c88c:	76fb      	strb	r3, [r7, #27]
 800c88e:	e086      	b.n	800c99e <UART_SetConfig+0x29a>
 800c890:	2304      	movs	r3, #4
 800c892:	76fb      	strb	r3, [r7, #27]
 800c894:	e083      	b.n	800c99e <UART_SetConfig+0x29a>
 800c896:	2308      	movs	r3, #8
 800c898:	76fb      	strb	r3, [r7, #27]
 800c89a:	e080      	b.n	800c99e <UART_SetConfig+0x29a>
 800c89c:	2310      	movs	r3, #16
 800c89e:	76fb      	strb	r3, [r7, #27]
 800c8a0:	e07d      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a59      	ldr	r2, [pc, #356]	; (800ca0c <UART_SetConfig+0x308>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d120      	bne.n	800c8ee <UART_SetConfig+0x1ea>
 800c8ac:	4b54      	ldr	r3, [pc, #336]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c8b6:	2bc0      	cmp	r3, #192	; 0xc0
 800c8b8:	d013      	beq.n	800c8e2 <UART_SetConfig+0x1de>
 800c8ba:	2bc0      	cmp	r3, #192	; 0xc0
 800c8bc:	d814      	bhi.n	800c8e8 <UART_SetConfig+0x1e4>
 800c8be:	2b80      	cmp	r3, #128	; 0x80
 800c8c0:	d009      	beq.n	800c8d6 <UART_SetConfig+0x1d2>
 800c8c2:	2b80      	cmp	r3, #128	; 0x80
 800c8c4:	d810      	bhi.n	800c8e8 <UART_SetConfig+0x1e4>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d002      	beq.n	800c8d0 <UART_SetConfig+0x1cc>
 800c8ca:	2b40      	cmp	r3, #64	; 0x40
 800c8cc:	d006      	beq.n	800c8dc <UART_SetConfig+0x1d8>
 800c8ce:	e00b      	b.n	800c8e8 <UART_SetConfig+0x1e4>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	76fb      	strb	r3, [r7, #27]
 800c8d4:	e063      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	76fb      	strb	r3, [r7, #27]
 800c8da:	e060      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	76fb      	strb	r3, [r7, #27]
 800c8e0:	e05d      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8e2:	2308      	movs	r3, #8
 800c8e4:	76fb      	strb	r3, [r7, #27]
 800c8e6:	e05a      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	76fb      	strb	r3, [r7, #27]
 800c8ec:	e057      	b.n	800c99e <UART_SetConfig+0x29a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a47      	ldr	r2, [pc, #284]	; (800ca10 <UART_SetConfig+0x30c>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d125      	bne.n	800c944 <UART_SetConfig+0x240>
 800c8f8:	4b41      	ldr	r3, [pc, #260]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c906:	d017      	beq.n	800c938 <UART_SetConfig+0x234>
 800c908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c90c:	d817      	bhi.n	800c93e <UART_SetConfig+0x23a>
 800c90e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c912:	d00b      	beq.n	800c92c <UART_SetConfig+0x228>
 800c914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c918:	d811      	bhi.n	800c93e <UART_SetConfig+0x23a>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <UART_SetConfig+0x222>
 800c91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c922:	d006      	beq.n	800c932 <UART_SetConfig+0x22e>
 800c924:	e00b      	b.n	800c93e <UART_SetConfig+0x23a>
 800c926:	2300      	movs	r3, #0
 800c928:	76fb      	strb	r3, [r7, #27]
 800c92a:	e038      	b.n	800c99e <UART_SetConfig+0x29a>
 800c92c:	2302      	movs	r3, #2
 800c92e:	76fb      	strb	r3, [r7, #27]
 800c930:	e035      	b.n	800c99e <UART_SetConfig+0x29a>
 800c932:	2304      	movs	r3, #4
 800c934:	76fb      	strb	r3, [r7, #27]
 800c936:	e032      	b.n	800c99e <UART_SetConfig+0x29a>
 800c938:	2308      	movs	r3, #8
 800c93a:	76fb      	strb	r3, [r7, #27]
 800c93c:	e02f      	b.n	800c99e <UART_SetConfig+0x29a>
 800c93e:	2310      	movs	r3, #16
 800c940:	76fb      	strb	r3, [r7, #27]
 800c942:	e02c      	b.n	800c99e <UART_SetConfig+0x29a>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a2b      	ldr	r2, [pc, #172]	; (800c9f8 <UART_SetConfig+0x2f4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d125      	bne.n	800c99a <UART_SetConfig+0x296>
 800c94e:	4b2c      	ldr	r3, [pc, #176]	; (800ca00 <UART_SetConfig+0x2fc>)
 800c950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c954:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c95c:	d017      	beq.n	800c98e <UART_SetConfig+0x28a>
 800c95e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c962:	d817      	bhi.n	800c994 <UART_SetConfig+0x290>
 800c964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c968:	d00b      	beq.n	800c982 <UART_SetConfig+0x27e>
 800c96a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c96e:	d811      	bhi.n	800c994 <UART_SetConfig+0x290>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <UART_SetConfig+0x278>
 800c974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c978:	d006      	beq.n	800c988 <UART_SetConfig+0x284>
 800c97a:	e00b      	b.n	800c994 <UART_SetConfig+0x290>
 800c97c:	2300      	movs	r3, #0
 800c97e:	76fb      	strb	r3, [r7, #27]
 800c980:	e00d      	b.n	800c99e <UART_SetConfig+0x29a>
 800c982:	2302      	movs	r3, #2
 800c984:	76fb      	strb	r3, [r7, #27]
 800c986:	e00a      	b.n	800c99e <UART_SetConfig+0x29a>
 800c988:	2304      	movs	r3, #4
 800c98a:	76fb      	strb	r3, [r7, #27]
 800c98c:	e007      	b.n	800c99e <UART_SetConfig+0x29a>
 800c98e:	2308      	movs	r3, #8
 800c990:	76fb      	strb	r3, [r7, #27]
 800c992:	e004      	b.n	800c99e <UART_SetConfig+0x29a>
 800c994:	2310      	movs	r3, #16
 800c996:	76fb      	strb	r3, [r7, #27]
 800c998:	e001      	b.n	800c99e <UART_SetConfig+0x29a>
 800c99a:	2310      	movs	r3, #16
 800c99c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a15      	ldr	r2, [pc, #84]	; (800c9f8 <UART_SetConfig+0x2f4>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	f040 809f 	bne.w	800cae8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9aa:	7efb      	ldrb	r3, [r7, #27]
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d837      	bhi.n	800ca20 <UART_SetConfig+0x31c>
 800c9b0:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <UART_SetConfig+0x2b4>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800c9dd 	.word	0x0800c9dd
 800c9bc:	0800ca21 	.word	0x0800ca21
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800ca21 	.word	0x0800ca21
 800c9c8:	0800c9eb 	.word	0x0800c9eb
 800c9cc:	0800ca21 	.word	0x0800ca21
 800c9d0:	0800ca21 	.word	0x0800ca21
 800c9d4:	0800ca21 	.word	0x0800ca21
 800c9d8:	0800ca19 	.word	0x0800ca19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9dc:	f7fc fffc 	bl	80099d8 <HAL_RCC_GetPCLK1Freq>
 800c9e0:	6178      	str	r0, [r7, #20]
        break;
 800c9e2:	e022      	b.n	800ca2a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <UART_SetConfig+0x310>)
 800c9e6:	617b      	str	r3, [r7, #20]
        break;
 800c9e8:	e01f      	b.n	800ca2a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9ea:	f7fc ff87 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 800c9ee:	6178      	str	r0, [r7, #20]
        break;
 800c9f0:	e01b      	b.n	800ca2a <UART_SetConfig+0x326>
 800c9f2:	bf00      	nop
 800c9f4:	cfff69f3 	.word	0xcfff69f3
 800c9f8:	40008000 	.word	0x40008000
 800c9fc:	40013800 	.word	0x40013800
 800ca00:	40021000 	.word	0x40021000
 800ca04:	40004400 	.word	0x40004400
 800ca08:	40004800 	.word	0x40004800
 800ca0c:	40004c00 	.word	0x40004c00
 800ca10:	40005000 	.word	0x40005000
 800ca14:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca1c:	617b      	str	r3, [r7, #20]
        break;
 800ca1e:	e004      	b.n	800ca2a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	76bb      	strb	r3, [r7, #26]
        break;
 800ca28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 811b 	beq.w	800cc68 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	4a96      	ldr	r2, [pc, #600]	; (800cc90 <UART_SetConfig+0x58c>)
 800ca38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca44:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d305      	bcc.n	800ca62 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d902      	bls.n	800ca68 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	76bb      	strb	r3, [r7, #26]
 800ca66:	e0ff      	b.n	800cc68 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f04f 0100 	mov.w	r1, #0
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	4a86      	ldr	r2, [pc, #536]	; (800cc90 <UART_SetConfig+0x58c>)
 800ca76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	f04f 0300 	mov.w	r3, #0
 800ca80:	f7f4 f92a 	bl	8000cd8 <__aeabi_uldivmod>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4610      	mov	r0, r2
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	f04f 0300 	mov.w	r3, #0
 800ca94:	020b      	lsls	r3, r1, #8
 800ca96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca9a:	0202      	lsls	r2, r0, #8
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	6849      	ldr	r1, [r1, #4]
 800caa0:	0849      	lsrs	r1, r1, #1
 800caa2:	4608      	mov	r0, r1
 800caa4:	f04f 0100 	mov.w	r1, #0
 800caa8:	1814      	adds	r4, r2, r0
 800caaa:	eb43 0501 	adc.w	r5, r3, r1
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	461a      	mov	r2, r3
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f4 f90c 	bl	8000cd8 <__aeabi_uldivmod>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4613      	mov	r3, r2
 800cac6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cace:	d308      	bcc.n	800cae2 <UART_SetConfig+0x3de>
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad6:	d204      	bcs.n	800cae2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	60da      	str	r2, [r3, #12]
 800cae0:	e0c2      	b.n	800cc68 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	76bb      	strb	r3, [r7, #26]
 800cae6:	e0bf      	b.n	800cc68 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf0:	d165      	bne.n	800cbbe <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800caf2:	7efb      	ldrb	r3, [r7, #27]
 800caf4:	2b08      	cmp	r3, #8
 800caf6:	d828      	bhi.n	800cb4a <UART_SetConfig+0x446>
 800caf8:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <UART_SetConfig+0x3fc>)
 800cafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafe:	bf00      	nop
 800cb00:	0800cb25 	.word	0x0800cb25
 800cb04:	0800cb2d 	.word	0x0800cb2d
 800cb08:	0800cb35 	.word	0x0800cb35
 800cb0c:	0800cb4b 	.word	0x0800cb4b
 800cb10:	0800cb3b 	.word	0x0800cb3b
 800cb14:	0800cb4b 	.word	0x0800cb4b
 800cb18:	0800cb4b 	.word	0x0800cb4b
 800cb1c:	0800cb4b 	.word	0x0800cb4b
 800cb20:	0800cb43 	.word	0x0800cb43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb24:	f7fc ff58 	bl	80099d8 <HAL_RCC_GetPCLK1Freq>
 800cb28:	6178      	str	r0, [r7, #20]
        break;
 800cb2a:	e013      	b.n	800cb54 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb2c:	f7fc ff6a 	bl	8009a04 <HAL_RCC_GetPCLK2Freq>
 800cb30:	6178      	str	r0, [r7, #20]
        break;
 800cb32:	e00f      	b.n	800cb54 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb34:	4b57      	ldr	r3, [pc, #348]	; (800cc94 <UART_SetConfig+0x590>)
 800cb36:	617b      	str	r3, [r7, #20]
        break;
 800cb38:	e00c      	b.n	800cb54 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb3a:	f7fc fedf 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 800cb3e:	6178      	str	r0, [r7, #20]
        break;
 800cb40:	e008      	b.n	800cb54 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb46:	617b      	str	r3, [r7, #20]
        break;
 800cb48:	e004      	b.n	800cb54 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	76bb      	strb	r3, [r7, #26]
        break;
 800cb52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 8086 	beq.w	800cc68 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	4a4b      	ldr	r2, [pc, #300]	; (800cc90 <UART_SetConfig+0x58c>)
 800cb62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb66:	461a      	mov	r2, r3
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb6e:	005a      	lsls	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	085b      	lsrs	r3, r3, #1
 800cb76:	441a      	add	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	d916      	bls.n	800cbb8 <UART_SetConfig+0x4b4>
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb90:	d212      	bcs.n	800cbb8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f023 030f 	bic.w	r3, r3, #15
 800cb9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	085b      	lsrs	r3, r3, #1
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	89fb      	ldrh	r3, [r7, #14]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	89fa      	ldrh	r2, [r7, #14]
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	e057      	b.n	800cc68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	76bb      	strb	r3, [r7, #26]
 800cbbc:	e054      	b.n	800cc68 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbbe:	7efb      	ldrb	r3, [r7, #27]
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d828      	bhi.n	800cc16 <UART_SetConfig+0x512>
 800cbc4:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <UART_SetConfig+0x4c8>)
 800cbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cbf1 	.word	0x0800cbf1
 800cbd0:	0800cbf9 	.word	0x0800cbf9
 800cbd4:	0800cc01 	.word	0x0800cc01
 800cbd8:	0800cc17 	.word	0x0800cc17
 800cbdc:	0800cc07 	.word	0x0800cc07
 800cbe0:	0800cc17 	.word	0x0800cc17
 800cbe4:	0800cc17 	.word	0x0800cc17
 800cbe8:	0800cc17 	.word	0x0800cc17
 800cbec:	0800cc0f 	.word	0x0800cc0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbf0:	f7fc fef2 	bl	80099d8 <HAL_RCC_GetPCLK1Freq>
 800cbf4:	6178      	str	r0, [r7, #20]
        break;
 800cbf6:	e013      	b.n	800cc20 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbf8:	f7fc ff04 	bl	8009a04 <HAL_RCC_GetPCLK2Freq>
 800cbfc:	6178      	str	r0, [r7, #20]
        break;
 800cbfe:	e00f      	b.n	800cc20 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc00:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <UART_SetConfig+0x590>)
 800cc02:	617b      	str	r3, [r7, #20]
        break;
 800cc04:	e00c      	b.n	800cc20 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc06:	f7fc fe79 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 800cc0a:	6178      	str	r0, [r7, #20]
        break;
 800cc0c:	e008      	b.n	800cc20 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc12:	617b      	str	r3, [r7, #20]
        break;
 800cc14:	e004      	b.n	800cc20 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	76bb      	strb	r3, [r7, #26]
        break;
 800cc1e:	bf00      	nop
    }

    if (pclk != 0U)
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d020      	beq.n	800cc68 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2a:	4a19      	ldr	r2, [pc, #100]	; (800cc90 <UART_SetConfig+0x58c>)
 800cc2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc30:	461a      	mov	r2, r3
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	085b      	lsrs	r3, r3, #1
 800cc3e:	441a      	add	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	2b0f      	cmp	r3, #15
 800cc50:	d908      	bls.n	800cc64 <UART_SetConfig+0x560>
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc58:	d204      	bcs.n	800cc64 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	60da      	str	r2, [r3, #12]
 800cc62:	e001      	b.n	800cc68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc84:	7ebb      	ldrb	r3, [r7, #26]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	080133a0 	.word	0x080133a0
 800cc94:	00f42400 	.word	0x00f42400

0800cc98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	f003 0302 	and.w	r3, r3, #2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00a      	beq.n	800cce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	430a      	orrs	r2, r1
 800cce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00a      	beq.n	800cd06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	430a      	orrs	r2, r1
 800cd04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0a:	f003 0308 	and.w	r3, r3, #8
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00a      	beq.n	800cd28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	430a      	orrs	r2, r1
 800cd26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2c:	f003 0310 	and.w	r3, r3, #16
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00a      	beq.n	800cd4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	430a      	orrs	r2, r1
 800cd48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00a      	beq.n	800cd6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	430a      	orrs	r2, r1
 800cd6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d01a      	beq.n	800cdae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd96:	d10a      	bne.n	800cdae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00a      	beq.n	800cdd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	605a      	str	r2, [r3, #4]
  }
}
 800cdd0:	bf00      	nop
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af02      	add	r7, sp, #8
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdec:	f7f9 f862 	bl	8005eb4 <HAL_GetTick>
 800cdf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 0308 	and.w	r3, r3, #8
 800cdfc:	2b08      	cmp	r3, #8
 800cdfe:	d10e      	bne.n	800ce1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f82f 	bl	800ce72 <UART_WaitOnFlagUntilTimeout>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e025      	b.n	800ce6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b04      	cmp	r3, #4
 800ce2a:	d10e      	bne.n	800ce4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f819 	bl	800ce72 <UART_WaitOnFlagUntilTimeout>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce46:	2303      	movs	r3, #3
 800ce48:	e00f      	b.n	800ce6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2220      	movs	r2, #32
 800ce56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	60f8      	str	r0, [r7, #12]
 800ce7a:	60b9      	str	r1, [r7, #8]
 800ce7c:	603b      	str	r3, [r7, #0]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce82:	e062      	b.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8a:	d05e      	beq.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce8c:	f7f9 f812 	bl	8005eb4 <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d302      	bcc.n	800cea2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d11d      	bne.n	800cede <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ceb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689a      	ldr	r2, [r3, #8]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 0201 	bic.w	r2, r2, #1
 800cec0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2220      	movs	r2, #32
 800cece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ceda:	2303      	movs	r3, #3
 800cedc:	e045      	b.n	800cf6a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0304 	and.w	r3, r3, #4
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d02e      	beq.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	69db      	ldr	r3, [r3, #28]
 800cef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cefa:	d126      	bne.n	800cf4a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cf14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 0201 	bic.w	r2, r2, #1
 800cf24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e00f      	b.n	800cf6a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	69da      	ldr	r2, [r3, #28]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	4013      	ands	r3, r2
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	bf0c      	ite	eq
 800cf5a:	2301      	moveq	r3, #1
 800cf5c:	2300      	movne	r3, #0
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	461a      	mov	r2, r3
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d08d      	beq.n	800ce84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	88fa      	ldrh	r2, [r7, #6]
 800cf8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfa6:	d10e      	bne.n	800cfc6 <UART_Start_Receive_IT+0x52>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d105      	bne.n	800cfbc <UART_Start_Receive_IT+0x48>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cfb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfba:	e02d      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	22ff      	movs	r2, #255	; 0xff
 800cfc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfc4:	e028      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10d      	bne.n	800cfea <UART_Start_Receive_IT+0x76>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d104      	bne.n	800cfe0 <UART_Start_Receive_IT+0x6c>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	22ff      	movs	r2, #255	; 0xff
 800cfda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfde:	e01b      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	227f      	movs	r2, #127	; 0x7f
 800cfe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfe8:	e016      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cff2:	d10d      	bne.n	800d010 <UART_Start_Receive_IT+0x9c>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d104      	bne.n	800d006 <UART_Start_Receive_IT+0x92>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	227f      	movs	r2, #127	; 0x7f
 800d000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d004:	e008      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	223f      	movs	r2, #63	; 0x3f
 800d00a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d00e:	e003      	b.n	800d018 <UART_Start_Receive_IT+0xa4>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2222      	movs	r2, #34	; 0x22
 800d024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689a      	ldr	r2, [r3, #8]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f042 0201 	orr.w	r2, r2, #1
 800d036:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d040:	d12a      	bne.n	800d098 <UART_Start_Receive_IT+0x124>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d048:	88fa      	ldrh	r2, [r7, #6]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d324      	bcc.n	800d098 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d056:	d107      	bne.n	800d068 <UART_Start_Receive_IT+0xf4>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d103      	bne.n	800d068 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4a1f      	ldr	r2, [pc, #124]	; (800d0e0 <UART_Start_Receive_IT+0x16c>)
 800d064:	671a      	str	r2, [r3, #112]	; 0x70
 800d066:	e002      	b.n	800d06e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4a1e      	ldr	r2, [pc, #120]	; (800d0e4 <UART_Start_Receive_IT+0x170>)
 800d06c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d084:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d094:	609a      	str	r2, [r3, #8]
 800d096:	e01b      	b.n	800d0d0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0a0:	d107      	bne.n	800d0b2 <UART_Start_Receive_IT+0x13e>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d103      	bne.n	800d0b2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	4a0e      	ldr	r2, [pc, #56]	; (800d0e8 <UART_Start_Receive_IT+0x174>)
 800d0ae:	671a      	str	r2, [r3, #112]	; 0x70
 800d0b0:	e002      	b.n	800d0b8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	4a0d      	ldr	r2, [pc, #52]	; (800d0ec <UART_Start_Receive_IT+0x178>)
 800d0b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d0ce:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	0800d569 	.word	0x0800d569
 800d0e4:	0800d365 	.word	0x0800d365
 800d0e8:	0800d28d 	.word	0x0800d28d
 800d0ec:	0800d1b5 	.word	0x0800d1b5

0800d0f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d106:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	6812      	ldr	r2, [r2, #0]
 800d112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d116:	f023 0301 	bic.w	r3, r3, #1
 800d11a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d120:	2b01      	cmp	r3, #1
 800d122:	d107      	bne.n	800d134 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f022 0210 	bic.w	r2, r2, #16
 800d132:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2220      	movs	r2, #32
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff fab0 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d196:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fa8c 	bl	800c6c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ca:	2b22      	cmp	r3, #34	; 0x22
 800d1cc:	d152      	bne.n	800d274 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d1d6:	89bb      	ldrh	r3, [r7, #12]
 800d1d8:	b2d9      	uxtb	r1, r3
 800d1da:	89fb      	ldrh	r3, [r7, #14]
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e2:	400a      	ands	r2, r1
 800d1e4:	b2d2      	uxtb	r2, r2
 800d1e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d139      	bne.n	800d284 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d21e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	689a      	ldr	r2, [r3, #8]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0201 	bic.w	r2, r2, #1
 800d22e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2220      	movs	r2, #32
 800d234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d242:	2b01      	cmp	r3, #1
 800d244:	d10f      	bne.n	800d266 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f022 0210 	bic.w	r2, r2, #16
 800d254:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7ff fa44 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
 800d264:	e002      	b.n	800d26c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7f8 fd84 	bl	8005d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d272:	e007      	b.n	800d284 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	699a      	ldr	r2, [r3, #24]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f042 0208 	orr.w	r2, r2, #8
 800d282:	619a      	str	r2, [r3, #24]
}
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d29a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2a2:	2b22      	cmp	r3, #34	; 0x22
 800d2a4:	d152      	bne.n	800d34c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d2b4:	89ba      	ldrh	r2, [r7, #12]
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2c4:	1c9a      	adds	r2, r3, #2
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d139      	bne.n	800d35c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d2f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	689a      	ldr	r2, [r3, #8]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f022 0201 	bic.w	r2, r2, #1
 800d306:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2220      	movs	r2, #32
 800d30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d10f      	bne.n	800d33e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f022 0210 	bic.w	r2, r2, #16
 800d32c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff f9d8 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
 800d33c:	e002      	b.n	800d344 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f8 fd18 	bl	8005d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d34a:	e007      	b.n	800d35c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	699a      	ldr	r2, [r3, #24]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f042 0208 	orr.w	r2, r2, #8
 800d35a:	619a      	str	r2, [r3, #24]
}
 800d35c:	bf00      	nop
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d372:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d392:	2b22      	cmp	r3, #34	; 0x22
 800d394:	f040 80da 	bne.w	800d54c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d39e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3a0:	e0aa      	b.n	800d4f8 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a8:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d3aa:	89bb      	ldrh	r3, [r7, #12]
 800d3ac:	b2d9      	uxtb	r1, r3
 800d3ae:	8b7b      	ldrh	r3, [r7, #26]
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3b6:	400a      	ands	r2, r1
 800d3b8:	b2d2      	uxtb	r2, r2
 800d3ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	69db      	ldr	r3, [r3, #28]
 800d3de:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f003 0307 	and.w	r3, r3, #7
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d04d      	beq.n	800d486 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d010      	beq.n	800d416 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00b      	beq.n	800d416 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2201      	movs	r2, #1
 800d404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d40c:	f043 0201 	orr.w	r2, r3, #1
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	f003 0302 	and.w	r3, r3, #2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d010      	beq.n	800d442 <UART_RxISR_8BIT_FIFOEN+0xde>
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2202      	movs	r2, #2
 800d430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d438:	f043 0204 	orr.w	r2, r3, #4
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d010      	beq.n	800d46e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2204      	movs	r2, #4
 800d45c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d464:	f043 0202 	orr.w	r2, r3, #2
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7ff f92d 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d132      	bne.n	800d4f8 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d4a0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6812      	ldr	r2, [r2, #0]
 800d4ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4b0:	f023 0301 	bic.w	r3, r3, #1
 800d4b4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d10f      	bne.n	800d4ec <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 0210 	bic.w	r2, r2, #16
 800d4da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff f901 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
 800d4ea:	e002      	b.n	800d4f2 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7f8 fc41 	bl	8005d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4f8:	89fb      	ldrh	r3, [r7, #14]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d005      	beq.n	800d50a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	f003 0320 	and.w	r3, r3, #32
 800d504:	2b00      	cmp	r3, #0
 800d506:	f47f af4c 	bne.w	800d3a2 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d510:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d512:	897b      	ldrh	r3, [r7, #10]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d021      	beq.n	800d55c <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d51e:	897a      	ldrh	r2, [r7, #10]
 800d520:	429a      	cmp	r2, r3
 800d522:	d21b      	bcs.n	800d55c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d532:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a0b      	ldr	r2, [pc, #44]	; (800d564 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d538:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f042 0220 	orr.w	r2, r2, #32
 800d548:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d54a:	e007      	b.n	800d55c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	699a      	ldr	r2, [r3, #24]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f042 0208 	orr.w	r2, r2, #8
 800d55a:	619a      	str	r2, [r3, #24]
}
 800d55c:	bf00      	nop
 800d55e:	3720      	adds	r7, #32
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	0800d1b5 	.word	0x0800d1b5

0800d568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d576:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d596:	2b22      	cmp	r3, #34	; 0x22
 800d598:	f040 80da 	bne.w	800d750 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5a2:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5a4:	e0aa      	b.n	800d6fc <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d5b4:	8aba      	ldrh	r2, [r7, #20]
 800d5b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5c4:	1c9a      	adds	r2, r3, #2
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	69db      	ldr	r3, [r3, #28]
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	f003 0307 	and.w	r3, r3, #7
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d04d      	beq.n	800d68a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d010      	beq.n	800d61a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2201      	movs	r2, #1
 800d608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d610:	f043 0201 	orr.w	r2, r3, #1
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	f003 0302 	and.w	r3, r3, #2
 800d620:	2b00      	cmp	r3, #0
 800d622:	d010      	beq.n	800d646 <UART_RxISR_16BIT_FIFOEN+0xde>
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2202      	movs	r2, #2
 800d634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d63c:	f043 0204 	orr.w	r2, r3, #4
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d010      	beq.n	800d672 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00b      	beq.n	800d672 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2204      	movs	r2, #4
 800d660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d668:	f043 0202 	orr.w	r2, r3, #2
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d006      	beq.n	800d68a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff f82b 	bl	800c6d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d690:	b29b      	uxth	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d132      	bne.n	800d6fc <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6a4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6812      	ldr	r2, [r2, #0]
 800d6b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6b4:	f023 0301 	bic.w	r3, r3, #1
 800d6b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d10f      	bne.n	800d6f0 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0210 	bic.w	r2, r2, #16
 800d6de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7fe ffff 	bl	800c6ec <HAL_UARTEx_RxEventCallback>
 800d6ee:	e002      	b.n	800d6f6 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7f8 fb3f 	bl	8005d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6fc:	8afb      	ldrh	r3, [r7, #22]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	f003 0320 	and.w	r3, r3, #32
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f47f af4c 	bne.w	800d5a6 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d714:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d716:	89fb      	ldrh	r3, [r7, #14]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d021      	beq.n	800d760 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d722:	89fa      	ldrh	r2, [r7, #14]
 800d724:	429a      	cmp	r2, r3
 800d726:	d21b      	bcs.n	800d760 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d736:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a0b      	ldr	r2, [pc, #44]	; (800d768 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d73c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f042 0220 	orr.w	r2, r2, #32
 800d74c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d74e:	e007      	b.n	800d760 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	699a      	ldr	r2, [r3, #24]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f042 0208 	orr.w	r2, r2, #8
 800d75e:	619a      	str	r2, [r3, #24]
}
 800d760:	bf00      	nop
 800d762:	3728      	adds	r7, #40	; 0x28
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	0800d28d 	.word	0x0800d28d

0800d76c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d101      	bne.n	800d7be <HAL_UARTEx_DisableFifoMode+0x16>
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	e027      	b.n	800d80e <HAL_UARTEx_DisableFifoMode+0x66>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2224      	movs	r2, #36	; 0x24
 800d7ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f022 0201 	bic.w	r2, r2, #1
 800d7e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2220      	movs	r2, #32
 800d800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d101      	bne.n	800d832 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d82e:	2302      	movs	r3, #2
 800d830:	e02d      	b.n	800d88e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2224      	movs	r2, #36	; 0x24
 800d83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f022 0201 	bic.w	r2, r2, #1
 800d858:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	430a      	orrs	r2, r1
 800d86c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 f850 	bl	800d914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2220      	movs	r2, #32
 800d880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d101      	bne.n	800d8ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	e02d      	b.n	800d90a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2224      	movs	r2, #36	; 0x24
 800d8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0201 	bic.w	r2, r2, #1
 800d8d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	430a      	orrs	r2, r1
 800d8e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f812 	bl	800d914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2220      	movs	r2, #32
 800d8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
	...

0800d914 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d920:	2b00      	cmp	r3, #0
 800d922:	d108      	bne.n	800d936 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d934:	e031      	b.n	800d99a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d936:	2308      	movs	r3, #8
 800d938:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d93a:	2308      	movs	r3, #8
 800d93c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	0e5b      	lsrs	r3, r3, #25
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 0307 	and.w	r3, r3, #7
 800d94c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	0f5b      	lsrs	r3, r3, #29
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	7b3a      	ldrb	r2, [r7, #12]
 800d962:	4911      	ldr	r1, [pc, #68]	; (800d9a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d964:	5c8a      	ldrb	r2, [r1, r2]
 800d966:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d96a:	7b3a      	ldrb	r2, [r7, #12]
 800d96c:	490f      	ldr	r1, [pc, #60]	; (800d9ac <UARTEx_SetNbDataToProcess+0x98>)
 800d96e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d970:	fb93 f3f2 	sdiv	r3, r3, r2
 800d974:	b29a      	uxth	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
 800d97e:	7b7a      	ldrb	r2, [r7, #13]
 800d980:	4909      	ldr	r1, [pc, #36]	; (800d9a8 <UARTEx_SetNbDataToProcess+0x94>)
 800d982:	5c8a      	ldrb	r2, [r1, r2]
 800d984:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d988:	7b7a      	ldrb	r2, [r7, #13]
 800d98a:	4908      	ldr	r1, [pc, #32]	; (800d9ac <UARTEx_SetNbDataToProcess+0x98>)
 800d98c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d98e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d99a:	bf00      	nop
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	080133b8 	.word	0x080133b8
 800d9ac:	080133c0 	.word	0x080133c0

0800d9b0 <atof>:
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	f001 bb63 	b.w	800f07c <strtod>

0800d9b6 <atoi>:
 800d9b6:	220a      	movs	r2, #10
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	f001 bbef 	b.w	800f19c <strtol>
	...

0800d9c0 <__errno>:
 800d9c0:	4b01      	ldr	r3, [pc, #4]	; (800d9c8 <__errno+0x8>)
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	20000030 	.word	0x20000030

0800d9cc <__libc_init_array>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	4d0d      	ldr	r5, [pc, #52]	; (800da04 <__libc_init_array+0x38>)
 800d9d0:	4c0d      	ldr	r4, [pc, #52]	; (800da08 <__libc_init_array+0x3c>)
 800d9d2:	1b64      	subs	r4, r4, r5
 800d9d4:	10a4      	asrs	r4, r4, #2
 800d9d6:	2600      	movs	r6, #0
 800d9d8:	42a6      	cmp	r6, r4
 800d9da:	d109      	bne.n	800d9f0 <__libc_init_array+0x24>
 800d9dc:	4d0b      	ldr	r5, [pc, #44]	; (800da0c <__libc_init_array+0x40>)
 800d9de:	4c0c      	ldr	r4, [pc, #48]	; (800da10 <__libc_init_array+0x44>)
 800d9e0:	f004 fc48 	bl	8012274 <_init>
 800d9e4:	1b64      	subs	r4, r4, r5
 800d9e6:	10a4      	asrs	r4, r4, #2
 800d9e8:	2600      	movs	r6, #0
 800d9ea:	42a6      	cmp	r6, r4
 800d9ec:	d105      	bne.n	800d9fa <__libc_init_array+0x2e>
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}
 800d9f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9f4:	4798      	blx	r3
 800d9f6:	3601      	adds	r6, #1
 800d9f8:	e7ee      	b.n	800d9d8 <__libc_init_array+0xc>
 800d9fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9fe:	4798      	blx	r3
 800da00:	3601      	adds	r6, #1
 800da02:	e7f2      	b.n	800d9ea <__libc_init_array+0x1e>
 800da04:	080138b8 	.word	0x080138b8
 800da08:	080138b8 	.word	0x080138b8
 800da0c:	080138b8 	.word	0x080138b8
 800da10:	080138bc 	.word	0x080138bc

0800da14 <memcpy>:
 800da14:	440a      	add	r2, r1
 800da16:	4291      	cmp	r1, r2
 800da18:	f100 33ff 	add.w	r3, r0, #4294967295
 800da1c:	d100      	bne.n	800da20 <memcpy+0xc>
 800da1e:	4770      	bx	lr
 800da20:	b510      	push	{r4, lr}
 800da22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da2a:	4291      	cmp	r1, r2
 800da2c:	d1f9      	bne.n	800da22 <memcpy+0xe>
 800da2e:	bd10      	pop	{r4, pc}

0800da30 <memset>:
 800da30:	4402      	add	r2, r0
 800da32:	4603      	mov	r3, r0
 800da34:	4293      	cmp	r3, r2
 800da36:	d100      	bne.n	800da3a <memset+0xa>
 800da38:	4770      	bx	lr
 800da3a:	f803 1b01 	strb.w	r1, [r3], #1
 800da3e:	e7f9      	b.n	800da34 <memset+0x4>

0800da40 <__cvt>:
 800da40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da44:	ec55 4b10 	vmov	r4, r5, d0
 800da48:	2d00      	cmp	r5, #0
 800da4a:	460e      	mov	r6, r1
 800da4c:	4619      	mov	r1, r3
 800da4e:	462b      	mov	r3, r5
 800da50:	bfbb      	ittet	lt
 800da52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da56:	461d      	movlt	r5, r3
 800da58:	2300      	movge	r3, #0
 800da5a:	232d      	movlt	r3, #45	; 0x2d
 800da5c:	700b      	strb	r3, [r1, #0]
 800da5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da64:	4691      	mov	r9, r2
 800da66:	f023 0820 	bic.w	r8, r3, #32
 800da6a:	bfbc      	itt	lt
 800da6c:	4622      	movlt	r2, r4
 800da6e:	4614      	movlt	r4, r2
 800da70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da74:	d005      	beq.n	800da82 <__cvt+0x42>
 800da76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da7a:	d100      	bne.n	800da7e <__cvt+0x3e>
 800da7c:	3601      	adds	r6, #1
 800da7e:	2102      	movs	r1, #2
 800da80:	e000      	b.n	800da84 <__cvt+0x44>
 800da82:	2103      	movs	r1, #3
 800da84:	ab03      	add	r3, sp, #12
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	ab02      	add	r3, sp, #8
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	ec45 4b10 	vmov	d0, r4, r5
 800da90:	4653      	mov	r3, sl
 800da92:	4632      	mov	r2, r6
 800da94:	f001 fcd8 	bl	800f448 <_dtoa_r>
 800da98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da9c:	4607      	mov	r7, r0
 800da9e:	d102      	bne.n	800daa6 <__cvt+0x66>
 800daa0:	f019 0f01 	tst.w	r9, #1
 800daa4:	d022      	beq.n	800daec <__cvt+0xac>
 800daa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800daaa:	eb07 0906 	add.w	r9, r7, r6
 800daae:	d110      	bne.n	800dad2 <__cvt+0x92>
 800dab0:	783b      	ldrb	r3, [r7, #0]
 800dab2:	2b30      	cmp	r3, #48	; 0x30
 800dab4:	d10a      	bne.n	800dacc <__cvt+0x8c>
 800dab6:	2200      	movs	r2, #0
 800dab8:	2300      	movs	r3, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	f7f3 f82b 	bl	8000b18 <__aeabi_dcmpeq>
 800dac2:	b918      	cbnz	r0, 800dacc <__cvt+0x8c>
 800dac4:	f1c6 0601 	rsb	r6, r6, #1
 800dac8:	f8ca 6000 	str.w	r6, [sl]
 800dacc:	f8da 3000 	ldr.w	r3, [sl]
 800dad0:	4499      	add	r9, r3
 800dad2:	2200      	movs	r2, #0
 800dad4:	2300      	movs	r3, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f3 f81d 	bl	8000b18 <__aeabi_dcmpeq>
 800dade:	b108      	cbz	r0, 800dae4 <__cvt+0xa4>
 800dae0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dae4:	2230      	movs	r2, #48	; 0x30
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	454b      	cmp	r3, r9
 800daea:	d307      	bcc.n	800dafc <__cvt+0xbc>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daf0:	1bdb      	subs	r3, r3, r7
 800daf2:	4638      	mov	r0, r7
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	b004      	add	sp, #16
 800daf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafc:	1c59      	adds	r1, r3, #1
 800dafe:	9103      	str	r1, [sp, #12]
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e7f0      	b.n	800dae6 <__cvt+0xa6>

0800db04 <__exponent>:
 800db04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db06:	4603      	mov	r3, r0
 800db08:	2900      	cmp	r1, #0
 800db0a:	bfb8      	it	lt
 800db0c:	4249      	neglt	r1, r1
 800db0e:	f803 2b02 	strb.w	r2, [r3], #2
 800db12:	bfb4      	ite	lt
 800db14:	222d      	movlt	r2, #45	; 0x2d
 800db16:	222b      	movge	r2, #43	; 0x2b
 800db18:	2909      	cmp	r1, #9
 800db1a:	7042      	strb	r2, [r0, #1]
 800db1c:	dd2a      	ble.n	800db74 <__exponent+0x70>
 800db1e:	f10d 0407 	add.w	r4, sp, #7
 800db22:	46a4      	mov	ip, r4
 800db24:	270a      	movs	r7, #10
 800db26:	46a6      	mov	lr, r4
 800db28:	460a      	mov	r2, r1
 800db2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800db2e:	fb07 1516 	mls	r5, r7, r6, r1
 800db32:	3530      	adds	r5, #48	; 0x30
 800db34:	2a63      	cmp	r2, #99	; 0x63
 800db36:	f104 34ff 	add.w	r4, r4, #4294967295
 800db3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db3e:	4631      	mov	r1, r6
 800db40:	dcf1      	bgt.n	800db26 <__exponent+0x22>
 800db42:	3130      	adds	r1, #48	; 0x30
 800db44:	f1ae 0502 	sub.w	r5, lr, #2
 800db48:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db4c:	1c44      	adds	r4, r0, #1
 800db4e:	4629      	mov	r1, r5
 800db50:	4561      	cmp	r1, ip
 800db52:	d30a      	bcc.n	800db6a <__exponent+0x66>
 800db54:	f10d 0209 	add.w	r2, sp, #9
 800db58:	eba2 020e 	sub.w	r2, r2, lr
 800db5c:	4565      	cmp	r5, ip
 800db5e:	bf88      	it	hi
 800db60:	2200      	movhi	r2, #0
 800db62:	4413      	add	r3, r2
 800db64:	1a18      	subs	r0, r3, r0
 800db66:	b003      	add	sp, #12
 800db68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db72:	e7ed      	b.n	800db50 <__exponent+0x4c>
 800db74:	2330      	movs	r3, #48	; 0x30
 800db76:	3130      	adds	r1, #48	; 0x30
 800db78:	7083      	strb	r3, [r0, #2]
 800db7a:	70c1      	strb	r1, [r0, #3]
 800db7c:	1d03      	adds	r3, r0, #4
 800db7e:	e7f1      	b.n	800db64 <__exponent+0x60>

0800db80 <_printf_float>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	ed2d 8b02 	vpush	{d8}
 800db88:	b08d      	sub	sp, #52	; 0x34
 800db8a:	460c      	mov	r4, r1
 800db8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db90:	4616      	mov	r6, r2
 800db92:	461f      	mov	r7, r3
 800db94:	4605      	mov	r5, r0
 800db96:	f002 ff69 	bl	8010a6c <_localeconv_r>
 800db9a:	f8d0 a000 	ldr.w	sl, [r0]
 800db9e:	4650      	mov	r0, sl
 800dba0:	f7f2 fb3e 	bl	8000220 <strlen>
 800dba4:	2300      	movs	r3, #0
 800dba6:	930a      	str	r3, [sp, #40]	; 0x28
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	9305      	str	r3, [sp, #20]
 800dbac:	f8d8 3000 	ldr.w	r3, [r8]
 800dbb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dbb4:	3307      	adds	r3, #7
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	f103 0208 	add.w	r2, r3, #8
 800dbbe:	f8c8 2000 	str.w	r2, [r8]
 800dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dbca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dbce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbd2:	9307      	str	r3, [sp, #28]
 800dbd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbd8:	ee08 0a10 	vmov	s16, r0
 800dbdc:	4b9f      	ldr	r3, [pc, #636]	; (800de5c <_printf_float+0x2dc>)
 800dbde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe6:	f7f2 ffc9 	bl	8000b7c <__aeabi_dcmpun>
 800dbea:	bb88      	cbnz	r0, 800dc50 <_printf_float+0xd0>
 800dbec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbf0:	4b9a      	ldr	r3, [pc, #616]	; (800de5c <_printf_float+0x2dc>)
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf6:	f7f2 ffa3 	bl	8000b40 <__aeabi_dcmple>
 800dbfa:	bb48      	cbnz	r0, 800dc50 <_printf_float+0xd0>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4640      	mov	r0, r8
 800dc02:	4649      	mov	r1, r9
 800dc04:	f7f2 ff92 	bl	8000b2c <__aeabi_dcmplt>
 800dc08:	b110      	cbz	r0, 800dc10 <_printf_float+0x90>
 800dc0a:	232d      	movs	r3, #45	; 0x2d
 800dc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc10:	4b93      	ldr	r3, [pc, #588]	; (800de60 <_printf_float+0x2e0>)
 800dc12:	4894      	ldr	r0, [pc, #592]	; (800de64 <_printf_float+0x2e4>)
 800dc14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dc18:	bf94      	ite	ls
 800dc1a:	4698      	movls	r8, r3
 800dc1c:	4680      	movhi	r8, r0
 800dc1e:	2303      	movs	r3, #3
 800dc20:	6123      	str	r3, [r4, #16]
 800dc22:	9b05      	ldr	r3, [sp, #20]
 800dc24:	f023 0204 	bic.w	r2, r3, #4
 800dc28:	6022      	str	r2, [r4, #0]
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	9700      	str	r7, [sp, #0]
 800dc30:	4633      	mov	r3, r6
 800dc32:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 f9d8 	bl	800dfec <_printf_common>
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	f040 8090 	bne.w	800dd62 <_printf_float+0x1e2>
 800dc42:	f04f 30ff 	mov.w	r0, #4294967295
 800dc46:	b00d      	add	sp, #52	; 0x34
 800dc48:	ecbd 8b02 	vpop	{d8}
 800dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc50:	4642      	mov	r2, r8
 800dc52:	464b      	mov	r3, r9
 800dc54:	4640      	mov	r0, r8
 800dc56:	4649      	mov	r1, r9
 800dc58:	f7f2 ff90 	bl	8000b7c <__aeabi_dcmpun>
 800dc5c:	b140      	cbz	r0, 800dc70 <_printf_float+0xf0>
 800dc5e:	464b      	mov	r3, r9
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bfbc      	itt	lt
 800dc64:	232d      	movlt	r3, #45	; 0x2d
 800dc66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc6a:	487f      	ldr	r0, [pc, #508]	; (800de68 <_printf_float+0x2e8>)
 800dc6c:	4b7f      	ldr	r3, [pc, #508]	; (800de6c <_printf_float+0x2ec>)
 800dc6e:	e7d1      	b.n	800dc14 <_printf_float+0x94>
 800dc70:	6863      	ldr	r3, [r4, #4]
 800dc72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc76:	9206      	str	r2, [sp, #24]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	d13f      	bne.n	800dcfc <_printf_float+0x17c>
 800dc7c:	2306      	movs	r3, #6
 800dc7e:	6063      	str	r3, [r4, #4]
 800dc80:	9b05      	ldr	r3, [sp, #20]
 800dc82:	6861      	ldr	r1, [r4, #4]
 800dc84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc88:	2300      	movs	r3, #0
 800dc8a:	9303      	str	r3, [sp, #12]
 800dc8c:	ab0a      	add	r3, sp, #40	; 0x28
 800dc8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc92:	ab09      	add	r3, sp, #36	; 0x24
 800dc94:	ec49 8b10 	vmov	d0, r8, r9
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	6022      	str	r2, [r4, #0]
 800dc9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dca0:	4628      	mov	r0, r5
 800dca2:	f7ff fecd 	bl	800da40 <__cvt>
 800dca6:	9b06      	ldr	r3, [sp, #24]
 800dca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcaa:	2b47      	cmp	r3, #71	; 0x47
 800dcac:	4680      	mov	r8, r0
 800dcae:	d108      	bne.n	800dcc2 <_printf_float+0x142>
 800dcb0:	1cc8      	adds	r0, r1, #3
 800dcb2:	db02      	blt.n	800dcba <_printf_float+0x13a>
 800dcb4:	6863      	ldr	r3, [r4, #4]
 800dcb6:	4299      	cmp	r1, r3
 800dcb8:	dd41      	ble.n	800dd3e <_printf_float+0x1be>
 800dcba:	f1ab 0b02 	sub.w	fp, fp, #2
 800dcbe:	fa5f fb8b 	uxtb.w	fp, fp
 800dcc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dcc6:	d820      	bhi.n	800dd0a <_printf_float+0x18a>
 800dcc8:	3901      	subs	r1, #1
 800dcca:	465a      	mov	r2, fp
 800dccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcd0:	9109      	str	r1, [sp, #36]	; 0x24
 800dcd2:	f7ff ff17 	bl	800db04 <__exponent>
 800dcd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd8:	1813      	adds	r3, r2, r0
 800dcda:	2a01      	cmp	r2, #1
 800dcdc:	4681      	mov	r9, r0
 800dcde:	6123      	str	r3, [r4, #16]
 800dce0:	dc02      	bgt.n	800dce8 <_printf_float+0x168>
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	07d2      	lsls	r2, r2, #31
 800dce6:	d501      	bpl.n	800dcec <_printf_float+0x16c>
 800dce8:	3301      	adds	r3, #1
 800dcea:	6123      	str	r3, [r4, #16]
 800dcec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d09c      	beq.n	800dc2e <_printf_float+0xae>
 800dcf4:	232d      	movs	r3, #45	; 0x2d
 800dcf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcfa:	e798      	b.n	800dc2e <_printf_float+0xae>
 800dcfc:	9a06      	ldr	r2, [sp, #24]
 800dcfe:	2a47      	cmp	r2, #71	; 0x47
 800dd00:	d1be      	bne.n	800dc80 <_printf_float+0x100>
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1bc      	bne.n	800dc80 <_printf_float+0x100>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e7b9      	b.n	800dc7e <_printf_float+0xfe>
 800dd0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dd0e:	d118      	bne.n	800dd42 <_printf_float+0x1c2>
 800dd10:	2900      	cmp	r1, #0
 800dd12:	6863      	ldr	r3, [r4, #4]
 800dd14:	dd0b      	ble.n	800dd2e <_printf_float+0x1ae>
 800dd16:	6121      	str	r1, [r4, #16]
 800dd18:	b913      	cbnz	r3, 800dd20 <_printf_float+0x1a0>
 800dd1a:	6822      	ldr	r2, [r4, #0]
 800dd1c:	07d0      	lsls	r0, r2, #31
 800dd1e:	d502      	bpl.n	800dd26 <_printf_float+0x1a6>
 800dd20:	3301      	adds	r3, #1
 800dd22:	440b      	add	r3, r1
 800dd24:	6123      	str	r3, [r4, #16]
 800dd26:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd28:	f04f 0900 	mov.w	r9, #0
 800dd2c:	e7de      	b.n	800dcec <_printf_float+0x16c>
 800dd2e:	b913      	cbnz	r3, 800dd36 <_printf_float+0x1b6>
 800dd30:	6822      	ldr	r2, [r4, #0]
 800dd32:	07d2      	lsls	r2, r2, #31
 800dd34:	d501      	bpl.n	800dd3a <_printf_float+0x1ba>
 800dd36:	3302      	adds	r3, #2
 800dd38:	e7f4      	b.n	800dd24 <_printf_float+0x1a4>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e7f2      	b.n	800dd24 <_printf_float+0x1a4>
 800dd3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd44:	4299      	cmp	r1, r3
 800dd46:	db05      	blt.n	800dd54 <_printf_float+0x1d4>
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	6121      	str	r1, [r4, #16]
 800dd4c:	07d8      	lsls	r0, r3, #31
 800dd4e:	d5ea      	bpl.n	800dd26 <_printf_float+0x1a6>
 800dd50:	1c4b      	adds	r3, r1, #1
 800dd52:	e7e7      	b.n	800dd24 <_printf_float+0x1a4>
 800dd54:	2900      	cmp	r1, #0
 800dd56:	bfd4      	ite	le
 800dd58:	f1c1 0202 	rsble	r2, r1, #2
 800dd5c:	2201      	movgt	r2, #1
 800dd5e:	4413      	add	r3, r2
 800dd60:	e7e0      	b.n	800dd24 <_printf_float+0x1a4>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	055a      	lsls	r2, r3, #21
 800dd66:	d407      	bmi.n	800dd78 <_printf_float+0x1f8>
 800dd68:	6923      	ldr	r3, [r4, #16]
 800dd6a:	4642      	mov	r2, r8
 800dd6c:	4631      	mov	r1, r6
 800dd6e:	4628      	mov	r0, r5
 800dd70:	47b8      	blx	r7
 800dd72:	3001      	adds	r0, #1
 800dd74:	d12c      	bne.n	800ddd0 <_printf_float+0x250>
 800dd76:	e764      	b.n	800dc42 <_printf_float+0xc2>
 800dd78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd7c:	f240 80e0 	bls.w	800df40 <_printf_float+0x3c0>
 800dd80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd84:	2200      	movs	r2, #0
 800dd86:	2300      	movs	r3, #0
 800dd88:	f7f2 fec6 	bl	8000b18 <__aeabi_dcmpeq>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d034      	beq.n	800ddfa <_printf_float+0x27a>
 800dd90:	4a37      	ldr	r2, [pc, #220]	; (800de70 <_printf_float+0x2f0>)
 800dd92:	2301      	movs	r3, #1
 800dd94:	4631      	mov	r1, r6
 800dd96:	4628      	mov	r0, r5
 800dd98:	47b8      	blx	r7
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	f43f af51 	beq.w	800dc42 <_printf_float+0xc2>
 800dda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dda4:	429a      	cmp	r2, r3
 800dda6:	db02      	blt.n	800ddae <_printf_float+0x22e>
 800dda8:	6823      	ldr	r3, [r4, #0]
 800ddaa:	07d8      	lsls	r0, r3, #31
 800ddac:	d510      	bpl.n	800ddd0 <_printf_float+0x250>
 800ddae:	ee18 3a10 	vmov	r3, s16
 800ddb2:	4652      	mov	r2, sl
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	47b8      	blx	r7
 800ddba:	3001      	adds	r0, #1
 800ddbc:	f43f af41 	beq.w	800dc42 <_printf_float+0xc2>
 800ddc0:	f04f 0800 	mov.w	r8, #0
 800ddc4:	f104 091a 	add.w	r9, r4, #26
 800ddc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	4543      	cmp	r3, r8
 800ddce:	dc09      	bgt.n	800dde4 <_printf_float+0x264>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	079b      	lsls	r3, r3, #30
 800ddd4:	f100 8105 	bmi.w	800dfe2 <_printf_float+0x462>
 800ddd8:	68e0      	ldr	r0, [r4, #12]
 800ddda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dddc:	4298      	cmp	r0, r3
 800ddde:	bfb8      	it	lt
 800dde0:	4618      	movlt	r0, r3
 800dde2:	e730      	b.n	800dc46 <_printf_float+0xc6>
 800dde4:	2301      	movs	r3, #1
 800dde6:	464a      	mov	r2, r9
 800dde8:	4631      	mov	r1, r6
 800ddea:	4628      	mov	r0, r5
 800ddec:	47b8      	blx	r7
 800ddee:	3001      	adds	r0, #1
 800ddf0:	f43f af27 	beq.w	800dc42 <_printf_float+0xc2>
 800ddf4:	f108 0801 	add.w	r8, r8, #1
 800ddf8:	e7e6      	b.n	800ddc8 <_printf_float+0x248>
 800ddfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dc39      	bgt.n	800de74 <_printf_float+0x2f4>
 800de00:	4a1b      	ldr	r2, [pc, #108]	; (800de70 <_printf_float+0x2f0>)
 800de02:	2301      	movs	r3, #1
 800de04:	4631      	mov	r1, r6
 800de06:	4628      	mov	r0, r5
 800de08:	47b8      	blx	r7
 800de0a:	3001      	adds	r0, #1
 800de0c:	f43f af19 	beq.w	800dc42 <_printf_float+0xc2>
 800de10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de14:	4313      	orrs	r3, r2
 800de16:	d102      	bne.n	800de1e <_printf_float+0x29e>
 800de18:	6823      	ldr	r3, [r4, #0]
 800de1a:	07d9      	lsls	r1, r3, #31
 800de1c:	d5d8      	bpl.n	800ddd0 <_printf_float+0x250>
 800de1e:	ee18 3a10 	vmov	r3, s16
 800de22:	4652      	mov	r2, sl
 800de24:	4631      	mov	r1, r6
 800de26:	4628      	mov	r0, r5
 800de28:	47b8      	blx	r7
 800de2a:	3001      	adds	r0, #1
 800de2c:	f43f af09 	beq.w	800dc42 <_printf_float+0xc2>
 800de30:	f04f 0900 	mov.w	r9, #0
 800de34:	f104 0a1a 	add.w	sl, r4, #26
 800de38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3a:	425b      	negs	r3, r3
 800de3c:	454b      	cmp	r3, r9
 800de3e:	dc01      	bgt.n	800de44 <_printf_float+0x2c4>
 800de40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de42:	e792      	b.n	800dd6a <_printf_float+0x1ea>
 800de44:	2301      	movs	r3, #1
 800de46:	4652      	mov	r2, sl
 800de48:	4631      	mov	r1, r6
 800de4a:	4628      	mov	r0, r5
 800de4c:	47b8      	blx	r7
 800de4e:	3001      	adds	r0, #1
 800de50:	f43f aef7 	beq.w	800dc42 <_printf_float+0xc2>
 800de54:	f109 0901 	add.w	r9, r9, #1
 800de58:	e7ee      	b.n	800de38 <_printf_float+0x2b8>
 800de5a:	bf00      	nop
 800de5c:	7fefffff 	.word	0x7fefffff
 800de60:	080133cc 	.word	0x080133cc
 800de64:	080133d0 	.word	0x080133d0
 800de68:	080133d8 	.word	0x080133d8
 800de6c:	080133d4 	.word	0x080133d4
 800de70:	080133dc 	.word	0x080133dc
 800de74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de78:	429a      	cmp	r2, r3
 800de7a:	bfa8      	it	ge
 800de7c:	461a      	movge	r2, r3
 800de7e:	2a00      	cmp	r2, #0
 800de80:	4691      	mov	r9, r2
 800de82:	dc37      	bgt.n	800def4 <_printf_float+0x374>
 800de84:	f04f 0b00 	mov.w	fp, #0
 800de88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de8c:	f104 021a 	add.w	r2, r4, #26
 800de90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de92:	9305      	str	r3, [sp, #20]
 800de94:	eba3 0309 	sub.w	r3, r3, r9
 800de98:	455b      	cmp	r3, fp
 800de9a:	dc33      	bgt.n	800df04 <_printf_float+0x384>
 800de9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dea0:	429a      	cmp	r2, r3
 800dea2:	db3b      	blt.n	800df1c <_printf_float+0x39c>
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	07da      	lsls	r2, r3, #31
 800dea8:	d438      	bmi.n	800df1c <_printf_float+0x39c>
 800deaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800deac:	9b05      	ldr	r3, [sp, #20]
 800deae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	eba2 0901 	sub.w	r9, r2, r1
 800deb6:	4599      	cmp	r9, r3
 800deb8:	bfa8      	it	ge
 800deba:	4699      	movge	r9, r3
 800debc:	f1b9 0f00 	cmp.w	r9, #0
 800dec0:	dc35      	bgt.n	800df2e <_printf_float+0x3ae>
 800dec2:	f04f 0800 	mov.w	r8, #0
 800dec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deca:	f104 0a1a 	add.w	sl, r4, #26
 800dece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ded2:	1a9b      	subs	r3, r3, r2
 800ded4:	eba3 0309 	sub.w	r3, r3, r9
 800ded8:	4543      	cmp	r3, r8
 800deda:	f77f af79 	ble.w	800ddd0 <_printf_float+0x250>
 800dede:	2301      	movs	r3, #1
 800dee0:	4652      	mov	r2, sl
 800dee2:	4631      	mov	r1, r6
 800dee4:	4628      	mov	r0, r5
 800dee6:	47b8      	blx	r7
 800dee8:	3001      	adds	r0, #1
 800deea:	f43f aeaa 	beq.w	800dc42 <_printf_float+0xc2>
 800deee:	f108 0801 	add.w	r8, r8, #1
 800def2:	e7ec      	b.n	800dece <_printf_float+0x34e>
 800def4:	4613      	mov	r3, r2
 800def6:	4631      	mov	r1, r6
 800def8:	4642      	mov	r2, r8
 800defa:	4628      	mov	r0, r5
 800defc:	47b8      	blx	r7
 800defe:	3001      	adds	r0, #1
 800df00:	d1c0      	bne.n	800de84 <_printf_float+0x304>
 800df02:	e69e      	b.n	800dc42 <_printf_float+0xc2>
 800df04:	2301      	movs	r3, #1
 800df06:	4631      	mov	r1, r6
 800df08:	4628      	mov	r0, r5
 800df0a:	9205      	str	r2, [sp, #20]
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	f43f ae97 	beq.w	800dc42 <_printf_float+0xc2>
 800df14:	9a05      	ldr	r2, [sp, #20]
 800df16:	f10b 0b01 	add.w	fp, fp, #1
 800df1a:	e7b9      	b.n	800de90 <_printf_float+0x310>
 800df1c:	ee18 3a10 	vmov	r3, s16
 800df20:	4652      	mov	r2, sl
 800df22:	4631      	mov	r1, r6
 800df24:	4628      	mov	r0, r5
 800df26:	47b8      	blx	r7
 800df28:	3001      	adds	r0, #1
 800df2a:	d1be      	bne.n	800deaa <_printf_float+0x32a>
 800df2c:	e689      	b.n	800dc42 <_printf_float+0xc2>
 800df2e:	9a05      	ldr	r2, [sp, #20]
 800df30:	464b      	mov	r3, r9
 800df32:	4442      	add	r2, r8
 800df34:	4631      	mov	r1, r6
 800df36:	4628      	mov	r0, r5
 800df38:	47b8      	blx	r7
 800df3a:	3001      	adds	r0, #1
 800df3c:	d1c1      	bne.n	800dec2 <_printf_float+0x342>
 800df3e:	e680      	b.n	800dc42 <_printf_float+0xc2>
 800df40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df42:	2a01      	cmp	r2, #1
 800df44:	dc01      	bgt.n	800df4a <_printf_float+0x3ca>
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d538      	bpl.n	800dfbc <_printf_float+0x43c>
 800df4a:	2301      	movs	r3, #1
 800df4c:	4642      	mov	r2, r8
 800df4e:	4631      	mov	r1, r6
 800df50:	4628      	mov	r0, r5
 800df52:	47b8      	blx	r7
 800df54:	3001      	adds	r0, #1
 800df56:	f43f ae74 	beq.w	800dc42 <_printf_float+0xc2>
 800df5a:	ee18 3a10 	vmov	r3, s16
 800df5e:	4652      	mov	r2, sl
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	47b8      	blx	r7
 800df66:	3001      	adds	r0, #1
 800df68:	f43f ae6b 	beq.w	800dc42 <_printf_float+0xc2>
 800df6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df70:	2200      	movs	r2, #0
 800df72:	2300      	movs	r3, #0
 800df74:	f7f2 fdd0 	bl	8000b18 <__aeabi_dcmpeq>
 800df78:	b9d8      	cbnz	r0, 800dfb2 <_printf_float+0x432>
 800df7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df7c:	f108 0201 	add.w	r2, r8, #1
 800df80:	3b01      	subs	r3, #1
 800df82:	4631      	mov	r1, r6
 800df84:	4628      	mov	r0, r5
 800df86:	47b8      	blx	r7
 800df88:	3001      	adds	r0, #1
 800df8a:	d10e      	bne.n	800dfaa <_printf_float+0x42a>
 800df8c:	e659      	b.n	800dc42 <_printf_float+0xc2>
 800df8e:	2301      	movs	r3, #1
 800df90:	4652      	mov	r2, sl
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	f43f ae52 	beq.w	800dc42 <_printf_float+0xc2>
 800df9e:	f108 0801 	add.w	r8, r8, #1
 800dfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	4543      	cmp	r3, r8
 800dfa8:	dcf1      	bgt.n	800df8e <_printf_float+0x40e>
 800dfaa:	464b      	mov	r3, r9
 800dfac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfb0:	e6dc      	b.n	800dd6c <_printf_float+0x1ec>
 800dfb2:	f04f 0800 	mov.w	r8, #0
 800dfb6:	f104 0a1a 	add.w	sl, r4, #26
 800dfba:	e7f2      	b.n	800dfa2 <_printf_float+0x422>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	4642      	mov	r2, r8
 800dfc0:	e7df      	b.n	800df82 <_printf_float+0x402>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	464a      	mov	r2, r9
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	4628      	mov	r0, r5
 800dfca:	47b8      	blx	r7
 800dfcc:	3001      	adds	r0, #1
 800dfce:	f43f ae38 	beq.w	800dc42 <_printf_float+0xc2>
 800dfd2:	f108 0801 	add.w	r8, r8, #1
 800dfd6:	68e3      	ldr	r3, [r4, #12]
 800dfd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfda:	1a5b      	subs	r3, r3, r1
 800dfdc:	4543      	cmp	r3, r8
 800dfde:	dcf0      	bgt.n	800dfc2 <_printf_float+0x442>
 800dfe0:	e6fa      	b.n	800ddd8 <_printf_float+0x258>
 800dfe2:	f04f 0800 	mov.w	r8, #0
 800dfe6:	f104 0919 	add.w	r9, r4, #25
 800dfea:	e7f4      	b.n	800dfd6 <_printf_float+0x456>

0800dfec <_printf_common>:
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	4616      	mov	r6, r2
 800dff2:	4699      	mov	r9, r3
 800dff4:	688a      	ldr	r2, [r1, #8]
 800dff6:	690b      	ldr	r3, [r1, #16]
 800dff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dffc:	4293      	cmp	r3, r2
 800dffe:	bfb8      	it	lt
 800e000:	4613      	movlt	r3, r2
 800e002:	6033      	str	r3, [r6, #0]
 800e004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e008:	4607      	mov	r7, r0
 800e00a:	460c      	mov	r4, r1
 800e00c:	b10a      	cbz	r2, 800e012 <_printf_common+0x26>
 800e00e:	3301      	adds	r3, #1
 800e010:	6033      	str	r3, [r6, #0]
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	0699      	lsls	r1, r3, #26
 800e016:	bf42      	ittt	mi
 800e018:	6833      	ldrmi	r3, [r6, #0]
 800e01a:	3302      	addmi	r3, #2
 800e01c:	6033      	strmi	r3, [r6, #0]
 800e01e:	6825      	ldr	r5, [r4, #0]
 800e020:	f015 0506 	ands.w	r5, r5, #6
 800e024:	d106      	bne.n	800e034 <_printf_common+0x48>
 800e026:	f104 0a19 	add.w	sl, r4, #25
 800e02a:	68e3      	ldr	r3, [r4, #12]
 800e02c:	6832      	ldr	r2, [r6, #0]
 800e02e:	1a9b      	subs	r3, r3, r2
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc26      	bgt.n	800e082 <_printf_common+0x96>
 800e034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e038:	1e13      	subs	r3, r2, #0
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	bf18      	it	ne
 800e03e:	2301      	movne	r3, #1
 800e040:	0692      	lsls	r2, r2, #26
 800e042:	d42b      	bmi.n	800e09c <_printf_common+0xb0>
 800e044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e048:	4649      	mov	r1, r9
 800e04a:	4638      	mov	r0, r7
 800e04c:	47c0      	blx	r8
 800e04e:	3001      	adds	r0, #1
 800e050:	d01e      	beq.n	800e090 <_printf_common+0xa4>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	68e5      	ldr	r5, [r4, #12]
 800e056:	6832      	ldr	r2, [r6, #0]
 800e058:	f003 0306 	and.w	r3, r3, #6
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	bf08      	it	eq
 800e060:	1aad      	subeq	r5, r5, r2
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	6922      	ldr	r2, [r4, #16]
 800e066:	bf0c      	ite	eq
 800e068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e06c:	2500      	movne	r5, #0
 800e06e:	4293      	cmp	r3, r2
 800e070:	bfc4      	itt	gt
 800e072:	1a9b      	subgt	r3, r3, r2
 800e074:	18ed      	addgt	r5, r5, r3
 800e076:	2600      	movs	r6, #0
 800e078:	341a      	adds	r4, #26
 800e07a:	42b5      	cmp	r5, r6
 800e07c:	d11a      	bne.n	800e0b4 <_printf_common+0xc8>
 800e07e:	2000      	movs	r0, #0
 800e080:	e008      	b.n	800e094 <_printf_common+0xa8>
 800e082:	2301      	movs	r3, #1
 800e084:	4652      	mov	r2, sl
 800e086:	4649      	mov	r1, r9
 800e088:	4638      	mov	r0, r7
 800e08a:	47c0      	blx	r8
 800e08c:	3001      	adds	r0, #1
 800e08e:	d103      	bne.n	800e098 <_printf_common+0xac>
 800e090:	f04f 30ff 	mov.w	r0, #4294967295
 800e094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e098:	3501      	adds	r5, #1
 800e09a:	e7c6      	b.n	800e02a <_printf_common+0x3e>
 800e09c:	18e1      	adds	r1, r4, r3
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	2030      	movs	r0, #48	; 0x30
 800e0a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0a6:	4422      	add	r2, r4
 800e0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0b0:	3302      	adds	r3, #2
 800e0b2:	e7c7      	b.n	800e044 <_printf_common+0x58>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	4649      	mov	r1, r9
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	47c0      	blx	r8
 800e0be:	3001      	adds	r0, #1
 800e0c0:	d0e6      	beq.n	800e090 <_printf_common+0xa4>
 800e0c2:	3601      	adds	r6, #1
 800e0c4:	e7d9      	b.n	800e07a <_printf_common+0x8e>
	...

0800e0c8 <_printf_i>:
 800e0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	4691      	mov	r9, r2
 800e0d0:	7e27      	ldrb	r7, [r4, #24]
 800e0d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0d4:	2f78      	cmp	r7, #120	; 0x78
 800e0d6:	4680      	mov	r8, r0
 800e0d8:	469a      	mov	sl, r3
 800e0da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0de:	d807      	bhi.n	800e0f0 <_printf_i+0x28>
 800e0e0:	2f62      	cmp	r7, #98	; 0x62
 800e0e2:	d80a      	bhi.n	800e0fa <_printf_i+0x32>
 800e0e4:	2f00      	cmp	r7, #0
 800e0e6:	f000 80d8 	beq.w	800e29a <_printf_i+0x1d2>
 800e0ea:	2f58      	cmp	r7, #88	; 0x58
 800e0ec:	f000 80a3 	beq.w	800e236 <_printf_i+0x16e>
 800e0f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0f8:	e03a      	b.n	800e170 <_printf_i+0xa8>
 800e0fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0fe:	2b15      	cmp	r3, #21
 800e100:	d8f6      	bhi.n	800e0f0 <_printf_i+0x28>
 800e102:	a001      	add	r0, pc, #4	; (adr r0, 800e108 <_printf_i+0x40>)
 800e104:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e108:	0800e161 	.word	0x0800e161
 800e10c:	0800e175 	.word	0x0800e175
 800e110:	0800e0f1 	.word	0x0800e0f1
 800e114:	0800e0f1 	.word	0x0800e0f1
 800e118:	0800e0f1 	.word	0x0800e0f1
 800e11c:	0800e0f1 	.word	0x0800e0f1
 800e120:	0800e175 	.word	0x0800e175
 800e124:	0800e0f1 	.word	0x0800e0f1
 800e128:	0800e0f1 	.word	0x0800e0f1
 800e12c:	0800e0f1 	.word	0x0800e0f1
 800e130:	0800e0f1 	.word	0x0800e0f1
 800e134:	0800e281 	.word	0x0800e281
 800e138:	0800e1a5 	.word	0x0800e1a5
 800e13c:	0800e263 	.word	0x0800e263
 800e140:	0800e0f1 	.word	0x0800e0f1
 800e144:	0800e0f1 	.word	0x0800e0f1
 800e148:	0800e2a3 	.word	0x0800e2a3
 800e14c:	0800e0f1 	.word	0x0800e0f1
 800e150:	0800e1a5 	.word	0x0800e1a5
 800e154:	0800e0f1 	.word	0x0800e0f1
 800e158:	0800e0f1 	.word	0x0800e0f1
 800e15c:	0800e26b 	.word	0x0800e26b
 800e160:	680b      	ldr	r3, [r1, #0]
 800e162:	1d1a      	adds	r2, r3, #4
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	600a      	str	r2, [r1, #0]
 800e168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e16c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e170:	2301      	movs	r3, #1
 800e172:	e0a3      	b.n	800e2bc <_printf_i+0x1f4>
 800e174:	6825      	ldr	r5, [r4, #0]
 800e176:	6808      	ldr	r0, [r1, #0]
 800e178:	062e      	lsls	r6, r5, #24
 800e17a:	f100 0304 	add.w	r3, r0, #4
 800e17e:	d50a      	bpl.n	800e196 <_printf_i+0xce>
 800e180:	6805      	ldr	r5, [r0, #0]
 800e182:	600b      	str	r3, [r1, #0]
 800e184:	2d00      	cmp	r5, #0
 800e186:	da03      	bge.n	800e190 <_printf_i+0xc8>
 800e188:	232d      	movs	r3, #45	; 0x2d
 800e18a:	426d      	negs	r5, r5
 800e18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e190:	485e      	ldr	r0, [pc, #376]	; (800e30c <_printf_i+0x244>)
 800e192:	230a      	movs	r3, #10
 800e194:	e019      	b.n	800e1ca <_printf_i+0x102>
 800e196:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e19a:	6805      	ldr	r5, [r0, #0]
 800e19c:	600b      	str	r3, [r1, #0]
 800e19e:	bf18      	it	ne
 800e1a0:	b22d      	sxthne	r5, r5
 800e1a2:	e7ef      	b.n	800e184 <_printf_i+0xbc>
 800e1a4:	680b      	ldr	r3, [r1, #0]
 800e1a6:	6825      	ldr	r5, [r4, #0]
 800e1a8:	1d18      	adds	r0, r3, #4
 800e1aa:	6008      	str	r0, [r1, #0]
 800e1ac:	0628      	lsls	r0, r5, #24
 800e1ae:	d501      	bpl.n	800e1b4 <_printf_i+0xec>
 800e1b0:	681d      	ldr	r5, [r3, #0]
 800e1b2:	e002      	b.n	800e1ba <_printf_i+0xf2>
 800e1b4:	0669      	lsls	r1, r5, #25
 800e1b6:	d5fb      	bpl.n	800e1b0 <_printf_i+0xe8>
 800e1b8:	881d      	ldrh	r5, [r3, #0]
 800e1ba:	4854      	ldr	r0, [pc, #336]	; (800e30c <_printf_i+0x244>)
 800e1bc:	2f6f      	cmp	r7, #111	; 0x6f
 800e1be:	bf0c      	ite	eq
 800e1c0:	2308      	moveq	r3, #8
 800e1c2:	230a      	movne	r3, #10
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1ca:	6866      	ldr	r6, [r4, #4]
 800e1cc:	60a6      	str	r6, [r4, #8]
 800e1ce:	2e00      	cmp	r6, #0
 800e1d0:	bfa2      	ittt	ge
 800e1d2:	6821      	ldrge	r1, [r4, #0]
 800e1d4:	f021 0104 	bicge.w	r1, r1, #4
 800e1d8:	6021      	strge	r1, [r4, #0]
 800e1da:	b90d      	cbnz	r5, 800e1e0 <_printf_i+0x118>
 800e1dc:	2e00      	cmp	r6, #0
 800e1de:	d04d      	beq.n	800e27c <_printf_i+0x1b4>
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1e6:	fb03 5711 	mls	r7, r3, r1, r5
 800e1ea:	5dc7      	ldrb	r7, [r0, r7]
 800e1ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1f0:	462f      	mov	r7, r5
 800e1f2:	42bb      	cmp	r3, r7
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	d9f4      	bls.n	800e1e2 <_printf_i+0x11a>
 800e1f8:	2b08      	cmp	r3, #8
 800e1fa:	d10b      	bne.n	800e214 <_printf_i+0x14c>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	07df      	lsls	r7, r3, #31
 800e200:	d508      	bpl.n	800e214 <_printf_i+0x14c>
 800e202:	6923      	ldr	r3, [r4, #16]
 800e204:	6861      	ldr	r1, [r4, #4]
 800e206:	4299      	cmp	r1, r3
 800e208:	bfde      	ittt	le
 800e20a:	2330      	movle	r3, #48	; 0x30
 800e20c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e210:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e214:	1b92      	subs	r2, r2, r6
 800e216:	6122      	str	r2, [r4, #16]
 800e218:	f8cd a000 	str.w	sl, [sp]
 800e21c:	464b      	mov	r3, r9
 800e21e:	aa03      	add	r2, sp, #12
 800e220:	4621      	mov	r1, r4
 800e222:	4640      	mov	r0, r8
 800e224:	f7ff fee2 	bl	800dfec <_printf_common>
 800e228:	3001      	adds	r0, #1
 800e22a:	d14c      	bne.n	800e2c6 <_printf_i+0x1fe>
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	b004      	add	sp, #16
 800e232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e236:	4835      	ldr	r0, [pc, #212]	; (800e30c <_printf_i+0x244>)
 800e238:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	680e      	ldr	r6, [r1, #0]
 800e240:	061f      	lsls	r7, r3, #24
 800e242:	f856 5b04 	ldr.w	r5, [r6], #4
 800e246:	600e      	str	r6, [r1, #0]
 800e248:	d514      	bpl.n	800e274 <_printf_i+0x1ac>
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	bf44      	itt	mi
 800e24e:	f043 0320 	orrmi.w	r3, r3, #32
 800e252:	6023      	strmi	r3, [r4, #0]
 800e254:	b91d      	cbnz	r5, 800e25e <_printf_i+0x196>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	f023 0320 	bic.w	r3, r3, #32
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	2310      	movs	r3, #16
 800e260:	e7b0      	b.n	800e1c4 <_printf_i+0xfc>
 800e262:	6823      	ldr	r3, [r4, #0]
 800e264:	f043 0320 	orr.w	r3, r3, #32
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	2378      	movs	r3, #120	; 0x78
 800e26c:	4828      	ldr	r0, [pc, #160]	; (800e310 <_printf_i+0x248>)
 800e26e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e272:	e7e3      	b.n	800e23c <_printf_i+0x174>
 800e274:	065e      	lsls	r6, r3, #25
 800e276:	bf48      	it	mi
 800e278:	b2ad      	uxthmi	r5, r5
 800e27a:	e7e6      	b.n	800e24a <_printf_i+0x182>
 800e27c:	4616      	mov	r6, r2
 800e27e:	e7bb      	b.n	800e1f8 <_printf_i+0x130>
 800e280:	680b      	ldr	r3, [r1, #0]
 800e282:	6826      	ldr	r6, [r4, #0]
 800e284:	6960      	ldr	r0, [r4, #20]
 800e286:	1d1d      	adds	r5, r3, #4
 800e288:	600d      	str	r5, [r1, #0]
 800e28a:	0635      	lsls	r5, r6, #24
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	d501      	bpl.n	800e294 <_printf_i+0x1cc>
 800e290:	6018      	str	r0, [r3, #0]
 800e292:	e002      	b.n	800e29a <_printf_i+0x1d2>
 800e294:	0671      	lsls	r1, r6, #25
 800e296:	d5fb      	bpl.n	800e290 <_printf_i+0x1c8>
 800e298:	8018      	strh	r0, [r3, #0]
 800e29a:	2300      	movs	r3, #0
 800e29c:	6123      	str	r3, [r4, #16]
 800e29e:	4616      	mov	r6, r2
 800e2a0:	e7ba      	b.n	800e218 <_printf_i+0x150>
 800e2a2:	680b      	ldr	r3, [r1, #0]
 800e2a4:	1d1a      	adds	r2, r3, #4
 800e2a6:	600a      	str	r2, [r1, #0]
 800e2a8:	681e      	ldr	r6, [r3, #0]
 800e2aa:	6862      	ldr	r2, [r4, #4]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	f7f1 ffbe 	bl	8000230 <memchr>
 800e2b4:	b108      	cbz	r0, 800e2ba <_printf_i+0x1f2>
 800e2b6:	1b80      	subs	r0, r0, r6
 800e2b8:	6060      	str	r0, [r4, #4]
 800e2ba:	6863      	ldr	r3, [r4, #4]
 800e2bc:	6123      	str	r3, [r4, #16]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2c4:	e7a8      	b.n	800e218 <_printf_i+0x150>
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	4632      	mov	r2, r6
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	4640      	mov	r0, r8
 800e2ce:	47d0      	blx	sl
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d0ab      	beq.n	800e22c <_printf_i+0x164>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	079b      	lsls	r3, r3, #30
 800e2d8:	d413      	bmi.n	800e302 <_printf_i+0x23a>
 800e2da:	68e0      	ldr	r0, [r4, #12]
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	4298      	cmp	r0, r3
 800e2e0:	bfb8      	it	lt
 800e2e2:	4618      	movlt	r0, r3
 800e2e4:	e7a4      	b.n	800e230 <_printf_i+0x168>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	4632      	mov	r2, r6
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	47d0      	blx	sl
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d09b      	beq.n	800e22c <_printf_i+0x164>
 800e2f4:	3501      	adds	r5, #1
 800e2f6:	68e3      	ldr	r3, [r4, #12]
 800e2f8:	9903      	ldr	r1, [sp, #12]
 800e2fa:	1a5b      	subs	r3, r3, r1
 800e2fc:	42ab      	cmp	r3, r5
 800e2fe:	dcf2      	bgt.n	800e2e6 <_printf_i+0x21e>
 800e300:	e7eb      	b.n	800e2da <_printf_i+0x212>
 800e302:	2500      	movs	r5, #0
 800e304:	f104 0619 	add.w	r6, r4, #25
 800e308:	e7f5      	b.n	800e2f6 <_printf_i+0x22e>
 800e30a:	bf00      	nop
 800e30c:	080133de 	.word	0x080133de
 800e310:	080133ef 	.word	0x080133ef

0800e314 <iprintf>:
 800e314:	b40f      	push	{r0, r1, r2, r3}
 800e316:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <iprintf+0x2c>)
 800e318:	b513      	push	{r0, r1, r4, lr}
 800e31a:	681c      	ldr	r4, [r3, #0]
 800e31c:	b124      	cbz	r4, 800e328 <iprintf+0x14>
 800e31e:	69a3      	ldr	r3, [r4, #24]
 800e320:	b913      	cbnz	r3, 800e328 <iprintf+0x14>
 800e322:	4620      	mov	r0, r4
 800e324:	f001 ff96 	bl	8010254 <__sinit>
 800e328:	ab05      	add	r3, sp, #20
 800e32a:	9a04      	ldr	r2, [sp, #16]
 800e32c:	68a1      	ldr	r1, [r4, #8]
 800e32e:	9301      	str	r3, [sp, #4]
 800e330:	4620      	mov	r0, r4
 800e332:	f003 f9bf 	bl	80116b4 <_vfiprintf_r>
 800e336:	b002      	add	sp, #8
 800e338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e33c:	b004      	add	sp, #16
 800e33e:	4770      	bx	lr
 800e340:	20000030 	.word	0x20000030

0800e344 <_puts_r>:
 800e344:	b570      	push	{r4, r5, r6, lr}
 800e346:	460e      	mov	r6, r1
 800e348:	4605      	mov	r5, r0
 800e34a:	b118      	cbz	r0, 800e354 <_puts_r+0x10>
 800e34c:	6983      	ldr	r3, [r0, #24]
 800e34e:	b90b      	cbnz	r3, 800e354 <_puts_r+0x10>
 800e350:	f001 ff80 	bl	8010254 <__sinit>
 800e354:	69ab      	ldr	r3, [r5, #24]
 800e356:	68ac      	ldr	r4, [r5, #8]
 800e358:	b913      	cbnz	r3, 800e360 <_puts_r+0x1c>
 800e35a:	4628      	mov	r0, r5
 800e35c:	f001 ff7a 	bl	8010254 <__sinit>
 800e360:	4b2c      	ldr	r3, [pc, #176]	; (800e414 <_puts_r+0xd0>)
 800e362:	429c      	cmp	r4, r3
 800e364:	d120      	bne.n	800e3a8 <_puts_r+0x64>
 800e366:	686c      	ldr	r4, [r5, #4]
 800e368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e36a:	07db      	lsls	r3, r3, #31
 800e36c:	d405      	bmi.n	800e37a <_puts_r+0x36>
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	0598      	lsls	r0, r3, #22
 800e372:	d402      	bmi.n	800e37a <_puts_r+0x36>
 800e374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e376:	f002 fb7e 	bl	8010a76 <__retarget_lock_acquire_recursive>
 800e37a:	89a3      	ldrh	r3, [r4, #12]
 800e37c:	0719      	lsls	r1, r3, #28
 800e37e:	d51d      	bpl.n	800e3bc <_puts_r+0x78>
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	b1db      	cbz	r3, 800e3bc <_puts_r+0x78>
 800e384:	3e01      	subs	r6, #1
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e38c:	3b01      	subs	r3, #1
 800e38e:	60a3      	str	r3, [r4, #8]
 800e390:	bb39      	cbnz	r1, 800e3e2 <_puts_r+0x9e>
 800e392:	2b00      	cmp	r3, #0
 800e394:	da38      	bge.n	800e408 <_puts_r+0xc4>
 800e396:	4622      	mov	r2, r4
 800e398:	210a      	movs	r1, #10
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 ff08 	bl	800f1b0 <__swbuf_r>
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	d011      	beq.n	800e3c8 <_puts_r+0x84>
 800e3a4:	250a      	movs	r5, #10
 800e3a6:	e011      	b.n	800e3cc <_puts_r+0x88>
 800e3a8:	4b1b      	ldr	r3, [pc, #108]	; (800e418 <_puts_r+0xd4>)
 800e3aa:	429c      	cmp	r4, r3
 800e3ac:	d101      	bne.n	800e3b2 <_puts_r+0x6e>
 800e3ae:	68ac      	ldr	r4, [r5, #8]
 800e3b0:	e7da      	b.n	800e368 <_puts_r+0x24>
 800e3b2:	4b1a      	ldr	r3, [pc, #104]	; (800e41c <_puts_r+0xd8>)
 800e3b4:	429c      	cmp	r4, r3
 800e3b6:	bf08      	it	eq
 800e3b8:	68ec      	ldreq	r4, [r5, #12]
 800e3ba:	e7d5      	b.n	800e368 <_puts_r+0x24>
 800e3bc:	4621      	mov	r1, r4
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f000 ff48 	bl	800f254 <__swsetup_r>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d0dd      	beq.n	800e384 <_puts_r+0x40>
 800e3c8:	f04f 35ff 	mov.w	r5, #4294967295
 800e3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3ce:	07da      	lsls	r2, r3, #31
 800e3d0:	d405      	bmi.n	800e3de <_puts_r+0x9a>
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	059b      	lsls	r3, r3, #22
 800e3d6:	d402      	bmi.n	800e3de <_puts_r+0x9a>
 800e3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3da:	f002 fb4d 	bl	8010a78 <__retarget_lock_release_recursive>
 800e3de:	4628      	mov	r0, r5
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da04      	bge.n	800e3f0 <_puts_r+0xac>
 800e3e6:	69a2      	ldr	r2, [r4, #24]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	dc06      	bgt.n	800e3fa <_puts_r+0xb6>
 800e3ec:	290a      	cmp	r1, #10
 800e3ee:	d004      	beq.n	800e3fa <_puts_r+0xb6>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	6022      	str	r2, [r4, #0]
 800e3f6:	7019      	strb	r1, [r3, #0]
 800e3f8:	e7c5      	b.n	800e386 <_puts_r+0x42>
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	f000 fed7 	bl	800f1b0 <__swbuf_r>
 800e402:	3001      	adds	r0, #1
 800e404:	d1bf      	bne.n	800e386 <_puts_r+0x42>
 800e406:	e7df      	b.n	800e3c8 <_puts_r+0x84>
 800e408:	6823      	ldr	r3, [r4, #0]
 800e40a:	250a      	movs	r5, #10
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	6022      	str	r2, [r4, #0]
 800e410:	701d      	strb	r5, [r3, #0]
 800e412:	e7db      	b.n	800e3cc <_puts_r+0x88>
 800e414:	08013608 	.word	0x08013608
 800e418:	08013628 	.word	0x08013628
 800e41c:	080135e8 	.word	0x080135e8

0800e420 <puts>:
 800e420:	4b02      	ldr	r3, [pc, #8]	; (800e42c <puts+0xc>)
 800e422:	4601      	mov	r1, r0
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	f7ff bf8d 	b.w	800e344 <_puts_r>
 800e42a:	bf00      	nop
 800e42c:	20000030 	.word	0x20000030

0800e430 <sulp>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4604      	mov	r4, r0
 800e434:	460d      	mov	r5, r1
 800e436:	ec45 4b10 	vmov	d0, r4, r5
 800e43a:	4616      	mov	r6, r2
 800e43c:	f002 ff08 	bl	8011250 <__ulp>
 800e440:	ec51 0b10 	vmov	r0, r1, d0
 800e444:	b17e      	cbz	r6, 800e466 <sulp+0x36>
 800e446:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e44a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e44e:	2b00      	cmp	r3, #0
 800e450:	dd09      	ble.n	800e466 <sulp+0x36>
 800e452:	051b      	lsls	r3, r3, #20
 800e454:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e458:	2400      	movs	r4, #0
 800e45a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e45e:	4622      	mov	r2, r4
 800e460:	462b      	mov	r3, r5
 800e462:	f7f2 f8f1 	bl	8000648 <__aeabi_dmul>
 800e466:	bd70      	pop	{r4, r5, r6, pc}

0800e468 <_strtod_l>:
 800e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46c:	b0a3      	sub	sp, #140	; 0x8c
 800e46e:	461f      	mov	r7, r3
 800e470:	2300      	movs	r3, #0
 800e472:	931e      	str	r3, [sp, #120]	; 0x78
 800e474:	4ba4      	ldr	r3, [pc, #656]	; (800e708 <_strtod_l+0x2a0>)
 800e476:	9219      	str	r2, [sp, #100]	; 0x64
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	9307      	str	r3, [sp, #28]
 800e47c:	4604      	mov	r4, r0
 800e47e:	4618      	mov	r0, r3
 800e480:	4688      	mov	r8, r1
 800e482:	f7f1 fecd 	bl	8000220 <strlen>
 800e486:	f04f 0a00 	mov.w	sl, #0
 800e48a:	4605      	mov	r5, r0
 800e48c:	f04f 0b00 	mov.w	fp, #0
 800e490:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	2a2b      	cmp	r2, #43	; 0x2b
 800e49a:	d04c      	beq.n	800e536 <_strtod_l+0xce>
 800e49c:	d839      	bhi.n	800e512 <_strtod_l+0xaa>
 800e49e:	2a0d      	cmp	r2, #13
 800e4a0:	d832      	bhi.n	800e508 <_strtod_l+0xa0>
 800e4a2:	2a08      	cmp	r2, #8
 800e4a4:	d832      	bhi.n	800e50c <_strtod_l+0xa4>
 800e4a6:	2a00      	cmp	r2, #0
 800e4a8:	d03c      	beq.n	800e524 <_strtod_l+0xbc>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	930e      	str	r3, [sp, #56]	; 0x38
 800e4ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e4b0:	7833      	ldrb	r3, [r6, #0]
 800e4b2:	2b30      	cmp	r3, #48	; 0x30
 800e4b4:	f040 80b4 	bne.w	800e620 <_strtod_l+0x1b8>
 800e4b8:	7873      	ldrb	r3, [r6, #1]
 800e4ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4be:	2b58      	cmp	r3, #88	; 0x58
 800e4c0:	d16c      	bne.n	800e59c <_strtod_l+0x134>
 800e4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	ab1e      	add	r3, sp, #120	; 0x78
 800e4c8:	9702      	str	r7, [sp, #8]
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	4a8f      	ldr	r2, [pc, #572]	; (800e70c <_strtod_l+0x2a4>)
 800e4ce:	ab1f      	add	r3, sp, #124	; 0x7c
 800e4d0:	a91d      	add	r1, sp, #116	; 0x74
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f001 ffc2 	bl	801045c <__gethex>
 800e4d8:	f010 0707 	ands.w	r7, r0, #7
 800e4dc:	4605      	mov	r5, r0
 800e4de:	d005      	beq.n	800e4ec <_strtod_l+0x84>
 800e4e0:	2f06      	cmp	r7, #6
 800e4e2:	d12a      	bne.n	800e53a <_strtod_l+0xd2>
 800e4e4:	3601      	adds	r6, #1
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	961d      	str	r6, [sp, #116]	; 0x74
 800e4ea:	930e      	str	r3, [sp, #56]	; 0x38
 800e4ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 8596 	bne.w	800f020 <_strtod_l+0xbb8>
 800e4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4f6:	b1db      	cbz	r3, 800e530 <_strtod_l+0xc8>
 800e4f8:	4652      	mov	r2, sl
 800e4fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e4fe:	ec43 2b10 	vmov	d0, r2, r3
 800e502:	b023      	add	sp, #140	; 0x8c
 800e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e508:	2a20      	cmp	r2, #32
 800e50a:	d1ce      	bne.n	800e4aa <_strtod_l+0x42>
 800e50c:	3301      	adds	r3, #1
 800e50e:	931d      	str	r3, [sp, #116]	; 0x74
 800e510:	e7c0      	b.n	800e494 <_strtod_l+0x2c>
 800e512:	2a2d      	cmp	r2, #45	; 0x2d
 800e514:	d1c9      	bne.n	800e4aa <_strtod_l+0x42>
 800e516:	2201      	movs	r2, #1
 800e518:	920e      	str	r2, [sp, #56]	; 0x38
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	921d      	str	r2, [sp, #116]	; 0x74
 800e51e:	785b      	ldrb	r3, [r3, #1]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1c4      	bne.n	800e4ae <_strtod_l+0x46>
 800e524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e526:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f040 8576 	bne.w	800f01c <_strtod_l+0xbb4>
 800e530:	4652      	mov	r2, sl
 800e532:	465b      	mov	r3, fp
 800e534:	e7e3      	b.n	800e4fe <_strtod_l+0x96>
 800e536:	2200      	movs	r2, #0
 800e538:	e7ee      	b.n	800e518 <_strtod_l+0xb0>
 800e53a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e53c:	b13a      	cbz	r2, 800e54e <_strtod_l+0xe6>
 800e53e:	2135      	movs	r1, #53	; 0x35
 800e540:	a820      	add	r0, sp, #128	; 0x80
 800e542:	f002 ff90 	bl	8011466 <__copybits>
 800e546:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e548:	4620      	mov	r0, r4
 800e54a:	f002 fb55 	bl	8010bf8 <_Bfree>
 800e54e:	3f01      	subs	r7, #1
 800e550:	2f05      	cmp	r7, #5
 800e552:	d807      	bhi.n	800e564 <_strtod_l+0xfc>
 800e554:	e8df f007 	tbb	[pc, r7]
 800e558:	1d180b0e 	.word	0x1d180b0e
 800e55c:	030e      	.short	0x030e
 800e55e:	f04f 0b00 	mov.w	fp, #0
 800e562:	46da      	mov	sl, fp
 800e564:	0728      	lsls	r0, r5, #28
 800e566:	d5c1      	bpl.n	800e4ec <_strtod_l+0x84>
 800e568:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e56c:	e7be      	b.n	800e4ec <_strtod_l+0x84>
 800e56e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e572:	e7f7      	b.n	800e564 <_strtod_l+0xfc>
 800e574:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e578:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e57a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e57e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e586:	e7ed      	b.n	800e564 <_strtod_l+0xfc>
 800e588:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e710 <_strtod_l+0x2a8>
 800e58c:	f04f 0a00 	mov.w	sl, #0
 800e590:	e7e8      	b.n	800e564 <_strtod_l+0xfc>
 800e592:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e596:	f04f 3aff 	mov.w	sl, #4294967295
 800e59a:	e7e3      	b.n	800e564 <_strtod_l+0xfc>
 800e59c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	921d      	str	r2, [sp, #116]	; 0x74
 800e5a2:	785b      	ldrb	r3, [r3, #1]
 800e5a4:	2b30      	cmp	r3, #48	; 0x30
 800e5a6:	d0f9      	beq.n	800e59c <_strtod_l+0x134>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d09f      	beq.n	800e4ec <_strtod_l+0x84>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	f04f 0900 	mov.w	r9, #0
 800e5b2:	9304      	str	r3, [sp, #16]
 800e5b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e5bc:	464f      	mov	r7, r9
 800e5be:	220a      	movs	r2, #10
 800e5c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e5c2:	7806      	ldrb	r6, [r0, #0]
 800e5c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e5c8:	b2d9      	uxtb	r1, r3
 800e5ca:	2909      	cmp	r1, #9
 800e5cc:	d92a      	bls.n	800e624 <_strtod_l+0x1bc>
 800e5ce:	9907      	ldr	r1, [sp, #28]
 800e5d0:	462a      	mov	r2, r5
 800e5d2:	f003 f9fc 	bl	80119ce <strncmp>
 800e5d6:	b398      	cbz	r0, 800e640 <_strtod_l+0x1d8>
 800e5d8:	2000      	movs	r0, #0
 800e5da:	4633      	mov	r3, r6
 800e5dc:	463d      	mov	r5, r7
 800e5de:	9007      	str	r0, [sp, #28]
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	2b65      	cmp	r3, #101	; 0x65
 800e5e4:	d001      	beq.n	800e5ea <_strtod_l+0x182>
 800e5e6:	2b45      	cmp	r3, #69	; 0x45
 800e5e8:	d118      	bne.n	800e61c <_strtod_l+0x1b4>
 800e5ea:	b91d      	cbnz	r5, 800e5f4 <_strtod_l+0x18c>
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	4303      	orrs	r3, r0
 800e5f0:	d098      	beq.n	800e524 <_strtod_l+0xbc>
 800e5f2:	2500      	movs	r5, #0
 800e5f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e5f8:	f108 0301 	add.w	r3, r8, #1
 800e5fc:	931d      	str	r3, [sp, #116]	; 0x74
 800e5fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e602:	2b2b      	cmp	r3, #43	; 0x2b
 800e604:	d075      	beq.n	800e6f2 <_strtod_l+0x28a>
 800e606:	2b2d      	cmp	r3, #45	; 0x2d
 800e608:	d07b      	beq.n	800e702 <_strtod_l+0x29a>
 800e60a:	f04f 0c00 	mov.w	ip, #0
 800e60e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e612:	2909      	cmp	r1, #9
 800e614:	f240 8082 	bls.w	800e71c <_strtod_l+0x2b4>
 800e618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e61c:	2600      	movs	r6, #0
 800e61e:	e09d      	b.n	800e75c <_strtod_l+0x2f4>
 800e620:	2300      	movs	r3, #0
 800e622:	e7c4      	b.n	800e5ae <_strtod_l+0x146>
 800e624:	2f08      	cmp	r7, #8
 800e626:	bfd8      	it	le
 800e628:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e62a:	f100 0001 	add.w	r0, r0, #1
 800e62e:	bfda      	itte	le
 800e630:	fb02 3301 	mlale	r3, r2, r1, r3
 800e634:	9309      	strle	r3, [sp, #36]	; 0x24
 800e636:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e63a:	3701      	adds	r7, #1
 800e63c:	901d      	str	r0, [sp, #116]	; 0x74
 800e63e:	e7bf      	b.n	800e5c0 <_strtod_l+0x158>
 800e640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e642:	195a      	adds	r2, r3, r5
 800e644:	921d      	str	r2, [sp, #116]	; 0x74
 800e646:	5d5b      	ldrb	r3, [r3, r5]
 800e648:	2f00      	cmp	r7, #0
 800e64a:	d037      	beq.n	800e6bc <_strtod_l+0x254>
 800e64c:	9007      	str	r0, [sp, #28]
 800e64e:	463d      	mov	r5, r7
 800e650:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e654:	2a09      	cmp	r2, #9
 800e656:	d912      	bls.n	800e67e <_strtod_l+0x216>
 800e658:	2201      	movs	r2, #1
 800e65a:	e7c2      	b.n	800e5e2 <_strtod_l+0x17a>
 800e65c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	921d      	str	r2, [sp, #116]	; 0x74
 800e662:	785b      	ldrb	r3, [r3, #1]
 800e664:	3001      	adds	r0, #1
 800e666:	2b30      	cmp	r3, #48	; 0x30
 800e668:	d0f8      	beq.n	800e65c <_strtod_l+0x1f4>
 800e66a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e66e:	2a08      	cmp	r2, #8
 800e670:	f200 84db 	bhi.w	800f02a <_strtod_l+0xbc2>
 800e674:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e676:	9007      	str	r0, [sp, #28]
 800e678:	2000      	movs	r0, #0
 800e67a:	920a      	str	r2, [sp, #40]	; 0x28
 800e67c:	4605      	mov	r5, r0
 800e67e:	3b30      	subs	r3, #48	; 0x30
 800e680:	f100 0201 	add.w	r2, r0, #1
 800e684:	d014      	beq.n	800e6b0 <_strtod_l+0x248>
 800e686:	9907      	ldr	r1, [sp, #28]
 800e688:	4411      	add	r1, r2
 800e68a:	9107      	str	r1, [sp, #28]
 800e68c:	462a      	mov	r2, r5
 800e68e:	eb00 0e05 	add.w	lr, r0, r5
 800e692:	210a      	movs	r1, #10
 800e694:	4572      	cmp	r2, lr
 800e696:	d113      	bne.n	800e6c0 <_strtod_l+0x258>
 800e698:	182a      	adds	r2, r5, r0
 800e69a:	2a08      	cmp	r2, #8
 800e69c:	f105 0501 	add.w	r5, r5, #1
 800e6a0:	4405      	add	r5, r0
 800e6a2:	dc1c      	bgt.n	800e6de <_strtod_l+0x276>
 800e6a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6a6:	220a      	movs	r2, #10
 800e6a8:	fb02 3301 	mla	r3, r2, r1, r3
 800e6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6b2:	1c59      	adds	r1, r3, #1
 800e6b4:	911d      	str	r1, [sp, #116]	; 0x74
 800e6b6:	785b      	ldrb	r3, [r3, #1]
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	e7c9      	b.n	800e650 <_strtod_l+0x1e8>
 800e6bc:	4638      	mov	r0, r7
 800e6be:	e7d2      	b.n	800e666 <_strtod_l+0x1fe>
 800e6c0:	2a08      	cmp	r2, #8
 800e6c2:	dc04      	bgt.n	800e6ce <_strtod_l+0x266>
 800e6c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e6c6:	434e      	muls	r6, r1
 800e6c8:	9609      	str	r6, [sp, #36]	; 0x24
 800e6ca:	3201      	adds	r2, #1
 800e6cc:	e7e2      	b.n	800e694 <_strtod_l+0x22c>
 800e6ce:	f102 0c01 	add.w	ip, r2, #1
 800e6d2:	f1bc 0f10 	cmp.w	ip, #16
 800e6d6:	bfd8      	it	le
 800e6d8:	fb01 f909 	mulle.w	r9, r1, r9
 800e6dc:	e7f5      	b.n	800e6ca <_strtod_l+0x262>
 800e6de:	2d10      	cmp	r5, #16
 800e6e0:	bfdc      	itt	le
 800e6e2:	220a      	movle	r2, #10
 800e6e4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e6e8:	e7e1      	b.n	800e6ae <_strtod_l+0x246>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	9307      	str	r3, [sp, #28]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	e77c      	b.n	800e5ec <_strtod_l+0x184>
 800e6f2:	f04f 0c00 	mov.w	ip, #0
 800e6f6:	f108 0302 	add.w	r3, r8, #2
 800e6fa:	931d      	str	r3, [sp, #116]	; 0x74
 800e6fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e700:	e785      	b.n	800e60e <_strtod_l+0x1a6>
 800e702:	f04f 0c01 	mov.w	ip, #1
 800e706:	e7f6      	b.n	800e6f6 <_strtod_l+0x28e>
 800e708:	080136b4 	.word	0x080136b4
 800e70c:	08013400 	.word	0x08013400
 800e710:	7ff00000 	.word	0x7ff00000
 800e714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e716:	1c59      	adds	r1, r3, #1
 800e718:	911d      	str	r1, [sp, #116]	; 0x74
 800e71a:	785b      	ldrb	r3, [r3, #1]
 800e71c:	2b30      	cmp	r3, #48	; 0x30
 800e71e:	d0f9      	beq.n	800e714 <_strtod_l+0x2ac>
 800e720:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e724:	2908      	cmp	r1, #8
 800e726:	f63f af79 	bhi.w	800e61c <_strtod_l+0x1b4>
 800e72a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e72e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e730:	9308      	str	r3, [sp, #32]
 800e732:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e734:	1c59      	adds	r1, r3, #1
 800e736:	911d      	str	r1, [sp, #116]	; 0x74
 800e738:	785b      	ldrb	r3, [r3, #1]
 800e73a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e73e:	2e09      	cmp	r6, #9
 800e740:	d937      	bls.n	800e7b2 <_strtod_l+0x34a>
 800e742:	9e08      	ldr	r6, [sp, #32]
 800e744:	1b89      	subs	r1, r1, r6
 800e746:	2908      	cmp	r1, #8
 800e748:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e74c:	dc02      	bgt.n	800e754 <_strtod_l+0x2ec>
 800e74e:	4576      	cmp	r6, lr
 800e750:	bfa8      	it	ge
 800e752:	4676      	movge	r6, lr
 800e754:	f1bc 0f00 	cmp.w	ip, #0
 800e758:	d000      	beq.n	800e75c <_strtod_l+0x2f4>
 800e75a:	4276      	negs	r6, r6
 800e75c:	2d00      	cmp	r5, #0
 800e75e:	d14f      	bne.n	800e800 <_strtod_l+0x398>
 800e760:	9904      	ldr	r1, [sp, #16]
 800e762:	4301      	orrs	r1, r0
 800e764:	f47f aec2 	bne.w	800e4ec <_strtod_l+0x84>
 800e768:	2a00      	cmp	r2, #0
 800e76a:	f47f aedb 	bne.w	800e524 <_strtod_l+0xbc>
 800e76e:	2b69      	cmp	r3, #105	; 0x69
 800e770:	d027      	beq.n	800e7c2 <_strtod_l+0x35a>
 800e772:	dc24      	bgt.n	800e7be <_strtod_l+0x356>
 800e774:	2b49      	cmp	r3, #73	; 0x49
 800e776:	d024      	beq.n	800e7c2 <_strtod_l+0x35a>
 800e778:	2b4e      	cmp	r3, #78	; 0x4e
 800e77a:	f47f aed3 	bne.w	800e524 <_strtod_l+0xbc>
 800e77e:	499e      	ldr	r1, [pc, #632]	; (800e9f8 <_strtod_l+0x590>)
 800e780:	a81d      	add	r0, sp, #116	; 0x74
 800e782:	f002 f8c3 	bl	801090c <__match>
 800e786:	2800      	cmp	r0, #0
 800e788:	f43f aecc 	beq.w	800e524 <_strtod_l+0xbc>
 800e78c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b28      	cmp	r3, #40	; 0x28
 800e792:	d12d      	bne.n	800e7f0 <_strtod_l+0x388>
 800e794:	4999      	ldr	r1, [pc, #612]	; (800e9fc <_strtod_l+0x594>)
 800e796:	aa20      	add	r2, sp, #128	; 0x80
 800e798:	a81d      	add	r0, sp, #116	; 0x74
 800e79a:	f002 f8cb 	bl	8010934 <__hexnan>
 800e79e:	2805      	cmp	r0, #5
 800e7a0:	d126      	bne.n	800e7f0 <_strtod_l+0x388>
 800e7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e7a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e7ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e7b0:	e69c      	b.n	800e4ec <_strtod_l+0x84>
 800e7b2:	210a      	movs	r1, #10
 800e7b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e7b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7bc:	e7b9      	b.n	800e732 <_strtod_l+0x2ca>
 800e7be:	2b6e      	cmp	r3, #110	; 0x6e
 800e7c0:	e7db      	b.n	800e77a <_strtod_l+0x312>
 800e7c2:	498f      	ldr	r1, [pc, #572]	; (800ea00 <_strtod_l+0x598>)
 800e7c4:	a81d      	add	r0, sp, #116	; 0x74
 800e7c6:	f002 f8a1 	bl	801090c <__match>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	f43f aeaa 	beq.w	800e524 <_strtod_l+0xbc>
 800e7d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7d2:	498c      	ldr	r1, [pc, #560]	; (800ea04 <_strtod_l+0x59c>)
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	a81d      	add	r0, sp, #116	; 0x74
 800e7d8:	931d      	str	r3, [sp, #116]	; 0x74
 800e7da:	f002 f897 	bl	801090c <__match>
 800e7de:	b910      	cbnz	r0, 800e7e6 <_strtod_l+0x37e>
 800e7e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	931d      	str	r3, [sp, #116]	; 0x74
 800e7e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ea14 <_strtod_l+0x5ac>
 800e7ea:	f04f 0a00 	mov.w	sl, #0
 800e7ee:	e67d      	b.n	800e4ec <_strtod_l+0x84>
 800e7f0:	4885      	ldr	r0, [pc, #532]	; (800ea08 <_strtod_l+0x5a0>)
 800e7f2:	f003 f891 	bl	8011918 <nan>
 800e7f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e7fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e7fe:	e675      	b.n	800e4ec <_strtod_l+0x84>
 800e800:	9b07      	ldr	r3, [sp, #28]
 800e802:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e804:	1af3      	subs	r3, r6, r3
 800e806:	2f00      	cmp	r7, #0
 800e808:	bf08      	it	eq
 800e80a:	462f      	moveq	r7, r5
 800e80c:	2d10      	cmp	r5, #16
 800e80e:	9308      	str	r3, [sp, #32]
 800e810:	46a8      	mov	r8, r5
 800e812:	bfa8      	it	ge
 800e814:	f04f 0810 	movge.w	r8, #16
 800e818:	f7f1 fe9c 	bl	8000554 <__aeabi_ui2d>
 800e81c:	2d09      	cmp	r5, #9
 800e81e:	4682      	mov	sl, r0
 800e820:	468b      	mov	fp, r1
 800e822:	dd13      	ble.n	800e84c <_strtod_l+0x3e4>
 800e824:	4b79      	ldr	r3, [pc, #484]	; (800ea0c <_strtod_l+0x5a4>)
 800e826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e82a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e82e:	f7f1 ff0b 	bl	8000648 <__aeabi_dmul>
 800e832:	4682      	mov	sl, r0
 800e834:	4648      	mov	r0, r9
 800e836:	468b      	mov	fp, r1
 800e838:	f7f1 fe8c 	bl	8000554 <__aeabi_ui2d>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4650      	mov	r0, sl
 800e842:	4659      	mov	r1, fp
 800e844:	f7f1 fd4a 	bl	80002dc <__adddf3>
 800e848:	4682      	mov	sl, r0
 800e84a:	468b      	mov	fp, r1
 800e84c:	2d0f      	cmp	r5, #15
 800e84e:	dc38      	bgt.n	800e8c2 <_strtod_l+0x45a>
 800e850:	9b08      	ldr	r3, [sp, #32]
 800e852:	2b00      	cmp	r3, #0
 800e854:	f43f ae4a 	beq.w	800e4ec <_strtod_l+0x84>
 800e858:	dd24      	ble.n	800e8a4 <_strtod_l+0x43c>
 800e85a:	2b16      	cmp	r3, #22
 800e85c:	dc0b      	bgt.n	800e876 <_strtod_l+0x40e>
 800e85e:	4d6b      	ldr	r5, [pc, #428]	; (800ea0c <_strtod_l+0x5a4>)
 800e860:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e864:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e868:	4652      	mov	r2, sl
 800e86a:	465b      	mov	r3, fp
 800e86c:	f7f1 feec 	bl	8000648 <__aeabi_dmul>
 800e870:	4682      	mov	sl, r0
 800e872:	468b      	mov	fp, r1
 800e874:	e63a      	b.n	800e4ec <_strtod_l+0x84>
 800e876:	9a08      	ldr	r2, [sp, #32]
 800e878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e87c:	4293      	cmp	r3, r2
 800e87e:	db20      	blt.n	800e8c2 <_strtod_l+0x45a>
 800e880:	4c62      	ldr	r4, [pc, #392]	; (800ea0c <_strtod_l+0x5a4>)
 800e882:	f1c5 050f 	rsb	r5, r5, #15
 800e886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e88a:	4652      	mov	r2, sl
 800e88c:	465b      	mov	r3, fp
 800e88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e892:	f7f1 fed9 	bl	8000648 <__aeabi_dmul>
 800e896:	9b08      	ldr	r3, [sp, #32]
 800e898:	1b5d      	subs	r5, r3, r5
 800e89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8a2:	e7e3      	b.n	800e86c <_strtod_l+0x404>
 800e8a4:	9b08      	ldr	r3, [sp, #32]
 800e8a6:	3316      	adds	r3, #22
 800e8a8:	db0b      	blt.n	800e8c2 <_strtod_l+0x45a>
 800e8aa:	9b07      	ldr	r3, [sp, #28]
 800e8ac:	4a57      	ldr	r2, [pc, #348]	; (800ea0c <_strtod_l+0x5a4>)
 800e8ae:	1b9e      	subs	r6, r3, r6
 800e8b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8b8:	4650      	mov	r0, sl
 800e8ba:	4659      	mov	r1, fp
 800e8bc:	f7f1 ffee 	bl	800089c <__aeabi_ddiv>
 800e8c0:	e7d6      	b.n	800e870 <_strtod_l+0x408>
 800e8c2:	9b08      	ldr	r3, [sp, #32]
 800e8c4:	eba5 0808 	sub.w	r8, r5, r8
 800e8c8:	4498      	add	r8, r3
 800e8ca:	f1b8 0f00 	cmp.w	r8, #0
 800e8ce:	dd71      	ble.n	800e9b4 <_strtod_l+0x54c>
 800e8d0:	f018 030f 	ands.w	r3, r8, #15
 800e8d4:	d00a      	beq.n	800e8ec <_strtod_l+0x484>
 800e8d6:	494d      	ldr	r1, [pc, #308]	; (800ea0c <_strtod_l+0x5a4>)
 800e8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8dc:	4652      	mov	r2, sl
 800e8de:	465b      	mov	r3, fp
 800e8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e4:	f7f1 feb0 	bl	8000648 <__aeabi_dmul>
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	468b      	mov	fp, r1
 800e8ec:	f038 080f 	bics.w	r8, r8, #15
 800e8f0:	d04d      	beq.n	800e98e <_strtod_l+0x526>
 800e8f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e8f6:	dd22      	ble.n	800e93e <_strtod_l+0x4d6>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	462e      	mov	r6, r5
 800e8fc:	9509      	str	r5, [sp, #36]	; 0x24
 800e8fe:	9507      	str	r5, [sp, #28]
 800e900:	2322      	movs	r3, #34	; 0x22
 800e902:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ea14 <_strtod_l+0x5ac>
 800e906:	6023      	str	r3, [r4, #0]
 800e908:	f04f 0a00 	mov.w	sl, #0
 800e90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f43f adec 	beq.w	800e4ec <_strtod_l+0x84>
 800e914:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e916:	4620      	mov	r0, r4
 800e918:	f002 f96e 	bl	8010bf8 <_Bfree>
 800e91c:	9907      	ldr	r1, [sp, #28]
 800e91e:	4620      	mov	r0, r4
 800e920:	f002 f96a 	bl	8010bf8 <_Bfree>
 800e924:	4631      	mov	r1, r6
 800e926:	4620      	mov	r0, r4
 800e928:	f002 f966 	bl	8010bf8 <_Bfree>
 800e92c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e92e:	4620      	mov	r0, r4
 800e930:	f002 f962 	bl	8010bf8 <_Bfree>
 800e934:	4629      	mov	r1, r5
 800e936:	4620      	mov	r0, r4
 800e938:	f002 f95e 	bl	8010bf8 <_Bfree>
 800e93c:	e5d6      	b.n	800e4ec <_strtod_l+0x84>
 800e93e:	2300      	movs	r3, #0
 800e940:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e944:	4650      	mov	r0, sl
 800e946:	4659      	mov	r1, fp
 800e948:	4699      	mov	r9, r3
 800e94a:	f1b8 0f01 	cmp.w	r8, #1
 800e94e:	dc21      	bgt.n	800e994 <_strtod_l+0x52c>
 800e950:	b10b      	cbz	r3, 800e956 <_strtod_l+0x4ee>
 800e952:	4682      	mov	sl, r0
 800e954:	468b      	mov	fp, r1
 800e956:	4b2e      	ldr	r3, [pc, #184]	; (800ea10 <_strtod_l+0x5a8>)
 800e958:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e95c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e960:	4652      	mov	r2, sl
 800e962:	465b      	mov	r3, fp
 800e964:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e968:	f7f1 fe6e 	bl	8000648 <__aeabi_dmul>
 800e96c:	4b29      	ldr	r3, [pc, #164]	; (800ea14 <_strtod_l+0x5ac>)
 800e96e:	460a      	mov	r2, r1
 800e970:	400b      	ands	r3, r1
 800e972:	4929      	ldr	r1, [pc, #164]	; (800ea18 <_strtod_l+0x5b0>)
 800e974:	428b      	cmp	r3, r1
 800e976:	4682      	mov	sl, r0
 800e978:	d8be      	bhi.n	800e8f8 <_strtod_l+0x490>
 800e97a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e97e:	428b      	cmp	r3, r1
 800e980:	bf86      	itte	hi
 800e982:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ea1c <_strtod_l+0x5b4>
 800e986:	f04f 3aff 	movhi.w	sl, #4294967295
 800e98a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e98e:	2300      	movs	r3, #0
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	e081      	b.n	800ea98 <_strtod_l+0x630>
 800e994:	f018 0f01 	tst.w	r8, #1
 800e998:	d007      	beq.n	800e9aa <_strtod_l+0x542>
 800e99a:	4b1d      	ldr	r3, [pc, #116]	; (800ea10 <_strtod_l+0x5a8>)
 800e99c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f7f1 fe50 	bl	8000648 <__aeabi_dmul>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f109 0901 	add.w	r9, r9, #1
 800e9ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9b2:	e7ca      	b.n	800e94a <_strtod_l+0x4e2>
 800e9b4:	d0eb      	beq.n	800e98e <_strtod_l+0x526>
 800e9b6:	f1c8 0800 	rsb	r8, r8, #0
 800e9ba:	f018 020f 	ands.w	r2, r8, #15
 800e9be:	d00a      	beq.n	800e9d6 <_strtod_l+0x56e>
 800e9c0:	4b12      	ldr	r3, [pc, #72]	; (800ea0c <_strtod_l+0x5a4>)
 800e9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9c6:	4650      	mov	r0, sl
 800e9c8:	4659      	mov	r1, fp
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	f7f1 ff65 	bl	800089c <__aeabi_ddiv>
 800e9d2:	4682      	mov	sl, r0
 800e9d4:	468b      	mov	fp, r1
 800e9d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e9da:	d0d8      	beq.n	800e98e <_strtod_l+0x526>
 800e9dc:	f1b8 0f1f 	cmp.w	r8, #31
 800e9e0:	dd1e      	ble.n	800ea20 <_strtod_l+0x5b8>
 800e9e2:	2500      	movs	r5, #0
 800e9e4:	462e      	mov	r6, r5
 800e9e6:	9509      	str	r5, [sp, #36]	; 0x24
 800e9e8:	9507      	str	r5, [sp, #28]
 800e9ea:	2322      	movs	r3, #34	; 0x22
 800e9ec:	f04f 0a00 	mov.w	sl, #0
 800e9f0:	f04f 0b00 	mov.w	fp, #0
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	e789      	b.n	800e90c <_strtod_l+0x4a4>
 800e9f8:	080133d9 	.word	0x080133d9
 800e9fc:	08013414 	.word	0x08013414
 800ea00:	080133d1 	.word	0x080133d1
 800ea04:	08013554 	.word	0x08013554
 800ea08:	08013870 	.word	0x08013870
 800ea0c:	08013750 	.word	0x08013750
 800ea10:	08013728 	.word	0x08013728
 800ea14:	7ff00000 	.word	0x7ff00000
 800ea18:	7ca00000 	.word	0x7ca00000
 800ea1c:	7fefffff 	.word	0x7fefffff
 800ea20:	f018 0310 	ands.w	r3, r8, #16
 800ea24:	bf18      	it	ne
 800ea26:	236a      	movne	r3, #106	; 0x6a
 800ea28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ede0 <_strtod_l+0x978>
 800ea2c:	9304      	str	r3, [sp, #16]
 800ea2e:	4650      	mov	r0, sl
 800ea30:	4659      	mov	r1, fp
 800ea32:	2300      	movs	r3, #0
 800ea34:	f018 0f01 	tst.w	r8, #1
 800ea38:	d004      	beq.n	800ea44 <_strtod_l+0x5dc>
 800ea3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea3e:	f7f1 fe03 	bl	8000648 <__aeabi_dmul>
 800ea42:	2301      	movs	r3, #1
 800ea44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ea48:	f109 0908 	add.w	r9, r9, #8
 800ea4c:	d1f2      	bne.n	800ea34 <_strtod_l+0x5cc>
 800ea4e:	b10b      	cbz	r3, 800ea54 <_strtod_l+0x5ec>
 800ea50:	4682      	mov	sl, r0
 800ea52:	468b      	mov	fp, r1
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	b1bb      	cbz	r3, 800ea88 <_strtod_l+0x620>
 800ea58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	4659      	mov	r1, fp
 800ea64:	dd10      	ble.n	800ea88 <_strtod_l+0x620>
 800ea66:	2b1f      	cmp	r3, #31
 800ea68:	f340 8128 	ble.w	800ecbc <_strtod_l+0x854>
 800ea6c:	2b34      	cmp	r3, #52	; 0x34
 800ea6e:	bfde      	ittt	le
 800ea70:	3b20      	suble	r3, #32
 800ea72:	f04f 32ff 	movle.w	r2, #4294967295
 800ea76:	fa02 f303 	lslle.w	r3, r2, r3
 800ea7a:	f04f 0a00 	mov.w	sl, #0
 800ea7e:	bfcc      	ite	gt
 800ea80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea84:	ea03 0b01 	andle.w	fp, r3, r1
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	4650      	mov	r0, sl
 800ea8e:	4659      	mov	r1, fp
 800ea90:	f7f2 f842 	bl	8000b18 <__aeabi_dcmpeq>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d1a4      	bne.n	800e9e2 <_strtod_l+0x57a>
 800ea98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	463a      	mov	r2, r7
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f002 f914 	bl	8010cd0 <__s2b>
 800eaa8:	9009      	str	r0, [sp, #36]	; 0x24
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f43f af24 	beq.w	800e8f8 <_strtod_l+0x490>
 800eab0:	9b07      	ldr	r3, [sp, #28]
 800eab2:	1b9e      	subs	r6, r3, r6
 800eab4:	9b08      	ldr	r3, [sp, #32]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	bfb4      	ite	lt
 800eaba:	4633      	movlt	r3, r6
 800eabc:	2300      	movge	r3, #0
 800eabe:	9310      	str	r3, [sp, #64]	; 0x40
 800eac0:	9b08      	ldr	r3, [sp, #32]
 800eac2:	2500      	movs	r5, #0
 800eac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eac8:	9318      	str	r3, [sp, #96]	; 0x60
 800eaca:	462e      	mov	r6, r5
 800eacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eace:	4620      	mov	r0, r4
 800ead0:	6859      	ldr	r1, [r3, #4]
 800ead2:	f002 f851 	bl	8010b78 <_Balloc>
 800ead6:	9007      	str	r0, [sp, #28]
 800ead8:	2800      	cmp	r0, #0
 800eada:	f43f af11 	beq.w	800e900 <_strtod_l+0x498>
 800eade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae0:	691a      	ldr	r2, [r3, #16]
 800eae2:	3202      	adds	r2, #2
 800eae4:	f103 010c 	add.w	r1, r3, #12
 800eae8:	0092      	lsls	r2, r2, #2
 800eaea:	300c      	adds	r0, #12
 800eaec:	f7fe ff92 	bl	800da14 <memcpy>
 800eaf0:	ec4b ab10 	vmov	d0, sl, fp
 800eaf4:	aa20      	add	r2, sp, #128	; 0x80
 800eaf6:	a91f      	add	r1, sp, #124	; 0x7c
 800eaf8:	4620      	mov	r0, r4
 800eafa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eafe:	f002 fc23 	bl	8011348 <__d2b>
 800eb02:	901e      	str	r0, [sp, #120]	; 0x78
 800eb04:	2800      	cmp	r0, #0
 800eb06:	f43f aefb 	beq.w	800e900 <_strtod_l+0x498>
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f002 f979 	bl	8010e04 <__i2b>
 800eb12:	4606      	mov	r6, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f43f aef3 	beq.w	800e900 <_strtod_l+0x498>
 800eb1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb1c:	9904      	ldr	r1, [sp, #16]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	bfab      	itete	ge
 800eb22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800eb24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800eb26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800eb28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800eb2c:	bfac      	ite	ge
 800eb2e:	eb03 0902 	addge.w	r9, r3, r2
 800eb32:	1ad7      	sublt	r7, r2, r3
 800eb34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb36:	eba3 0801 	sub.w	r8, r3, r1
 800eb3a:	4490      	add	r8, r2
 800eb3c:	4ba3      	ldr	r3, [pc, #652]	; (800edcc <_strtod_l+0x964>)
 800eb3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb42:	4598      	cmp	r8, r3
 800eb44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb48:	f280 80cc 	bge.w	800ece4 <_strtod_l+0x87c>
 800eb4c:	eba3 0308 	sub.w	r3, r3, r8
 800eb50:	2b1f      	cmp	r3, #31
 800eb52:	eba2 0203 	sub.w	r2, r2, r3
 800eb56:	f04f 0101 	mov.w	r1, #1
 800eb5a:	f300 80b6 	bgt.w	800ecca <_strtod_l+0x862>
 800eb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb62:	9311      	str	r3, [sp, #68]	; 0x44
 800eb64:	2300      	movs	r3, #0
 800eb66:	930c      	str	r3, [sp, #48]	; 0x30
 800eb68:	eb09 0802 	add.w	r8, r9, r2
 800eb6c:	9b04      	ldr	r3, [sp, #16]
 800eb6e:	45c1      	cmp	r9, r8
 800eb70:	4417      	add	r7, r2
 800eb72:	441f      	add	r7, r3
 800eb74:	464b      	mov	r3, r9
 800eb76:	bfa8      	it	ge
 800eb78:	4643      	movge	r3, r8
 800eb7a:	42bb      	cmp	r3, r7
 800eb7c:	bfa8      	it	ge
 800eb7e:	463b      	movge	r3, r7
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	bfc2      	ittt	gt
 800eb84:	eba8 0803 	subgt.w	r8, r8, r3
 800eb88:	1aff      	subgt	r7, r7, r3
 800eb8a:	eba9 0903 	subgt.w	r9, r9, r3
 800eb8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	dd17      	ble.n	800ebc4 <_strtod_l+0x75c>
 800eb94:	4631      	mov	r1, r6
 800eb96:	461a      	mov	r2, r3
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f002 f9ef 	bl	8010f7c <__pow5mult>
 800eb9e:	4606      	mov	r6, r0
 800eba0:	2800      	cmp	r0, #0
 800eba2:	f43f aead 	beq.w	800e900 <_strtod_l+0x498>
 800eba6:	4601      	mov	r1, r0
 800eba8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f002 f940 	bl	8010e30 <__multiply>
 800ebb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	f43f aea4 	beq.w	800e900 <_strtod_l+0x498>
 800ebb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f002 f81c 	bl	8010bf8 <_Bfree>
 800ebc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc2:	931e      	str	r3, [sp, #120]	; 0x78
 800ebc4:	f1b8 0f00 	cmp.w	r8, #0
 800ebc8:	f300 8091 	bgt.w	800ecee <_strtod_l+0x886>
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd08      	ble.n	800ebe4 <_strtod_l+0x77c>
 800ebd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ebd4:	9907      	ldr	r1, [sp, #28]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f002 f9d0 	bl	8010f7c <__pow5mult>
 800ebdc:	9007      	str	r0, [sp, #28]
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f43f ae8e 	beq.w	800e900 <_strtod_l+0x498>
 800ebe4:	2f00      	cmp	r7, #0
 800ebe6:	dd08      	ble.n	800ebfa <_strtod_l+0x792>
 800ebe8:	9907      	ldr	r1, [sp, #28]
 800ebea:	463a      	mov	r2, r7
 800ebec:	4620      	mov	r0, r4
 800ebee:	f002 fa1f 	bl	8011030 <__lshift>
 800ebf2:	9007      	str	r0, [sp, #28]
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	f43f ae83 	beq.w	800e900 <_strtod_l+0x498>
 800ebfa:	f1b9 0f00 	cmp.w	r9, #0
 800ebfe:	dd08      	ble.n	800ec12 <_strtod_l+0x7aa>
 800ec00:	4631      	mov	r1, r6
 800ec02:	464a      	mov	r2, r9
 800ec04:	4620      	mov	r0, r4
 800ec06:	f002 fa13 	bl	8011030 <__lshift>
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	f43f ae77 	beq.w	800e900 <_strtod_l+0x498>
 800ec12:	9a07      	ldr	r2, [sp, #28]
 800ec14:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec16:	4620      	mov	r0, r4
 800ec18:	f002 fa92 	bl	8011140 <__mdiff>
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f43f ae6e 	beq.w	800e900 <_strtod_l+0x498>
 800ec24:	68c3      	ldr	r3, [r0, #12]
 800ec26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec28:	2300      	movs	r3, #0
 800ec2a:	60c3      	str	r3, [r0, #12]
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	f002 fa6b 	bl	8011108 <__mcmp>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	da65      	bge.n	800ed02 <_strtod_l+0x89a>
 800ec36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec38:	ea53 030a 	orrs.w	r3, r3, sl
 800ec3c:	f040 8087 	bne.w	800ed4e <_strtod_l+0x8e6>
 800ec40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 8082 	bne.w	800ed4e <_strtod_l+0x8e6>
 800ec4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec4e:	0d1b      	lsrs	r3, r3, #20
 800ec50:	051b      	lsls	r3, r3, #20
 800ec52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec56:	d97a      	bls.n	800ed4e <_strtod_l+0x8e6>
 800ec58:	696b      	ldr	r3, [r5, #20]
 800ec5a:	b913      	cbnz	r3, 800ec62 <_strtod_l+0x7fa>
 800ec5c:	692b      	ldr	r3, [r5, #16]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	dd75      	ble.n	800ed4e <_strtod_l+0x8e6>
 800ec62:	4629      	mov	r1, r5
 800ec64:	2201      	movs	r2, #1
 800ec66:	4620      	mov	r0, r4
 800ec68:	f002 f9e2 	bl	8011030 <__lshift>
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4605      	mov	r5, r0
 800ec70:	f002 fa4a 	bl	8011108 <__mcmp>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	dd6a      	ble.n	800ed4e <_strtod_l+0x8e6>
 800ec78:	9904      	ldr	r1, [sp, #16]
 800ec7a:	4a55      	ldr	r2, [pc, #340]	; (800edd0 <_strtod_l+0x968>)
 800ec7c:	465b      	mov	r3, fp
 800ec7e:	2900      	cmp	r1, #0
 800ec80:	f000 8085 	beq.w	800ed8e <_strtod_l+0x926>
 800ec84:	ea02 010b 	and.w	r1, r2, fp
 800ec88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ec8c:	dc7f      	bgt.n	800ed8e <_strtod_l+0x926>
 800ec8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ec92:	f77f aeaa 	ble.w	800e9ea <_strtod_l+0x582>
 800ec96:	4a4f      	ldr	r2, [pc, #316]	; (800edd4 <_strtod_l+0x96c>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ec9e:	4650      	mov	r0, sl
 800eca0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800eca4:	4659      	mov	r1, fp
 800eca6:	f7f1 fccf 	bl	8000648 <__aeabi_dmul>
 800ecaa:	460b      	mov	r3, r1
 800ecac:	4303      	orrs	r3, r0
 800ecae:	bf08      	it	eq
 800ecb0:	2322      	moveq	r3, #34	; 0x22
 800ecb2:	4682      	mov	sl, r0
 800ecb4:	468b      	mov	fp, r1
 800ecb6:	bf08      	it	eq
 800ecb8:	6023      	streq	r3, [r4, #0]
 800ecba:	e62b      	b.n	800e914 <_strtod_l+0x4ac>
 800ecbc:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc4:	ea03 0a0a 	and.w	sl, r3, sl
 800ecc8:	e6de      	b.n	800ea88 <_strtod_l+0x620>
 800ecca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ecce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ecd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ecd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ecda:	fa01 f308 	lsl.w	r3, r1, r8
 800ecde:	930c      	str	r3, [sp, #48]	; 0x30
 800ece0:	9111      	str	r1, [sp, #68]	; 0x44
 800ece2:	e741      	b.n	800eb68 <_strtod_l+0x700>
 800ece4:	2300      	movs	r3, #0
 800ece6:	930c      	str	r3, [sp, #48]	; 0x30
 800ece8:	2301      	movs	r3, #1
 800ecea:	9311      	str	r3, [sp, #68]	; 0x44
 800ecec:	e73c      	b.n	800eb68 <_strtod_l+0x700>
 800ecee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ecf0:	4642      	mov	r2, r8
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f002 f99c 	bl	8011030 <__lshift>
 800ecf8:	901e      	str	r0, [sp, #120]	; 0x78
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	f47f af66 	bne.w	800ebcc <_strtod_l+0x764>
 800ed00:	e5fe      	b.n	800e900 <_strtod_l+0x498>
 800ed02:	465f      	mov	r7, fp
 800ed04:	d16e      	bne.n	800ede4 <_strtod_l+0x97c>
 800ed06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed0c:	b342      	cbz	r2, 800ed60 <_strtod_l+0x8f8>
 800ed0e:	4a32      	ldr	r2, [pc, #200]	; (800edd8 <_strtod_l+0x970>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d128      	bne.n	800ed66 <_strtod_l+0x8fe>
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	4650      	mov	r0, sl
 800ed18:	b1eb      	cbz	r3, 800ed56 <_strtod_l+0x8ee>
 800ed1a:	4a2d      	ldr	r2, [pc, #180]	; (800edd0 <_strtod_l+0x968>)
 800ed1c:	403a      	ands	r2, r7
 800ed1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ed22:	f04f 31ff 	mov.w	r1, #4294967295
 800ed26:	d819      	bhi.n	800ed5c <_strtod_l+0x8f4>
 800ed28:	0d12      	lsrs	r2, r2, #20
 800ed2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ed2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed32:	4298      	cmp	r0, r3
 800ed34:	d117      	bne.n	800ed66 <_strtod_l+0x8fe>
 800ed36:	4b29      	ldr	r3, [pc, #164]	; (800eddc <_strtod_l+0x974>)
 800ed38:	429f      	cmp	r7, r3
 800ed3a:	d102      	bne.n	800ed42 <_strtod_l+0x8da>
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f addf 	beq.w	800e900 <_strtod_l+0x498>
 800ed42:	4b23      	ldr	r3, [pc, #140]	; (800edd0 <_strtod_l+0x968>)
 800ed44:	403b      	ands	r3, r7
 800ed46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed4a:	f04f 0a00 	mov.w	sl, #0
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1a0      	bne.n	800ec96 <_strtod_l+0x82e>
 800ed54:	e5de      	b.n	800e914 <_strtod_l+0x4ac>
 800ed56:	f04f 33ff 	mov.w	r3, #4294967295
 800ed5a:	e7ea      	b.n	800ed32 <_strtod_l+0x8ca>
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	e7e8      	b.n	800ed32 <_strtod_l+0x8ca>
 800ed60:	ea53 030a 	orrs.w	r3, r3, sl
 800ed64:	d088      	beq.n	800ec78 <_strtod_l+0x810>
 800ed66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed68:	b1db      	cbz	r3, 800eda2 <_strtod_l+0x93a>
 800ed6a:	423b      	tst	r3, r7
 800ed6c:	d0ef      	beq.n	800ed4e <_strtod_l+0x8e6>
 800ed6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed70:	9a04      	ldr	r2, [sp, #16]
 800ed72:	4650      	mov	r0, sl
 800ed74:	4659      	mov	r1, fp
 800ed76:	b1c3      	cbz	r3, 800edaa <_strtod_l+0x942>
 800ed78:	f7ff fb5a 	bl	800e430 <sulp>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed84:	f7f1 faaa 	bl	80002dc <__adddf3>
 800ed88:	4682      	mov	sl, r0
 800ed8a:	468b      	mov	fp, r1
 800ed8c:	e7df      	b.n	800ed4e <_strtod_l+0x8e6>
 800ed8e:	4013      	ands	r3, r2
 800ed90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed9c:	f04f 3aff 	mov.w	sl, #4294967295
 800eda0:	e7d5      	b.n	800ed4e <_strtod_l+0x8e6>
 800eda2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eda4:	ea13 0f0a 	tst.w	r3, sl
 800eda8:	e7e0      	b.n	800ed6c <_strtod_l+0x904>
 800edaa:	f7ff fb41 	bl	800e430 <sulp>
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800edb6:	f7f1 fa8f 	bl	80002d8 <__aeabi_dsub>
 800edba:	2200      	movs	r2, #0
 800edbc:	2300      	movs	r3, #0
 800edbe:	4682      	mov	sl, r0
 800edc0:	468b      	mov	fp, r1
 800edc2:	f7f1 fea9 	bl	8000b18 <__aeabi_dcmpeq>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0c1      	beq.n	800ed4e <_strtod_l+0x8e6>
 800edca:	e60e      	b.n	800e9ea <_strtod_l+0x582>
 800edcc:	fffffc02 	.word	0xfffffc02
 800edd0:	7ff00000 	.word	0x7ff00000
 800edd4:	39500000 	.word	0x39500000
 800edd8:	000fffff 	.word	0x000fffff
 800eddc:	7fefffff 	.word	0x7fefffff
 800ede0:	08013428 	.word	0x08013428
 800ede4:	4631      	mov	r1, r6
 800ede6:	4628      	mov	r0, r5
 800ede8:	f002 fb0a 	bl	8011400 <__ratio>
 800edec:	ec59 8b10 	vmov	r8, r9, d0
 800edf0:	ee10 0a10 	vmov	r0, s0
 800edf4:	2200      	movs	r2, #0
 800edf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edfa:	4649      	mov	r1, r9
 800edfc:	f7f1 fea0 	bl	8000b40 <__aeabi_dcmple>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d07c      	beq.n	800eefe <_strtod_l+0xa96>
 800ee04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d04c      	beq.n	800eea4 <_strtod_l+0xa3c>
 800ee0a:	4b95      	ldr	r3, [pc, #596]	; (800f060 <_strtod_l+0xbf8>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ee12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f060 <_strtod_l+0xbf8>
 800ee16:	f04f 0800 	mov.w	r8, #0
 800ee1a:	4b92      	ldr	r3, [pc, #584]	; (800f064 <_strtod_l+0xbfc>)
 800ee1c:	403b      	ands	r3, r7
 800ee1e:	9311      	str	r3, [sp, #68]	; 0x44
 800ee20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ee22:	4b91      	ldr	r3, [pc, #580]	; (800f068 <_strtod_l+0xc00>)
 800ee24:	429a      	cmp	r2, r3
 800ee26:	f040 80b2 	bne.w	800ef8e <_strtod_l+0xb26>
 800ee2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ee36:	ec4b ab10 	vmov	d0, sl, fp
 800ee3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ee3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ee42:	f002 fa05 	bl	8011250 <__ulp>
 800ee46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee4a:	ec53 2b10 	vmov	r2, r3, d0
 800ee4e:	f7f1 fbfb 	bl	8000648 <__aeabi_dmul>
 800ee52:	4652      	mov	r2, sl
 800ee54:	465b      	mov	r3, fp
 800ee56:	f7f1 fa41 	bl	80002dc <__adddf3>
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4981      	ldr	r1, [pc, #516]	; (800f064 <_strtod_l+0xbfc>)
 800ee5e:	4a83      	ldr	r2, [pc, #524]	; (800f06c <_strtod_l+0xc04>)
 800ee60:	4019      	ands	r1, r3
 800ee62:	4291      	cmp	r1, r2
 800ee64:	4682      	mov	sl, r0
 800ee66:	d95e      	bls.n	800ef26 <_strtod_l+0xabe>
 800ee68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d103      	bne.n	800ee7a <_strtod_l+0xa12>
 800ee72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee74:	3301      	adds	r3, #1
 800ee76:	f43f ad43 	beq.w	800e900 <_strtod_l+0x498>
 800ee7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f078 <_strtod_l+0xc10>
 800ee7e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee82:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee84:	4620      	mov	r0, r4
 800ee86:	f001 feb7 	bl	8010bf8 <_Bfree>
 800ee8a:	9907      	ldr	r1, [sp, #28]
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f001 feb3 	bl	8010bf8 <_Bfree>
 800ee92:	4631      	mov	r1, r6
 800ee94:	4620      	mov	r0, r4
 800ee96:	f001 feaf 	bl	8010bf8 <_Bfree>
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f001 feab 	bl	8010bf8 <_Bfree>
 800eea2:	e613      	b.n	800eacc <_strtod_l+0x664>
 800eea4:	f1ba 0f00 	cmp.w	sl, #0
 800eea8:	d11b      	bne.n	800eee2 <_strtod_l+0xa7a>
 800eeaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eeae:	b9f3      	cbnz	r3, 800eeee <_strtod_l+0xa86>
 800eeb0:	4b6b      	ldr	r3, [pc, #428]	; (800f060 <_strtod_l+0xbf8>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	4649      	mov	r1, r9
 800eeb8:	f7f1 fe38 	bl	8000b2c <__aeabi_dcmplt>
 800eebc:	b9d0      	cbnz	r0, 800eef4 <_strtod_l+0xa8c>
 800eebe:	4640      	mov	r0, r8
 800eec0:	4649      	mov	r1, r9
 800eec2:	4b6b      	ldr	r3, [pc, #428]	; (800f070 <_strtod_l+0xc08>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	f7f1 fbbf 	bl	8000648 <__aeabi_dmul>
 800eeca:	4680      	mov	r8, r0
 800eecc:	4689      	mov	r9, r1
 800eece:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eed2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800eed6:	931b      	str	r3, [sp, #108]	; 0x6c
 800eed8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800eedc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eee0:	e79b      	b.n	800ee1a <_strtod_l+0x9b2>
 800eee2:	f1ba 0f01 	cmp.w	sl, #1
 800eee6:	d102      	bne.n	800eeee <_strtod_l+0xa86>
 800eee8:	2f00      	cmp	r7, #0
 800eeea:	f43f ad7e 	beq.w	800e9ea <_strtod_l+0x582>
 800eeee:	4b61      	ldr	r3, [pc, #388]	; (800f074 <_strtod_l+0xc0c>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	e78c      	b.n	800ee0e <_strtod_l+0x9a6>
 800eef4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f070 <_strtod_l+0xc08>
 800eef8:	f04f 0800 	mov.w	r8, #0
 800eefc:	e7e7      	b.n	800eece <_strtod_l+0xa66>
 800eefe:	4b5c      	ldr	r3, [pc, #368]	; (800f070 <_strtod_l+0xc08>)
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	2200      	movs	r2, #0
 800ef06:	f7f1 fb9f 	bl	8000648 <__aeabi_dmul>
 800ef0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef0c:	4680      	mov	r8, r0
 800ef0e:	4689      	mov	r9, r1
 800ef10:	b933      	cbnz	r3, 800ef20 <_strtod_l+0xab8>
 800ef12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef16:	9012      	str	r0, [sp, #72]	; 0x48
 800ef18:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ef1e:	e7dd      	b.n	800eedc <_strtod_l+0xa74>
 800ef20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ef24:	e7f9      	b.n	800ef1a <_strtod_l+0xab2>
 800ef26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef2a:	9b04      	ldr	r3, [sp, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1a8      	bne.n	800ee82 <_strtod_l+0xa1a>
 800ef30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef36:	0d1b      	lsrs	r3, r3, #20
 800ef38:	051b      	lsls	r3, r3, #20
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d1a1      	bne.n	800ee82 <_strtod_l+0xa1a>
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 fee1 	bl	8000d08 <__aeabi_d2lz>
 800ef46:	f7f1 fb51 	bl	80005ec <__aeabi_l2d>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 f9c1 	bl	80002d8 <__aeabi_dsub>
 800ef56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef5c:	ea43 030a 	orr.w	r3, r3, sl
 800ef60:	4313      	orrs	r3, r2
 800ef62:	4680      	mov	r8, r0
 800ef64:	4689      	mov	r9, r1
 800ef66:	d053      	beq.n	800f010 <_strtod_l+0xba8>
 800ef68:	a335      	add	r3, pc, #212	; (adr r3, 800f040 <_strtod_l+0xbd8>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	f7f1 fddd 	bl	8000b2c <__aeabi_dcmplt>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f47f acce 	bne.w	800e914 <_strtod_l+0x4ac>
 800ef78:	a333      	add	r3, pc, #204	; (adr r3, 800f048 <_strtod_l+0xbe0>)
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	4640      	mov	r0, r8
 800ef80:	4649      	mov	r1, r9
 800ef82:	f7f1 fdf1 	bl	8000b68 <__aeabi_dcmpgt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	f43f af7b 	beq.w	800ee82 <_strtod_l+0xa1a>
 800ef8c:	e4c2      	b.n	800e914 <_strtod_l+0x4ac>
 800ef8e:	9b04      	ldr	r3, [sp, #16]
 800ef90:	b333      	cbz	r3, 800efe0 <_strtod_l+0xb78>
 800ef92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef98:	d822      	bhi.n	800efe0 <_strtod_l+0xb78>
 800ef9a:	a32d      	add	r3, pc, #180	; (adr r3, 800f050 <_strtod_l+0xbe8>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fdcc 	bl	8000b40 <__aeabi_dcmple>
 800efa8:	b1a0      	cbz	r0, 800efd4 <_strtod_l+0xb6c>
 800efaa:	4649      	mov	r1, r9
 800efac:	4640      	mov	r0, r8
 800efae:	f7f1 fe23 	bl	8000bf8 <__aeabi_d2uiz>
 800efb2:	2801      	cmp	r0, #1
 800efb4:	bf38      	it	cc
 800efb6:	2001      	movcc	r0, #1
 800efb8:	f7f1 facc 	bl	8000554 <__aeabi_ui2d>
 800efbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efbe:	4680      	mov	r8, r0
 800efc0:	4689      	mov	r9, r1
 800efc2:	bb13      	cbnz	r3, 800f00a <_strtod_l+0xba2>
 800efc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efc8:	9014      	str	r0, [sp, #80]	; 0x50
 800efca:	9315      	str	r3, [sp, #84]	; 0x54
 800efcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800efd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800efd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	930d      	str	r3, [sp, #52]	; 0x34
 800efe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efe4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800efe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efec:	f002 f930 	bl	8011250 <__ulp>
 800eff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eff4:	ec53 2b10 	vmov	r2, r3, d0
 800eff8:	f7f1 fb26 	bl	8000648 <__aeabi_dmul>
 800effc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f000:	f7f1 f96c 	bl	80002dc <__adddf3>
 800f004:	4682      	mov	sl, r0
 800f006:	468b      	mov	fp, r1
 800f008:	e78f      	b.n	800ef2a <_strtod_l+0xac2>
 800f00a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f00e:	e7dd      	b.n	800efcc <_strtod_l+0xb64>
 800f010:	a311      	add	r3, pc, #68	; (adr r3, 800f058 <_strtod_l+0xbf0>)
 800f012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f016:	f7f1 fd89 	bl	8000b2c <__aeabi_dcmplt>
 800f01a:	e7b4      	b.n	800ef86 <_strtod_l+0xb1e>
 800f01c:	2300      	movs	r3, #0
 800f01e:	930e      	str	r3, [sp, #56]	; 0x38
 800f020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	f7ff ba65 	b.w	800e4f4 <_strtod_l+0x8c>
 800f02a:	2b65      	cmp	r3, #101	; 0x65
 800f02c:	f43f ab5d 	beq.w	800e6ea <_strtod_l+0x282>
 800f030:	2b45      	cmp	r3, #69	; 0x45
 800f032:	f43f ab5a 	beq.w	800e6ea <_strtod_l+0x282>
 800f036:	2201      	movs	r2, #1
 800f038:	f7ff bb92 	b.w	800e760 <_strtod_l+0x2f8>
 800f03c:	f3af 8000 	nop.w
 800f040:	94a03595 	.word	0x94a03595
 800f044:	3fdfffff 	.word	0x3fdfffff
 800f048:	35afe535 	.word	0x35afe535
 800f04c:	3fe00000 	.word	0x3fe00000
 800f050:	ffc00000 	.word	0xffc00000
 800f054:	41dfffff 	.word	0x41dfffff
 800f058:	94a03595 	.word	0x94a03595
 800f05c:	3fcfffff 	.word	0x3fcfffff
 800f060:	3ff00000 	.word	0x3ff00000
 800f064:	7ff00000 	.word	0x7ff00000
 800f068:	7fe00000 	.word	0x7fe00000
 800f06c:	7c9fffff 	.word	0x7c9fffff
 800f070:	3fe00000 	.word	0x3fe00000
 800f074:	bff00000 	.word	0xbff00000
 800f078:	7fefffff 	.word	0x7fefffff

0800f07c <strtod>:
 800f07c:	460a      	mov	r2, r1
 800f07e:	4601      	mov	r1, r0
 800f080:	4802      	ldr	r0, [pc, #8]	; (800f08c <strtod+0x10>)
 800f082:	4b03      	ldr	r3, [pc, #12]	; (800f090 <strtod+0x14>)
 800f084:	6800      	ldr	r0, [r0, #0]
 800f086:	f7ff b9ef 	b.w	800e468 <_strtod_l>
 800f08a:	bf00      	nop
 800f08c:	20000030 	.word	0x20000030
 800f090:	20000098 	.word	0x20000098

0800f094 <_strtol_l.isra.0>:
 800f094:	2b01      	cmp	r3, #1
 800f096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f09a:	d001      	beq.n	800f0a0 <_strtol_l.isra.0+0xc>
 800f09c:	2b24      	cmp	r3, #36	; 0x24
 800f09e:	d906      	bls.n	800f0ae <_strtol_l.isra.0+0x1a>
 800f0a0:	f7fe fc8e 	bl	800d9c0 <__errno>
 800f0a4:	2316      	movs	r3, #22
 800f0a6:	6003      	str	r3, [r0, #0]
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ae:	4f3a      	ldr	r7, [pc, #232]	; (800f198 <_strtol_l.isra.0+0x104>)
 800f0b0:	468e      	mov	lr, r1
 800f0b2:	4676      	mov	r6, lr
 800f0b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f0b8:	5de5      	ldrb	r5, [r4, r7]
 800f0ba:	f015 0508 	ands.w	r5, r5, #8
 800f0be:	d1f8      	bne.n	800f0b2 <_strtol_l.isra.0+0x1e>
 800f0c0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0c2:	d134      	bne.n	800f12e <_strtol_l.isra.0+0x9a>
 800f0c4:	f89e 4000 	ldrb.w	r4, [lr]
 800f0c8:	f04f 0801 	mov.w	r8, #1
 800f0cc:	f106 0e02 	add.w	lr, r6, #2
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05c      	beq.n	800f18e <_strtol_l.isra.0+0xfa>
 800f0d4:	2b10      	cmp	r3, #16
 800f0d6:	d10c      	bne.n	800f0f2 <_strtol_l.isra.0+0x5e>
 800f0d8:	2c30      	cmp	r4, #48	; 0x30
 800f0da:	d10a      	bne.n	800f0f2 <_strtol_l.isra.0+0x5e>
 800f0dc:	f89e 4000 	ldrb.w	r4, [lr]
 800f0e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0e4:	2c58      	cmp	r4, #88	; 0x58
 800f0e6:	d14d      	bne.n	800f184 <_strtol_l.isra.0+0xf0>
 800f0e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f0ec:	2310      	movs	r3, #16
 800f0ee:	f10e 0e02 	add.w	lr, lr, #2
 800f0f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f0f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f0fa:	2600      	movs	r6, #0
 800f0fc:	fbbc f9f3 	udiv	r9, ip, r3
 800f100:	4635      	mov	r5, r6
 800f102:	fb03 ca19 	mls	sl, r3, r9, ip
 800f106:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f10a:	2f09      	cmp	r7, #9
 800f10c:	d818      	bhi.n	800f140 <_strtol_l.isra.0+0xac>
 800f10e:	463c      	mov	r4, r7
 800f110:	42a3      	cmp	r3, r4
 800f112:	dd24      	ble.n	800f15e <_strtol_l.isra.0+0xca>
 800f114:	2e00      	cmp	r6, #0
 800f116:	db1f      	blt.n	800f158 <_strtol_l.isra.0+0xc4>
 800f118:	45a9      	cmp	r9, r5
 800f11a:	d31d      	bcc.n	800f158 <_strtol_l.isra.0+0xc4>
 800f11c:	d101      	bne.n	800f122 <_strtol_l.isra.0+0x8e>
 800f11e:	45a2      	cmp	sl, r4
 800f120:	db1a      	blt.n	800f158 <_strtol_l.isra.0+0xc4>
 800f122:	fb05 4503 	mla	r5, r5, r3, r4
 800f126:	2601      	movs	r6, #1
 800f128:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f12c:	e7eb      	b.n	800f106 <_strtol_l.isra.0+0x72>
 800f12e:	2c2b      	cmp	r4, #43	; 0x2b
 800f130:	bf08      	it	eq
 800f132:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f136:	46a8      	mov	r8, r5
 800f138:	bf08      	it	eq
 800f13a:	f106 0e02 	addeq.w	lr, r6, #2
 800f13e:	e7c7      	b.n	800f0d0 <_strtol_l.isra.0+0x3c>
 800f140:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f144:	2f19      	cmp	r7, #25
 800f146:	d801      	bhi.n	800f14c <_strtol_l.isra.0+0xb8>
 800f148:	3c37      	subs	r4, #55	; 0x37
 800f14a:	e7e1      	b.n	800f110 <_strtol_l.isra.0+0x7c>
 800f14c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f150:	2f19      	cmp	r7, #25
 800f152:	d804      	bhi.n	800f15e <_strtol_l.isra.0+0xca>
 800f154:	3c57      	subs	r4, #87	; 0x57
 800f156:	e7db      	b.n	800f110 <_strtol_l.isra.0+0x7c>
 800f158:	f04f 36ff 	mov.w	r6, #4294967295
 800f15c:	e7e4      	b.n	800f128 <_strtol_l.isra.0+0x94>
 800f15e:	2e00      	cmp	r6, #0
 800f160:	da05      	bge.n	800f16e <_strtol_l.isra.0+0xda>
 800f162:	2322      	movs	r3, #34	; 0x22
 800f164:	6003      	str	r3, [r0, #0]
 800f166:	4665      	mov	r5, ip
 800f168:	b942      	cbnz	r2, 800f17c <_strtol_l.isra.0+0xe8>
 800f16a:	4628      	mov	r0, r5
 800f16c:	e79d      	b.n	800f0aa <_strtol_l.isra.0+0x16>
 800f16e:	f1b8 0f00 	cmp.w	r8, #0
 800f172:	d000      	beq.n	800f176 <_strtol_l.isra.0+0xe2>
 800f174:	426d      	negs	r5, r5
 800f176:	2a00      	cmp	r2, #0
 800f178:	d0f7      	beq.n	800f16a <_strtol_l.isra.0+0xd6>
 800f17a:	b10e      	cbz	r6, 800f180 <_strtol_l.isra.0+0xec>
 800f17c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f180:	6011      	str	r1, [r2, #0]
 800f182:	e7f2      	b.n	800f16a <_strtol_l.isra.0+0xd6>
 800f184:	2430      	movs	r4, #48	; 0x30
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1b3      	bne.n	800f0f2 <_strtol_l.isra.0+0x5e>
 800f18a:	2308      	movs	r3, #8
 800f18c:	e7b1      	b.n	800f0f2 <_strtol_l.isra.0+0x5e>
 800f18e:	2c30      	cmp	r4, #48	; 0x30
 800f190:	d0a4      	beq.n	800f0dc <_strtol_l.isra.0+0x48>
 800f192:	230a      	movs	r3, #10
 800f194:	e7ad      	b.n	800f0f2 <_strtol_l.isra.0+0x5e>
 800f196:	bf00      	nop
 800f198:	08013451 	.word	0x08013451

0800f19c <strtol>:
 800f19c:	4613      	mov	r3, r2
 800f19e:	460a      	mov	r2, r1
 800f1a0:	4601      	mov	r1, r0
 800f1a2:	4802      	ldr	r0, [pc, #8]	; (800f1ac <strtol+0x10>)
 800f1a4:	6800      	ldr	r0, [r0, #0]
 800f1a6:	f7ff bf75 	b.w	800f094 <_strtol_l.isra.0>
 800f1aa:	bf00      	nop
 800f1ac:	20000030 	.word	0x20000030

0800f1b0 <__swbuf_r>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	460e      	mov	r6, r1
 800f1b4:	4614      	mov	r4, r2
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	b118      	cbz	r0, 800f1c2 <__swbuf_r+0x12>
 800f1ba:	6983      	ldr	r3, [r0, #24]
 800f1bc:	b90b      	cbnz	r3, 800f1c2 <__swbuf_r+0x12>
 800f1be:	f001 f849 	bl	8010254 <__sinit>
 800f1c2:	4b21      	ldr	r3, [pc, #132]	; (800f248 <__swbuf_r+0x98>)
 800f1c4:	429c      	cmp	r4, r3
 800f1c6:	d12b      	bne.n	800f220 <__swbuf_r+0x70>
 800f1c8:	686c      	ldr	r4, [r5, #4]
 800f1ca:	69a3      	ldr	r3, [r4, #24]
 800f1cc:	60a3      	str	r3, [r4, #8]
 800f1ce:	89a3      	ldrh	r3, [r4, #12]
 800f1d0:	071a      	lsls	r2, r3, #28
 800f1d2:	d52f      	bpl.n	800f234 <__swbuf_r+0x84>
 800f1d4:	6923      	ldr	r3, [r4, #16]
 800f1d6:	b36b      	cbz	r3, 800f234 <__swbuf_r+0x84>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	6820      	ldr	r0, [r4, #0]
 800f1dc:	1ac0      	subs	r0, r0, r3
 800f1de:	6963      	ldr	r3, [r4, #20]
 800f1e0:	b2f6      	uxtb	r6, r6
 800f1e2:	4283      	cmp	r3, r0
 800f1e4:	4637      	mov	r7, r6
 800f1e6:	dc04      	bgt.n	800f1f2 <__swbuf_r+0x42>
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f000 ff9e 	bl	801012c <_fflush_r>
 800f1f0:	bb30      	cbnz	r0, 800f240 <__swbuf_r+0x90>
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	60a3      	str	r3, [r4, #8]
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	6022      	str	r2, [r4, #0]
 800f1fe:	701e      	strb	r6, [r3, #0]
 800f200:	6963      	ldr	r3, [r4, #20]
 800f202:	3001      	adds	r0, #1
 800f204:	4283      	cmp	r3, r0
 800f206:	d004      	beq.n	800f212 <__swbuf_r+0x62>
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	07db      	lsls	r3, r3, #31
 800f20c:	d506      	bpl.n	800f21c <__swbuf_r+0x6c>
 800f20e:	2e0a      	cmp	r6, #10
 800f210:	d104      	bne.n	800f21c <__swbuf_r+0x6c>
 800f212:	4621      	mov	r1, r4
 800f214:	4628      	mov	r0, r5
 800f216:	f000 ff89 	bl	801012c <_fflush_r>
 800f21a:	b988      	cbnz	r0, 800f240 <__swbuf_r+0x90>
 800f21c:	4638      	mov	r0, r7
 800f21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f220:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <__swbuf_r+0x9c>)
 800f222:	429c      	cmp	r4, r3
 800f224:	d101      	bne.n	800f22a <__swbuf_r+0x7a>
 800f226:	68ac      	ldr	r4, [r5, #8]
 800f228:	e7cf      	b.n	800f1ca <__swbuf_r+0x1a>
 800f22a:	4b09      	ldr	r3, [pc, #36]	; (800f250 <__swbuf_r+0xa0>)
 800f22c:	429c      	cmp	r4, r3
 800f22e:	bf08      	it	eq
 800f230:	68ec      	ldreq	r4, [r5, #12]
 800f232:	e7ca      	b.n	800f1ca <__swbuf_r+0x1a>
 800f234:	4621      	mov	r1, r4
 800f236:	4628      	mov	r0, r5
 800f238:	f000 f80c 	bl	800f254 <__swsetup_r>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d0cb      	beq.n	800f1d8 <__swbuf_r+0x28>
 800f240:	f04f 37ff 	mov.w	r7, #4294967295
 800f244:	e7ea      	b.n	800f21c <__swbuf_r+0x6c>
 800f246:	bf00      	nop
 800f248:	08013608 	.word	0x08013608
 800f24c:	08013628 	.word	0x08013628
 800f250:	080135e8 	.word	0x080135e8

0800f254 <__swsetup_r>:
 800f254:	4b32      	ldr	r3, [pc, #200]	; (800f320 <__swsetup_r+0xcc>)
 800f256:	b570      	push	{r4, r5, r6, lr}
 800f258:	681d      	ldr	r5, [r3, #0]
 800f25a:	4606      	mov	r6, r0
 800f25c:	460c      	mov	r4, r1
 800f25e:	b125      	cbz	r5, 800f26a <__swsetup_r+0x16>
 800f260:	69ab      	ldr	r3, [r5, #24]
 800f262:	b913      	cbnz	r3, 800f26a <__swsetup_r+0x16>
 800f264:	4628      	mov	r0, r5
 800f266:	f000 fff5 	bl	8010254 <__sinit>
 800f26a:	4b2e      	ldr	r3, [pc, #184]	; (800f324 <__swsetup_r+0xd0>)
 800f26c:	429c      	cmp	r4, r3
 800f26e:	d10f      	bne.n	800f290 <__swsetup_r+0x3c>
 800f270:	686c      	ldr	r4, [r5, #4]
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f278:	0719      	lsls	r1, r3, #28
 800f27a:	d42c      	bmi.n	800f2d6 <__swsetup_r+0x82>
 800f27c:	06dd      	lsls	r5, r3, #27
 800f27e:	d411      	bmi.n	800f2a4 <__swsetup_r+0x50>
 800f280:	2309      	movs	r3, #9
 800f282:	6033      	str	r3, [r6, #0]
 800f284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f288:	81a3      	strh	r3, [r4, #12]
 800f28a:	f04f 30ff 	mov.w	r0, #4294967295
 800f28e:	e03e      	b.n	800f30e <__swsetup_r+0xba>
 800f290:	4b25      	ldr	r3, [pc, #148]	; (800f328 <__swsetup_r+0xd4>)
 800f292:	429c      	cmp	r4, r3
 800f294:	d101      	bne.n	800f29a <__swsetup_r+0x46>
 800f296:	68ac      	ldr	r4, [r5, #8]
 800f298:	e7eb      	b.n	800f272 <__swsetup_r+0x1e>
 800f29a:	4b24      	ldr	r3, [pc, #144]	; (800f32c <__swsetup_r+0xd8>)
 800f29c:	429c      	cmp	r4, r3
 800f29e:	bf08      	it	eq
 800f2a0:	68ec      	ldreq	r4, [r5, #12]
 800f2a2:	e7e6      	b.n	800f272 <__swsetup_r+0x1e>
 800f2a4:	0758      	lsls	r0, r3, #29
 800f2a6:	d512      	bpl.n	800f2ce <__swsetup_r+0x7a>
 800f2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2aa:	b141      	cbz	r1, 800f2be <__swsetup_r+0x6a>
 800f2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2b0:	4299      	cmp	r1, r3
 800f2b2:	d002      	beq.n	800f2ba <__swsetup_r+0x66>
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f002 f929 	bl	801150c <_free_r>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	6363      	str	r3, [r4, #52]	; 0x34
 800f2be:	89a3      	ldrh	r3, [r4, #12]
 800f2c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	6063      	str	r3, [r4, #4]
 800f2ca:	6923      	ldr	r3, [r4, #16]
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	89a3      	ldrh	r3, [r4, #12]
 800f2d0:	f043 0308 	orr.w	r3, r3, #8
 800f2d4:	81a3      	strh	r3, [r4, #12]
 800f2d6:	6923      	ldr	r3, [r4, #16]
 800f2d8:	b94b      	cbnz	r3, 800f2ee <__swsetup_r+0x9a>
 800f2da:	89a3      	ldrh	r3, [r4, #12]
 800f2dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2e4:	d003      	beq.n	800f2ee <__swsetup_r+0x9a>
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f001 fbeb 	bl	8010ac4 <__smakebuf_r>
 800f2ee:	89a0      	ldrh	r0, [r4, #12]
 800f2f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2f4:	f010 0301 	ands.w	r3, r0, #1
 800f2f8:	d00a      	beq.n	800f310 <__swsetup_r+0xbc>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	6963      	ldr	r3, [r4, #20]
 800f300:	425b      	negs	r3, r3
 800f302:	61a3      	str	r3, [r4, #24]
 800f304:	6923      	ldr	r3, [r4, #16]
 800f306:	b943      	cbnz	r3, 800f31a <__swsetup_r+0xc6>
 800f308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f30c:	d1ba      	bne.n	800f284 <__swsetup_r+0x30>
 800f30e:	bd70      	pop	{r4, r5, r6, pc}
 800f310:	0781      	lsls	r1, r0, #30
 800f312:	bf58      	it	pl
 800f314:	6963      	ldrpl	r3, [r4, #20]
 800f316:	60a3      	str	r3, [r4, #8]
 800f318:	e7f4      	b.n	800f304 <__swsetup_r+0xb0>
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7f7      	b.n	800f30e <__swsetup_r+0xba>
 800f31e:	bf00      	nop
 800f320:	20000030 	.word	0x20000030
 800f324:	08013608 	.word	0x08013608
 800f328:	08013628 	.word	0x08013628
 800f32c:	080135e8 	.word	0x080135e8

0800f330 <quorem>:
 800f330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	6903      	ldr	r3, [r0, #16]
 800f336:	690c      	ldr	r4, [r1, #16]
 800f338:	42a3      	cmp	r3, r4
 800f33a:	4607      	mov	r7, r0
 800f33c:	f2c0 8081 	blt.w	800f442 <quorem+0x112>
 800f340:	3c01      	subs	r4, #1
 800f342:	f101 0814 	add.w	r8, r1, #20
 800f346:	f100 0514 	add.w	r5, r0, #20
 800f34a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f358:	3301      	adds	r3, #1
 800f35a:	429a      	cmp	r2, r3
 800f35c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f364:	fbb2 f6f3 	udiv	r6, r2, r3
 800f368:	d331      	bcc.n	800f3ce <quorem+0x9e>
 800f36a:	f04f 0e00 	mov.w	lr, #0
 800f36e:	4640      	mov	r0, r8
 800f370:	46ac      	mov	ip, r5
 800f372:	46f2      	mov	sl, lr
 800f374:	f850 2b04 	ldr.w	r2, [r0], #4
 800f378:	b293      	uxth	r3, r2
 800f37a:	fb06 e303 	mla	r3, r6, r3, lr
 800f37e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f382:	b29b      	uxth	r3, r3
 800f384:	ebaa 0303 	sub.w	r3, sl, r3
 800f388:	0c12      	lsrs	r2, r2, #16
 800f38a:	f8dc a000 	ldr.w	sl, [ip]
 800f38e:	fb06 e202 	mla	r2, r6, r2, lr
 800f392:	fa13 f38a 	uxtah	r3, r3, sl
 800f396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f39a:	fa1f fa82 	uxth.w	sl, r2
 800f39e:	f8dc 2000 	ldr.w	r2, [ip]
 800f3a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f3a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3b0:	4581      	cmp	r9, r0
 800f3b2:	f84c 3b04 	str.w	r3, [ip], #4
 800f3b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3ba:	d2db      	bcs.n	800f374 <quorem+0x44>
 800f3bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3c0:	b92b      	cbnz	r3, 800f3ce <quorem+0x9e>
 800f3c2:	9b01      	ldr	r3, [sp, #4]
 800f3c4:	3b04      	subs	r3, #4
 800f3c6:	429d      	cmp	r5, r3
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	d32e      	bcc.n	800f42a <quorem+0xfa>
 800f3cc:	613c      	str	r4, [r7, #16]
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f001 fe9a 	bl	8011108 <__mcmp>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	db24      	blt.n	800f422 <quorem+0xf2>
 800f3d8:	3601      	adds	r6, #1
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f04f 0c00 	mov.w	ip, #0
 800f3e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3e4:	f8d0 e000 	ldr.w	lr, [r0]
 800f3e8:	b293      	uxth	r3, r2
 800f3ea:	ebac 0303 	sub.w	r3, ip, r3
 800f3ee:	0c12      	lsrs	r2, r2, #16
 800f3f0:	fa13 f38e 	uxtah	r3, r3, lr
 800f3f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f3f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f402:	45c1      	cmp	r9, r8
 800f404:	f840 3b04 	str.w	r3, [r0], #4
 800f408:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f40c:	d2e8      	bcs.n	800f3e0 <quorem+0xb0>
 800f40e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f416:	b922      	cbnz	r2, 800f422 <quorem+0xf2>
 800f418:	3b04      	subs	r3, #4
 800f41a:	429d      	cmp	r5, r3
 800f41c:	461a      	mov	r2, r3
 800f41e:	d30a      	bcc.n	800f436 <quorem+0x106>
 800f420:	613c      	str	r4, [r7, #16]
 800f422:	4630      	mov	r0, r6
 800f424:	b003      	add	sp, #12
 800f426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42a:	6812      	ldr	r2, [r2, #0]
 800f42c:	3b04      	subs	r3, #4
 800f42e:	2a00      	cmp	r2, #0
 800f430:	d1cc      	bne.n	800f3cc <quorem+0x9c>
 800f432:	3c01      	subs	r4, #1
 800f434:	e7c7      	b.n	800f3c6 <quorem+0x96>
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	3b04      	subs	r3, #4
 800f43a:	2a00      	cmp	r2, #0
 800f43c:	d1f0      	bne.n	800f420 <quorem+0xf0>
 800f43e:	3c01      	subs	r4, #1
 800f440:	e7eb      	b.n	800f41a <quorem+0xea>
 800f442:	2000      	movs	r0, #0
 800f444:	e7ee      	b.n	800f424 <quorem+0xf4>
	...

0800f448 <_dtoa_r>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	ed2d 8b02 	vpush	{d8}
 800f450:	ec57 6b10 	vmov	r6, r7, d0
 800f454:	b095      	sub	sp, #84	; 0x54
 800f456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f45c:	9105      	str	r1, [sp, #20]
 800f45e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f462:	4604      	mov	r4, r0
 800f464:	9209      	str	r2, [sp, #36]	; 0x24
 800f466:	930f      	str	r3, [sp, #60]	; 0x3c
 800f468:	b975      	cbnz	r5, 800f488 <_dtoa_r+0x40>
 800f46a:	2010      	movs	r0, #16
 800f46c:	f001 fb6a 	bl	8010b44 <malloc>
 800f470:	4602      	mov	r2, r0
 800f472:	6260      	str	r0, [r4, #36]	; 0x24
 800f474:	b920      	cbnz	r0, 800f480 <_dtoa_r+0x38>
 800f476:	4bb2      	ldr	r3, [pc, #712]	; (800f740 <_dtoa_r+0x2f8>)
 800f478:	21ea      	movs	r1, #234	; 0xea
 800f47a:	48b2      	ldr	r0, [pc, #712]	; (800f744 <_dtoa_r+0x2fc>)
 800f47c:	f002 fad8 	bl	8011a30 <__assert_func>
 800f480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f484:	6005      	str	r5, [r0, #0]
 800f486:	60c5      	str	r5, [r0, #12]
 800f488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f48a:	6819      	ldr	r1, [r3, #0]
 800f48c:	b151      	cbz	r1, 800f4a4 <_dtoa_r+0x5c>
 800f48e:	685a      	ldr	r2, [r3, #4]
 800f490:	604a      	str	r2, [r1, #4]
 800f492:	2301      	movs	r3, #1
 800f494:	4093      	lsls	r3, r2
 800f496:	608b      	str	r3, [r1, #8]
 800f498:	4620      	mov	r0, r4
 800f49a:	f001 fbad 	bl	8010bf8 <_Bfree>
 800f49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	1e3b      	subs	r3, r7, #0
 800f4a6:	bfb9      	ittee	lt
 800f4a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4ac:	9303      	strlt	r3, [sp, #12]
 800f4ae:	2300      	movge	r3, #0
 800f4b0:	f8c8 3000 	strge.w	r3, [r8]
 800f4b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f4b8:	4ba3      	ldr	r3, [pc, #652]	; (800f748 <_dtoa_r+0x300>)
 800f4ba:	bfbc      	itt	lt
 800f4bc:	2201      	movlt	r2, #1
 800f4be:	f8c8 2000 	strlt.w	r2, [r8]
 800f4c2:	ea33 0309 	bics.w	r3, r3, r9
 800f4c6:	d11b      	bne.n	800f500 <_dtoa_r+0xb8>
 800f4c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4d4:	4333      	orrs	r3, r6
 800f4d6:	f000 857a 	beq.w	800ffce <_dtoa_r+0xb86>
 800f4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4dc:	b963      	cbnz	r3, 800f4f8 <_dtoa_r+0xb0>
 800f4de:	4b9b      	ldr	r3, [pc, #620]	; (800f74c <_dtoa_r+0x304>)
 800f4e0:	e024      	b.n	800f52c <_dtoa_r+0xe4>
 800f4e2:	4b9b      	ldr	r3, [pc, #620]	; (800f750 <_dtoa_r+0x308>)
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	3308      	adds	r3, #8
 800f4e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	9800      	ldr	r0, [sp, #0]
 800f4ee:	b015      	add	sp, #84	; 0x54
 800f4f0:	ecbd 8b02 	vpop	{d8}
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	4b94      	ldr	r3, [pc, #592]	; (800f74c <_dtoa_r+0x304>)
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	3303      	adds	r3, #3
 800f4fe:	e7f3      	b.n	800f4e8 <_dtoa_r+0xa0>
 800f500:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f504:	2200      	movs	r2, #0
 800f506:	ec51 0b17 	vmov	r0, r1, d7
 800f50a:	2300      	movs	r3, #0
 800f50c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f510:	f7f1 fb02 	bl	8000b18 <__aeabi_dcmpeq>
 800f514:	4680      	mov	r8, r0
 800f516:	b158      	cbz	r0, 800f530 <_dtoa_r+0xe8>
 800f518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f51a:	2301      	movs	r3, #1
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f520:	2b00      	cmp	r3, #0
 800f522:	f000 8551 	beq.w	800ffc8 <_dtoa_r+0xb80>
 800f526:	488b      	ldr	r0, [pc, #556]	; (800f754 <_dtoa_r+0x30c>)
 800f528:	6018      	str	r0, [r3, #0]
 800f52a:	1e43      	subs	r3, r0, #1
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	e7dd      	b.n	800f4ec <_dtoa_r+0xa4>
 800f530:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f534:	aa12      	add	r2, sp, #72	; 0x48
 800f536:	a913      	add	r1, sp, #76	; 0x4c
 800f538:	4620      	mov	r0, r4
 800f53a:	f001 ff05 	bl	8011348 <__d2b>
 800f53e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f542:	4683      	mov	fp, r0
 800f544:	2d00      	cmp	r5, #0
 800f546:	d07c      	beq.n	800f642 <_dtoa_r+0x1fa>
 800f548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f54a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f552:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f556:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f55a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f562:	4b7d      	ldr	r3, [pc, #500]	; (800f758 <_dtoa_r+0x310>)
 800f564:	2200      	movs	r2, #0
 800f566:	4630      	mov	r0, r6
 800f568:	4639      	mov	r1, r7
 800f56a:	f7f0 feb5 	bl	80002d8 <__aeabi_dsub>
 800f56e:	a36e      	add	r3, pc, #440	; (adr r3, 800f728 <_dtoa_r+0x2e0>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	f7f1 f868 	bl	8000648 <__aeabi_dmul>
 800f578:	a36d      	add	r3, pc, #436	; (adr r3, 800f730 <_dtoa_r+0x2e8>)
 800f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57e:	f7f0 fead 	bl	80002dc <__adddf3>
 800f582:	4606      	mov	r6, r0
 800f584:	4628      	mov	r0, r5
 800f586:	460f      	mov	r7, r1
 800f588:	f7f0 fff4 	bl	8000574 <__aeabi_i2d>
 800f58c:	a36a      	add	r3, pc, #424	; (adr r3, 800f738 <_dtoa_r+0x2f0>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f1 f859 	bl	8000648 <__aeabi_dmul>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4630      	mov	r0, r6
 800f59c:	4639      	mov	r1, r7
 800f59e:	f7f0 fe9d 	bl	80002dc <__adddf3>
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	460f      	mov	r7, r1
 800f5a6:	f7f1 faff 	bl	8000ba8 <__aeabi_d2iz>
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	4682      	mov	sl, r0
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	f7f1 faba 	bl	8000b2c <__aeabi_dcmplt>
 800f5b8:	b148      	cbz	r0, 800f5ce <_dtoa_r+0x186>
 800f5ba:	4650      	mov	r0, sl
 800f5bc:	f7f0 ffda 	bl	8000574 <__aeabi_i2d>
 800f5c0:	4632      	mov	r2, r6
 800f5c2:	463b      	mov	r3, r7
 800f5c4:	f7f1 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800f5c8:	b908      	cbnz	r0, 800f5ce <_dtoa_r+0x186>
 800f5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ce:	f1ba 0f16 	cmp.w	sl, #22
 800f5d2:	d854      	bhi.n	800f67e <_dtoa_r+0x236>
 800f5d4:	4b61      	ldr	r3, [pc, #388]	; (800f75c <_dtoa_r+0x314>)
 800f5d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5e2:	f7f1 faa3 	bl	8000b2c <__aeabi_dcmplt>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	d04b      	beq.n	800f682 <_dtoa_r+0x23a>
 800f5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800f5f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5f4:	1b5d      	subs	r5, r3, r5
 800f5f6:	1e6b      	subs	r3, r5, #1
 800f5f8:	9304      	str	r3, [sp, #16]
 800f5fa:	bf43      	ittte	mi
 800f5fc:	2300      	movmi	r3, #0
 800f5fe:	f1c5 0801 	rsbmi	r8, r5, #1
 800f602:	9304      	strmi	r3, [sp, #16]
 800f604:	f04f 0800 	movpl.w	r8, #0
 800f608:	f1ba 0f00 	cmp.w	sl, #0
 800f60c:	db3b      	blt.n	800f686 <_dtoa_r+0x23e>
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f614:	4453      	add	r3, sl
 800f616:	9304      	str	r3, [sp, #16]
 800f618:	2300      	movs	r3, #0
 800f61a:	9306      	str	r3, [sp, #24]
 800f61c:	9b05      	ldr	r3, [sp, #20]
 800f61e:	2b09      	cmp	r3, #9
 800f620:	d869      	bhi.n	800f6f6 <_dtoa_r+0x2ae>
 800f622:	2b05      	cmp	r3, #5
 800f624:	bfc4      	itt	gt
 800f626:	3b04      	subgt	r3, #4
 800f628:	9305      	strgt	r3, [sp, #20]
 800f62a:	9b05      	ldr	r3, [sp, #20]
 800f62c:	f1a3 0302 	sub.w	r3, r3, #2
 800f630:	bfcc      	ite	gt
 800f632:	2500      	movgt	r5, #0
 800f634:	2501      	movle	r5, #1
 800f636:	2b03      	cmp	r3, #3
 800f638:	d869      	bhi.n	800f70e <_dtoa_r+0x2c6>
 800f63a:	e8df f003 	tbb	[pc, r3]
 800f63e:	4e2c      	.short	0x4e2c
 800f640:	5a4c      	.short	0x5a4c
 800f642:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f646:	441d      	add	r5, r3
 800f648:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f64c:	2b20      	cmp	r3, #32
 800f64e:	bfc1      	itttt	gt
 800f650:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f654:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f658:	fa09 f303 	lslgt.w	r3, r9, r3
 800f65c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f660:	bfda      	itte	le
 800f662:	f1c3 0320 	rsble	r3, r3, #32
 800f666:	fa06 f003 	lslle.w	r0, r6, r3
 800f66a:	4318      	orrgt	r0, r3
 800f66c:	f7f0 ff72 	bl	8000554 <__aeabi_ui2d>
 800f670:	2301      	movs	r3, #1
 800f672:	4606      	mov	r6, r0
 800f674:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f678:	3d01      	subs	r5, #1
 800f67a:	9310      	str	r3, [sp, #64]	; 0x40
 800f67c:	e771      	b.n	800f562 <_dtoa_r+0x11a>
 800f67e:	2301      	movs	r3, #1
 800f680:	e7b6      	b.n	800f5f0 <_dtoa_r+0x1a8>
 800f682:	900e      	str	r0, [sp, #56]	; 0x38
 800f684:	e7b5      	b.n	800f5f2 <_dtoa_r+0x1aa>
 800f686:	f1ca 0300 	rsb	r3, sl, #0
 800f68a:	9306      	str	r3, [sp, #24]
 800f68c:	2300      	movs	r3, #0
 800f68e:	eba8 080a 	sub.w	r8, r8, sl
 800f692:	930d      	str	r3, [sp, #52]	; 0x34
 800f694:	e7c2      	b.n	800f61c <_dtoa_r+0x1d4>
 800f696:	2300      	movs	r3, #0
 800f698:	9308      	str	r3, [sp, #32]
 800f69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dc39      	bgt.n	800f714 <_dtoa_r+0x2cc>
 800f6a0:	f04f 0901 	mov.w	r9, #1
 800f6a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6a8:	464b      	mov	r3, r9
 800f6aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f6ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	6042      	str	r2, [r0, #4]
 800f6b4:	2204      	movs	r2, #4
 800f6b6:	f102 0614 	add.w	r6, r2, #20
 800f6ba:	429e      	cmp	r6, r3
 800f6bc:	6841      	ldr	r1, [r0, #4]
 800f6be:	d92f      	bls.n	800f720 <_dtoa_r+0x2d8>
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f001 fa59 	bl	8010b78 <_Balloc>
 800f6c6:	9000      	str	r0, [sp, #0]
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d14b      	bne.n	800f764 <_dtoa_r+0x31c>
 800f6cc:	4b24      	ldr	r3, [pc, #144]	; (800f760 <_dtoa_r+0x318>)
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6d4:	e6d1      	b.n	800f47a <_dtoa_r+0x32>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e7de      	b.n	800f698 <_dtoa_r+0x250>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	9308      	str	r3, [sp, #32]
 800f6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e0:	eb0a 0903 	add.w	r9, sl, r3
 800f6e4:	f109 0301 	add.w	r3, r9, #1
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	9301      	str	r3, [sp, #4]
 800f6ec:	bfb8      	it	lt
 800f6ee:	2301      	movlt	r3, #1
 800f6f0:	e7dd      	b.n	800f6ae <_dtoa_r+0x266>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e7f2      	b.n	800f6dc <_dtoa_r+0x294>
 800f6f6:	2501      	movs	r5, #1
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	9305      	str	r3, [sp, #20]
 800f6fc:	9508      	str	r5, [sp, #32]
 800f6fe:	f04f 39ff 	mov.w	r9, #4294967295
 800f702:	2200      	movs	r2, #0
 800f704:	f8cd 9004 	str.w	r9, [sp, #4]
 800f708:	2312      	movs	r3, #18
 800f70a:	9209      	str	r2, [sp, #36]	; 0x24
 800f70c:	e7cf      	b.n	800f6ae <_dtoa_r+0x266>
 800f70e:	2301      	movs	r3, #1
 800f710:	9308      	str	r3, [sp, #32]
 800f712:	e7f4      	b.n	800f6fe <_dtoa_r+0x2b6>
 800f714:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f718:	f8cd 9004 	str.w	r9, [sp, #4]
 800f71c:	464b      	mov	r3, r9
 800f71e:	e7c6      	b.n	800f6ae <_dtoa_r+0x266>
 800f720:	3101      	adds	r1, #1
 800f722:	6041      	str	r1, [r0, #4]
 800f724:	0052      	lsls	r2, r2, #1
 800f726:	e7c6      	b.n	800f6b6 <_dtoa_r+0x26e>
 800f728:	636f4361 	.word	0x636f4361
 800f72c:	3fd287a7 	.word	0x3fd287a7
 800f730:	8b60c8b3 	.word	0x8b60c8b3
 800f734:	3fc68a28 	.word	0x3fc68a28
 800f738:	509f79fb 	.word	0x509f79fb
 800f73c:	3fd34413 	.word	0x3fd34413
 800f740:	0801355e 	.word	0x0801355e
 800f744:	08013575 	.word	0x08013575
 800f748:	7ff00000 	.word	0x7ff00000
 800f74c:	0801355a 	.word	0x0801355a
 800f750:	08013551 	.word	0x08013551
 800f754:	080133dd 	.word	0x080133dd
 800f758:	3ff80000 	.word	0x3ff80000
 800f75c:	08013750 	.word	0x08013750
 800f760:	080135d4 	.word	0x080135d4
 800f764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f766:	9a00      	ldr	r2, [sp, #0]
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	9b01      	ldr	r3, [sp, #4]
 800f76c:	2b0e      	cmp	r3, #14
 800f76e:	f200 80ad 	bhi.w	800f8cc <_dtoa_r+0x484>
 800f772:	2d00      	cmp	r5, #0
 800f774:	f000 80aa 	beq.w	800f8cc <_dtoa_r+0x484>
 800f778:	f1ba 0f00 	cmp.w	sl, #0
 800f77c:	dd36      	ble.n	800f7ec <_dtoa_r+0x3a4>
 800f77e:	4ac3      	ldr	r2, [pc, #780]	; (800fa8c <_dtoa_r+0x644>)
 800f780:	f00a 030f 	and.w	r3, sl, #15
 800f784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f788:	ed93 7b00 	vldr	d7, [r3]
 800f78c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f790:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f794:	eeb0 8a47 	vmov.f32	s16, s14
 800f798:	eef0 8a67 	vmov.f32	s17, s15
 800f79c:	d016      	beq.n	800f7cc <_dtoa_r+0x384>
 800f79e:	4bbc      	ldr	r3, [pc, #752]	; (800fa90 <_dtoa_r+0x648>)
 800f7a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f7a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7a8:	f7f1 f878 	bl	800089c <__aeabi_ddiv>
 800f7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7b0:	f007 070f 	and.w	r7, r7, #15
 800f7b4:	2503      	movs	r5, #3
 800f7b6:	4eb6      	ldr	r6, [pc, #728]	; (800fa90 <_dtoa_r+0x648>)
 800f7b8:	b957      	cbnz	r7, 800f7d0 <_dtoa_r+0x388>
 800f7ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7be:	ec53 2b18 	vmov	r2, r3, d8
 800f7c2:	f7f1 f86b 	bl	800089c <__aeabi_ddiv>
 800f7c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7ca:	e029      	b.n	800f820 <_dtoa_r+0x3d8>
 800f7cc:	2502      	movs	r5, #2
 800f7ce:	e7f2      	b.n	800f7b6 <_dtoa_r+0x36e>
 800f7d0:	07f9      	lsls	r1, r7, #31
 800f7d2:	d508      	bpl.n	800f7e6 <_dtoa_r+0x39e>
 800f7d4:	ec51 0b18 	vmov	r0, r1, d8
 800f7d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7dc:	f7f0 ff34 	bl	8000648 <__aeabi_dmul>
 800f7e0:	ec41 0b18 	vmov	d8, r0, r1
 800f7e4:	3501      	adds	r5, #1
 800f7e6:	107f      	asrs	r7, r7, #1
 800f7e8:	3608      	adds	r6, #8
 800f7ea:	e7e5      	b.n	800f7b8 <_dtoa_r+0x370>
 800f7ec:	f000 80a6 	beq.w	800f93c <_dtoa_r+0x4f4>
 800f7f0:	f1ca 0600 	rsb	r6, sl, #0
 800f7f4:	4ba5      	ldr	r3, [pc, #660]	; (800fa8c <_dtoa_r+0x644>)
 800f7f6:	4fa6      	ldr	r7, [pc, #664]	; (800fa90 <_dtoa_r+0x648>)
 800f7f8:	f006 020f 	and.w	r2, r6, #15
 800f7fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f808:	f7f0 ff1e 	bl	8000648 <__aeabi_dmul>
 800f80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f810:	1136      	asrs	r6, r6, #4
 800f812:	2300      	movs	r3, #0
 800f814:	2502      	movs	r5, #2
 800f816:	2e00      	cmp	r6, #0
 800f818:	f040 8085 	bne.w	800f926 <_dtoa_r+0x4de>
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1d2      	bne.n	800f7c6 <_dtoa_r+0x37e>
 800f820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 808c 	beq.w	800f940 <_dtoa_r+0x4f8>
 800f828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f82c:	4b99      	ldr	r3, [pc, #612]	; (800fa94 <_dtoa_r+0x64c>)
 800f82e:	2200      	movs	r2, #0
 800f830:	4630      	mov	r0, r6
 800f832:	4639      	mov	r1, r7
 800f834:	f7f1 f97a 	bl	8000b2c <__aeabi_dcmplt>
 800f838:	2800      	cmp	r0, #0
 800f83a:	f000 8081 	beq.w	800f940 <_dtoa_r+0x4f8>
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d07d      	beq.n	800f940 <_dtoa_r+0x4f8>
 800f844:	f1b9 0f00 	cmp.w	r9, #0
 800f848:	dd3c      	ble.n	800f8c4 <_dtoa_r+0x47c>
 800f84a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f84e:	9307      	str	r3, [sp, #28]
 800f850:	2200      	movs	r2, #0
 800f852:	4b91      	ldr	r3, [pc, #580]	; (800fa98 <_dtoa_r+0x650>)
 800f854:	4630      	mov	r0, r6
 800f856:	4639      	mov	r1, r7
 800f858:	f7f0 fef6 	bl	8000648 <__aeabi_dmul>
 800f85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f860:	3501      	adds	r5, #1
 800f862:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f866:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7f0 fe82 	bl	8000574 <__aeabi_i2d>
 800f870:	4632      	mov	r2, r6
 800f872:	463b      	mov	r3, r7
 800f874:	f7f0 fee8 	bl	8000648 <__aeabi_dmul>
 800f878:	4b88      	ldr	r3, [pc, #544]	; (800fa9c <_dtoa_r+0x654>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	f7f0 fd2e 	bl	80002dc <__adddf3>
 800f880:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d15c      	bne.n	800f94a <_dtoa_r+0x502>
 800f890:	4b83      	ldr	r3, [pc, #524]	; (800faa0 <_dtoa_r+0x658>)
 800f892:	2200      	movs	r2, #0
 800f894:	4630      	mov	r0, r6
 800f896:	4639      	mov	r1, r7
 800f898:	f7f0 fd1e 	bl	80002d8 <__aeabi_dsub>
 800f89c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	460f      	mov	r7, r1
 800f8a4:	f7f1 f960 	bl	8000b68 <__aeabi_dcmpgt>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f040 8296 	bne.w	800fdda <_dtoa_r+0x992>
 800f8ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	f7f1 f937 	bl	8000b2c <__aeabi_dcmplt>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f040 8288 	bne.w	800fdd4 <_dtoa_r+0x98c>
 800f8c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f2c0 8158 	blt.w	800fb84 <_dtoa_r+0x73c>
 800f8d4:	f1ba 0f0e 	cmp.w	sl, #14
 800f8d8:	f300 8154 	bgt.w	800fb84 <_dtoa_r+0x73c>
 800f8dc:	4b6b      	ldr	r3, [pc, #428]	; (800fa8c <_dtoa_r+0x644>)
 800f8de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f280 80e3 	bge.w	800fab4 <_dtoa_r+0x66c>
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f300 80df 	bgt.w	800fab4 <_dtoa_r+0x66c>
 800f8f6:	f040 826d 	bne.w	800fdd4 <_dtoa_r+0x98c>
 800f8fa:	4b69      	ldr	r3, [pc, #420]	; (800faa0 <_dtoa_r+0x658>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4640      	mov	r0, r8
 800f900:	4649      	mov	r1, r9
 800f902:	f7f0 fea1 	bl	8000648 <__aeabi_dmul>
 800f906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f90a:	f7f1 f923 	bl	8000b54 <__aeabi_dcmpge>
 800f90e:	9e01      	ldr	r6, [sp, #4]
 800f910:	4637      	mov	r7, r6
 800f912:	2800      	cmp	r0, #0
 800f914:	f040 8243 	bne.w	800fd9e <_dtoa_r+0x956>
 800f918:	9d00      	ldr	r5, [sp, #0]
 800f91a:	2331      	movs	r3, #49	; 0x31
 800f91c:	f805 3b01 	strb.w	r3, [r5], #1
 800f920:	f10a 0a01 	add.w	sl, sl, #1
 800f924:	e23f      	b.n	800fda6 <_dtoa_r+0x95e>
 800f926:	07f2      	lsls	r2, r6, #31
 800f928:	d505      	bpl.n	800f936 <_dtoa_r+0x4ee>
 800f92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f92e:	f7f0 fe8b 	bl	8000648 <__aeabi_dmul>
 800f932:	3501      	adds	r5, #1
 800f934:	2301      	movs	r3, #1
 800f936:	1076      	asrs	r6, r6, #1
 800f938:	3708      	adds	r7, #8
 800f93a:	e76c      	b.n	800f816 <_dtoa_r+0x3ce>
 800f93c:	2502      	movs	r5, #2
 800f93e:	e76f      	b.n	800f820 <_dtoa_r+0x3d8>
 800f940:	9b01      	ldr	r3, [sp, #4]
 800f942:	f8cd a01c 	str.w	sl, [sp, #28]
 800f946:	930c      	str	r3, [sp, #48]	; 0x30
 800f948:	e78d      	b.n	800f866 <_dtoa_r+0x41e>
 800f94a:	9900      	ldr	r1, [sp, #0]
 800f94c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f950:	4b4e      	ldr	r3, [pc, #312]	; (800fa8c <_dtoa_r+0x644>)
 800f952:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f956:	4401      	add	r1, r0
 800f958:	9102      	str	r1, [sp, #8]
 800f95a:	9908      	ldr	r1, [sp, #32]
 800f95c:	eeb0 8a47 	vmov.f32	s16, s14
 800f960:	eef0 8a67 	vmov.f32	s17, s15
 800f964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f968:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f96c:	2900      	cmp	r1, #0
 800f96e:	d045      	beq.n	800f9fc <_dtoa_r+0x5b4>
 800f970:	494c      	ldr	r1, [pc, #304]	; (800faa4 <_dtoa_r+0x65c>)
 800f972:	2000      	movs	r0, #0
 800f974:	f7f0 ff92 	bl	800089c <__aeabi_ddiv>
 800f978:	ec53 2b18 	vmov	r2, r3, d8
 800f97c:	f7f0 fcac 	bl	80002d8 <__aeabi_dsub>
 800f980:	9d00      	ldr	r5, [sp, #0]
 800f982:	ec41 0b18 	vmov	d8, r0, r1
 800f986:	4639      	mov	r1, r7
 800f988:	4630      	mov	r0, r6
 800f98a:	f7f1 f90d 	bl	8000ba8 <__aeabi_d2iz>
 800f98e:	900c      	str	r0, [sp, #48]	; 0x30
 800f990:	f7f0 fdf0 	bl	8000574 <__aeabi_i2d>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	4630      	mov	r0, r6
 800f99a:	4639      	mov	r1, r7
 800f99c:	f7f0 fc9c 	bl	80002d8 <__aeabi_dsub>
 800f9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9a2:	3330      	adds	r3, #48	; 0x30
 800f9a4:	f805 3b01 	strb.w	r3, [r5], #1
 800f9a8:	ec53 2b18 	vmov	r2, r3, d8
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	460f      	mov	r7, r1
 800f9b0:	f7f1 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d165      	bne.n	800fa84 <_dtoa_r+0x63c>
 800f9b8:	4632      	mov	r2, r6
 800f9ba:	463b      	mov	r3, r7
 800f9bc:	4935      	ldr	r1, [pc, #212]	; (800fa94 <_dtoa_r+0x64c>)
 800f9be:	2000      	movs	r0, #0
 800f9c0:	f7f0 fc8a 	bl	80002d8 <__aeabi_dsub>
 800f9c4:	ec53 2b18 	vmov	r2, r3, d8
 800f9c8:	f7f1 f8b0 	bl	8000b2c <__aeabi_dcmplt>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f040 80b9 	bne.w	800fb44 <_dtoa_r+0x6fc>
 800f9d2:	9b02      	ldr	r3, [sp, #8]
 800f9d4:	429d      	cmp	r5, r3
 800f9d6:	f43f af75 	beq.w	800f8c4 <_dtoa_r+0x47c>
 800f9da:	4b2f      	ldr	r3, [pc, #188]	; (800fa98 <_dtoa_r+0x650>)
 800f9dc:	ec51 0b18 	vmov	r0, r1, d8
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f7f0 fe31 	bl	8000648 <__aeabi_dmul>
 800f9e6:	4b2c      	ldr	r3, [pc, #176]	; (800fa98 <_dtoa_r+0x650>)
 800f9e8:	ec41 0b18 	vmov	d8, r0, r1
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	f7f0 fe29 	bl	8000648 <__aeabi_dmul>
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	460f      	mov	r7, r1
 800f9fa:	e7c4      	b.n	800f986 <_dtoa_r+0x53e>
 800f9fc:	ec51 0b17 	vmov	r0, r1, d7
 800fa00:	f7f0 fe22 	bl	8000648 <__aeabi_dmul>
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	9d00      	ldr	r5, [sp, #0]
 800fa08:	930c      	str	r3, [sp, #48]	; 0x30
 800fa0a:	ec41 0b18 	vmov	d8, r0, r1
 800fa0e:	4639      	mov	r1, r7
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7f1 f8c9 	bl	8000ba8 <__aeabi_d2iz>
 800fa16:	9011      	str	r0, [sp, #68]	; 0x44
 800fa18:	f7f0 fdac 	bl	8000574 <__aeabi_i2d>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	4630      	mov	r0, r6
 800fa22:	4639      	mov	r1, r7
 800fa24:	f7f0 fc58 	bl	80002d8 <__aeabi_dsub>
 800fa28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa2a:	3330      	adds	r3, #48	; 0x30
 800fa2c:	f805 3b01 	strb.w	r3, [r5], #1
 800fa30:	9b02      	ldr	r3, [sp, #8]
 800fa32:	429d      	cmp	r5, r3
 800fa34:	4606      	mov	r6, r0
 800fa36:	460f      	mov	r7, r1
 800fa38:	f04f 0200 	mov.w	r2, #0
 800fa3c:	d134      	bne.n	800faa8 <_dtoa_r+0x660>
 800fa3e:	4b19      	ldr	r3, [pc, #100]	; (800faa4 <_dtoa_r+0x65c>)
 800fa40:	ec51 0b18 	vmov	r0, r1, d8
 800fa44:	f7f0 fc4a 	bl	80002dc <__adddf3>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	4639      	mov	r1, r7
 800fa50:	f7f1 f88a 	bl	8000b68 <__aeabi_dcmpgt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d175      	bne.n	800fb44 <_dtoa_r+0x6fc>
 800fa58:	ec53 2b18 	vmov	r2, r3, d8
 800fa5c:	4911      	ldr	r1, [pc, #68]	; (800faa4 <_dtoa_r+0x65c>)
 800fa5e:	2000      	movs	r0, #0
 800fa60:	f7f0 fc3a 	bl	80002d8 <__aeabi_dsub>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	4630      	mov	r0, r6
 800fa6a:	4639      	mov	r1, r7
 800fa6c:	f7f1 f85e 	bl	8000b2c <__aeabi_dcmplt>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	f43f af27 	beq.w	800f8c4 <_dtoa_r+0x47c>
 800fa76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa78:	1e6b      	subs	r3, r5, #1
 800fa7a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa80:	2b30      	cmp	r3, #48	; 0x30
 800fa82:	d0f8      	beq.n	800fa76 <_dtoa_r+0x62e>
 800fa84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa88:	e04a      	b.n	800fb20 <_dtoa_r+0x6d8>
 800fa8a:	bf00      	nop
 800fa8c:	08013750 	.word	0x08013750
 800fa90:	08013728 	.word	0x08013728
 800fa94:	3ff00000 	.word	0x3ff00000
 800fa98:	40240000 	.word	0x40240000
 800fa9c:	401c0000 	.word	0x401c0000
 800faa0:	40140000 	.word	0x40140000
 800faa4:	3fe00000 	.word	0x3fe00000
 800faa8:	4baf      	ldr	r3, [pc, #700]	; (800fd68 <_dtoa_r+0x920>)
 800faaa:	f7f0 fdcd 	bl	8000648 <__aeabi_dmul>
 800faae:	4606      	mov	r6, r0
 800fab0:	460f      	mov	r7, r1
 800fab2:	e7ac      	b.n	800fa0e <_dtoa_r+0x5c6>
 800fab4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fab8:	9d00      	ldr	r5, [sp, #0]
 800faba:	4642      	mov	r2, r8
 800fabc:	464b      	mov	r3, r9
 800fabe:	4630      	mov	r0, r6
 800fac0:	4639      	mov	r1, r7
 800fac2:	f7f0 feeb 	bl	800089c <__aeabi_ddiv>
 800fac6:	f7f1 f86f 	bl	8000ba8 <__aeabi_d2iz>
 800faca:	9002      	str	r0, [sp, #8]
 800facc:	f7f0 fd52 	bl	8000574 <__aeabi_i2d>
 800fad0:	4642      	mov	r2, r8
 800fad2:	464b      	mov	r3, r9
 800fad4:	f7f0 fdb8 	bl	8000648 <__aeabi_dmul>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	4630      	mov	r0, r6
 800fade:	4639      	mov	r1, r7
 800fae0:	f7f0 fbfa 	bl	80002d8 <__aeabi_dsub>
 800fae4:	9e02      	ldr	r6, [sp, #8]
 800fae6:	9f01      	ldr	r7, [sp, #4]
 800fae8:	3630      	adds	r6, #48	; 0x30
 800faea:	f805 6b01 	strb.w	r6, [r5], #1
 800faee:	9e00      	ldr	r6, [sp, #0]
 800faf0:	1bae      	subs	r6, r5, r6
 800faf2:	42b7      	cmp	r7, r6
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	d137      	bne.n	800fb6a <_dtoa_r+0x722>
 800fafa:	f7f0 fbef 	bl	80002dc <__adddf3>
 800fafe:	4642      	mov	r2, r8
 800fb00:	464b      	mov	r3, r9
 800fb02:	4606      	mov	r6, r0
 800fb04:	460f      	mov	r7, r1
 800fb06:	f7f1 f82f 	bl	8000b68 <__aeabi_dcmpgt>
 800fb0a:	b9c8      	cbnz	r0, 800fb40 <_dtoa_r+0x6f8>
 800fb0c:	4642      	mov	r2, r8
 800fb0e:	464b      	mov	r3, r9
 800fb10:	4630      	mov	r0, r6
 800fb12:	4639      	mov	r1, r7
 800fb14:	f7f1 f800 	bl	8000b18 <__aeabi_dcmpeq>
 800fb18:	b110      	cbz	r0, 800fb20 <_dtoa_r+0x6d8>
 800fb1a:	9b02      	ldr	r3, [sp, #8]
 800fb1c:	07d9      	lsls	r1, r3, #31
 800fb1e:	d40f      	bmi.n	800fb40 <_dtoa_r+0x6f8>
 800fb20:	4620      	mov	r0, r4
 800fb22:	4659      	mov	r1, fp
 800fb24:	f001 f868 	bl	8010bf8 <_Bfree>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	702b      	strb	r3, [r5, #0]
 800fb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb2e:	f10a 0001 	add.w	r0, sl, #1
 800fb32:	6018      	str	r0, [r3, #0]
 800fb34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f43f acd8 	beq.w	800f4ec <_dtoa_r+0xa4>
 800fb3c:	601d      	str	r5, [r3, #0]
 800fb3e:	e4d5      	b.n	800f4ec <_dtoa_r+0xa4>
 800fb40:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb44:	462b      	mov	r3, r5
 800fb46:	461d      	mov	r5, r3
 800fb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb4c:	2a39      	cmp	r2, #57	; 0x39
 800fb4e:	d108      	bne.n	800fb62 <_dtoa_r+0x71a>
 800fb50:	9a00      	ldr	r2, [sp, #0]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d1f7      	bne.n	800fb46 <_dtoa_r+0x6fe>
 800fb56:	9a07      	ldr	r2, [sp, #28]
 800fb58:	9900      	ldr	r1, [sp, #0]
 800fb5a:	3201      	adds	r2, #1
 800fb5c:	9207      	str	r2, [sp, #28]
 800fb5e:	2230      	movs	r2, #48	; 0x30
 800fb60:	700a      	strb	r2, [r1, #0]
 800fb62:	781a      	ldrb	r2, [r3, #0]
 800fb64:	3201      	adds	r2, #1
 800fb66:	701a      	strb	r2, [r3, #0]
 800fb68:	e78c      	b.n	800fa84 <_dtoa_r+0x63c>
 800fb6a:	4b7f      	ldr	r3, [pc, #508]	; (800fd68 <_dtoa_r+0x920>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f7f0 fd6b 	bl	8000648 <__aeabi_dmul>
 800fb72:	2200      	movs	r2, #0
 800fb74:	2300      	movs	r3, #0
 800fb76:	4606      	mov	r6, r0
 800fb78:	460f      	mov	r7, r1
 800fb7a:	f7f0 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d09b      	beq.n	800faba <_dtoa_r+0x672>
 800fb82:	e7cd      	b.n	800fb20 <_dtoa_r+0x6d8>
 800fb84:	9a08      	ldr	r2, [sp, #32]
 800fb86:	2a00      	cmp	r2, #0
 800fb88:	f000 80c4 	beq.w	800fd14 <_dtoa_r+0x8cc>
 800fb8c:	9a05      	ldr	r2, [sp, #20]
 800fb8e:	2a01      	cmp	r2, #1
 800fb90:	f300 80a8 	bgt.w	800fce4 <_dtoa_r+0x89c>
 800fb94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	f000 80a0 	beq.w	800fcdc <_dtoa_r+0x894>
 800fb9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fba0:	9e06      	ldr	r6, [sp, #24]
 800fba2:	4645      	mov	r5, r8
 800fba4:	9a04      	ldr	r2, [sp, #16]
 800fba6:	2101      	movs	r1, #1
 800fba8:	441a      	add	r2, r3
 800fbaa:	4620      	mov	r0, r4
 800fbac:	4498      	add	r8, r3
 800fbae:	9204      	str	r2, [sp, #16]
 800fbb0:	f001 f928 	bl	8010e04 <__i2b>
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	2d00      	cmp	r5, #0
 800fbb8:	dd0b      	ble.n	800fbd2 <_dtoa_r+0x78a>
 800fbba:	9b04      	ldr	r3, [sp, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dd08      	ble.n	800fbd2 <_dtoa_r+0x78a>
 800fbc0:	42ab      	cmp	r3, r5
 800fbc2:	9a04      	ldr	r2, [sp, #16]
 800fbc4:	bfa8      	it	ge
 800fbc6:	462b      	movge	r3, r5
 800fbc8:	eba8 0803 	sub.w	r8, r8, r3
 800fbcc:	1aed      	subs	r5, r5, r3
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	9304      	str	r3, [sp, #16]
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	b1fb      	cbz	r3, 800fc16 <_dtoa_r+0x7ce>
 800fbd6:	9b08      	ldr	r3, [sp, #32]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f000 809f 	beq.w	800fd1c <_dtoa_r+0x8d4>
 800fbde:	2e00      	cmp	r6, #0
 800fbe0:	dd11      	ble.n	800fc06 <_dtoa_r+0x7be>
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	4632      	mov	r2, r6
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f001 f9c8 	bl	8010f7c <__pow5mult>
 800fbec:	465a      	mov	r2, fp
 800fbee:	4601      	mov	r1, r0
 800fbf0:	4607      	mov	r7, r0
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f001 f91c 	bl	8010e30 <__multiply>
 800fbf8:	4659      	mov	r1, fp
 800fbfa:	9007      	str	r0, [sp, #28]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 fffb 	bl	8010bf8 <_Bfree>
 800fc02:	9b07      	ldr	r3, [sp, #28]
 800fc04:	469b      	mov	fp, r3
 800fc06:	9b06      	ldr	r3, [sp, #24]
 800fc08:	1b9a      	subs	r2, r3, r6
 800fc0a:	d004      	beq.n	800fc16 <_dtoa_r+0x7ce>
 800fc0c:	4659      	mov	r1, fp
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f001 f9b4 	bl	8010f7c <__pow5mult>
 800fc14:	4683      	mov	fp, r0
 800fc16:	2101      	movs	r1, #1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f001 f8f3 	bl	8010e04 <__i2b>
 800fc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	4606      	mov	r6, r0
 800fc24:	dd7c      	ble.n	800fd20 <_dtoa_r+0x8d8>
 800fc26:	461a      	mov	r2, r3
 800fc28:	4601      	mov	r1, r0
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f001 f9a6 	bl	8010f7c <__pow5mult>
 800fc30:	9b05      	ldr	r3, [sp, #20]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	4606      	mov	r6, r0
 800fc36:	dd76      	ble.n	800fd26 <_dtoa_r+0x8de>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9306      	str	r3, [sp, #24]
 800fc3c:	6933      	ldr	r3, [r6, #16]
 800fc3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc42:	6918      	ldr	r0, [r3, #16]
 800fc44:	f001 f88e 	bl	8010d64 <__hi0bits>
 800fc48:	f1c0 0020 	rsb	r0, r0, #32
 800fc4c:	9b04      	ldr	r3, [sp, #16]
 800fc4e:	4418      	add	r0, r3
 800fc50:	f010 001f 	ands.w	r0, r0, #31
 800fc54:	f000 8086 	beq.w	800fd64 <_dtoa_r+0x91c>
 800fc58:	f1c0 0320 	rsb	r3, r0, #32
 800fc5c:	2b04      	cmp	r3, #4
 800fc5e:	dd7f      	ble.n	800fd60 <_dtoa_r+0x918>
 800fc60:	f1c0 001c 	rsb	r0, r0, #28
 800fc64:	9b04      	ldr	r3, [sp, #16]
 800fc66:	4403      	add	r3, r0
 800fc68:	4480      	add	r8, r0
 800fc6a:	4405      	add	r5, r0
 800fc6c:	9304      	str	r3, [sp, #16]
 800fc6e:	f1b8 0f00 	cmp.w	r8, #0
 800fc72:	dd05      	ble.n	800fc80 <_dtoa_r+0x838>
 800fc74:	4659      	mov	r1, fp
 800fc76:	4642      	mov	r2, r8
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f001 f9d9 	bl	8011030 <__lshift>
 800fc7e:	4683      	mov	fp, r0
 800fc80:	9b04      	ldr	r3, [sp, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	dd05      	ble.n	800fc92 <_dtoa_r+0x84a>
 800fc86:	4631      	mov	r1, r6
 800fc88:	461a      	mov	r2, r3
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f001 f9d0 	bl	8011030 <__lshift>
 800fc90:	4606      	mov	r6, r0
 800fc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d069      	beq.n	800fd6c <_dtoa_r+0x924>
 800fc98:	4631      	mov	r1, r6
 800fc9a:	4658      	mov	r0, fp
 800fc9c:	f001 fa34 	bl	8011108 <__mcmp>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	da63      	bge.n	800fd6c <_dtoa_r+0x924>
 800fca4:	2300      	movs	r3, #0
 800fca6:	4659      	mov	r1, fp
 800fca8:	220a      	movs	r2, #10
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 ffc6 	bl	8010c3c <__multadd>
 800fcb0:	9b08      	ldr	r3, [sp, #32]
 800fcb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcb6:	4683      	mov	fp, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 818f 	beq.w	800ffdc <_dtoa_r+0xb94>
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	220a      	movs	r2, #10
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 ffb9 	bl	8010c3c <__multadd>
 800fcca:	f1b9 0f00 	cmp.w	r9, #0
 800fcce:	4607      	mov	r7, r0
 800fcd0:	f300 808e 	bgt.w	800fdf0 <_dtoa_r+0x9a8>
 800fcd4:	9b05      	ldr	r3, [sp, #20]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	dc50      	bgt.n	800fd7c <_dtoa_r+0x934>
 800fcda:	e089      	b.n	800fdf0 <_dtoa_r+0x9a8>
 800fcdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fce2:	e75d      	b.n	800fba0 <_dtoa_r+0x758>
 800fce4:	9b01      	ldr	r3, [sp, #4]
 800fce6:	1e5e      	subs	r6, r3, #1
 800fce8:	9b06      	ldr	r3, [sp, #24]
 800fcea:	42b3      	cmp	r3, r6
 800fcec:	bfbf      	itttt	lt
 800fcee:	9b06      	ldrlt	r3, [sp, #24]
 800fcf0:	9606      	strlt	r6, [sp, #24]
 800fcf2:	1af2      	sublt	r2, r6, r3
 800fcf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fcf6:	bfb6      	itet	lt
 800fcf8:	189b      	addlt	r3, r3, r2
 800fcfa:	1b9e      	subge	r6, r3, r6
 800fcfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fcfe:	9b01      	ldr	r3, [sp, #4]
 800fd00:	bfb8      	it	lt
 800fd02:	2600      	movlt	r6, #0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfb5      	itete	lt
 800fd08:	eba8 0503 	sublt.w	r5, r8, r3
 800fd0c:	9b01      	ldrge	r3, [sp, #4]
 800fd0e:	2300      	movlt	r3, #0
 800fd10:	4645      	movge	r5, r8
 800fd12:	e747      	b.n	800fba4 <_dtoa_r+0x75c>
 800fd14:	9e06      	ldr	r6, [sp, #24]
 800fd16:	9f08      	ldr	r7, [sp, #32]
 800fd18:	4645      	mov	r5, r8
 800fd1a:	e74c      	b.n	800fbb6 <_dtoa_r+0x76e>
 800fd1c:	9a06      	ldr	r2, [sp, #24]
 800fd1e:	e775      	b.n	800fc0c <_dtoa_r+0x7c4>
 800fd20:	9b05      	ldr	r3, [sp, #20]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	dc18      	bgt.n	800fd58 <_dtoa_r+0x910>
 800fd26:	9b02      	ldr	r3, [sp, #8]
 800fd28:	b9b3      	cbnz	r3, 800fd58 <_dtoa_r+0x910>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd30:	b9a3      	cbnz	r3, 800fd5c <_dtoa_r+0x914>
 800fd32:	9b03      	ldr	r3, [sp, #12]
 800fd34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd38:	0d1b      	lsrs	r3, r3, #20
 800fd3a:	051b      	lsls	r3, r3, #20
 800fd3c:	b12b      	cbz	r3, 800fd4a <_dtoa_r+0x902>
 800fd3e:	9b04      	ldr	r3, [sp, #16]
 800fd40:	3301      	adds	r3, #1
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	f108 0801 	add.w	r8, r8, #1
 800fd48:	2301      	movs	r3, #1
 800fd4a:	9306      	str	r3, [sp, #24]
 800fd4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f47f af74 	bne.w	800fc3c <_dtoa_r+0x7f4>
 800fd54:	2001      	movs	r0, #1
 800fd56:	e779      	b.n	800fc4c <_dtoa_r+0x804>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	e7f6      	b.n	800fd4a <_dtoa_r+0x902>
 800fd5c:	9b02      	ldr	r3, [sp, #8]
 800fd5e:	e7f4      	b.n	800fd4a <_dtoa_r+0x902>
 800fd60:	d085      	beq.n	800fc6e <_dtoa_r+0x826>
 800fd62:	4618      	mov	r0, r3
 800fd64:	301c      	adds	r0, #28
 800fd66:	e77d      	b.n	800fc64 <_dtoa_r+0x81c>
 800fd68:	40240000 	.word	0x40240000
 800fd6c:	9b01      	ldr	r3, [sp, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	dc38      	bgt.n	800fde4 <_dtoa_r+0x99c>
 800fd72:	9b05      	ldr	r3, [sp, #20]
 800fd74:	2b02      	cmp	r3, #2
 800fd76:	dd35      	ble.n	800fde4 <_dtoa_r+0x99c>
 800fd78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd7c:	f1b9 0f00 	cmp.w	r9, #0
 800fd80:	d10d      	bne.n	800fd9e <_dtoa_r+0x956>
 800fd82:	4631      	mov	r1, r6
 800fd84:	464b      	mov	r3, r9
 800fd86:	2205      	movs	r2, #5
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f000 ff57 	bl	8010c3c <__multadd>
 800fd8e:	4601      	mov	r1, r0
 800fd90:	4606      	mov	r6, r0
 800fd92:	4658      	mov	r0, fp
 800fd94:	f001 f9b8 	bl	8011108 <__mcmp>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f73f adbd 	bgt.w	800f918 <_dtoa_r+0x4d0>
 800fd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fda0:	9d00      	ldr	r5, [sp, #0]
 800fda2:	ea6f 0a03 	mvn.w	sl, r3
 800fda6:	f04f 0800 	mov.w	r8, #0
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4620      	mov	r0, r4
 800fdae:	f000 ff23 	bl	8010bf8 <_Bfree>
 800fdb2:	2f00      	cmp	r7, #0
 800fdb4:	f43f aeb4 	beq.w	800fb20 <_dtoa_r+0x6d8>
 800fdb8:	f1b8 0f00 	cmp.w	r8, #0
 800fdbc:	d005      	beq.n	800fdca <_dtoa_r+0x982>
 800fdbe:	45b8      	cmp	r8, r7
 800fdc0:	d003      	beq.n	800fdca <_dtoa_r+0x982>
 800fdc2:	4641      	mov	r1, r8
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f000 ff17 	bl	8010bf8 <_Bfree>
 800fdca:	4639      	mov	r1, r7
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f000 ff13 	bl	8010bf8 <_Bfree>
 800fdd2:	e6a5      	b.n	800fb20 <_dtoa_r+0x6d8>
 800fdd4:	2600      	movs	r6, #0
 800fdd6:	4637      	mov	r7, r6
 800fdd8:	e7e1      	b.n	800fd9e <_dtoa_r+0x956>
 800fdda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fde0:	4637      	mov	r7, r6
 800fde2:	e599      	b.n	800f918 <_dtoa_r+0x4d0>
 800fde4:	9b08      	ldr	r3, [sp, #32]
 800fde6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 80fd 	beq.w	800ffea <_dtoa_r+0xba2>
 800fdf0:	2d00      	cmp	r5, #0
 800fdf2:	dd05      	ble.n	800fe00 <_dtoa_r+0x9b8>
 800fdf4:	4639      	mov	r1, r7
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f001 f919 	bl	8011030 <__lshift>
 800fdfe:	4607      	mov	r7, r0
 800fe00:	9b06      	ldr	r3, [sp, #24]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d05c      	beq.n	800fec0 <_dtoa_r+0xa78>
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 feb5 	bl	8010b78 <_Balloc>
 800fe0e:	4605      	mov	r5, r0
 800fe10:	b928      	cbnz	r0, 800fe1e <_dtoa_r+0x9d6>
 800fe12:	4b80      	ldr	r3, [pc, #512]	; (8010014 <_dtoa_r+0xbcc>)
 800fe14:	4602      	mov	r2, r0
 800fe16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fe1a:	f7ff bb2e 	b.w	800f47a <_dtoa_r+0x32>
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	3202      	adds	r2, #2
 800fe22:	0092      	lsls	r2, r2, #2
 800fe24:	f107 010c 	add.w	r1, r7, #12
 800fe28:	300c      	adds	r0, #12
 800fe2a:	f7fd fdf3 	bl	800da14 <memcpy>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	4629      	mov	r1, r5
 800fe32:	4620      	mov	r0, r4
 800fe34:	f001 f8fc 	bl	8011030 <__lshift>
 800fe38:	9b00      	ldr	r3, [sp, #0]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	9301      	str	r3, [sp, #4]
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	444b      	add	r3, r9
 800fe42:	9307      	str	r3, [sp, #28]
 800fe44:	9b02      	ldr	r3, [sp, #8]
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	46b8      	mov	r8, r7
 800fe4c:	9306      	str	r3, [sp, #24]
 800fe4e:	4607      	mov	r7, r0
 800fe50:	9b01      	ldr	r3, [sp, #4]
 800fe52:	4631      	mov	r1, r6
 800fe54:	3b01      	subs	r3, #1
 800fe56:	4658      	mov	r0, fp
 800fe58:	9302      	str	r3, [sp, #8]
 800fe5a:	f7ff fa69 	bl	800f330 <quorem>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	3330      	adds	r3, #48	; 0x30
 800fe62:	9004      	str	r0, [sp, #16]
 800fe64:	4641      	mov	r1, r8
 800fe66:	4658      	mov	r0, fp
 800fe68:	9308      	str	r3, [sp, #32]
 800fe6a:	f001 f94d 	bl	8011108 <__mcmp>
 800fe6e:	463a      	mov	r2, r7
 800fe70:	4681      	mov	r9, r0
 800fe72:	4631      	mov	r1, r6
 800fe74:	4620      	mov	r0, r4
 800fe76:	f001 f963 	bl	8011140 <__mdiff>
 800fe7a:	68c2      	ldr	r2, [r0, #12]
 800fe7c:	9b08      	ldr	r3, [sp, #32]
 800fe7e:	4605      	mov	r5, r0
 800fe80:	bb02      	cbnz	r2, 800fec4 <_dtoa_r+0xa7c>
 800fe82:	4601      	mov	r1, r0
 800fe84:	4658      	mov	r0, fp
 800fe86:	f001 f93f 	bl	8011108 <__mcmp>
 800fe8a:	9b08      	ldr	r3, [sp, #32]
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4620      	mov	r0, r4
 800fe92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fe96:	f000 feaf 	bl	8010bf8 <_Bfree>
 800fe9a:	9b05      	ldr	r3, [sp, #20]
 800fe9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe9e:	9d01      	ldr	r5, [sp, #4]
 800fea0:	ea43 0102 	orr.w	r1, r3, r2
 800fea4:	9b06      	ldr	r3, [sp, #24]
 800fea6:	430b      	orrs	r3, r1
 800fea8:	9b08      	ldr	r3, [sp, #32]
 800feaa:	d10d      	bne.n	800fec8 <_dtoa_r+0xa80>
 800feac:	2b39      	cmp	r3, #57	; 0x39
 800feae:	d029      	beq.n	800ff04 <_dtoa_r+0xabc>
 800feb0:	f1b9 0f00 	cmp.w	r9, #0
 800feb4:	dd01      	ble.n	800feba <_dtoa_r+0xa72>
 800feb6:	9b04      	ldr	r3, [sp, #16]
 800feb8:	3331      	adds	r3, #49	; 0x31
 800feba:	9a02      	ldr	r2, [sp, #8]
 800febc:	7013      	strb	r3, [r2, #0]
 800febe:	e774      	b.n	800fdaa <_dtoa_r+0x962>
 800fec0:	4638      	mov	r0, r7
 800fec2:	e7b9      	b.n	800fe38 <_dtoa_r+0x9f0>
 800fec4:	2201      	movs	r2, #1
 800fec6:	e7e2      	b.n	800fe8e <_dtoa_r+0xa46>
 800fec8:	f1b9 0f00 	cmp.w	r9, #0
 800fecc:	db06      	blt.n	800fedc <_dtoa_r+0xa94>
 800fece:	9905      	ldr	r1, [sp, #20]
 800fed0:	ea41 0909 	orr.w	r9, r1, r9
 800fed4:	9906      	ldr	r1, [sp, #24]
 800fed6:	ea59 0101 	orrs.w	r1, r9, r1
 800feda:	d120      	bne.n	800ff1e <_dtoa_r+0xad6>
 800fedc:	2a00      	cmp	r2, #0
 800fede:	ddec      	ble.n	800feba <_dtoa_r+0xa72>
 800fee0:	4659      	mov	r1, fp
 800fee2:	2201      	movs	r2, #1
 800fee4:	4620      	mov	r0, r4
 800fee6:	9301      	str	r3, [sp, #4]
 800fee8:	f001 f8a2 	bl	8011030 <__lshift>
 800feec:	4631      	mov	r1, r6
 800feee:	4683      	mov	fp, r0
 800fef0:	f001 f90a 	bl	8011108 <__mcmp>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	9b01      	ldr	r3, [sp, #4]
 800fef8:	dc02      	bgt.n	800ff00 <_dtoa_r+0xab8>
 800fefa:	d1de      	bne.n	800feba <_dtoa_r+0xa72>
 800fefc:	07da      	lsls	r2, r3, #31
 800fefe:	d5dc      	bpl.n	800feba <_dtoa_r+0xa72>
 800ff00:	2b39      	cmp	r3, #57	; 0x39
 800ff02:	d1d8      	bne.n	800feb6 <_dtoa_r+0xa6e>
 800ff04:	9a02      	ldr	r2, [sp, #8]
 800ff06:	2339      	movs	r3, #57	; 0x39
 800ff08:	7013      	strb	r3, [r2, #0]
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	461d      	mov	r5, r3
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff14:	2a39      	cmp	r2, #57	; 0x39
 800ff16:	d050      	beq.n	800ffba <_dtoa_r+0xb72>
 800ff18:	3201      	adds	r2, #1
 800ff1a:	701a      	strb	r2, [r3, #0]
 800ff1c:	e745      	b.n	800fdaa <_dtoa_r+0x962>
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	dd03      	ble.n	800ff2a <_dtoa_r+0xae2>
 800ff22:	2b39      	cmp	r3, #57	; 0x39
 800ff24:	d0ee      	beq.n	800ff04 <_dtoa_r+0xabc>
 800ff26:	3301      	adds	r3, #1
 800ff28:	e7c7      	b.n	800feba <_dtoa_r+0xa72>
 800ff2a:	9a01      	ldr	r2, [sp, #4]
 800ff2c:	9907      	ldr	r1, [sp, #28]
 800ff2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff32:	428a      	cmp	r2, r1
 800ff34:	d02a      	beq.n	800ff8c <_dtoa_r+0xb44>
 800ff36:	4659      	mov	r1, fp
 800ff38:	2300      	movs	r3, #0
 800ff3a:	220a      	movs	r2, #10
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 fe7d 	bl	8010c3c <__multadd>
 800ff42:	45b8      	cmp	r8, r7
 800ff44:	4683      	mov	fp, r0
 800ff46:	f04f 0300 	mov.w	r3, #0
 800ff4a:	f04f 020a 	mov.w	r2, #10
 800ff4e:	4641      	mov	r1, r8
 800ff50:	4620      	mov	r0, r4
 800ff52:	d107      	bne.n	800ff64 <_dtoa_r+0xb1c>
 800ff54:	f000 fe72 	bl	8010c3c <__multadd>
 800ff58:	4680      	mov	r8, r0
 800ff5a:	4607      	mov	r7, r0
 800ff5c:	9b01      	ldr	r3, [sp, #4]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	e775      	b.n	800fe50 <_dtoa_r+0xa08>
 800ff64:	f000 fe6a 	bl	8010c3c <__multadd>
 800ff68:	4639      	mov	r1, r7
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	220a      	movs	r2, #10
 800ff70:	4620      	mov	r0, r4
 800ff72:	f000 fe63 	bl	8010c3c <__multadd>
 800ff76:	4607      	mov	r7, r0
 800ff78:	e7f0      	b.n	800ff5c <_dtoa_r+0xb14>
 800ff7a:	f1b9 0f00 	cmp.w	r9, #0
 800ff7e:	9a00      	ldr	r2, [sp, #0]
 800ff80:	bfcc      	ite	gt
 800ff82:	464d      	movgt	r5, r9
 800ff84:	2501      	movle	r5, #1
 800ff86:	4415      	add	r5, r2
 800ff88:	f04f 0800 	mov.w	r8, #0
 800ff8c:	4659      	mov	r1, fp
 800ff8e:	2201      	movs	r2, #1
 800ff90:	4620      	mov	r0, r4
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	f001 f84c 	bl	8011030 <__lshift>
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4683      	mov	fp, r0
 800ff9c:	f001 f8b4 	bl	8011108 <__mcmp>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	dcb2      	bgt.n	800ff0a <_dtoa_r+0xac2>
 800ffa4:	d102      	bne.n	800ffac <_dtoa_r+0xb64>
 800ffa6:	9b01      	ldr	r3, [sp, #4]
 800ffa8:	07db      	lsls	r3, r3, #31
 800ffaa:	d4ae      	bmi.n	800ff0a <_dtoa_r+0xac2>
 800ffac:	462b      	mov	r3, r5
 800ffae:	461d      	mov	r5, r3
 800ffb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffb4:	2a30      	cmp	r2, #48	; 0x30
 800ffb6:	d0fa      	beq.n	800ffae <_dtoa_r+0xb66>
 800ffb8:	e6f7      	b.n	800fdaa <_dtoa_r+0x962>
 800ffba:	9a00      	ldr	r2, [sp, #0]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d1a5      	bne.n	800ff0c <_dtoa_r+0xac4>
 800ffc0:	f10a 0a01 	add.w	sl, sl, #1
 800ffc4:	2331      	movs	r3, #49	; 0x31
 800ffc6:	e779      	b.n	800febc <_dtoa_r+0xa74>
 800ffc8:	4b13      	ldr	r3, [pc, #76]	; (8010018 <_dtoa_r+0xbd0>)
 800ffca:	f7ff baaf 	b.w	800f52c <_dtoa_r+0xe4>
 800ffce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f47f aa86 	bne.w	800f4e2 <_dtoa_r+0x9a>
 800ffd6:	4b11      	ldr	r3, [pc, #68]	; (801001c <_dtoa_r+0xbd4>)
 800ffd8:	f7ff baa8 	b.w	800f52c <_dtoa_r+0xe4>
 800ffdc:	f1b9 0f00 	cmp.w	r9, #0
 800ffe0:	dc03      	bgt.n	800ffea <_dtoa_r+0xba2>
 800ffe2:	9b05      	ldr	r3, [sp, #20]
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	f73f aec9 	bgt.w	800fd7c <_dtoa_r+0x934>
 800ffea:	9d00      	ldr	r5, [sp, #0]
 800ffec:	4631      	mov	r1, r6
 800ffee:	4658      	mov	r0, fp
 800fff0:	f7ff f99e 	bl	800f330 <quorem>
 800fff4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fff8:	f805 3b01 	strb.w	r3, [r5], #1
 800fffc:	9a00      	ldr	r2, [sp, #0]
 800fffe:	1aaa      	subs	r2, r5, r2
 8010000:	4591      	cmp	r9, r2
 8010002:	ddba      	ble.n	800ff7a <_dtoa_r+0xb32>
 8010004:	4659      	mov	r1, fp
 8010006:	2300      	movs	r3, #0
 8010008:	220a      	movs	r2, #10
 801000a:	4620      	mov	r0, r4
 801000c:	f000 fe16 	bl	8010c3c <__multadd>
 8010010:	4683      	mov	fp, r0
 8010012:	e7eb      	b.n	800ffec <_dtoa_r+0xba4>
 8010014:	080135d4 	.word	0x080135d4
 8010018:	080133dc 	.word	0x080133dc
 801001c:	08013551 	.word	0x08013551

08010020 <__sflush_r>:
 8010020:	898a      	ldrh	r2, [r1, #12]
 8010022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010026:	4605      	mov	r5, r0
 8010028:	0710      	lsls	r0, r2, #28
 801002a:	460c      	mov	r4, r1
 801002c:	d458      	bmi.n	80100e0 <__sflush_r+0xc0>
 801002e:	684b      	ldr	r3, [r1, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	dc05      	bgt.n	8010040 <__sflush_r+0x20>
 8010034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010036:	2b00      	cmp	r3, #0
 8010038:	dc02      	bgt.n	8010040 <__sflush_r+0x20>
 801003a:	2000      	movs	r0, #0
 801003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010042:	2e00      	cmp	r6, #0
 8010044:	d0f9      	beq.n	801003a <__sflush_r+0x1a>
 8010046:	2300      	movs	r3, #0
 8010048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801004c:	682f      	ldr	r7, [r5, #0]
 801004e:	602b      	str	r3, [r5, #0]
 8010050:	d032      	beq.n	80100b8 <__sflush_r+0x98>
 8010052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	075a      	lsls	r2, r3, #29
 8010058:	d505      	bpl.n	8010066 <__sflush_r+0x46>
 801005a:	6863      	ldr	r3, [r4, #4]
 801005c:	1ac0      	subs	r0, r0, r3
 801005e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010060:	b10b      	cbz	r3, 8010066 <__sflush_r+0x46>
 8010062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010064:	1ac0      	subs	r0, r0, r3
 8010066:	2300      	movs	r3, #0
 8010068:	4602      	mov	r2, r0
 801006a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801006c:	6a21      	ldr	r1, [r4, #32]
 801006e:	4628      	mov	r0, r5
 8010070:	47b0      	blx	r6
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	d106      	bne.n	8010086 <__sflush_r+0x66>
 8010078:	6829      	ldr	r1, [r5, #0]
 801007a:	291d      	cmp	r1, #29
 801007c:	d82c      	bhi.n	80100d8 <__sflush_r+0xb8>
 801007e:	4a2a      	ldr	r2, [pc, #168]	; (8010128 <__sflush_r+0x108>)
 8010080:	40ca      	lsrs	r2, r1
 8010082:	07d6      	lsls	r6, r2, #31
 8010084:	d528      	bpl.n	80100d8 <__sflush_r+0xb8>
 8010086:	2200      	movs	r2, #0
 8010088:	6062      	str	r2, [r4, #4]
 801008a:	04d9      	lsls	r1, r3, #19
 801008c:	6922      	ldr	r2, [r4, #16]
 801008e:	6022      	str	r2, [r4, #0]
 8010090:	d504      	bpl.n	801009c <__sflush_r+0x7c>
 8010092:	1c42      	adds	r2, r0, #1
 8010094:	d101      	bne.n	801009a <__sflush_r+0x7a>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	b903      	cbnz	r3, 801009c <__sflush_r+0x7c>
 801009a:	6560      	str	r0, [r4, #84]	; 0x54
 801009c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801009e:	602f      	str	r7, [r5, #0]
 80100a0:	2900      	cmp	r1, #0
 80100a2:	d0ca      	beq.n	801003a <__sflush_r+0x1a>
 80100a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a8:	4299      	cmp	r1, r3
 80100aa:	d002      	beq.n	80100b2 <__sflush_r+0x92>
 80100ac:	4628      	mov	r0, r5
 80100ae:	f001 fa2d 	bl	801150c <_free_r>
 80100b2:	2000      	movs	r0, #0
 80100b4:	6360      	str	r0, [r4, #52]	; 0x34
 80100b6:	e7c1      	b.n	801003c <__sflush_r+0x1c>
 80100b8:	6a21      	ldr	r1, [r4, #32]
 80100ba:	2301      	movs	r3, #1
 80100bc:	4628      	mov	r0, r5
 80100be:	47b0      	blx	r6
 80100c0:	1c41      	adds	r1, r0, #1
 80100c2:	d1c7      	bne.n	8010054 <__sflush_r+0x34>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0c4      	beq.n	8010054 <__sflush_r+0x34>
 80100ca:	2b1d      	cmp	r3, #29
 80100cc:	d001      	beq.n	80100d2 <__sflush_r+0xb2>
 80100ce:	2b16      	cmp	r3, #22
 80100d0:	d101      	bne.n	80100d6 <__sflush_r+0xb6>
 80100d2:	602f      	str	r7, [r5, #0]
 80100d4:	e7b1      	b.n	801003a <__sflush_r+0x1a>
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100dc:	81a3      	strh	r3, [r4, #12]
 80100de:	e7ad      	b.n	801003c <__sflush_r+0x1c>
 80100e0:	690f      	ldr	r7, [r1, #16]
 80100e2:	2f00      	cmp	r7, #0
 80100e4:	d0a9      	beq.n	801003a <__sflush_r+0x1a>
 80100e6:	0793      	lsls	r3, r2, #30
 80100e8:	680e      	ldr	r6, [r1, #0]
 80100ea:	bf08      	it	eq
 80100ec:	694b      	ldreq	r3, [r1, #20]
 80100ee:	600f      	str	r7, [r1, #0]
 80100f0:	bf18      	it	ne
 80100f2:	2300      	movne	r3, #0
 80100f4:	eba6 0807 	sub.w	r8, r6, r7
 80100f8:	608b      	str	r3, [r1, #8]
 80100fa:	f1b8 0f00 	cmp.w	r8, #0
 80100fe:	dd9c      	ble.n	801003a <__sflush_r+0x1a>
 8010100:	6a21      	ldr	r1, [r4, #32]
 8010102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010104:	4643      	mov	r3, r8
 8010106:	463a      	mov	r2, r7
 8010108:	4628      	mov	r0, r5
 801010a:	47b0      	blx	r6
 801010c:	2800      	cmp	r0, #0
 801010e:	dc06      	bgt.n	801011e <__sflush_r+0xfe>
 8010110:	89a3      	ldrh	r3, [r4, #12]
 8010112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010116:	81a3      	strh	r3, [r4, #12]
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e78e      	b.n	801003c <__sflush_r+0x1c>
 801011e:	4407      	add	r7, r0
 8010120:	eba8 0800 	sub.w	r8, r8, r0
 8010124:	e7e9      	b.n	80100fa <__sflush_r+0xda>
 8010126:	bf00      	nop
 8010128:	20400001 	.word	0x20400001

0801012c <_fflush_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	690b      	ldr	r3, [r1, #16]
 8010130:	4605      	mov	r5, r0
 8010132:	460c      	mov	r4, r1
 8010134:	b913      	cbnz	r3, 801013c <_fflush_r+0x10>
 8010136:	2500      	movs	r5, #0
 8010138:	4628      	mov	r0, r5
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	b118      	cbz	r0, 8010146 <_fflush_r+0x1a>
 801013e:	6983      	ldr	r3, [r0, #24]
 8010140:	b90b      	cbnz	r3, 8010146 <_fflush_r+0x1a>
 8010142:	f000 f887 	bl	8010254 <__sinit>
 8010146:	4b14      	ldr	r3, [pc, #80]	; (8010198 <_fflush_r+0x6c>)
 8010148:	429c      	cmp	r4, r3
 801014a:	d11b      	bne.n	8010184 <_fflush_r+0x58>
 801014c:	686c      	ldr	r4, [r5, #4]
 801014e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0ef      	beq.n	8010136 <_fflush_r+0xa>
 8010156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010158:	07d0      	lsls	r0, r2, #31
 801015a:	d404      	bmi.n	8010166 <_fflush_r+0x3a>
 801015c:	0599      	lsls	r1, r3, #22
 801015e:	d402      	bmi.n	8010166 <_fflush_r+0x3a>
 8010160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010162:	f000 fc88 	bl	8010a76 <__retarget_lock_acquire_recursive>
 8010166:	4628      	mov	r0, r5
 8010168:	4621      	mov	r1, r4
 801016a:	f7ff ff59 	bl	8010020 <__sflush_r>
 801016e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010170:	07da      	lsls	r2, r3, #31
 8010172:	4605      	mov	r5, r0
 8010174:	d4e0      	bmi.n	8010138 <_fflush_r+0xc>
 8010176:	89a3      	ldrh	r3, [r4, #12]
 8010178:	059b      	lsls	r3, r3, #22
 801017a:	d4dd      	bmi.n	8010138 <_fflush_r+0xc>
 801017c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801017e:	f000 fc7b 	bl	8010a78 <__retarget_lock_release_recursive>
 8010182:	e7d9      	b.n	8010138 <_fflush_r+0xc>
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <_fflush_r+0x70>)
 8010186:	429c      	cmp	r4, r3
 8010188:	d101      	bne.n	801018e <_fflush_r+0x62>
 801018a:	68ac      	ldr	r4, [r5, #8]
 801018c:	e7df      	b.n	801014e <_fflush_r+0x22>
 801018e:	4b04      	ldr	r3, [pc, #16]	; (80101a0 <_fflush_r+0x74>)
 8010190:	429c      	cmp	r4, r3
 8010192:	bf08      	it	eq
 8010194:	68ec      	ldreq	r4, [r5, #12]
 8010196:	e7da      	b.n	801014e <_fflush_r+0x22>
 8010198:	08013608 	.word	0x08013608
 801019c:	08013628 	.word	0x08013628
 80101a0:	080135e8 	.word	0x080135e8

080101a4 <std>:
 80101a4:	2300      	movs	r3, #0
 80101a6:	b510      	push	{r4, lr}
 80101a8:	4604      	mov	r4, r0
 80101aa:	e9c0 3300 	strd	r3, r3, [r0]
 80101ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101b2:	6083      	str	r3, [r0, #8]
 80101b4:	8181      	strh	r1, [r0, #12]
 80101b6:	6643      	str	r3, [r0, #100]	; 0x64
 80101b8:	81c2      	strh	r2, [r0, #14]
 80101ba:	6183      	str	r3, [r0, #24]
 80101bc:	4619      	mov	r1, r3
 80101be:	2208      	movs	r2, #8
 80101c0:	305c      	adds	r0, #92	; 0x5c
 80101c2:	f7fd fc35 	bl	800da30 <memset>
 80101c6:	4b05      	ldr	r3, [pc, #20]	; (80101dc <std+0x38>)
 80101c8:	6263      	str	r3, [r4, #36]	; 0x24
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <std+0x3c>)
 80101cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80101ce:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <std+0x40>)
 80101d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101d2:	4b05      	ldr	r3, [pc, #20]	; (80101e8 <std+0x44>)
 80101d4:	6224      	str	r4, [r4, #32]
 80101d6:	6323      	str	r3, [r4, #48]	; 0x30
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	bf00      	nop
 80101dc:	08011949 	.word	0x08011949
 80101e0:	0801196b 	.word	0x0801196b
 80101e4:	080119a3 	.word	0x080119a3
 80101e8:	080119c7 	.word	0x080119c7

080101ec <_cleanup_r>:
 80101ec:	4901      	ldr	r1, [pc, #4]	; (80101f4 <_cleanup_r+0x8>)
 80101ee:	f000 b8af 	b.w	8010350 <_fwalk_reent>
 80101f2:	bf00      	nop
 80101f4:	0801012d 	.word	0x0801012d

080101f8 <__sfmoreglue>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	1e4a      	subs	r2, r1, #1
 80101fc:	2568      	movs	r5, #104	; 0x68
 80101fe:	4355      	muls	r5, r2
 8010200:	460e      	mov	r6, r1
 8010202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010206:	f001 f9d1 	bl	80115ac <_malloc_r>
 801020a:	4604      	mov	r4, r0
 801020c:	b140      	cbz	r0, 8010220 <__sfmoreglue+0x28>
 801020e:	2100      	movs	r1, #0
 8010210:	e9c0 1600 	strd	r1, r6, [r0]
 8010214:	300c      	adds	r0, #12
 8010216:	60a0      	str	r0, [r4, #8]
 8010218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801021c:	f7fd fc08 	bl	800da30 <memset>
 8010220:	4620      	mov	r0, r4
 8010222:	bd70      	pop	{r4, r5, r6, pc}

08010224 <__sfp_lock_acquire>:
 8010224:	4801      	ldr	r0, [pc, #4]	; (801022c <__sfp_lock_acquire+0x8>)
 8010226:	f000 bc26 	b.w	8010a76 <__retarget_lock_acquire_recursive>
 801022a:	bf00      	nop
 801022c:	20009590 	.word	0x20009590

08010230 <__sfp_lock_release>:
 8010230:	4801      	ldr	r0, [pc, #4]	; (8010238 <__sfp_lock_release+0x8>)
 8010232:	f000 bc21 	b.w	8010a78 <__retarget_lock_release_recursive>
 8010236:	bf00      	nop
 8010238:	20009590 	.word	0x20009590

0801023c <__sinit_lock_acquire>:
 801023c:	4801      	ldr	r0, [pc, #4]	; (8010244 <__sinit_lock_acquire+0x8>)
 801023e:	f000 bc1a 	b.w	8010a76 <__retarget_lock_acquire_recursive>
 8010242:	bf00      	nop
 8010244:	2000958b 	.word	0x2000958b

08010248 <__sinit_lock_release>:
 8010248:	4801      	ldr	r0, [pc, #4]	; (8010250 <__sinit_lock_release+0x8>)
 801024a:	f000 bc15 	b.w	8010a78 <__retarget_lock_release_recursive>
 801024e:	bf00      	nop
 8010250:	2000958b 	.word	0x2000958b

08010254 <__sinit>:
 8010254:	b510      	push	{r4, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	f7ff fff0 	bl	801023c <__sinit_lock_acquire>
 801025c:	69a3      	ldr	r3, [r4, #24]
 801025e:	b11b      	cbz	r3, 8010268 <__sinit+0x14>
 8010260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010264:	f7ff bff0 	b.w	8010248 <__sinit_lock_release>
 8010268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801026c:	6523      	str	r3, [r4, #80]	; 0x50
 801026e:	4b13      	ldr	r3, [pc, #76]	; (80102bc <__sinit+0x68>)
 8010270:	4a13      	ldr	r2, [pc, #76]	; (80102c0 <__sinit+0x6c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	62a2      	str	r2, [r4, #40]	; 0x28
 8010276:	42a3      	cmp	r3, r4
 8010278:	bf04      	itt	eq
 801027a:	2301      	moveq	r3, #1
 801027c:	61a3      	streq	r3, [r4, #24]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f820 	bl	80102c4 <__sfp>
 8010284:	6060      	str	r0, [r4, #4]
 8010286:	4620      	mov	r0, r4
 8010288:	f000 f81c 	bl	80102c4 <__sfp>
 801028c:	60a0      	str	r0, [r4, #8]
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f818 	bl	80102c4 <__sfp>
 8010294:	2200      	movs	r2, #0
 8010296:	60e0      	str	r0, [r4, #12]
 8010298:	2104      	movs	r1, #4
 801029a:	6860      	ldr	r0, [r4, #4]
 801029c:	f7ff ff82 	bl	80101a4 <std>
 80102a0:	68a0      	ldr	r0, [r4, #8]
 80102a2:	2201      	movs	r2, #1
 80102a4:	2109      	movs	r1, #9
 80102a6:	f7ff ff7d 	bl	80101a4 <std>
 80102aa:	68e0      	ldr	r0, [r4, #12]
 80102ac:	2202      	movs	r2, #2
 80102ae:	2112      	movs	r1, #18
 80102b0:	f7ff ff78 	bl	80101a4 <std>
 80102b4:	2301      	movs	r3, #1
 80102b6:	61a3      	str	r3, [r4, #24]
 80102b8:	e7d2      	b.n	8010260 <__sinit+0xc>
 80102ba:	bf00      	nop
 80102bc:	080133c8 	.word	0x080133c8
 80102c0:	080101ed 	.word	0x080101ed

080102c4 <__sfp>:
 80102c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c6:	4607      	mov	r7, r0
 80102c8:	f7ff ffac 	bl	8010224 <__sfp_lock_acquire>
 80102cc:	4b1e      	ldr	r3, [pc, #120]	; (8010348 <__sfp+0x84>)
 80102ce:	681e      	ldr	r6, [r3, #0]
 80102d0:	69b3      	ldr	r3, [r6, #24]
 80102d2:	b913      	cbnz	r3, 80102da <__sfp+0x16>
 80102d4:	4630      	mov	r0, r6
 80102d6:	f7ff ffbd 	bl	8010254 <__sinit>
 80102da:	3648      	adds	r6, #72	; 0x48
 80102dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	d503      	bpl.n	80102ec <__sfp+0x28>
 80102e4:	6833      	ldr	r3, [r6, #0]
 80102e6:	b30b      	cbz	r3, 801032c <__sfp+0x68>
 80102e8:	6836      	ldr	r6, [r6, #0]
 80102ea:	e7f7      	b.n	80102dc <__sfp+0x18>
 80102ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102f0:	b9d5      	cbnz	r5, 8010328 <__sfp+0x64>
 80102f2:	4b16      	ldr	r3, [pc, #88]	; (801034c <__sfp+0x88>)
 80102f4:	60e3      	str	r3, [r4, #12]
 80102f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102fa:	6665      	str	r5, [r4, #100]	; 0x64
 80102fc:	f000 fbba 	bl	8010a74 <__retarget_lock_init_recursive>
 8010300:	f7ff ff96 	bl	8010230 <__sfp_lock_release>
 8010304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801030c:	6025      	str	r5, [r4, #0]
 801030e:	61a5      	str	r5, [r4, #24]
 8010310:	2208      	movs	r2, #8
 8010312:	4629      	mov	r1, r5
 8010314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010318:	f7fd fb8a 	bl	800da30 <memset>
 801031c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010324:	4620      	mov	r0, r4
 8010326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010328:	3468      	adds	r4, #104	; 0x68
 801032a:	e7d9      	b.n	80102e0 <__sfp+0x1c>
 801032c:	2104      	movs	r1, #4
 801032e:	4638      	mov	r0, r7
 8010330:	f7ff ff62 	bl	80101f8 <__sfmoreglue>
 8010334:	4604      	mov	r4, r0
 8010336:	6030      	str	r0, [r6, #0]
 8010338:	2800      	cmp	r0, #0
 801033a:	d1d5      	bne.n	80102e8 <__sfp+0x24>
 801033c:	f7ff ff78 	bl	8010230 <__sfp_lock_release>
 8010340:	230c      	movs	r3, #12
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	e7ee      	b.n	8010324 <__sfp+0x60>
 8010346:	bf00      	nop
 8010348:	080133c8 	.word	0x080133c8
 801034c:	ffff0001 	.word	0xffff0001

08010350 <_fwalk_reent>:
 8010350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010354:	4606      	mov	r6, r0
 8010356:	4688      	mov	r8, r1
 8010358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801035c:	2700      	movs	r7, #0
 801035e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010362:	f1b9 0901 	subs.w	r9, r9, #1
 8010366:	d505      	bpl.n	8010374 <_fwalk_reent+0x24>
 8010368:	6824      	ldr	r4, [r4, #0]
 801036a:	2c00      	cmp	r4, #0
 801036c:	d1f7      	bne.n	801035e <_fwalk_reent+0xe>
 801036e:	4638      	mov	r0, r7
 8010370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010374:	89ab      	ldrh	r3, [r5, #12]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d907      	bls.n	801038a <_fwalk_reent+0x3a>
 801037a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801037e:	3301      	adds	r3, #1
 8010380:	d003      	beq.n	801038a <_fwalk_reent+0x3a>
 8010382:	4629      	mov	r1, r5
 8010384:	4630      	mov	r0, r6
 8010386:	47c0      	blx	r8
 8010388:	4307      	orrs	r7, r0
 801038a:	3568      	adds	r5, #104	; 0x68
 801038c:	e7e9      	b.n	8010362 <_fwalk_reent+0x12>

0801038e <rshift>:
 801038e:	6903      	ldr	r3, [r0, #16]
 8010390:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010398:	ea4f 1261 	mov.w	r2, r1, asr #5
 801039c:	f100 0414 	add.w	r4, r0, #20
 80103a0:	dd45      	ble.n	801042e <rshift+0xa0>
 80103a2:	f011 011f 	ands.w	r1, r1, #31
 80103a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103ae:	d10c      	bne.n	80103ca <rshift+0x3c>
 80103b0:	f100 0710 	add.w	r7, r0, #16
 80103b4:	4629      	mov	r1, r5
 80103b6:	42b1      	cmp	r1, r6
 80103b8:	d334      	bcc.n	8010424 <rshift+0x96>
 80103ba:	1a9b      	subs	r3, r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	1eea      	subs	r2, r5, #3
 80103c0:	4296      	cmp	r6, r2
 80103c2:	bf38      	it	cc
 80103c4:	2300      	movcc	r3, #0
 80103c6:	4423      	add	r3, r4
 80103c8:	e015      	b.n	80103f6 <rshift+0x68>
 80103ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103ce:	f1c1 0820 	rsb	r8, r1, #32
 80103d2:	40cf      	lsrs	r7, r1
 80103d4:	f105 0e04 	add.w	lr, r5, #4
 80103d8:	46a1      	mov	r9, r4
 80103da:	4576      	cmp	r6, lr
 80103dc:	46f4      	mov	ip, lr
 80103de:	d815      	bhi.n	801040c <rshift+0x7e>
 80103e0:	1a9b      	subs	r3, r3, r2
 80103e2:	009a      	lsls	r2, r3, #2
 80103e4:	3a04      	subs	r2, #4
 80103e6:	3501      	adds	r5, #1
 80103e8:	42ae      	cmp	r6, r5
 80103ea:	bf38      	it	cc
 80103ec:	2200      	movcc	r2, #0
 80103ee:	18a3      	adds	r3, r4, r2
 80103f0:	50a7      	str	r7, [r4, r2]
 80103f2:	b107      	cbz	r7, 80103f6 <rshift+0x68>
 80103f4:	3304      	adds	r3, #4
 80103f6:	1b1a      	subs	r2, r3, r4
 80103f8:	42a3      	cmp	r3, r4
 80103fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103fe:	bf08      	it	eq
 8010400:	2300      	moveq	r3, #0
 8010402:	6102      	str	r2, [r0, #16]
 8010404:	bf08      	it	eq
 8010406:	6143      	streq	r3, [r0, #20]
 8010408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801040c:	f8dc c000 	ldr.w	ip, [ip]
 8010410:	fa0c fc08 	lsl.w	ip, ip, r8
 8010414:	ea4c 0707 	orr.w	r7, ip, r7
 8010418:	f849 7b04 	str.w	r7, [r9], #4
 801041c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010420:	40cf      	lsrs	r7, r1
 8010422:	e7da      	b.n	80103da <rshift+0x4c>
 8010424:	f851 cb04 	ldr.w	ip, [r1], #4
 8010428:	f847 cf04 	str.w	ip, [r7, #4]!
 801042c:	e7c3      	b.n	80103b6 <rshift+0x28>
 801042e:	4623      	mov	r3, r4
 8010430:	e7e1      	b.n	80103f6 <rshift+0x68>

08010432 <__hexdig_fun>:
 8010432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010436:	2b09      	cmp	r3, #9
 8010438:	d802      	bhi.n	8010440 <__hexdig_fun+0xe>
 801043a:	3820      	subs	r0, #32
 801043c:	b2c0      	uxtb	r0, r0
 801043e:	4770      	bx	lr
 8010440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010444:	2b05      	cmp	r3, #5
 8010446:	d801      	bhi.n	801044c <__hexdig_fun+0x1a>
 8010448:	3847      	subs	r0, #71	; 0x47
 801044a:	e7f7      	b.n	801043c <__hexdig_fun+0xa>
 801044c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010450:	2b05      	cmp	r3, #5
 8010452:	d801      	bhi.n	8010458 <__hexdig_fun+0x26>
 8010454:	3827      	subs	r0, #39	; 0x27
 8010456:	e7f1      	b.n	801043c <__hexdig_fun+0xa>
 8010458:	2000      	movs	r0, #0
 801045a:	4770      	bx	lr

0801045c <__gethex>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	ed2d 8b02 	vpush	{d8}
 8010464:	b089      	sub	sp, #36	; 0x24
 8010466:	ee08 0a10 	vmov	s16, r0
 801046a:	9304      	str	r3, [sp, #16]
 801046c:	4bbc      	ldr	r3, [pc, #752]	; (8010760 <__gethex+0x304>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	9301      	str	r3, [sp, #4]
 8010472:	4618      	mov	r0, r3
 8010474:	468b      	mov	fp, r1
 8010476:	4690      	mov	r8, r2
 8010478:	f7ef fed2 	bl	8000220 <strlen>
 801047c:	9b01      	ldr	r3, [sp, #4]
 801047e:	f8db 2000 	ldr.w	r2, [fp]
 8010482:	4403      	add	r3, r0
 8010484:	4682      	mov	sl, r0
 8010486:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801048a:	9305      	str	r3, [sp, #20]
 801048c:	1c93      	adds	r3, r2, #2
 801048e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010492:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010496:	32fe      	adds	r2, #254	; 0xfe
 8010498:	18d1      	adds	r1, r2, r3
 801049a:	461f      	mov	r7, r3
 801049c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80104a0:	9100      	str	r1, [sp, #0]
 80104a2:	2830      	cmp	r0, #48	; 0x30
 80104a4:	d0f8      	beq.n	8010498 <__gethex+0x3c>
 80104a6:	f7ff ffc4 	bl	8010432 <__hexdig_fun>
 80104aa:	4604      	mov	r4, r0
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d13a      	bne.n	8010526 <__gethex+0xca>
 80104b0:	9901      	ldr	r1, [sp, #4]
 80104b2:	4652      	mov	r2, sl
 80104b4:	4638      	mov	r0, r7
 80104b6:	f001 fa8a 	bl	80119ce <strncmp>
 80104ba:	4605      	mov	r5, r0
 80104bc:	2800      	cmp	r0, #0
 80104be:	d168      	bne.n	8010592 <__gethex+0x136>
 80104c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80104c4:	eb07 060a 	add.w	r6, r7, sl
 80104c8:	f7ff ffb3 	bl	8010432 <__hexdig_fun>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d062      	beq.n	8010596 <__gethex+0x13a>
 80104d0:	4633      	mov	r3, r6
 80104d2:	7818      	ldrb	r0, [r3, #0]
 80104d4:	2830      	cmp	r0, #48	; 0x30
 80104d6:	461f      	mov	r7, r3
 80104d8:	f103 0301 	add.w	r3, r3, #1
 80104dc:	d0f9      	beq.n	80104d2 <__gethex+0x76>
 80104de:	f7ff ffa8 	bl	8010432 <__hexdig_fun>
 80104e2:	2301      	movs	r3, #1
 80104e4:	fab0 f480 	clz	r4, r0
 80104e8:	0964      	lsrs	r4, r4, #5
 80104ea:	4635      	mov	r5, r6
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	463a      	mov	r2, r7
 80104f0:	4616      	mov	r6, r2
 80104f2:	3201      	adds	r2, #1
 80104f4:	7830      	ldrb	r0, [r6, #0]
 80104f6:	f7ff ff9c 	bl	8010432 <__hexdig_fun>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d1f8      	bne.n	80104f0 <__gethex+0x94>
 80104fe:	9901      	ldr	r1, [sp, #4]
 8010500:	4652      	mov	r2, sl
 8010502:	4630      	mov	r0, r6
 8010504:	f001 fa63 	bl	80119ce <strncmp>
 8010508:	b980      	cbnz	r0, 801052c <__gethex+0xd0>
 801050a:	b94d      	cbnz	r5, 8010520 <__gethex+0xc4>
 801050c:	eb06 050a 	add.w	r5, r6, sl
 8010510:	462a      	mov	r2, r5
 8010512:	4616      	mov	r6, r2
 8010514:	3201      	adds	r2, #1
 8010516:	7830      	ldrb	r0, [r6, #0]
 8010518:	f7ff ff8b 	bl	8010432 <__hexdig_fun>
 801051c:	2800      	cmp	r0, #0
 801051e:	d1f8      	bne.n	8010512 <__gethex+0xb6>
 8010520:	1bad      	subs	r5, r5, r6
 8010522:	00ad      	lsls	r5, r5, #2
 8010524:	e004      	b.n	8010530 <__gethex+0xd4>
 8010526:	2400      	movs	r4, #0
 8010528:	4625      	mov	r5, r4
 801052a:	e7e0      	b.n	80104ee <__gethex+0x92>
 801052c:	2d00      	cmp	r5, #0
 801052e:	d1f7      	bne.n	8010520 <__gethex+0xc4>
 8010530:	7833      	ldrb	r3, [r6, #0]
 8010532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010536:	2b50      	cmp	r3, #80	; 0x50
 8010538:	d13b      	bne.n	80105b2 <__gethex+0x156>
 801053a:	7873      	ldrb	r3, [r6, #1]
 801053c:	2b2b      	cmp	r3, #43	; 0x2b
 801053e:	d02c      	beq.n	801059a <__gethex+0x13e>
 8010540:	2b2d      	cmp	r3, #45	; 0x2d
 8010542:	d02e      	beq.n	80105a2 <__gethex+0x146>
 8010544:	1c71      	adds	r1, r6, #1
 8010546:	f04f 0900 	mov.w	r9, #0
 801054a:	7808      	ldrb	r0, [r1, #0]
 801054c:	f7ff ff71 	bl	8010432 <__hexdig_fun>
 8010550:	1e43      	subs	r3, r0, #1
 8010552:	b2db      	uxtb	r3, r3
 8010554:	2b18      	cmp	r3, #24
 8010556:	d82c      	bhi.n	80105b2 <__gethex+0x156>
 8010558:	f1a0 0210 	sub.w	r2, r0, #16
 801055c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010560:	f7ff ff67 	bl	8010432 <__hexdig_fun>
 8010564:	1e43      	subs	r3, r0, #1
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b18      	cmp	r3, #24
 801056a:	d91d      	bls.n	80105a8 <__gethex+0x14c>
 801056c:	f1b9 0f00 	cmp.w	r9, #0
 8010570:	d000      	beq.n	8010574 <__gethex+0x118>
 8010572:	4252      	negs	r2, r2
 8010574:	4415      	add	r5, r2
 8010576:	f8cb 1000 	str.w	r1, [fp]
 801057a:	b1e4      	cbz	r4, 80105b6 <__gethex+0x15a>
 801057c:	9b00      	ldr	r3, [sp, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	bf14      	ite	ne
 8010582:	2700      	movne	r7, #0
 8010584:	2706      	moveq	r7, #6
 8010586:	4638      	mov	r0, r7
 8010588:	b009      	add	sp, #36	; 0x24
 801058a:	ecbd 8b02 	vpop	{d8}
 801058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010592:	463e      	mov	r6, r7
 8010594:	4625      	mov	r5, r4
 8010596:	2401      	movs	r4, #1
 8010598:	e7ca      	b.n	8010530 <__gethex+0xd4>
 801059a:	f04f 0900 	mov.w	r9, #0
 801059e:	1cb1      	adds	r1, r6, #2
 80105a0:	e7d3      	b.n	801054a <__gethex+0xee>
 80105a2:	f04f 0901 	mov.w	r9, #1
 80105a6:	e7fa      	b.n	801059e <__gethex+0x142>
 80105a8:	230a      	movs	r3, #10
 80105aa:	fb03 0202 	mla	r2, r3, r2, r0
 80105ae:	3a10      	subs	r2, #16
 80105b0:	e7d4      	b.n	801055c <__gethex+0x100>
 80105b2:	4631      	mov	r1, r6
 80105b4:	e7df      	b.n	8010576 <__gethex+0x11a>
 80105b6:	1bf3      	subs	r3, r6, r7
 80105b8:	3b01      	subs	r3, #1
 80105ba:	4621      	mov	r1, r4
 80105bc:	2b07      	cmp	r3, #7
 80105be:	dc0b      	bgt.n	80105d8 <__gethex+0x17c>
 80105c0:	ee18 0a10 	vmov	r0, s16
 80105c4:	f000 fad8 	bl	8010b78 <_Balloc>
 80105c8:	4604      	mov	r4, r0
 80105ca:	b940      	cbnz	r0, 80105de <__gethex+0x182>
 80105cc:	4b65      	ldr	r3, [pc, #404]	; (8010764 <__gethex+0x308>)
 80105ce:	4602      	mov	r2, r0
 80105d0:	21de      	movs	r1, #222	; 0xde
 80105d2:	4865      	ldr	r0, [pc, #404]	; (8010768 <__gethex+0x30c>)
 80105d4:	f001 fa2c 	bl	8011a30 <__assert_func>
 80105d8:	3101      	adds	r1, #1
 80105da:	105b      	asrs	r3, r3, #1
 80105dc:	e7ee      	b.n	80105bc <__gethex+0x160>
 80105de:	f100 0914 	add.w	r9, r0, #20
 80105e2:	f04f 0b00 	mov.w	fp, #0
 80105e6:	f1ca 0301 	rsb	r3, sl, #1
 80105ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80105ee:	f8cd b000 	str.w	fp, [sp]
 80105f2:	9306      	str	r3, [sp, #24]
 80105f4:	42b7      	cmp	r7, r6
 80105f6:	d340      	bcc.n	801067a <__gethex+0x21e>
 80105f8:	9802      	ldr	r0, [sp, #8]
 80105fa:	9b00      	ldr	r3, [sp, #0]
 80105fc:	f840 3b04 	str.w	r3, [r0], #4
 8010600:	eba0 0009 	sub.w	r0, r0, r9
 8010604:	1080      	asrs	r0, r0, #2
 8010606:	0146      	lsls	r6, r0, #5
 8010608:	6120      	str	r0, [r4, #16]
 801060a:	4618      	mov	r0, r3
 801060c:	f000 fbaa 	bl	8010d64 <__hi0bits>
 8010610:	1a30      	subs	r0, r6, r0
 8010612:	f8d8 6000 	ldr.w	r6, [r8]
 8010616:	42b0      	cmp	r0, r6
 8010618:	dd63      	ble.n	80106e2 <__gethex+0x286>
 801061a:	1b87      	subs	r7, r0, r6
 801061c:	4639      	mov	r1, r7
 801061e:	4620      	mov	r0, r4
 8010620:	f000 ff44 	bl	80114ac <__any_on>
 8010624:	4682      	mov	sl, r0
 8010626:	b1a8      	cbz	r0, 8010654 <__gethex+0x1f8>
 8010628:	1e7b      	subs	r3, r7, #1
 801062a:	1159      	asrs	r1, r3, #5
 801062c:	f003 021f 	and.w	r2, r3, #31
 8010630:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010634:	f04f 0a01 	mov.w	sl, #1
 8010638:	fa0a f202 	lsl.w	r2, sl, r2
 801063c:	420a      	tst	r2, r1
 801063e:	d009      	beq.n	8010654 <__gethex+0x1f8>
 8010640:	4553      	cmp	r3, sl
 8010642:	dd05      	ble.n	8010650 <__gethex+0x1f4>
 8010644:	1eb9      	subs	r1, r7, #2
 8010646:	4620      	mov	r0, r4
 8010648:	f000 ff30 	bl	80114ac <__any_on>
 801064c:	2800      	cmp	r0, #0
 801064e:	d145      	bne.n	80106dc <__gethex+0x280>
 8010650:	f04f 0a02 	mov.w	sl, #2
 8010654:	4639      	mov	r1, r7
 8010656:	4620      	mov	r0, r4
 8010658:	f7ff fe99 	bl	801038e <rshift>
 801065c:	443d      	add	r5, r7
 801065e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010662:	42ab      	cmp	r3, r5
 8010664:	da4c      	bge.n	8010700 <__gethex+0x2a4>
 8010666:	ee18 0a10 	vmov	r0, s16
 801066a:	4621      	mov	r1, r4
 801066c:	f000 fac4 	bl	8010bf8 <_Bfree>
 8010670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010672:	2300      	movs	r3, #0
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	27a3      	movs	r7, #163	; 0xa3
 8010678:	e785      	b.n	8010586 <__gethex+0x12a>
 801067a:	1e73      	subs	r3, r6, #1
 801067c:	9a05      	ldr	r2, [sp, #20]
 801067e:	9303      	str	r3, [sp, #12]
 8010680:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010684:	4293      	cmp	r3, r2
 8010686:	d019      	beq.n	80106bc <__gethex+0x260>
 8010688:	f1bb 0f20 	cmp.w	fp, #32
 801068c:	d107      	bne.n	801069e <__gethex+0x242>
 801068e:	9b02      	ldr	r3, [sp, #8]
 8010690:	9a00      	ldr	r2, [sp, #0]
 8010692:	f843 2b04 	str.w	r2, [r3], #4
 8010696:	9302      	str	r3, [sp, #8]
 8010698:	2300      	movs	r3, #0
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	469b      	mov	fp, r3
 801069e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80106a2:	f7ff fec6 	bl	8010432 <__hexdig_fun>
 80106a6:	9b00      	ldr	r3, [sp, #0]
 80106a8:	f000 000f 	and.w	r0, r0, #15
 80106ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80106b0:	4303      	orrs	r3, r0
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	f10b 0b04 	add.w	fp, fp, #4
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	e00d      	b.n	80106d8 <__gethex+0x27c>
 80106bc:	9b03      	ldr	r3, [sp, #12]
 80106be:	9a06      	ldr	r2, [sp, #24]
 80106c0:	4413      	add	r3, r2
 80106c2:	42bb      	cmp	r3, r7
 80106c4:	d3e0      	bcc.n	8010688 <__gethex+0x22c>
 80106c6:	4618      	mov	r0, r3
 80106c8:	9901      	ldr	r1, [sp, #4]
 80106ca:	9307      	str	r3, [sp, #28]
 80106cc:	4652      	mov	r2, sl
 80106ce:	f001 f97e 	bl	80119ce <strncmp>
 80106d2:	9b07      	ldr	r3, [sp, #28]
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d1d7      	bne.n	8010688 <__gethex+0x22c>
 80106d8:	461e      	mov	r6, r3
 80106da:	e78b      	b.n	80105f4 <__gethex+0x198>
 80106dc:	f04f 0a03 	mov.w	sl, #3
 80106e0:	e7b8      	b.n	8010654 <__gethex+0x1f8>
 80106e2:	da0a      	bge.n	80106fa <__gethex+0x29e>
 80106e4:	1a37      	subs	r7, r6, r0
 80106e6:	4621      	mov	r1, r4
 80106e8:	ee18 0a10 	vmov	r0, s16
 80106ec:	463a      	mov	r2, r7
 80106ee:	f000 fc9f 	bl	8011030 <__lshift>
 80106f2:	1bed      	subs	r5, r5, r7
 80106f4:	4604      	mov	r4, r0
 80106f6:	f100 0914 	add.w	r9, r0, #20
 80106fa:	f04f 0a00 	mov.w	sl, #0
 80106fe:	e7ae      	b.n	801065e <__gethex+0x202>
 8010700:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010704:	42a8      	cmp	r0, r5
 8010706:	dd72      	ble.n	80107ee <__gethex+0x392>
 8010708:	1b45      	subs	r5, r0, r5
 801070a:	42ae      	cmp	r6, r5
 801070c:	dc36      	bgt.n	801077c <__gethex+0x320>
 801070e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010712:	2b02      	cmp	r3, #2
 8010714:	d02a      	beq.n	801076c <__gethex+0x310>
 8010716:	2b03      	cmp	r3, #3
 8010718:	d02c      	beq.n	8010774 <__gethex+0x318>
 801071a:	2b01      	cmp	r3, #1
 801071c:	d115      	bne.n	801074a <__gethex+0x2ee>
 801071e:	42ae      	cmp	r6, r5
 8010720:	d113      	bne.n	801074a <__gethex+0x2ee>
 8010722:	2e01      	cmp	r6, #1
 8010724:	d10b      	bne.n	801073e <__gethex+0x2e2>
 8010726:	9a04      	ldr	r2, [sp, #16]
 8010728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801072c:	6013      	str	r3, [r2, #0]
 801072e:	2301      	movs	r3, #1
 8010730:	6123      	str	r3, [r4, #16]
 8010732:	f8c9 3000 	str.w	r3, [r9]
 8010736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010738:	2762      	movs	r7, #98	; 0x62
 801073a:	601c      	str	r4, [r3, #0]
 801073c:	e723      	b.n	8010586 <__gethex+0x12a>
 801073e:	1e71      	subs	r1, r6, #1
 8010740:	4620      	mov	r0, r4
 8010742:	f000 feb3 	bl	80114ac <__any_on>
 8010746:	2800      	cmp	r0, #0
 8010748:	d1ed      	bne.n	8010726 <__gethex+0x2ca>
 801074a:	ee18 0a10 	vmov	r0, s16
 801074e:	4621      	mov	r1, r4
 8010750:	f000 fa52 	bl	8010bf8 <_Bfree>
 8010754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010756:	2300      	movs	r3, #0
 8010758:	6013      	str	r3, [r2, #0]
 801075a:	2750      	movs	r7, #80	; 0x50
 801075c:	e713      	b.n	8010586 <__gethex+0x12a>
 801075e:	bf00      	nop
 8010760:	080136b4 	.word	0x080136b4
 8010764:	080135d4 	.word	0x080135d4
 8010768:	08013648 	.word	0x08013648
 801076c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1eb      	bne.n	801074a <__gethex+0x2ee>
 8010772:	e7d8      	b.n	8010726 <__gethex+0x2ca>
 8010774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1d5      	bne.n	8010726 <__gethex+0x2ca>
 801077a:	e7e6      	b.n	801074a <__gethex+0x2ee>
 801077c:	1e6f      	subs	r7, r5, #1
 801077e:	f1ba 0f00 	cmp.w	sl, #0
 8010782:	d131      	bne.n	80107e8 <__gethex+0x38c>
 8010784:	b127      	cbz	r7, 8010790 <__gethex+0x334>
 8010786:	4639      	mov	r1, r7
 8010788:	4620      	mov	r0, r4
 801078a:	f000 fe8f 	bl	80114ac <__any_on>
 801078e:	4682      	mov	sl, r0
 8010790:	117b      	asrs	r3, r7, #5
 8010792:	2101      	movs	r1, #1
 8010794:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010798:	f007 071f 	and.w	r7, r7, #31
 801079c:	fa01 f707 	lsl.w	r7, r1, r7
 80107a0:	421f      	tst	r7, r3
 80107a2:	4629      	mov	r1, r5
 80107a4:	4620      	mov	r0, r4
 80107a6:	bf18      	it	ne
 80107a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80107ac:	1b76      	subs	r6, r6, r5
 80107ae:	f7ff fdee 	bl	801038e <rshift>
 80107b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107b6:	2702      	movs	r7, #2
 80107b8:	f1ba 0f00 	cmp.w	sl, #0
 80107bc:	d048      	beq.n	8010850 <__gethex+0x3f4>
 80107be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	d015      	beq.n	80107f2 <__gethex+0x396>
 80107c6:	2b03      	cmp	r3, #3
 80107c8:	d017      	beq.n	80107fa <__gethex+0x39e>
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d109      	bne.n	80107e2 <__gethex+0x386>
 80107ce:	f01a 0f02 	tst.w	sl, #2
 80107d2:	d006      	beq.n	80107e2 <__gethex+0x386>
 80107d4:	f8d9 0000 	ldr.w	r0, [r9]
 80107d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80107dc:	f01a 0f01 	tst.w	sl, #1
 80107e0:	d10e      	bne.n	8010800 <__gethex+0x3a4>
 80107e2:	f047 0710 	orr.w	r7, r7, #16
 80107e6:	e033      	b.n	8010850 <__gethex+0x3f4>
 80107e8:	f04f 0a01 	mov.w	sl, #1
 80107ec:	e7d0      	b.n	8010790 <__gethex+0x334>
 80107ee:	2701      	movs	r7, #1
 80107f0:	e7e2      	b.n	80107b8 <__gethex+0x35c>
 80107f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107f4:	f1c3 0301 	rsb	r3, r3, #1
 80107f8:	9315      	str	r3, [sp, #84]	; 0x54
 80107fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d0f0      	beq.n	80107e2 <__gethex+0x386>
 8010800:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010804:	f104 0314 	add.w	r3, r4, #20
 8010808:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801080c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010810:	f04f 0c00 	mov.w	ip, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f853 2b04 	ldr.w	r2, [r3], #4
 801081a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801081e:	d01c      	beq.n	801085a <__gethex+0x3fe>
 8010820:	3201      	adds	r2, #1
 8010822:	6002      	str	r2, [r0, #0]
 8010824:	2f02      	cmp	r7, #2
 8010826:	f104 0314 	add.w	r3, r4, #20
 801082a:	d13f      	bne.n	80108ac <__gethex+0x450>
 801082c:	f8d8 2000 	ldr.w	r2, [r8]
 8010830:	3a01      	subs	r2, #1
 8010832:	42b2      	cmp	r2, r6
 8010834:	d10a      	bne.n	801084c <__gethex+0x3f0>
 8010836:	1171      	asrs	r1, r6, #5
 8010838:	2201      	movs	r2, #1
 801083a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801083e:	f006 061f 	and.w	r6, r6, #31
 8010842:	fa02 f606 	lsl.w	r6, r2, r6
 8010846:	421e      	tst	r6, r3
 8010848:	bf18      	it	ne
 801084a:	4617      	movne	r7, r2
 801084c:	f047 0720 	orr.w	r7, r7, #32
 8010850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010852:	601c      	str	r4, [r3, #0]
 8010854:	9b04      	ldr	r3, [sp, #16]
 8010856:	601d      	str	r5, [r3, #0]
 8010858:	e695      	b.n	8010586 <__gethex+0x12a>
 801085a:	4299      	cmp	r1, r3
 801085c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010860:	d8d8      	bhi.n	8010814 <__gethex+0x3b8>
 8010862:	68a3      	ldr	r3, [r4, #8]
 8010864:	459b      	cmp	fp, r3
 8010866:	db19      	blt.n	801089c <__gethex+0x440>
 8010868:	6861      	ldr	r1, [r4, #4]
 801086a:	ee18 0a10 	vmov	r0, s16
 801086e:	3101      	adds	r1, #1
 8010870:	f000 f982 	bl	8010b78 <_Balloc>
 8010874:	4681      	mov	r9, r0
 8010876:	b918      	cbnz	r0, 8010880 <__gethex+0x424>
 8010878:	4b1a      	ldr	r3, [pc, #104]	; (80108e4 <__gethex+0x488>)
 801087a:	4602      	mov	r2, r0
 801087c:	2184      	movs	r1, #132	; 0x84
 801087e:	e6a8      	b.n	80105d2 <__gethex+0x176>
 8010880:	6922      	ldr	r2, [r4, #16]
 8010882:	3202      	adds	r2, #2
 8010884:	f104 010c 	add.w	r1, r4, #12
 8010888:	0092      	lsls	r2, r2, #2
 801088a:	300c      	adds	r0, #12
 801088c:	f7fd f8c2 	bl	800da14 <memcpy>
 8010890:	4621      	mov	r1, r4
 8010892:	ee18 0a10 	vmov	r0, s16
 8010896:	f000 f9af 	bl	8010bf8 <_Bfree>
 801089a:	464c      	mov	r4, r9
 801089c:	6923      	ldr	r3, [r4, #16]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108a4:	6122      	str	r2, [r4, #16]
 80108a6:	2201      	movs	r2, #1
 80108a8:	615a      	str	r2, [r3, #20]
 80108aa:	e7bb      	b.n	8010824 <__gethex+0x3c8>
 80108ac:	6922      	ldr	r2, [r4, #16]
 80108ae:	455a      	cmp	r2, fp
 80108b0:	dd0b      	ble.n	80108ca <__gethex+0x46e>
 80108b2:	2101      	movs	r1, #1
 80108b4:	4620      	mov	r0, r4
 80108b6:	f7ff fd6a 	bl	801038e <rshift>
 80108ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108be:	3501      	adds	r5, #1
 80108c0:	42ab      	cmp	r3, r5
 80108c2:	f6ff aed0 	blt.w	8010666 <__gethex+0x20a>
 80108c6:	2701      	movs	r7, #1
 80108c8:	e7c0      	b.n	801084c <__gethex+0x3f0>
 80108ca:	f016 061f 	ands.w	r6, r6, #31
 80108ce:	d0fa      	beq.n	80108c6 <__gethex+0x46a>
 80108d0:	449a      	add	sl, r3
 80108d2:	f1c6 0620 	rsb	r6, r6, #32
 80108d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80108da:	f000 fa43 	bl	8010d64 <__hi0bits>
 80108de:	42b0      	cmp	r0, r6
 80108e0:	dbe7      	blt.n	80108b2 <__gethex+0x456>
 80108e2:	e7f0      	b.n	80108c6 <__gethex+0x46a>
 80108e4:	080135d4 	.word	0x080135d4

080108e8 <L_shift>:
 80108e8:	f1c2 0208 	rsb	r2, r2, #8
 80108ec:	0092      	lsls	r2, r2, #2
 80108ee:	b570      	push	{r4, r5, r6, lr}
 80108f0:	f1c2 0620 	rsb	r6, r2, #32
 80108f4:	6843      	ldr	r3, [r0, #4]
 80108f6:	6804      	ldr	r4, [r0, #0]
 80108f8:	fa03 f506 	lsl.w	r5, r3, r6
 80108fc:	432c      	orrs	r4, r5
 80108fe:	40d3      	lsrs	r3, r2
 8010900:	6004      	str	r4, [r0, #0]
 8010902:	f840 3f04 	str.w	r3, [r0, #4]!
 8010906:	4288      	cmp	r0, r1
 8010908:	d3f4      	bcc.n	80108f4 <L_shift+0xc>
 801090a:	bd70      	pop	{r4, r5, r6, pc}

0801090c <__match>:
 801090c:	b530      	push	{r4, r5, lr}
 801090e:	6803      	ldr	r3, [r0, #0]
 8010910:	3301      	adds	r3, #1
 8010912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010916:	b914      	cbnz	r4, 801091e <__match+0x12>
 8010918:	6003      	str	r3, [r0, #0]
 801091a:	2001      	movs	r0, #1
 801091c:	bd30      	pop	{r4, r5, pc}
 801091e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010922:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010926:	2d19      	cmp	r5, #25
 8010928:	bf98      	it	ls
 801092a:	3220      	addls	r2, #32
 801092c:	42a2      	cmp	r2, r4
 801092e:	d0f0      	beq.n	8010912 <__match+0x6>
 8010930:	2000      	movs	r0, #0
 8010932:	e7f3      	b.n	801091c <__match+0x10>

08010934 <__hexnan>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	680b      	ldr	r3, [r1, #0]
 801093a:	6801      	ldr	r1, [r0, #0]
 801093c:	115e      	asrs	r6, r3, #5
 801093e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010942:	f013 031f 	ands.w	r3, r3, #31
 8010946:	b087      	sub	sp, #28
 8010948:	bf18      	it	ne
 801094a:	3604      	addne	r6, #4
 801094c:	2500      	movs	r5, #0
 801094e:	1f37      	subs	r7, r6, #4
 8010950:	4682      	mov	sl, r0
 8010952:	4690      	mov	r8, r2
 8010954:	9301      	str	r3, [sp, #4]
 8010956:	f846 5c04 	str.w	r5, [r6, #-4]
 801095a:	46b9      	mov	r9, r7
 801095c:	463c      	mov	r4, r7
 801095e:	9502      	str	r5, [sp, #8]
 8010960:	46ab      	mov	fp, r5
 8010962:	784a      	ldrb	r2, [r1, #1]
 8010964:	1c4b      	adds	r3, r1, #1
 8010966:	9303      	str	r3, [sp, #12]
 8010968:	b342      	cbz	r2, 80109bc <__hexnan+0x88>
 801096a:	4610      	mov	r0, r2
 801096c:	9105      	str	r1, [sp, #20]
 801096e:	9204      	str	r2, [sp, #16]
 8010970:	f7ff fd5f 	bl	8010432 <__hexdig_fun>
 8010974:	2800      	cmp	r0, #0
 8010976:	d14f      	bne.n	8010a18 <__hexnan+0xe4>
 8010978:	9a04      	ldr	r2, [sp, #16]
 801097a:	9905      	ldr	r1, [sp, #20]
 801097c:	2a20      	cmp	r2, #32
 801097e:	d818      	bhi.n	80109b2 <__hexnan+0x7e>
 8010980:	9b02      	ldr	r3, [sp, #8]
 8010982:	459b      	cmp	fp, r3
 8010984:	dd13      	ble.n	80109ae <__hexnan+0x7a>
 8010986:	454c      	cmp	r4, r9
 8010988:	d206      	bcs.n	8010998 <__hexnan+0x64>
 801098a:	2d07      	cmp	r5, #7
 801098c:	dc04      	bgt.n	8010998 <__hexnan+0x64>
 801098e:	462a      	mov	r2, r5
 8010990:	4649      	mov	r1, r9
 8010992:	4620      	mov	r0, r4
 8010994:	f7ff ffa8 	bl	80108e8 <L_shift>
 8010998:	4544      	cmp	r4, r8
 801099a:	d950      	bls.n	8010a3e <__hexnan+0x10a>
 801099c:	2300      	movs	r3, #0
 801099e:	f1a4 0904 	sub.w	r9, r4, #4
 80109a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80109a6:	f8cd b008 	str.w	fp, [sp, #8]
 80109aa:	464c      	mov	r4, r9
 80109ac:	461d      	mov	r5, r3
 80109ae:	9903      	ldr	r1, [sp, #12]
 80109b0:	e7d7      	b.n	8010962 <__hexnan+0x2e>
 80109b2:	2a29      	cmp	r2, #41	; 0x29
 80109b4:	d156      	bne.n	8010a64 <__hexnan+0x130>
 80109b6:	3102      	adds	r1, #2
 80109b8:	f8ca 1000 	str.w	r1, [sl]
 80109bc:	f1bb 0f00 	cmp.w	fp, #0
 80109c0:	d050      	beq.n	8010a64 <__hexnan+0x130>
 80109c2:	454c      	cmp	r4, r9
 80109c4:	d206      	bcs.n	80109d4 <__hexnan+0xa0>
 80109c6:	2d07      	cmp	r5, #7
 80109c8:	dc04      	bgt.n	80109d4 <__hexnan+0xa0>
 80109ca:	462a      	mov	r2, r5
 80109cc:	4649      	mov	r1, r9
 80109ce:	4620      	mov	r0, r4
 80109d0:	f7ff ff8a 	bl	80108e8 <L_shift>
 80109d4:	4544      	cmp	r4, r8
 80109d6:	d934      	bls.n	8010a42 <__hexnan+0x10e>
 80109d8:	f1a8 0204 	sub.w	r2, r8, #4
 80109dc:	4623      	mov	r3, r4
 80109de:	f853 1b04 	ldr.w	r1, [r3], #4
 80109e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80109e6:	429f      	cmp	r7, r3
 80109e8:	d2f9      	bcs.n	80109de <__hexnan+0xaa>
 80109ea:	1b3b      	subs	r3, r7, r4
 80109ec:	f023 0303 	bic.w	r3, r3, #3
 80109f0:	3304      	adds	r3, #4
 80109f2:	3401      	adds	r4, #1
 80109f4:	3e03      	subs	r6, #3
 80109f6:	42b4      	cmp	r4, r6
 80109f8:	bf88      	it	hi
 80109fa:	2304      	movhi	r3, #4
 80109fc:	4443      	add	r3, r8
 80109fe:	2200      	movs	r2, #0
 8010a00:	f843 2b04 	str.w	r2, [r3], #4
 8010a04:	429f      	cmp	r7, r3
 8010a06:	d2fb      	bcs.n	8010a00 <__hexnan+0xcc>
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	b91b      	cbnz	r3, 8010a14 <__hexnan+0xe0>
 8010a0c:	4547      	cmp	r7, r8
 8010a0e:	d127      	bne.n	8010a60 <__hexnan+0x12c>
 8010a10:	2301      	movs	r3, #1
 8010a12:	603b      	str	r3, [r7, #0]
 8010a14:	2005      	movs	r0, #5
 8010a16:	e026      	b.n	8010a66 <__hexnan+0x132>
 8010a18:	3501      	adds	r5, #1
 8010a1a:	2d08      	cmp	r5, #8
 8010a1c:	f10b 0b01 	add.w	fp, fp, #1
 8010a20:	dd06      	ble.n	8010a30 <__hexnan+0xfc>
 8010a22:	4544      	cmp	r4, r8
 8010a24:	d9c3      	bls.n	80109ae <__hexnan+0x7a>
 8010a26:	2300      	movs	r3, #0
 8010a28:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a2c:	2501      	movs	r5, #1
 8010a2e:	3c04      	subs	r4, #4
 8010a30:	6822      	ldr	r2, [r4, #0]
 8010a32:	f000 000f 	and.w	r0, r0, #15
 8010a36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010a3a:	6022      	str	r2, [r4, #0]
 8010a3c:	e7b7      	b.n	80109ae <__hexnan+0x7a>
 8010a3e:	2508      	movs	r5, #8
 8010a40:	e7b5      	b.n	80109ae <__hexnan+0x7a>
 8010a42:	9b01      	ldr	r3, [sp, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d0df      	beq.n	8010a08 <__hexnan+0xd4>
 8010a48:	f04f 32ff 	mov.w	r2, #4294967295
 8010a4c:	f1c3 0320 	rsb	r3, r3, #32
 8010a50:	fa22 f303 	lsr.w	r3, r2, r3
 8010a54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010a58:	401a      	ands	r2, r3
 8010a5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010a5e:	e7d3      	b.n	8010a08 <__hexnan+0xd4>
 8010a60:	3f04      	subs	r7, #4
 8010a62:	e7d1      	b.n	8010a08 <__hexnan+0xd4>
 8010a64:	2004      	movs	r0, #4
 8010a66:	b007      	add	sp, #28
 8010a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a6c <_localeconv_r>:
 8010a6c:	4800      	ldr	r0, [pc, #0]	; (8010a70 <_localeconv_r+0x4>)
 8010a6e:	4770      	bx	lr
 8010a70:	20000188 	.word	0x20000188

08010a74 <__retarget_lock_init_recursive>:
 8010a74:	4770      	bx	lr

08010a76 <__retarget_lock_acquire_recursive>:
 8010a76:	4770      	bx	lr

08010a78 <__retarget_lock_release_recursive>:
 8010a78:	4770      	bx	lr

08010a7a <__swhatbuf_r>:
 8010a7a:	b570      	push	{r4, r5, r6, lr}
 8010a7c:	460e      	mov	r6, r1
 8010a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a82:	2900      	cmp	r1, #0
 8010a84:	b096      	sub	sp, #88	; 0x58
 8010a86:	4614      	mov	r4, r2
 8010a88:	461d      	mov	r5, r3
 8010a8a:	da07      	bge.n	8010a9c <__swhatbuf_r+0x22>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	602b      	str	r3, [r5, #0]
 8010a90:	89b3      	ldrh	r3, [r6, #12]
 8010a92:	061a      	lsls	r2, r3, #24
 8010a94:	d410      	bmi.n	8010ab8 <__swhatbuf_r+0x3e>
 8010a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a9a:	e00e      	b.n	8010aba <__swhatbuf_r+0x40>
 8010a9c:	466a      	mov	r2, sp
 8010a9e:	f001 f807 	bl	8011ab0 <_fstat_r>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	dbf2      	blt.n	8010a8c <__swhatbuf_r+0x12>
 8010aa6:	9a01      	ldr	r2, [sp, #4]
 8010aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ab0:	425a      	negs	r2, r3
 8010ab2:	415a      	adcs	r2, r3
 8010ab4:	602a      	str	r2, [r5, #0]
 8010ab6:	e7ee      	b.n	8010a96 <__swhatbuf_r+0x1c>
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	2000      	movs	r0, #0
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	b016      	add	sp, #88	; 0x58
 8010ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ac4 <__smakebuf_r>:
 8010ac4:	898b      	ldrh	r3, [r1, #12]
 8010ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ac8:	079d      	lsls	r5, r3, #30
 8010aca:	4606      	mov	r6, r0
 8010acc:	460c      	mov	r4, r1
 8010ace:	d507      	bpl.n	8010ae0 <__smakebuf_r+0x1c>
 8010ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	6123      	str	r3, [r4, #16]
 8010ad8:	2301      	movs	r3, #1
 8010ada:	6163      	str	r3, [r4, #20]
 8010adc:	b002      	add	sp, #8
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	ab01      	add	r3, sp, #4
 8010ae2:	466a      	mov	r2, sp
 8010ae4:	f7ff ffc9 	bl	8010a7a <__swhatbuf_r>
 8010ae8:	9900      	ldr	r1, [sp, #0]
 8010aea:	4605      	mov	r5, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f000 fd5d 	bl	80115ac <_malloc_r>
 8010af2:	b948      	cbnz	r0, 8010b08 <__smakebuf_r+0x44>
 8010af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af8:	059a      	lsls	r2, r3, #22
 8010afa:	d4ef      	bmi.n	8010adc <__smakebuf_r+0x18>
 8010afc:	f023 0303 	bic.w	r3, r3, #3
 8010b00:	f043 0302 	orr.w	r3, r3, #2
 8010b04:	81a3      	strh	r3, [r4, #12]
 8010b06:	e7e3      	b.n	8010ad0 <__smakebuf_r+0xc>
 8010b08:	4b0d      	ldr	r3, [pc, #52]	; (8010b40 <__smakebuf_r+0x7c>)
 8010b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b14:	81a3      	strh	r3, [r4, #12]
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	6163      	str	r3, [r4, #20]
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	6120      	str	r0, [r4, #16]
 8010b1e:	b15b      	cbz	r3, 8010b38 <__smakebuf_r+0x74>
 8010b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b24:	4630      	mov	r0, r6
 8010b26:	f000 ffd5 	bl	8011ad4 <_isatty_r>
 8010b2a:	b128      	cbz	r0, 8010b38 <__smakebuf_r+0x74>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f023 0303 	bic.w	r3, r3, #3
 8010b32:	f043 0301 	orr.w	r3, r3, #1
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	89a0      	ldrh	r0, [r4, #12]
 8010b3a:	4305      	orrs	r5, r0
 8010b3c:	81a5      	strh	r5, [r4, #12]
 8010b3e:	e7cd      	b.n	8010adc <__smakebuf_r+0x18>
 8010b40:	080101ed 	.word	0x080101ed

08010b44 <malloc>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	; (8010b50 <malloc+0xc>)
 8010b46:	4601      	mov	r1, r0
 8010b48:	6818      	ldr	r0, [r3, #0]
 8010b4a:	f000 bd2f 	b.w	80115ac <_malloc_r>
 8010b4e:	bf00      	nop
 8010b50:	20000030 	.word	0x20000030

08010b54 <__ascii_mbtowc>:
 8010b54:	b082      	sub	sp, #8
 8010b56:	b901      	cbnz	r1, 8010b5a <__ascii_mbtowc+0x6>
 8010b58:	a901      	add	r1, sp, #4
 8010b5a:	b142      	cbz	r2, 8010b6e <__ascii_mbtowc+0x1a>
 8010b5c:	b14b      	cbz	r3, 8010b72 <__ascii_mbtowc+0x1e>
 8010b5e:	7813      	ldrb	r3, [r2, #0]
 8010b60:	600b      	str	r3, [r1, #0]
 8010b62:	7812      	ldrb	r2, [r2, #0]
 8010b64:	1e10      	subs	r0, r2, #0
 8010b66:	bf18      	it	ne
 8010b68:	2001      	movne	r0, #1
 8010b6a:	b002      	add	sp, #8
 8010b6c:	4770      	bx	lr
 8010b6e:	4610      	mov	r0, r2
 8010b70:	e7fb      	b.n	8010b6a <__ascii_mbtowc+0x16>
 8010b72:	f06f 0001 	mvn.w	r0, #1
 8010b76:	e7f8      	b.n	8010b6a <__ascii_mbtowc+0x16>

08010b78 <_Balloc>:
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	b976      	cbnz	r6, 8010ba0 <_Balloc+0x28>
 8010b82:	2010      	movs	r0, #16
 8010b84:	f7ff ffde 	bl	8010b44 <malloc>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8010b8c:	b920      	cbnz	r0, 8010b98 <_Balloc+0x20>
 8010b8e:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <_Balloc+0x78>)
 8010b90:	4818      	ldr	r0, [pc, #96]	; (8010bf4 <_Balloc+0x7c>)
 8010b92:	2166      	movs	r1, #102	; 0x66
 8010b94:	f000 ff4c 	bl	8011a30 <__assert_func>
 8010b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b9c:	6006      	str	r6, [r0, #0]
 8010b9e:	60c6      	str	r6, [r0, #12]
 8010ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010ba2:	68f3      	ldr	r3, [r6, #12]
 8010ba4:	b183      	cbz	r3, 8010bc8 <_Balloc+0x50>
 8010ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bae:	b9b8      	cbnz	r0, 8010be0 <_Balloc+0x68>
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8010bb6:	1d72      	adds	r2, r6, #5
 8010bb8:	0092      	lsls	r2, r2, #2
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 fc97 	bl	80114ee <_calloc_r>
 8010bc0:	b160      	cbz	r0, 8010bdc <_Balloc+0x64>
 8010bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bc6:	e00e      	b.n	8010be6 <_Balloc+0x6e>
 8010bc8:	2221      	movs	r2, #33	; 0x21
 8010bca:	2104      	movs	r1, #4
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f000 fc8e 	bl	80114ee <_calloc_r>
 8010bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bd4:	60f0      	str	r0, [r6, #12]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d1e4      	bne.n	8010ba6 <_Balloc+0x2e>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	bd70      	pop	{r4, r5, r6, pc}
 8010be0:	6802      	ldr	r2, [r0, #0]
 8010be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010be6:	2300      	movs	r3, #0
 8010be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bec:	e7f7      	b.n	8010bde <_Balloc+0x66>
 8010bee:	bf00      	nop
 8010bf0:	0801355e 	.word	0x0801355e
 8010bf4:	080136c8 	.word	0x080136c8

08010bf8 <_Bfree>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	b976      	cbnz	r6, 8010c20 <_Bfree+0x28>
 8010c02:	2010      	movs	r0, #16
 8010c04:	f7ff ff9e 	bl	8010b44 <malloc>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8010c0c:	b920      	cbnz	r0, 8010c18 <_Bfree+0x20>
 8010c0e:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <_Bfree+0x3c>)
 8010c10:	4809      	ldr	r0, [pc, #36]	; (8010c38 <_Bfree+0x40>)
 8010c12:	218a      	movs	r1, #138	; 0x8a
 8010c14:	f000 ff0c 	bl	8011a30 <__assert_func>
 8010c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c1c:	6006      	str	r6, [r0, #0]
 8010c1e:	60c6      	str	r6, [r0, #12]
 8010c20:	b13c      	cbz	r4, 8010c32 <_Bfree+0x3a>
 8010c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c24:	6862      	ldr	r2, [r4, #4]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c2c:	6021      	str	r1, [r4, #0]
 8010c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
 8010c34:	0801355e 	.word	0x0801355e
 8010c38:	080136c8 	.word	0x080136c8

08010c3c <__multadd>:
 8010c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c40:	690e      	ldr	r6, [r1, #16]
 8010c42:	4607      	mov	r7, r0
 8010c44:	4698      	mov	r8, r3
 8010c46:	460c      	mov	r4, r1
 8010c48:	f101 0014 	add.w	r0, r1, #20
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	6805      	ldr	r5, [r0, #0]
 8010c50:	b2a9      	uxth	r1, r5
 8010c52:	fb02 8101 	mla	r1, r2, r1, r8
 8010c56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010c5a:	0c2d      	lsrs	r5, r5, #16
 8010c5c:	fb02 c505 	mla	r5, r2, r5, ip
 8010c60:	b289      	uxth	r1, r1
 8010c62:	3301      	adds	r3, #1
 8010c64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010c68:	429e      	cmp	r6, r3
 8010c6a:	f840 1b04 	str.w	r1, [r0], #4
 8010c6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010c72:	dcec      	bgt.n	8010c4e <__multadd+0x12>
 8010c74:	f1b8 0f00 	cmp.w	r8, #0
 8010c78:	d022      	beq.n	8010cc0 <__multadd+0x84>
 8010c7a:	68a3      	ldr	r3, [r4, #8]
 8010c7c:	42b3      	cmp	r3, r6
 8010c7e:	dc19      	bgt.n	8010cb4 <__multadd+0x78>
 8010c80:	6861      	ldr	r1, [r4, #4]
 8010c82:	4638      	mov	r0, r7
 8010c84:	3101      	adds	r1, #1
 8010c86:	f7ff ff77 	bl	8010b78 <_Balloc>
 8010c8a:	4605      	mov	r5, r0
 8010c8c:	b928      	cbnz	r0, 8010c9a <__multadd+0x5e>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	4b0d      	ldr	r3, [pc, #52]	; (8010cc8 <__multadd+0x8c>)
 8010c92:	480e      	ldr	r0, [pc, #56]	; (8010ccc <__multadd+0x90>)
 8010c94:	21b5      	movs	r1, #181	; 0xb5
 8010c96:	f000 fecb 	bl	8011a30 <__assert_func>
 8010c9a:	6922      	ldr	r2, [r4, #16]
 8010c9c:	3202      	adds	r2, #2
 8010c9e:	f104 010c 	add.w	r1, r4, #12
 8010ca2:	0092      	lsls	r2, r2, #2
 8010ca4:	300c      	adds	r0, #12
 8010ca6:	f7fc feb5 	bl	800da14 <memcpy>
 8010caa:	4621      	mov	r1, r4
 8010cac:	4638      	mov	r0, r7
 8010cae:	f7ff ffa3 	bl	8010bf8 <_Bfree>
 8010cb2:	462c      	mov	r4, r5
 8010cb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010cb8:	3601      	adds	r6, #1
 8010cba:	f8c3 8014 	str.w	r8, [r3, #20]
 8010cbe:	6126      	str	r6, [r4, #16]
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc6:	bf00      	nop
 8010cc8:	080135d4 	.word	0x080135d4
 8010ccc:	080136c8 	.word	0x080136c8

08010cd0 <__s2b>:
 8010cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cd4:	460c      	mov	r4, r1
 8010cd6:	4615      	mov	r5, r2
 8010cd8:	461f      	mov	r7, r3
 8010cda:	2209      	movs	r2, #9
 8010cdc:	3308      	adds	r3, #8
 8010cde:	4606      	mov	r6, r0
 8010ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	db09      	blt.n	8010d00 <__s2b+0x30>
 8010cec:	4630      	mov	r0, r6
 8010cee:	f7ff ff43 	bl	8010b78 <_Balloc>
 8010cf2:	b940      	cbnz	r0, 8010d06 <__s2b+0x36>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	4b19      	ldr	r3, [pc, #100]	; (8010d5c <__s2b+0x8c>)
 8010cf8:	4819      	ldr	r0, [pc, #100]	; (8010d60 <__s2b+0x90>)
 8010cfa:	21ce      	movs	r1, #206	; 0xce
 8010cfc:	f000 fe98 	bl	8011a30 <__assert_func>
 8010d00:	0052      	lsls	r2, r2, #1
 8010d02:	3101      	adds	r1, #1
 8010d04:	e7f0      	b.n	8010ce8 <__s2b+0x18>
 8010d06:	9b08      	ldr	r3, [sp, #32]
 8010d08:	6143      	str	r3, [r0, #20]
 8010d0a:	2d09      	cmp	r5, #9
 8010d0c:	f04f 0301 	mov.w	r3, #1
 8010d10:	6103      	str	r3, [r0, #16]
 8010d12:	dd16      	ble.n	8010d42 <__s2b+0x72>
 8010d14:	f104 0909 	add.w	r9, r4, #9
 8010d18:	46c8      	mov	r8, r9
 8010d1a:	442c      	add	r4, r5
 8010d1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d20:	4601      	mov	r1, r0
 8010d22:	3b30      	subs	r3, #48	; 0x30
 8010d24:	220a      	movs	r2, #10
 8010d26:	4630      	mov	r0, r6
 8010d28:	f7ff ff88 	bl	8010c3c <__multadd>
 8010d2c:	45a0      	cmp	r8, r4
 8010d2e:	d1f5      	bne.n	8010d1c <__s2b+0x4c>
 8010d30:	f1a5 0408 	sub.w	r4, r5, #8
 8010d34:	444c      	add	r4, r9
 8010d36:	1b2d      	subs	r5, r5, r4
 8010d38:	1963      	adds	r3, r4, r5
 8010d3a:	42bb      	cmp	r3, r7
 8010d3c:	db04      	blt.n	8010d48 <__s2b+0x78>
 8010d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d42:	340a      	adds	r4, #10
 8010d44:	2509      	movs	r5, #9
 8010d46:	e7f6      	b.n	8010d36 <__s2b+0x66>
 8010d48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d4c:	4601      	mov	r1, r0
 8010d4e:	3b30      	subs	r3, #48	; 0x30
 8010d50:	220a      	movs	r2, #10
 8010d52:	4630      	mov	r0, r6
 8010d54:	f7ff ff72 	bl	8010c3c <__multadd>
 8010d58:	e7ee      	b.n	8010d38 <__s2b+0x68>
 8010d5a:	bf00      	nop
 8010d5c:	080135d4 	.word	0x080135d4
 8010d60:	080136c8 	.word	0x080136c8

08010d64 <__hi0bits>:
 8010d64:	0c03      	lsrs	r3, r0, #16
 8010d66:	041b      	lsls	r3, r3, #16
 8010d68:	b9d3      	cbnz	r3, 8010da0 <__hi0bits+0x3c>
 8010d6a:	0400      	lsls	r0, r0, #16
 8010d6c:	2310      	movs	r3, #16
 8010d6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010d72:	bf04      	itt	eq
 8010d74:	0200      	lsleq	r0, r0, #8
 8010d76:	3308      	addeq	r3, #8
 8010d78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010d7c:	bf04      	itt	eq
 8010d7e:	0100      	lsleq	r0, r0, #4
 8010d80:	3304      	addeq	r3, #4
 8010d82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010d86:	bf04      	itt	eq
 8010d88:	0080      	lsleq	r0, r0, #2
 8010d8a:	3302      	addeq	r3, #2
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	db05      	blt.n	8010d9c <__hi0bits+0x38>
 8010d90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d94:	f103 0301 	add.w	r3, r3, #1
 8010d98:	bf08      	it	eq
 8010d9a:	2320      	moveq	r3, #32
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	4770      	bx	lr
 8010da0:	2300      	movs	r3, #0
 8010da2:	e7e4      	b.n	8010d6e <__hi0bits+0xa>

08010da4 <__lo0bits>:
 8010da4:	6803      	ldr	r3, [r0, #0]
 8010da6:	f013 0207 	ands.w	r2, r3, #7
 8010daa:	4601      	mov	r1, r0
 8010dac:	d00b      	beq.n	8010dc6 <__lo0bits+0x22>
 8010dae:	07da      	lsls	r2, r3, #31
 8010db0:	d424      	bmi.n	8010dfc <__lo0bits+0x58>
 8010db2:	0798      	lsls	r0, r3, #30
 8010db4:	bf49      	itett	mi
 8010db6:	085b      	lsrmi	r3, r3, #1
 8010db8:	089b      	lsrpl	r3, r3, #2
 8010dba:	2001      	movmi	r0, #1
 8010dbc:	600b      	strmi	r3, [r1, #0]
 8010dbe:	bf5c      	itt	pl
 8010dc0:	600b      	strpl	r3, [r1, #0]
 8010dc2:	2002      	movpl	r0, #2
 8010dc4:	4770      	bx	lr
 8010dc6:	b298      	uxth	r0, r3
 8010dc8:	b9b0      	cbnz	r0, 8010df8 <__lo0bits+0x54>
 8010dca:	0c1b      	lsrs	r3, r3, #16
 8010dcc:	2010      	movs	r0, #16
 8010dce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010dd2:	bf04      	itt	eq
 8010dd4:	0a1b      	lsreq	r3, r3, #8
 8010dd6:	3008      	addeq	r0, #8
 8010dd8:	071a      	lsls	r2, r3, #28
 8010dda:	bf04      	itt	eq
 8010ddc:	091b      	lsreq	r3, r3, #4
 8010dde:	3004      	addeq	r0, #4
 8010de0:	079a      	lsls	r2, r3, #30
 8010de2:	bf04      	itt	eq
 8010de4:	089b      	lsreq	r3, r3, #2
 8010de6:	3002      	addeq	r0, #2
 8010de8:	07da      	lsls	r2, r3, #31
 8010dea:	d403      	bmi.n	8010df4 <__lo0bits+0x50>
 8010dec:	085b      	lsrs	r3, r3, #1
 8010dee:	f100 0001 	add.w	r0, r0, #1
 8010df2:	d005      	beq.n	8010e00 <__lo0bits+0x5c>
 8010df4:	600b      	str	r3, [r1, #0]
 8010df6:	4770      	bx	lr
 8010df8:	4610      	mov	r0, r2
 8010dfa:	e7e8      	b.n	8010dce <__lo0bits+0x2a>
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	4770      	bx	lr
 8010e00:	2020      	movs	r0, #32
 8010e02:	4770      	bx	lr

08010e04 <__i2b>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	460c      	mov	r4, r1
 8010e08:	2101      	movs	r1, #1
 8010e0a:	f7ff feb5 	bl	8010b78 <_Balloc>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	b928      	cbnz	r0, 8010e1e <__i2b+0x1a>
 8010e12:	4b05      	ldr	r3, [pc, #20]	; (8010e28 <__i2b+0x24>)
 8010e14:	4805      	ldr	r0, [pc, #20]	; (8010e2c <__i2b+0x28>)
 8010e16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010e1a:	f000 fe09 	bl	8011a30 <__assert_func>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	6144      	str	r4, [r0, #20]
 8010e22:	6103      	str	r3, [r0, #16]
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	bf00      	nop
 8010e28:	080135d4 	.word	0x080135d4
 8010e2c:	080136c8 	.word	0x080136c8

08010e30 <__multiply>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	4614      	mov	r4, r2
 8010e36:	690a      	ldr	r2, [r1, #16]
 8010e38:	6923      	ldr	r3, [r4, #16]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	bfb8      	it	lt
 8010e3e:	460b      	movlt	r3, r1
 8010e40:	460d      	mov	r5, r1
 8010e42:	bfbc      	itt	lt
 8010e44:	4625      	movlt	r5, r4
 8010e46:	461c      	movlt	r4, r3
 8010e48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010e4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010e50:	68ab      	ldr	r3, [r5, #8]
 8010e52:	6869      	ldr	r1, [r5, #4]
 8010e54:	eb0a 0709 	add.w	r7, sl, r9
 8010e58:	42bb      	cmp	r3, r7
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	bfb8      	it	lt
 8010e5e:	3101      	addlt	r1, #1
 8010e60:	f7ff fe8a 	bl	8010b78 <_Balloc>
 8010e64:	b930      	cbnz	r0, 8010e74 <__multiply+0x44>
 8010e66:	4602      	mov	r2, r0
 8010e68:	4b42      	ldr	r3, [pc, #264]	; (8010f74 <__multiply+0x144>)
 8010e6a:	4843      	ldr	r0, [pc, #268]	; (8010f78 <__multiply+0x148>)
 8010e6c:	f240 115d 	movw	r1, #349	; 0x15d
 8010e70:	f000 fdde 	bl	8011a30 <__assert_func>
 8010e74:	f100 0614 	add.w	r6, r0, #20
 8010e78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010e7c:	4633      	mov	r3, r6
 8010e7e:	2200      	movs	r2, #0
 8010e80:	4543      	cmp	r3, r8
 8010e82:	d31e      	bcc.n	8010ec2 <__multiply+0x92>
 8010e84:	f105 0c14 	add.w	ip, r5, #20
 8010e88:	f104 0314 	add.w	r3, r4, #20
 8010e8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010e90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010e94:	9202      	str	r2, [sp, #8]
 8010e96:	ebac 0205 	sub.w	r2, ip, r5
 8010e9a:	3a15      	subs	r2, #21
 8010e9c:	f022 0203 	bic.w	r2, r2, #3
 8010ea0:	3204      	adds	r2, #4
 8010ea2:	f105 0115 	add.w	r1, r5, #21
 8010ea6:	458c      	cmp	ip, r1
 8010ea8:	bf38      	it	cc
 8010eaa:	2204      	movcc	r2, #4
 8010eac:	9201      	str	r2, [sp, #4]
 8010eae:	9a02      	ldr	r2, [sp, #8]
 8010eb0:	9303      	str	r3, [sp, #12]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d808      	bhi.n	8010ec8 <__multiply+0x98>
 8010eb6:	2f00      	cmp	r7, #0
 8010eb8:	dc55      	bgt.n	8010f66 <__multiply+0x136>
 8010eba:	6107      	str	r7, [r0, #16]
 8010ebc:	b005      	add	sp, #20
 8010ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec2:	f843 2b04 	str.w	r2, [r3], #4
 8010ec6:	e7db      	b.n	8010e80 <__multiply+0x50>
 8010ec8:	f8b3 a000 	ldrh.w	sl, [r3]
 8010ecc:	f1ba 0f00 	cmp.w	sl, #0
 8010ed0:	d020      	beq.n	8010f14 <__multiply+0xe4>
 8010ed2:	f105 0e14 	add.w	lr, r5, #20
 8010ed6:	46b1      	mov	r9, r6
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010ede:	f8d9 b000 	ldr.w	fp, [r9]
 8010ee2:	b2a1      	uxth	r1, r4
 8010ee4:	fa1f fb8b 	uxth.w	fp, fp
 8010ee8:	fb0a b101 	mla	r1, sl, r1, fp
 8010eec:	4411      	add	r1, r2
 8010eee:	f8d9 2000 	ldr.w	r2, [r9]
 8010ef2:	0c24      	lsrs	r4, r4, #16
 8010ef4:	0c12      	lsrs	r2, r2, #16
 8010ef6:	fb0a 2404 	mla	r4, sl, r4, r2
 8010efa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010efe:	b289      	uxth	r1, r1
 8010f00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010f04:	45f4      	cmp	ip, lr
 8010f06:	f849 1b04 	str.w	r1, [r9], #4
 8010f0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010f0e:	d8e4      	bhi.n	8010eda <__multiply+0xaa>
 8010f10:	9901      	ldr	r1, [sp, #4]
 8010f12:	5072      	str	r2, [r6, r1]
 8010f14:	9a03      	ldr	r2, [sp, #12]
 8010f16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	f1b9 0f00 	cmp.w	r9, #0
 8010f20:	d01f      	beq.n	8010f62 <__multiply+0x132>
 8010f22:	6834      	ldr	r4, [r6, #0]
 8010f24:	f105 0114 	add.w	r1, r5, #20
 8010f28:	46b6      	mov	lr, r6
 8010f2a:	f04f 0a00 	mov.w	sl, #0
 8010f2e:	880a      	ldrh	r2, [r1, #0]
 8010f30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010f34:	fb09 b202 	mla	r2, r9, r2, fp
 8010f38:	4492      	add	sl, r2
 8010f3a:	b2a4      	uxth	r4, r4
 8010f3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010f40:	f84e 4b04 	str.w	r4, [lr], #4
 8010f44:	f851 4b04 	ldr.w	r4, [r1], #4
 8010f48:	f8be 2000 	ldrh.w	r2, [lr]
 8010f4c:	0c24      	lsrs	r4, r4, #16
 8010f4e:	fb09 2404 	mla	r4, r9, r4, r2
 8010f52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010f56:	458c      	cmp	ip, r1
 8010f58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f5c:	d8e7      	bhi.n	8010f2e <__multiply+0xfe>
 8010f5e:	9a01      	ldr	r2, [sp, #4]
 8010f60:	50b4      	str	r4, [r6, r2]
 8010f62:	3604      	adds	r6, #4
 8010f64:	e7a3      	b.n	8010eae <__multiply+0x7e>
 8010f66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1a5      	bne.n	8010eba <__multiply+0x8a>
 8010f6e:	3f01      	subs	r7, #1
 8010f70:	e7a1      	b.n	8010eb6 <__multiply+0x86>
 8010f72:	bf00      	nop
 8010f74:	080135d4 	.word	0x080135d4
 8010f78:	080136c8 	.word	0x080136c8

08010f7c <__pow5mult>:
 8010f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f80:	4615      	mov	r5, r2
 8010f82:	f012 0203 	ands.w	r2, r2, #3
 8010f86:	4606      	mov	r6, r0
 8010f88:	460f      	mov	r7, r1
 8010f8a:	d007      	beq.n	8010f9c <__pow5mult+0x20>
 8010f8c:	4c25      	ldr	r4, [pc, #148]	; (8011024 <__pow5mult+0xa8>)
 8010f8e:	3a01      	subs	r2, #1
 8010f90:	2300      	movs	r3, #0
 8010f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f96:	f7ff fe51 	bl	8010c3c <__multadd>
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	10ad      	asrs	r5, r5, #2
 8010f9e:	d03d      	beq.n	801101c <__pow5mult+0xa0>
 8010fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010fa2:	b97c      	cbnz	r4, 8010fc4 <__pow5mult+0x48>
 8010fa4:	2010      	movs	r0, #16
 8010fa6:	f7ff fdcd 	bl	8010b44 <malloc>
 8010faa:	4602      	mov	r2, r0
 8010fac:	6270      	str	r0, [r6, #36]	; 0x24
 8010fae:	b928      	cbnz	r0, 8010fbc <__pow5mult+0x40>
 8010fb0:	4b1d      	ldr	r3, [pc, #116]	; (8011028 <__pow5mult+0xac>)
 8010fb2:	481e      	ldr	r0, [pc, #120]	; (801102c <__pow5mult+0xb0>)
 8010fb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010fb8:	f000 fd3a 	bl	8011a30 <__assert_func>
 8010fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fc0:	6004      	str	r4, [r0, #0]
 8010fc2:	60c4      	str	r4, [r0, #12]
 8010fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fcc:	b94c      	cbnz	r4, 8010fe2 <__pow5mult+0x66>
 8010fce:	f240 2171 	movw	r1, #625	; 0x271
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	f7ff ff16 	bl	8010e04 <__i2b>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fde:	4604      	mov	r4, r0
 8010fe0:	6003      	str	r3, [r0, #0]
 8010fe2:	f04f 0900 	mov.w	r9, #0
 8010fe6:	07eb      	lsls	r3, r5, #31
 8010fe8:	d50a      	bpl.n	8011000 <__pow5mult+0x84>
 8010fea:	4639      	mov	r1, r7
 8010fec:	4622      	mov	r2, r4
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f7ff ff1e 	bl	8010e30 <__multiply>
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	4680      	mov	r8, r0
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ff fdfd 	bl	8010bf8 <_Bfree>
 8010ffe:	4647      	mov	r7, r8
 8011000:	106d      	asrs	r5, r5, #1
 8011002:	d00b      	beq.n	801101c <__pow5mult+0xa0>
 8011004:	6820      	ldr	r0, [r4, #0]
 8011006:	b938      	cbnz	r0, 8011018 <__pow5mult+0x9c>
 8011008:	4622      	mov	r2, r4
 801100a:	4621      	mov	r1, r4
 801100c:	4630      	mov	r0, r6
 801100e:	f7ff ff0f 	bl	8010e30 <__multiply>
 8011012:	6020      	str	r0, [r4, #0]
 8011014:	f8c0 9000 	str.w	r9, [r0]
 8011018:	4604      	mov	r4, r0
 801101a:	e7e4      	b.n	8010fe6 <__pow5mult+0x6a>
 801101c:	4638      	mov	r0, r7
 801101e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011022:	bf00      	nop
 8011024:	08013818 	.word	0x08013818
 8011028:	0801355e 	.word	0x0801355e
 801102c:	080136c8 	.word	0x080136c8

08011030 <__lshift>:
 8011030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011034:	460c      	mov	r4, r1
 8011036:	6849      	ldr	r1, [r1, #4]
 8011038:	6923      	ldr	r3, [r4, #16]
 801103a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801103e:	68a3      	ldr	r3, [r4, #8]
 8011040:	4607      	mov	r7, r0
 8011042:	4691      	mov	r9, r2
 8011044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011048:	f108 0601 	add.w	r6, r8, #1
 801104c:	42b3      	cmp	r3, r6
 801104e:	db0b      	blt.n	8011068 <__lshift+0x38>
 8011050:	4638      	mov	r0, r7
 8011052:	f7ff fd91 	bl	8010b78 <_Balloc>
 8011056:	4605      	mov	r5, r0
 8011058:	b948      	cbnz	r0, 801106e <__lshift+0x3e>
 801105a:	4602      	mov	r2, r0
 801105c:	4b28      	ldr	r3, [pc, #160]	; (8011100 <__lshift+0xd0>)
 801105e:	4829      	ldr	r0, [pc, #164]	; (8011104 <__lshift+0xd4>)
 8011060:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011064:	f000 fce4 	bl	8011a30 <__assert_func>
 8011068:	3101      	adds	r1, #1
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	e7ee      	b.n	801104c <__lshift+0x1c>
 801106e:	2300      	movs	r3, #0
 8011070:	f100 0114 	add.w	r1, r0, #20
 8011074:	f100 0210 	add.w	r2, r0, #16
 8011078:	4618      	mov	r0, r3
 801107a:	4553      	cmp	r3, sl
 801107c:	db33      	blt.n	80110e6 <__lshift+0xb6>
 801107e:	6920      	ldr	r0, [r4, #16]
 8011080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011084:	f104 0314 	add.w	r3, r4, #20
 8011088:	f019 091f 	ands.w	r9, r9, #31
 801108c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011094:	d02b      	beq.n	80110ee <__lshift+0xbe>
 8011096:	f1c9 0e20 	rsb	lr, r9, #32
 801109a:	468a      	mov	sl, r1
 801109c:	2200      	movs	r2, #0
 801109e:	6818      	ldr	r0, [r3, #0]
 80110a0:	fa00 f009 	lsl.w	r0, r0, r9
 80110a4:	4302      	orrs	r2, r0
 80110a6:	f84a 2b04 	str.w	r2, [sl], #4
 80110aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ae:	459c      	cmp	ip, r3
 80110b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80110b4:	d8f3      	bhi.n	801109e <__lshift+0x6e>
 80110b6:	ebac 0304 	sub.w	r3, ip, r4
 80110ba:	3b15      	subs	r3, #21
 80110bc:	f023 0303 	bic.w	r3, r3, #3
 80110c0:	3304      	adds	r3, #4
 80110c2:	f104 0015 	add.w	r0, r4, #21
 80110c6:	4584      	cmp	ip, r0
 80110c8:	bf38      	it	cc
 80110ca:	2304      	movcc	r3, #4
 80110cc:	50ca      	str	r2, [r1, r3]
 80110ce:	b10a      	cbz	r2, 80110d4 <__lshift+0xa4>
 80110d0:	f108 0602 	add.w	r6, r8, #2
 80110d4:	3e01      	subs	r6, #1
 80110d6:	4638      	mov	r0, r7
 80110d8:	612e      	str	r6, [r5, #16]
 80110da:	4621      	mov	r1, r4
 80110dc:	f7ff fd8c 	bl	8010bf8 <_Bfree>
 80110e0:	4628      	mov	r0, r5
 80110e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80110ea:	3301      	adds	r3, #1
 80110ec:	e7c5      	b.n	801107a <__lshift+0x4a>
 80110ee:	3904      	subs	r1, #4
 80110f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80110f8:	459c      	cmp	ip, r3
 80110fa:	d8f9      	bhi.n	80110f0 <__lshift+0xc0>
 80110fc:	e7ea      	b.n	80110d4 <__lshift+0xa4>
 80110fe:	bf00      	nop
 8011100:	080135d4 	.word	0x080135d4
 8011104:	080136c8 	.word	0x080136c8

08011108 <__mcmp>:
 8011108:	b530      	push	{r4, r5, lr}
 801110a:	6902      	ldr	r2, [r0, #16]
 801110c:	690c      	ldr	r4, [r1, #16]
 801110e:	1b12      	subs	r2, r2, r4
 8011110:	d10e      	bne.n	8011130 <__mcmp+0x28>
 8011112:	f100 0314 	add.w	r3, r0, #20
 8011116:	3114      	adds	r1, #20
 8011118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801111c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011128:	42a5      	cmp	r5, r4
 801112a:	d003      	beq.n	8011134 <__mcmp+0x2c>
 801112c:	d305      	bcc.n	801113a <__mcmp+0x32>
 801112e:	2201      	movs	r2, #1
 8011130:	4610      	mov	r0, r2
 8011132:	bd30      	pop	{r4, r5, pc}
 8011134:	4283      	cmp	r3, r0
 8011136:	d3f3      	bcc.n	8011120 <__mcmp+0x18>
 8011138:	e7fa      	b.n	8011130 <__mcmp+0x28>
 801113a:	f04f 32ff 	mov.w	r2, #4294967295
 801113e:	e7f7      	b.n	8011130 <__mcmp+0x28>

08011140 <__mdiff>:
 8011140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	460c      	mov	r4, r1
 8011146:	4606      	mov	r6, r0
 8011148:	4611      	mov	r1, r2
 801114a:	4620      	mov	r0, r4
 801114c:	4617      	mov	r7, r2
 801114e:	f7ff ffdb 	bl	8011108 <__mcmp>
 8011152:	1e05      	subs	r5, r0, #0
 8011154:	d110      	bne.n	8011178 <__mdiff+0x38>
 8011156:	4629      	mov	r1, r5
 8011158:	4630      	mov	r0, r6
 801115a:	f7ff fd0d 	bl	8010b78 <_Balloc>
 801115e:	b930      	cbnz	r0, 801116e <__mdiff+0x2e>
 8011160:	4b39      	ldr	r3, [pc, #228]	; (8011248 <__mdiff+0x108>)
 8011162:	4602      	mov	r2, r0
 8011164:	f240 2132 	movw	r1, #562	; 0x232
 8011168:	4838      	ldr	r0, [pc, #224]	; (801124c <__mdiff+0x10c>)
 801116a:	f000 fc61 	bl	8011a30 <__assert_func>
 801116e:	2301      	movs	r3, #1
 8011170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011178:	bfa4      	itt	ge
 801117a:	463b      	movge	r3, r7
 801117c:	4627      	movge	r7, r4
 801117e:	4630      	mov	r0, r6
 8011180:	6879      	ldr	r1, [r7, #4]
 8011182:	bfa6      	itte	ge
 8011184:	461c      	movge	r4, r3
 8011186:	2500      	movge	r5, #0
 8011188:	2501      	movlt	r5, #1
 801118a:	f7ff fcf5 	bl	8010b78 <_Balloc>
 801118e:	b920      	cbnz	r0, 801119a <__mdiff+0x5a>
 8011190:	4b2d      	ldr	r3, [pc, #180]	; (8011248 <__mdiff+0x108>)
 8011192:	4602      	mov	r2, r0
 8011194:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011198:	e7e6      	b.n	8011168 <__mdiff+0x28>
 801119a:	693e      	ldr	r6, [r7, #16]
 801119c:	60c5      	str	r5, [r0, #12]
 801119e:	6925      	ldr	r5, [r4, #16]
 80111a0:	f107 0114 	add.w	r1, r7, #20
 80111a4:	f104 0914 	add.w	r9, r4, #20
 80111a8:	f100 0e14 	add.w	lr, r0, #20
 80111ac:	f107 0210 	add.w	r2, r7, #16
 80111b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80111b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80111b8:	46f2      	mov	sl, lr
 80111ba:	2700      	movs	r7, #0
 80111bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80111c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80111c4:	fa1f f883 	uxth.w	r8, r3
 80111c8:	fa17 f78b 	uxtah	r7, r7, fp
 80111cc:	0c1b      	lsrs	r3, r3, #16
 80111ce:	eba7 0808 	sub.w	r8, r7, r8
 80111d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80111d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80111da:	fa1f f888 	uxth.w	r8, r8
 80111de:	141f      	asrs	r7, r3, #16
 80111e0:	454d      	cmp	r5, r9
 80111e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80111e6:	f84a 3b04 	str.w	r3, [sl], #4
 80111ea:	d8e7      	bhi.n	80111bc <__mdiff+0x7c>
 80111ec:	1b2b      	subs	r3, r5, r4
 80111ee:	3b15      	subs	r3, #21
 80111f0:	f023 0303 	bic.w	r3, r3, #3
 80111f4:	3304      	adds	r3, #4
 80111f6:	3415      	adds	r4, #21
 80111f8:	42a5      	cmp	r5, r4
 80111fa:	bf38      	it	cc
 80111fc:	2304      	movcc	r3, #4
 80111fe:	4419      	add	r1, r3
 8011200:	4473      	add	r3, lr
 8011202:	469e      	mov	lr, r3
 8011204:	460d      	mov	r5, r1
 8011206:	4565      	cmp	r5, ip
 8011208:	d30e      	bcc.n	8011228 <__mdiff+0xe8>
 801120a:	f10c 0203 	add.w	r2, ip, #3
 801120e:	1a52      	subs	r2, r2, r1
 8011210:	f022 0203 	bic.w	r2, r2, #3
 8011214:	3903      	subs	r1, #3
 8011216:	458c      	cmp	ip, r1
 8011218:	bf38      	it	cc
 801121a:	2200      	movcc	r2, #0
 801121c:	441a      	add	r2, r3
 801121e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011222:	b17b      	cbz	r3, 8011244 <__mdiff+0x104>
 8011224:	6106      	str	r6, [r0, #16]
 8011226:	e7a5      	b.n	8011174 <__mdiff+0x34>
 8011228:	f855 8b04 	ldr.w	r8, [r5], #4
 801122c:	fa17 f488 	uxtah	r4, r7, r8
 8011230:	1422      	asrs	r2, r4, #16
 8011232:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011236:	b2a4      	uxth	r4, r4
 8011238:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801123c:	f84e 4b04 	str.w	r4, [lr], #4
 8011240:	1417      	asrs	r7, r2, #16
 8011242:	e7e0      	b.n	8011206 <__mdiff+0xc6>
 8011244:	3e01      	subs	r6, #1
 8011246:	e7ea      	b.n	801121e <__mdiff+0xde>
 8011248:	080135d4 	.word	0x080135d4
 801124c:	080136c8 	.word	0x080136c8

08011250 <__ulp>:
 8011250:	b082      	sub	sp, #8
 8011252:	ed8d 0b00 	vstr	d0, [sp]
 8011256:	9b01      	ldr	r3, [sp, #4]
 8011258:	4912      	ldr	r1, [pc, #72]	; (80112a4 <__ulp+0x54>)
 801125a:	4019      	ands	r1, r3
 801125c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011260:	2900      	cmp	r1, #0
 8011262:	dd05      	ble.n	8011270 <__ulp+0x20>
 8011264:	2200      	movs	r2, #0
 8011266:	460b      	mov	r3, r1
 8011268:	ec43 2b10 	vmov	d0, r2, r3
 801126c:	b002      	add	sp, #8
 801126e:	4770      	bx	lr
 8011270:	4249      	negs	r1, r1
 8011272:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011276:	ea4f 5021 	mov.w	r0, r1, asr #20
 801127a:	f04f 0200 	mov.w	r2, #0
 801127e:	f04f 0300 	mov.w	r3, #0
 8011282:	da04      	bge.n	801128e <__ulp+0x3e>
 8011284:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011288:	fa41 f300 	asr.w	r3, r1, r0
 801128c:	e7ec      	b.n	8011268 <__ulp+0x18>
 801128e:	f1a0 0114 	sub.w	r1, r0, #20
 8011292:	291e      	cmp	r1, #30
 8011294:	bfda      	itte	le
 8011296:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801129a:	fa20 f101 	lsrle.w	r1, r0, r1
 801129e:	2101      	movgt	r1, #1
 80112a0:	460a      	mov	r2, r1
 80112a2:	e7e1      	b.n	8011268 <__ulp+0x18>
 80112a4:	7ff00000 	.word	0x7ff00000

080112a8 <__b2d>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	6905      	ldr	r5, [r0, #16]
 80112ac:	f100 0714 	add.w	r7, r0, #20
 80112b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80112b4:	1f2e      	subs	r6, r5, #4
 80112b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80112ba:	4620      	mov	r0, r4
 80112bc:	f7ff fd52 	bl	8010d64 <__hi0bits>
 80112c0:	f1c0 0320 	rsb	r3, r0, #32
 80112c4:	280a      	cmp	r0, #10
 80112c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011344 <__b2d+0x9c>
 80112ca:	600b      	str	r3, [r1, #0]
 80112cc:	dc14      	bgt.n	80112f8 <__b2d+0x50>
 80112ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80112d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80112d6:	42b7      	cmp	r7, r6
 80112d8:	ea41 030c 	orr.w	r3, r1, ip
 80112dc:	bf34      	ite	cc
 80112de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112e2:	2100      	movcs	r1, #0
 80112e4:	3015      	adds	r0, #21
 80112e6:	fa04 f000 	lsl.w	r0, r4, r0
 80112ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80112ee:	ea40 0201 	orr.w	r2, r0, r1
 80112f2:	ec43 2b10 	vmov	d0, r2, r3
 80112f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f8:	42b7      	cmp	r7, r6
 80112fa:	bf3a      	itte	cc
 80112fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011300:	f1a5 0608 	subcc.w	r6, r5, #8
 8011304:	2100      	movcs	r1, #0
 8011306:	380b      	subs	r0, #11
 8011308:	d017      	beq.n	801133a <__b2d+0x92>
 801130a:	f1c0 0c20 	rsb	ip, r0, #32
 801130e:	fa04 f500 	lsl.w	r5, r4, r0
 8011312:	42be      	cmp	r6, r7
 8011314:	fa21 f40c 	lsr.w	r4, r1, ip
 8011318:	ea45 0504 	orr.w	r5, r5, r4
 801131c:	bf8c      	ite	hi
 801131e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011322:	2400      	movls	r4, #0
 8011324:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011328:	fa01 f000 	lsl.w	r0, r1, r0
 801132c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011330:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011334:	ea40 0204 	orr.w	r2, r0, r4
 8011338:	e7db      	b.n	80112f2 <__b2d+0x4a>
 801133a:	ea44 030c 	orr.w	r3, r4, ip
 801133e:	460a      	mov	r2, r1
 8011340:	e7d7      	b.n	80112f2 <__b2d+0x4a>
 8011342:	bf00      	nop
 8011344:	3ff00000 	.word	0x3ff00000

08011348 <__d2b>:
 8011348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801134c:	4689      	mov	r9, r1
 801134e:	2101      	movs	r1, #1
 8011350:	ec57 6b10 	vmov	r6, r7, d0
 8011354:	4690      	mov	r8, r2
 8011356:	f7ff fc0f 	bl	8010b78 <_Balloc>
 801135a:	4604      	mov	r4, r0
 801135c:	b930      	cbnz	r0, 801136c <__d2b+0x24>
 801135e:	4602      	mov	r2, r0
 8011360:	4b25      	ldr	r3, [pc, #148]	; (80113f8 <__d2b+0xb0>)
 8011362:	4826      	ldr	r0, [pc, #152]	; (80113fc <__d2b+0xb4>)
 8011364:	f240 310a 	movw	r1, #778	; 0x30a
 8011368:	f000 fb62 	bl	8011a30 <__assert_func>
 801136c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011374:	bb35      	cbnz	r5, 80113c4 <__d2b+0x7c>
 8011376:	2e00      	cmp	r6, #0
 8011378:	9301      	str	r3, [sp, #4]
 801137a:	d028      	beq.n	80113ce <__d2b+0x86>
 801137c:	4668      	mov	r0, sp
 801137e:	9600      	str	r6, [sp, #0]
 8011380:	f7ff fd10 	bl	8010da4 <__lo0bits>
 8011384:	9900      	ldr	r1, [sp, #0]
 8011386:	b300      	cbz	r0, 80113ca <__d2b+0x82>
 8011388:	9a01      	ldr	r2, [sp, #4]
 801138a:	f1c0 0320 	rsb	r3, r0, #32
 801138e:	fa02 f303 	lsl.w	r3, r2, r3
 8011392:	430b      	orrs	r3, r1
 8011394:	40c2      	lsrs	r2, r0
 8011396:	6163      	str	r3, [r4, #20]
 8011398:	9201      	str	r2, [sp, #4]
 801139a:	9b01      	ldr	r3, [sp, #4]
 801139c:	61a3      	str	r3, [r4, #24]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	bf14      	ite	ne
 80113a2:	2202      	movne	r2, #2
 80113a4:	2201      	moveq	r2, #1
 80113a6:	6122      	str	r2, [r4, #16]
 80113a8:	b1d5      	cbz	r5, 80113e0 <__d2b+0x98>
 80113aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113ae:	4405      	add	r5, r0
 80113b0:	f8c9 5000 	str.w	r5, [r9]
 80113b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80113b8:	f8c8 0000 	str.w	r0, [r8]
 80113bc:	4620      	mov	r0, r4
 80113be:	b003      	add	sp, #12
 80113c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113c8:	e7d5      	b.n	8011376 <__d2b+0x2e>
 80113ca:	6161      	str	r1, [r4, #20]
 80113cc:	e7e5      	b.n	801139a <__d2b+0x52>
 80113ce:	a801      	add	r0, sp, #4
 80113d0:	f7ff fce8 	bl	8010da4 <__lo0bits>
 80113d4:	9b01      	ldr	r3, [sp, #4]
 80113d6:	6163      	str	r3, [r4, #20]
 80113d8:	2201      	movs	r2, #1
 80113da:	6122      	str	r2, [r4, #16]
 80113dc:	3020      	adds	r0, #32
 80113de:	e7e3      	b.n	80113a8 <__d2b+0x60>
 80113e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113e8:	f8c9 0000 	str.w	r0, [r9]
 80113ec:	6918      	ldr	r0, [r3, #16]
 80113ee:	f7ff fcb9 	bl	8010d64 <__hi0bits>
 80113f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113f6:	e7df      	b.n	80113b8 <__d2b+0x70>
 80113f8:	080135d4 	.word	0x080135d4
 80113fc:	080136c8 	.word	0x080136c8

08011400 <__ratio>:
 8011400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4688      	mov	r8, r1
 8011406:	4669      	mov	r1, sp
 8011408:	4681      	mov	r9, r0
 801140a:	f7ff ff4d 	bl	80112a8 <__b2d>
 801140e:	a901      	add	r1, sp, #4
 8011410:	4640      	mov	r0, r8
 8011412:	ec55 4b10 	vmov	r4, r5, d0
 8011416:	f7ff ff47 	bl	80112a8 <__b2d>
 801141a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801141e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011422:	eba3 0c02 	sub.w	ip, r3, r2
 8011426:	e9dd 3200 	ldrd	r3, r2, [sp]
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011430:	ec51 0b10 	vmov	r0, r1, d0
 8011434:	2b00      	cmp	r3, #0
 8011436:	bfd6      	itet	le
 8011438:	460a      	movle	r2, r1
 801143a:	462a      	movgt	r2, r5
 801143c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011440:	468b      	mov	fp, r1
 8011442:	462f      	mov	r7, r5
 8011444:	bfd4      	ite	le
 8011446:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801144a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801144e:	4620      	mov	r0, r4
 8011450:	ee10 2a10 	vmov	r2, s0
 8011454:	465b      	mov	r3, fp
 8011456:	4639      	mov	r1, r7
 8011458:	f7ef fa20 	bl	800089c <__aeabi_ddiv>
 801145c:	ec41 0b10 	vmov	d0, r0, r1
 8011460:	b003      	add	sp, #12
 8011462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011466 <__copybits>:
 8011466:	3901      	subs	r1, #1
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	1149      	asrs	r1, r1, #5
 801146c:	6914      	ldr	r4, [r2, #16]
 801146e:	3101      	adds	r1, #1
 8011470:	f102 0314 	add.w	r3, r2, #20
 8011474:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011478:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801147c:	1f05      	subs	r5, r0, #4
 801147e:	42a3      	cmp	r3, r4
 8011480:	d30c      	bcc.n	801149c <__copybits+0x36>
 8011482:	1aa3      	subs	r3, r4, r2
 8011484:	3b11      	subs	r3, #17
 8011486:	f023 0303 	bic.w	r3, r3, #3
 801148a:	3211      	adds	r2, #17
 801148c:	42a2      	cmp	r2, r4
 801148e:	bf88      	it	hi
 8011490:	2300      	movhi	r3, #0
 8011492:	4418      	add	r0, r3
 8011494:	2300      	movs	r3, #0
 8011496:	4288      	cmp	r0, r1
 8011498:	d305      	bcc.n	80114a6 <__copybits+0x40>
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	f853 6b04 	ldr.w	r6, [r3], #4
 80114a0:	f845 6f04 	str.w	r6, [r5, #4]!
 80114a4:	e7eb      	b.n	801147e <__copybits+0x18>
 80114a6:	f840 3b04 	str.w	r3, [r0], #4
 80114aa:	e7f4      	b.n	8011496 <__copybits+0x30>

080114ac <__any_on>:
 80114ac:	f100 0214 	add.w	r2, r0, #20
 80114b0:	6900      	ldr	r0, [r0, #16]
 80114b2:	114b      	asrs	r3, r1, #5
 80114b4:	4298      	cmp	r0, r3
 80114b6:	b510      	push	{r4, lr}
 80114b8:	db11      	blt.n	80114de <__any_on+0x32>
 80114ba:	dd0a      	ble.n	80114d2 <__any_on+0x26>
 80114bc:	f011 011f 	ands.w	r1, r1, #31
 80114c0:	d007      	beq.n	80114d2 <__any_on+0x26>
 80114c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80114c6:	fa24 f001 	lsr.w	r0, r4, r1
 80114ca:	fa00 f101 	lsl.w	r1, r0, r1
 80114ce:	428c      	cmp	r4, r1
 80114d0:	d10b      	bne.n	80114ea <__any_on+0x3e>
 80114d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d803      	bhi.n	80114e2 <__any_on+0x36>
 80114da:	2000      	movs	r0, #0
 80114dc:	bd10      	pop	{r4, pc}
 80114de:	4603      	mov	r3, r0
 80114e0:	e7f7      	b.n	80114d2 <__any_on+0x26>
 80114e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114e6:	2900      	cmp	r1, #0
 80114e8:	d0f5      	beq.n	80114d6 <__any_on+0x2a>
 80114ea:	2001      	movs	r0, #1
 80114ec:	e7f6      	b.n	80114dc <__any_on+0x30>

080114ee <_calloc_r>:
 80114ee:	b513      	push	{r0, r1, r4, lr}
 80114f0:	434a      	muls	r2, r1
 80114f2:	4611      	mov	r1, r2
 80114f4:	9201      	str	r2, [sp, #4]
 80114f6:	f000 f859 	bl	80115ac <_malloc_r>
 80114fa:	4604      	mov	r4, r0
 80114fc:	b118      	cbz	r0, 8011506 <_calloc_r+0x18>
 80114fe:	9a01      	ldr	r2, [sp, #4]
 8011500:	2100      	movs	r1, #0
 8011502:	f7fc fa95 	bl	800da30 <memset>
 8011506:	4620      	mov	r0, r4
 8011508:	b002      	add	sp, #8
 801150a:	bd10      	pop	{r4, pc}

0801150c <_free_r>:
 801150c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801150e:	2900      	cmp	r1, #0
 8011510:	d048      	beq.n	80115a4 <_free_r+0x98>
 8011512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011516:	9001      	str	r0, [sp, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	f1a1 0404 	sub.w	r4, r1, #4
 801151e:	bfb8      	it	lt
 8011520:	18e4      	addlt	r4, r4, r3
 8011522:	f000 faf9 	bl	8011b18 <__malloc_lock>
 8011526:	4a20      	ldr	r2, [pc, #128]	; (80115a8 <_free_r+0x9c>)
 8011528:	9801      	ldr	r0, [sp, #4]
 801152a:	6813      	ldr	r3, [r2, #0]
 801152c:	4615      	mov	r5, r2
 801152e:	b933      	cbnz	r3, 801153e <_free_r+0x32>
 8011530:	6063      	str	r3, [r4, #4]
 8011532:	6014      	str	r4, [r2, #0]
 8011534:	b003      	add	sp, #12
 8011536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801153a:	f000 baf3 	b.w	8011b24 <__malloc_unlock>
 801153e:	42a3      	cmp	r3, r4
 8011540:	d90b      	bls.n	801155a <_free_r+0x4e>
 8011542:	6821      	ldr	r1, [r4, #0]
 8011544:	1862      	adds	r2, r4, r1
 8011546:	4293      	cmp	r3, r2
 8011548:	bf04      	itt	eq
 801154a:	681a      	ldreq	r2, [r3, #0]
 801154c:	685b      	ldreq	r3, [r3, #4]
 801154e:	6063      	str	r3, [r4, #4]
 8011550:	bf04      	itt	eq
 8011552:	1852      	addeq	r2, r2, r1
 8011554:	6022      	streq	r2, [r4, #0]
 8011556:	602c      	str	r4, [r5, #0]
 8011558:	e7ec      	b.n	8011534 <_free_r+0x28>
 801155a:	461a      	mov	r2, r3
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	b10b      	cbz	r3, 8011564 <_free_r+0x58>
 8011560:	42a3      	cmp	r3, r4
 8011562:	d9fa      	bls.n	801155a <_free_r+0x4e>
 8011564:	6811      	ldr	r1, [r2, #0]
 8011566:	1855      	adds	r5, r2, r1
 8011568:	42a5      	cmp	r5, r4
 801156a:	d10b      	bne.n	8011584 <_free_r+0x78>
 801156c:	6824      	ldr	r4, [r4, #0]
 801156e:	4421      	add	r1, r4
 8011570:	1854      	adds	r4, r2, r1
 8011572:	42a3      	cmp	r3, r4
 8011574:	6011      	str	r1, [r2, #0]
 8011576:	d1dd      	bne.n	8011534 <_free_r+0x28>
 8011578:	681c      	ldr	r4, [r3, #0]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	6053      	str	r3, [r2, #4]
 801157e:	4421      	add	r1, r4
 8011580:	6011      	str	r1, [r2, #0]
 8011582:	e7d7      	b.n	8011534 <_free_r+0x28>
 8011584:	d902      	bls.n	801158c <_free_r+0x80>
 8011586:	230c      	movs	r3, #12
 8011588:	6003      	str	r3, [r0, #0]
 801158a:	e7d3      	b.n	8011534 <_free_r+0x28>
 801158c:	6825      	ldr	r5, [r4, #0]
 801158e:	1961      	adds	r1, r4, r5
 8011590:	428b      	cmp	r3, r1
 8011592:	bf04      	itt	eq
 8011594:	6819      	ldreq	r1, [r3, #0]
 8011596:	685b      	ldreq	r3, [r3, #4]
 8011598:	6063      	str	r3, [r4, #4]
 801159a:	bf04      	itt	eq
 801159c:	1949      	addeq	r1, r1, r5
 801159e:	6021      	streq	r1, [r4, #0]
 80115a0:	6054      	str	r4, [r2, #4]
 80115a2:	e7c7      	b.n	8011534 <_free_r+0x28>
 80115a4:	b003      	add	sp, #12
 80115a6:	bd30      	pop	{r4, r5, pc}
 80115a8:	20000230 	.word	0x20000230

080115ac <_malloc_r>:
 80115ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ae:	1ccd      	adds	r5, r1, #3
 80115b0:	f025 0503 	bic.w	r5, r5, #3
 80115b4:	3508      	adds	r5, #8
 80115b6:	2d0c      	cmp	r5, #12
 80115b8:	bf38      	it	cc
 80115ba:	250c      	movcc	r5, #12
 80115bc:	2d00      	cmp	r5, #0
 80115be:	4606      	mov	r6, r0
 80115c0:	db01      	blt.n	80115c6 <_malloc_r+0x1a>
 80115c2:	42a9      	cmp	r1, r5
 80115c4:	d903      	bls.n	80115ce <_malloc_r+0x22>
 80115c6:	230c      	movs	r3, #12
 80115c8:	6033      	str	r3, [r6, #0]
 80115ca:	2000      	movs	r0, #0
 80115cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115ce:	f000 faa3 	bl	8011b18 <__malloc_lock>
 80115d2:	4921      	ldr	r1, [pc, #132]	; (8011658 <_malloc_r+0xac>)
 80115d4:	680a      	ldr	r2, [r1, #0]
 80115d6:	4614      	mov	r4, r2
 80115d8:	b99c      	cbnz	r4, 8011602 <_malloc_r+0x56>
 80115da:	4f20      	ldr	r7, [pc, #128]	; (801165c <_malloc_r+0xb0>)
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	b923      	cbnz	r3, 80115ea <_malloc_r+0x3e>
 80115e0:	4621      	mov	r1, r4
 80115e2:	4630      	mov	r0, r6
 80115e4:	f000 f9a0 	bl	8011928 <_sbrk_r>
 80115e8:	6038      	str	r0, [r7, #0]
 80115ea:	4629      	mov	r1, r5
 80115ec:	4630      	mov	r0, r6
 80115ee:	f000 f99b 	bl	8011928 <_sbrk_r>
 80115f2:	1c43      	adds	r3, r0, #1
 80115f4:	d123      	bne.n	801163e <_malloc_r+0x92>
 80115f6:	230c      	movs	r3, #12
 80115f8:	6033      	str	r3, [r6, #0]
 80115fa:	4630      	mov	r0, r6
 80115fc:	f000 fa92 	bl	8011b24 <__malloc_unlock>
 8011600:	e7e3      	b.n	80115ca <_malloc_r+0x1e>
 8011602:	6823      	ldr	r3, [r4, #0]
 8011604:	1b5b      	subs	r3, r3, r5
 8011606:	d417      	bmi.n	8011638 <_malloc_r+0x8c>
 8011608:	2b0b      	cmp	r3, #11
 801160a:	d903      	bls.n	8011614 <_malloc_r+0x68>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	441c      	add	r4, r3
 8011610:	6025      	str	r5, [r4, #0]
 8011612:	e004      	b.n	801161e <_malloc_r+0x72>
 8011614:	6863      	ldr	r3, [r4, #4]
 8011616:	42a2      	cmp	r2, r4
 8011618:	bf0c      	ite	eq
 801161a:	600b      	streq	r3, [r1, #0]
 801161c:	6053      	strne	r3, [r2, #4]
 801161e:	4630      	mov	r0, r6
 8011620:	f000 fa80 	bl	8011b24 <__malloc_unlock>
 8011624:	f104 000b 	add.w	r0, r4, #11
 8011628:	1d23      	adds	r3, r4, #4
 801162a:	f020 0007 	bic.w	r0, r0, #7
 801162e:	1ac2      	subs	r2, r0, r3
 8011630:	d0cc      	beq.n	80115cc <_malloc_r+0x20>
 8011632:	1a1b      	subs	r3, r3, r0
 8011634:	50a3      	str	r3, [r4, r2]
 8011636:	e7c9      	b.n	80115cc <_malloc_r+0x20>
 8011638:	4622      	mov	r2, r4
 801163a:	6864      	ldr	r4, [r4, #4]
 801163c:	e7cc      	b.n	80115d8 <_malloc_r+0x2c>
 801163e:	1cc4      	adds	r4, r0, #3
 8011640:	f024 0403 	bic.w	r4, r4, #3
 8011644:	42a0      	cmp	r0, r4
 8011646:	d0e3      	beq.n	8011610 <_malloc_r+0x64>
 8011648:	1a21      	subs	r1, r4, r0
 801164a:	4630      	mov	r0, r6
 801164c:	f000 f96c 	bl	8011928 <_sbrk_r>
 8011650:	3001      	adds	r0, #1
 8011652:	d1dd      	bne.n	8011610 <_malloc_r+0x64>
 8011654:	e7cf      	b.n	80115f6 <_malloc_r+0x4a>
 8011656:	bf00      	nop
 8011658:	20000230 	.word	0x20000230
 801165c:	20000234 	.word	0x20000234

08011660 <__sfputc_r>:
 8011660:	6893      	ldr	r3, [r2, #8]
 8011662:	3b01      	subs	r3, #1
 8011664:	2b00      	cmp	r3, #0
 8011666:	b410      	push	{r4}
 8011668:	6093      	str	r3, [r2, #8]
 801166a:	da08      	bge.n	801167e <__sfputc_r+0x1e>
 801166c:	6994      	ldr	r4, [r2, #24]
 801166e:	42a3      	cmp	r3, r4
 8011670:	db01      	blt.n	8011676 <__sfputc_r+0x16>
 8011672:	290a      	cmp	r1, #10
 8011674:	d103      	bne.n	801167e <__sfputc_r+0x1e>
 8011676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801167a:	f7fd bd99 	b.w	800f1b0 <__swbuf_r>
 801167e:	6813      	ldr	r3, [r2, #0]
 8011680:	1c58      	adds	r0, r3, #1
 8011682:	6010      	str	r0, [r2, #0]
 8011684:	7019      	strb	r1, [r3, #0]
 8011686:	4608      	mov	r0, r1
 8011688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801168c:	4770      	bx	lr

0801168e <__sfputs_r>:
 801168e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011690:	4606      	mov	r6, r0
 8011692:	460f      	mov	r7, r1
 8011694:	4614      	mov	r4, r2
 8011696:	18d5      	adds	r5, r2, r3
 8011698:	42ac      	cmp	r4, r5
 801169a:	d101      	bne.n	80116a0 <__sfputs_r+0x12>
 801169c:	2000      	movs	r0, #0
 801169e:	e007      	b.n	80116b0 <__sfputs_r+0x22>
 80116a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116a4:	463a      	mov	r2, r7
 80116a6:	4630      	mov	r0, r6
 80116a8:	f7ff ffda 	bl	8011660 <__sfputc_r>
 80116ac:	1c43      	adds	r3, r0, #1
 80116ae:	d1f3      	bne.n	8011698 <__sfputs_r+0xa>
 80116b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116b4 <_vfiprintf_r>:
 80116b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b8:	460d      	mov	r5, r1
 80116ba:	b09d      	sub	sp, #116	; 0x74
 80116bc:	4614      	mov	r4, r2
 80116be:	4698      	mov	r8, r3
 80116c0:	4606      	mov	r6, r0
 80116c2:	b118      	cbz	r0, 80116cc <_vfiprintf_r+0x18>
 80116c4:	6983      	ldr	r3, [r0, #24]
 80116c6:	b90b      	cbnz	r3, 80116cc <_vfiprintf_r+0x18>
 80116c8:	f7fe fdc4 	bl	8010254 <__sinit>
 80116cc:	4b89      	ldr	r3, [pc, #548]	; (80118f4 <_vfiprintf_r+0x240>)
 80116ce:	429d      	cmp	r5, r3
 80116d0:	d11b      	bne.n	801170a <_vfiprintf_r+0x56>
 80116d2:	6875      	ldr	r5, [r6, #4]
 80116d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116d6:	07d9      	lsls	r1, r3, #31
 80116d8:	d405      	bmi.n	80116e6 <_vfiprintf_r+0x32>
 80116da:	89ab      	ldrh	r3, [r5, #12]
 80116dc:	059a      	lsls	r2, r3, #22
 80116de:	d402      	bmi.n	80116e6 <_vfiprintf_r+0x32>
 80116e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116e2:	f7ff f9c8 	bl	8010a76 <__retarget_lock_acquire_recursive>
 80116e6:	89ab      	ldrh	r3, [r5, #12]
 80116e8:	071b      	lsls	r3, r3, #28
 80116ea:	d501      	bpl.n	80116f0 <_vfiprintf_r+0x3c>
 80116ec:	692b      	ldr	r3, [r5, #16]
 80116ee:	b9eb      	cbnz	r3, 801172c <_vfiprintf_r+0x78>
 80116f0:	4629      	mov	r1, r5
 80116f2:	4630      	mov	r0, r6
 80116f4:	f7fd fdae 	bl	800f254 <__swsetup_r>
 80116f8:	b1c0      	cbz	r0, 801172c <_vfiprintf_r+0x78>
 80116fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116fc:	07dc      	lsls	r4, r3, #31
 80116fe:	d50e      	bpl.n	801171e <_vfiprintf_r+0x6a>
 8011700:	f04f 30ff 	mov.w	r0, #4294967295
 8011704:	b01d      	add	sp, #116	; 0x74
 8011706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801170a:	4b7b      	ldr	r3, [pc, #492]	; (80118f8 <_vfiprintf_r+0x244>)
 801170c:	429d      	cmp	r5, r3
 801170e:	d101      	bne.n	8011714 <_vfiprintf_r+0x60>
 8011710:	68b5      	ldr	r5, [r6, #8]
 8011712:	e7df      	b.n	80116d4 <_vfiprintf_r+0x20>
 8011714:	4b79      	ldr	r3, [pc, #484]	; (80118fc <_vfiprintf_r+0x248>)
 8011716:	429d      	cmp	r5, r3
 8011718:	bf08      	it	eq
 801171a:	68f5      	ldreq	r5, [r6, #12]
 801171c:	e7da      	b.n	80116d4 <_vfiprintf_r+0x20>
 801171e:	89ab      	ldrh	r3, [r5, #12]
 8011720:	0598      	lsls	r0, r3, #22
 8011722:	d4ed      	bmi.n	8011700 <_vfiprintf_r+0x4c>
 8011724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011726:	f7ff f9a7 	bl	8010a78 <__retarget_lock_release_recursive>
 801172a:	e7e9      	b.n	8011700 <_vfiprintf_r+0x4c>
 801172c:	2300      	movs	r3, #0
 801172e:	9309      	str	r3, [sp, #36]	; 0x24
 8011730:	2320      	movs	r3, #32
 8011732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011736:	f8cd 800c 	str.w	r8, [sp, #12]
 801173a:	2330      	movs	r3, #48	; 0x30
 801173c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011900 <_vfiprintf_r+0x24c>
 8011740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011744:	f04f 0901 	mov.w	r9, #1
 8011748:	4623      	mov	r3, r4
 801174a:	469a      	mov	sl, r3
 801174c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011750:	b10a      	cbz	r2, 8011756 <_vfiprintf_r+0xa2>
 8011752:	2a25      	cmp	r2, #37	; 0x25
 8011754:	d1f9      	bne.n	801174a <_vfiprintf_r+0x96>
 8011756:	ebba 0b04 	subs.w	fp, sl, r4
 801175a:	d00b      	beq.n	8011774 <_vfiprintf_r+0xc0>
 801175c:	465b      	mov	r3, fp
 801175e:	4622      	mov	r2, r4
 8011760:	4629      	mov	r1, r5
 8011762:	4630      	mov	r0, r6
 8011764:	f7ff ff93 	bl	801168e <__sfputs_r>
 8011768:	3001      	adds	r0, #1
 801176a:	f000 80aa 	beq.w	80118c2 <_vfiprintf_r+0x20e>
 801176e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011770:	445a      	add	r2, fp
 8011772:	9209      	str	r2, [sp, #36]	; 0x24
 8011774:	f89a 3000 	ldrb.w	r3, [sl]
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 80a2 	beq.w	80118c2 <_vfiprintf_r+0x20e>
 801177e:	2300      	movs	r3, #0
 8011780:	f04f 32ff 	mov.w	r2, #4294967295
 8011784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011788:	f10a 0a01 	add.w	sl, sl, #1
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	9307      	str	r3, [sp, #28]
 8011790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011794:	931a      	str	r3, [sp, #104]	; 0x68
 8011796:	4654      	mov	r4, sl
 8011798:	2205      	movs	r2, #5
 801179a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801179e:	4858      	ldr	r0, [pc, #352]	; (8011900 <_vfiprintf_r+0x24c>)
 80117a0:	f7ee fd46 	bl	8000230 <memchr>
 80117a4:	9a04      	ldr	r2, [sp, #16]
 80117a6:	b9d8      	cbnz	r0, 80117e0 <_vfiprintf_r+0x12c>
 80117a8:	06d1      	lsls	r1, r2, #27
 80117aa:	bf44      	itt	mi
 80117ac:	2320      	movmi	r3, #32
 80117ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b2:	0713      	lsls	r3, r2, #28
 80117b4:	bf44      	itt	mi
 80117b6:	232b      	movmi	r3, #43	; 0x2b
 80117b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117bc:	f89a 3000 	ldrb.w	r3, [sl]
 80117c0:	2b2a      	cmp	r3, #42	; 0x2a
 80117c2:	d015      	beq.n	80117f0 <_vfiprintf_r+0x13c>
 80117c4:	9a07      	ldr	r2, [sp, #28]
 80117c6:	4654      	mov	r4, sl
 80117c8:	2000      	movs	r0, #0
 80117ca:	f04f 0c0a 	mov.w	ip, #10
 80117ce:	4621      	mov	r1, r4
 80117d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117d4:	3b30      	subs	r3, #48	; 0x30
 80117d6:	2b09      	cmp	r3, #9
 80117d8:	d94e      	bls.n	8011878 <_vfiprintf_r+0x1c4>
 80117da:	b1b0      	cbz	r0, 801180a <_vfiprintf_r+0x156>
 80117dc:	9207      	str	r2, [sp, #28]
 80117de:	e014      	b.n	801180a <_vfiprintf_r+0x156>
 80117e0:	eba0 0308 	sub.w	r3, r0, r8
 80117e4:	fa09 f303 	lsl.w	r3, r9, r3
 80117e8:	4313      	orrs	r3, r2
 80117ea:	9304      	str	r3, [sp, #16]
 80117ec:	46a2      	mov	sl, r4
 80117ee:	e7d2      	b.n	8011796 <_vfiprintf_r+0xe2>
 80117f0:	9b03      	ldr	r3, [sp, #12]
 80117f2:	1d19      	adds	r1, r3, #4
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	9103      	str	r1, [sp, #12]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	bfbb      	ittet	lt
 80117fc:	425b      	neglt	r3, r3
 80117fe:	f042 0202 	orrlt.w	r2, r2, #2
 8011802:	9307      	strge	r3, [sp, #28]
 8011804:	9307      	strlt	r3, [sp, #28]
 8011806:	bfb8      	it	lt
 8011808:	9204      	strlt	r2, [sp, #16]
 801180a:	7823      	ldrb	r3, [r4, #0]
 801180c:	2b2e      	cmp	r3, #46	; 0x2e
 801180e:	d10c      	bne.n	801182a <_vfiprintf_r+0x176>
 8011810:	7863      	ldrb	r3, [r4, #1]
 8011812:	2b2a      	cmp	r3, #42	; 0x2a
 8011814:	d135      	bne.n	8011882 <_vfiprintf_r+0x1ce>
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	1d1a      	adds	r2, r3, #4
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	9203      	str	r2, [sp, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	bfb8      	it	lt
 8011822:	f04f 33ff 	movlt.w	r3, #4294967295
 8011826:	3402      	adds	r4, #2
 8011828:	9305      	str	r3, [sp, #20]
 801182a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011910 <_vfiprintf_r+0x25c>
 801182e:	7821      	ldrb	r1, [r4, #0]
 8011830:	2203      	movs	r2, #3
 8011832:	4650      	mov	r0, sl
 8011834:	f7ee fcfc 	bl	8000230 <memchr>
 8011838:	b140      	cbz	r0, 801184c <_vfiprintf_r+0x198>
 801183a:	2340      	movs	r3, #64	; 0x40
 801183c:	eba0 000a 	sub.w	r0, r0, sl
 8011840:	fa03 f000 	lsl.w	r0, r3, r0
 8011844:	9b04      	ldr	r3, [sp, #16]
 8011846:	4303      	orrs	r3, r0
 8011848:	3401      	adds	r4, #1
 801184a:	9304      	str	r3, [sp, #16]
 801184c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011850:	482c      	ldr	r0, [pc, #176]	; (8011904 <_vfiprintf_r+0x250>)
 8011852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011856:	2206      	movs	r2, #6
 8011858:	f7ee fcea 	bl	8000230 <memchr>
 801185c:	2800      	cmp	r0, #0
 801185e:	d03f      	beq.n	80118e0 <_vfiprintf_r+0x22c>
 8011860:	4b29      	ldr	r3, [pc, #164]	; (8011908 <_vfiprintf_r+0x254>)
 8011862:	bb1b      	cbnz	r3, 80118ac <_vfiprintf_r+0x1f8>
 8011864:	9b03      	ldr	r3, [sp, #12]
 8011866:	3307      	adds	r3, #7
 8011868:	f023 0307 	bic.w	r3, r3, #7
 801186c:	3308      	adds	r3, #8
 801186e:	9303      	str	r3, [sp, #12]
 8011870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011872:	443b      	add	r3, r7
 8011874:	9309      	str	r3, [sp, #36]	; 0x24
 8011876:	e767      	b.n	8011748 <_vfiprintf_r+0x94>
 8011878:	fb0c 3202 	mla	r2, ip, r2, r3
 801187c:	460c      	mov	r4, r1
 801187e:	2001      	movs	r0, #1
 8011880:	e7a5      	b.n	80117ce <_vfiprintf_r+0x11a>
 8011882:	2300      	movs	r3, #0
 8011884:	3401      	adds	r4, #1
 8011886:	9305      	str	r3, [sp, #20]
 8011888:	4619      	mov	r1, r3
 801188a:	f04f 0c0a 	mov.w	ip, #10
 801188e:	4620      	mov	r0, r4
 8011890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011894:	3a30      	subs	r2, #48	; 0x30
 8011896:	2a09      	cmp	r2, #9
 8011898:	d903      	bls.n	80118a2 <_vfiprintf_r+0x1ee>
 801189a:	2b00      	cmp	r3, #0
 801189c:	d0c5      	beq.n	801182a <_vfiprintf_r+0x176>
 801189e:	9105      	str	r1, [sp, #20]
 80118a0:	e7c3      	b.n	801182a <_vfiprintf_r+0x176>
 80118a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80118a6:	4604      	mov	r4, r0
 80118a8:	2301      	movs	r3, #1
 80118aa:	e7f0      	b.n	801188e <_vfiprintf_r+0x1da>
 80118ac:	ab03      	add	r3, sp, #12
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	462a      	mov	r2, r5
 80118b2:	4b16      	ldr	r3, [pc, #88]	; (801190c <_vfiprintf_r+0x258>)
 80118b4:	a904      	add	r1, sp, #16
 80118b6:	4630      	mov	r0, r6
 80118b8:	f7fc f962 	bl	800db80 <_printf_float>
 80118bc:	4607      	mov	r7, r0
 80118be:	1c78      	adds	r0, r7, #1
 80118c0:	d1d6      	bne.n	8011870 <_vfiprintf_r+0x1bc>
 80118c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118c4:	07d9      	lsls	r1, r3, #31
 80118c6:	d405      	bmi.n	80118d4 <_vfiprintf_r+0x220>
 80118c8:	89ab      	ldrh	r3, [r5, #12]
 80118ca:	059a      	lsls	r2, r3, #22
 80118cc:	d402      	bmi.n	80118d4 <_vfiprintf_r+0x220>
 80118ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118d0:	f7ff f8d2 	bl	8010a78 <__retarget_lock_release_recursive>
 80118d4:	89ab      	ldrh	r3, [r5, #12]
 80118d6:	065b      	lsls	r3, r3, #25
 80118d8:	f53f af12 	bmi.w	8011700 <_vfiprintf_r+0x4c>
 80118dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118de:	e711      	b.n	8011704 <_vfiprintf_r+0x50>
 80118e0:	ab03      	add	r3, sp, #12
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	462a      	mov	r2, r5
 80118e6:	4b09      	ldr	r3, [pc, #36]	; (801190c <_vfiprintf_r+0x258>)
 80118e8:	a904      	add	r1, sp, #16
 80118ea:	4630      	mov	r0, r6
 80118ec:	f7fc fbec 	bl	800e0c8 <_printf_i>
 80118f0:	e7e4      	b.n	80118bc <_vfiprintf_r+0x208>
 80118f2:	bf00      	nop
 80118f4:	08013608 	.word	0x08013608
 80118f8:	08013628 	.word	0x08013628
 80118fc:	080135e8 	.word	0x080135e8
 8011900:	08013824 	.word	0x08013824
 8011904:	0801382e 	.word	0x0801382e
 8011908:	0800db81 	.word	0x0800db81
 801190c:	0801168f 	.word	0x0801168f
 8011910:	0801382a 	.word	0x0801382a
 8011914:	00000000 	.word	0x00000000

08011918 <nan>:
 8011918:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011920 <nan+0x8>
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	00000000 	.word	0x00000000
 8011924:	7ff80000 	.word	0x7ff80000

08011928 <_sbrk_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4d06      	ldr	r5, [pc, #24]	; (8011944 <_sbrk_r+0x1c>)
 801192c:	2300      	movs	r3, #0
 801192e:	4604      	mov	r4, r0
 8011930:	4608      	mov	r0, r1
 8011932:	602b      	str	r3, [r5, #0]
 8011934:	f7f4 f808 	bl	8005948 <_sbrk>
 8011938:	1c43      	adds	r3, r0, #1
 801193a:	d102      	bne.n	8011942 <_sbrk_r+0x1a>
 801193c:	682b      	ldr	r3, [r5, #0]
 801193e:	b103      	cbz	r3, 8011942 <_sbrk_r+0x1a>
 8011940:	6023      	str	r3, [r4, #0]
 8011942:	bd38      	pop	{r3, r4, r5, pc}
 8011944:	20009594 	.word	0x20009594

08011948 <__sread>:
 8011948:	b510      	push	{r4, lr}
 801194a:	460c      	mov	r4, r1
 801194c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011950:	f000 f8ee 	bl	8011b30 <_read_r>
 8011954:	2800      	cmp	r0, #0
 8011956:	bfab      	itete	ge
 8011958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801195a:	89a3      	ldrhlt	r3, [r4, #12]
 801195c:	181b      	addge	r3, r3, r0
 801195e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011962:	bfac      	ite	ge
 8011964:	6563      	strge	r3, [r4, #84]	; 0x54
 8011966:	81a3      	strhlt	r3, [r4, #12]
 8011968:	bd10      	pop	{r4, pc}

0801196a <__swrite>:
 801196a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196e:	461f      	mov	r7, r3
 8011970:	898b      	ldrh	r3, [r1, #12]
 8011972:	05db      	lsls	r3, r3, #23
 8011974:	4605      	mov	r5, r0
 8011976:	460c      	mov	r4, r1
 8011978:	4616      	mov	r6, r2
 801197a:	d505      	bpl.n	8011988 <__swrite+0x1e>
 801197c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011980:	2302      	movs	r3, #2
 8011982:	2200      	movs	r2, #0
 8011984:	f000 f8b6 	bl	8011af4 <_lseek_r>
 8011988:	89a3      	ldrh	r3, [r4, #12]
 801198a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801198e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011992:	81a3      	strh	r3, [r4, #12]
 8011994:	4632      	mov	r2, r6
 8011996:	463b      	mov	r3, r7
 8011998:	4628      	mov	r0, r5
 801199a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801199e:	f000 b835 	b.w	8011a0c <_write_r>

080119a2 <__sseek>:
 80119a2:	b510      	push	{r4, lr}
 80119a4:	460c      	mov	r4, r1
 80119a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119aa:	f000 f8a3 	bl	8011af4 <_lseek_r>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	bf15      	itete	ne
 80119b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119be:	81a3      	strheq	r3, [r4, #12]
 80119c0:	bf18      	it	ne
 80119c2:	81a3      	strhne	r3, [r4, #12]
 80119c4:	bd10      	pop	{r4, pc}

080119c6 <__sclose>:
 80119c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ca:	f000 b84f 	b.w	8011a6c <_close_r>

080119ce <strncmp>:
 80119ce:	b510      	push	{r4, lr}
 80119d0:	b16a      	cbz	r2, 80119ee <strncmp+0x20>
 80119d2:	3901      	subs	r1, #1
 80119d4:	1884      	adds	r4, r0, r2
 80119d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80119da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80119de:	4293      	cmp	r3, r2
 80119e0:	d103      	bne.n	80119ea <strncmp+0x1c>
 80119e2:	42a0      	cmp	r0, r4
 80119e4:	d001      	beq.n	80119ea <strncmp+0x1c>
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1f5      	bne.n	80119d6 <strncmp+0x8>
 80119ea:	1a98      	subs	r0, r3, r2
 80119ec:	bd10      	pop	{r4, pc}
 80119ee:	4610      	mov	r0, r2
 80119f0:	e7fc      	b.n	80119ec <strncmp+0x1e>

080119f2 <__ascii_wctomb>:
 80119f2:	b149      	cbz	r1, 8011a08 <__ascii_wctomb+0x16>
 80119f4:	2aff      	cmp	r2, #255	; 0xff
 80119f6:	bf85      	ittet	hi
 80119f8:	238a      	movhi	r3, #138	; 0x8a
 80119fa:	6003      	strhi	r3, [r0, #0]
 80119fc:	700a      	strbls	r2, [r1, #0]
 80119fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a02:	bf98      	it	ls
 8011a04:	2001      	movls	r0, #1
 8011a06:	4770      	bx	lr
 8011a08:	4608      	mov	r0, r1
 8011a0a:	4770      	bx	lr

08011a0c <_write_r>:
 8011a0c:	b538      	push	{r3, r4, r5, lr}
 8011a0e:	4d07      	ldr	r5, [pc, #28]	; (8011a2c <_write_r+0x20>)
 8011a10:	4604      	mov	r4, r0
 8011a12:	4608      	mov	r0, r1
 8011a14:	4611      	mov	r1, r2
 8011a16:	2200      	movs	r2, #0
 8011a18:	602a      	str	r2, [r5, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	f7f3 ff43 	bl	80058a6 <_write>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_write_r+0x1e>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_write_r+0x1e>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	20009594 	.word	0x20009594

08011a30 <__assert_func>:
 8011a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a32:	4614      	mov	r4, r2
 8011a34:	461a      	mov	r2, r3
 8011a36:	4b09      	ldr	r3, [pc, #36]	; (8011a5c <__assert_func+0x2c>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	68d8      	ldr	r0, [r3, #12]
 8011a3e:	b14c      	cbz	r4, 8011a54 <__assert_func+0x24>
 8011a40:	4b07      	ldr	r3, [pc, #28]	; (8011a60 <__assert_func+0x30>)
 8011a42:	9100      	str	r1, [sp, #0]
 8011a44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a48:	4906      	ldr	r1, [pc, #24]	; (8011a64 <__assert_func+0x34>)
 8011a4a:	462b      	mov	r3, r5
 8011a4c:	f000 f81e 	bl	8011a8c <fiprintf>
 8011a50:	f000 f880 	bl	8011b54 <abort>
 8011a54:	4b04      	ldr	r3, [pc, #16]	; (8011a68 <__assert_func+0x38>)
 8011a56:	461c      	mov	r4, r3
 8011a58:	e7f3      	b.n	8011a42 <__assert_func+0x12>
 8011a5a:	bf00      	nop
 8011a5c:	20000030 	.word	0x20000030
 8011a60:	08013835 	.word	0x08013835
 8011a64:	08013842 	.word	0x08013842
 8011a68:	08013870 	.word	0x08013870

08011a6c <_close_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4d06      	ldr	r5, [pc, #24]	; (8011a88 <_close_r+0x1c>)
 8011a70:	2300      	movs	r3, #0
 8011a72:	4604      	mov	r4, r0
 8011a74:	4608      	mov	r0, r1
 8011a76:	602b      	str	r3, [r5, #0]
 8011a78:	f7f3 ff31 	bl	80058de <_close>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d102      	bne.n	8011a86 <_close_r+0x1a>
 8011a80:	682b      	ldr	r3, [r5, #0]
 8011a82:	b103      	cbz	r3, 8011a86 <_close_r+0x1a>
 8011a84:	6023      	str	r3, [r4, #0]
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	20009594 	.word	0x20009594

08011a8c <fiprintf>:
 8011a8c:	b40e      	push	{r1, r2, r3}
 8011a8e:	b503      	push	{r0, r1, lr}
 8011a90:	4601      	mov	r1, r0
 8011a92:	ab03      	add	r3, sp, #12
 8011a94:	4805      	ldr	r0, [pc, #20]	; (8011aac <fiprintf+0x20>)
 8011a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a9a:	6800      	ldr	r0, [r0, #0]
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	f7ff fe09 	bl	80116b4 <_vfiprintf_r>
 8011aa2:	b002      	add	sp, #8
 8011aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011aa8:	b003      	add	sp, #12
 8011aaa:	4770      	bx	lr
 8011aac:	20000030 	.word	0x20000030

08011ab0 <_fstat_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4d07      	ldr	r5, [pc, #28]	; (8011ad0 <_fstat_r+0x20>)
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	4608      	mov	r0, r1
 8011aba:	4611      	mov	r1, r2
 8011abc:	602b      	str	r3, [r5, #0]
 8011abe:	f7f3 ff1a 	bl	80058f6 <_fstat>
 8011ac2:	1c43      	adds	r3, r0, #1
 8011ac4:	d102      	bne.n	8011acc <_fstat_r+0x1c>
 8011ac6:	682b      	ldr	r3, [r5, #0]
 8011ac8:	b103      	cbz	r3, 8011acc <_fstat_r+0x1c>
 8011aca:	6023      	str	r3, [r4, #0]
 8011acc:	bd38      	pop	{r3, r4, r5, pc}
 8011ace:	bf00      	nop
 8011ad0:	20009594 	.word	0x20009594

08011ad4 <_isatty_r>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	4d06      	ldr	r5, [pc, #24]	; (8011af0 <_isatty_r+0x1c>)
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4604      	mov	r4, r0
 8011adc:	4608      	mov	r0, r1
 8011ade:	602b      	str	r3, [r5, #0]
 8011ae0:	f7f3 ff19 	bl	8005916 <_isatty>
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	d102      	bne.n	8011aee <_isatty_r+0x1a>
 8011ae8:	682b      	ldr	r3, [r5, #0]
 8011aea:	b103      	cbz	r3, 8011aee <_isatty_r+0x1a>
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	bd38      	pop	{r3, r4, r5, pc}
 8011af0:	20009594 	.word	0x20009594

08011af4 <_lseek_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d07      	ldr	r5, [pc, #28]	; (8011b14 <_lseek_r+0x20>)
 8011af8:	4604      	mov	r4, r0
 8011afa:	4608      	mov	r0, r1
 8011afc:	4611      	mov	r1, r2
 8011afe:	2200      	movs	r2, #0
 8011b00:	602a      	str	r2, [r5, #0]
 8011b02:	461a      	mov	r2, r3
 8011b04:	f7f3 ff12 	bl	800592c <_lseek>
 8011b08:	1c43      	adds	r3, r0, #1
 8011b0a:	d102      	bne.n	8011b12 <_lseek_r+0x1e>
 8011b0c:	682b      	ldr	r3, [r5, #0]
 8011b0e:	b103      	cbz	r3, 8011b12 <_lseek_r+0x1e>
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	bd38      	pop	{r3, r4, r5, pc}
 8011b14:	20009594 	.word	0x20009594

08011b18 <__malloc_lock>:
 8011b18:	4801      	ldr	r0, [pc, #4]	; (8011b20 <__malloc_lock+0x8>)
 8011b1a:	f7fe bfac 	b.w	8010a76 <__retarget_lock_acquire_recursive>
 8011b1e:	bf00      	nop
 8011b20:	2000958c 	.word	0x2000958c

08011b24 <__malloc_unlock>:
 8011b24:	4801      	ldr	r0, [pc, #4]	; (8011b2c <__malloc_unlock+0x8>)
 8011b26:	f7fe bfa7 	b.w	8010a78 <__retarget_lock_release_recursive>
 8011b2a:	bf00      	nop
 8011b2c:	2000958c 	.word	0x2000958c

08011b30 <_read_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d07      	ldr	r5, [pc, #28]	; (8011b50 <_read_r+0x20>)
 8011b34:	4604      	mov	r4, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	602a      	str	r2, [r5, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f7f3 fe94 	bl	800586c <_read>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_read_r+0x1e>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_read_r+0x1e>
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	20009594 	.word	0x20009594

08011b54 <abort>:
 8011b54:	b508      	push	{r3, lr}
 8011b56:	2006      	movs	r0, #6
 8011b58:	f000 f82c 	bl	8011bb4 <raise>
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	f7f3 fe7b 	bl	8005858 <_exit>

08011b62 <_raise_r>:
 8011b62:	291f      	cmp	r1, #31
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	4604      	mov	r4, r0
 8011b68:	460d      	mov	r5, r1
 8011b6a:	d904      	bls.n	8011b76 <_raise_r+0x14>
 8011b6c:	2316      	movs	r3, #22
 8011b6e:	6003      	str	r3, [r0, #0]
 8011b70:	f04f 30ff 	mov.w	r0, #4294967295
 8011b74:	bd38      	pop	{r3, r4, r5, pc}
 8011b76:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b78:	b112      	cbz	r2, 8011b80 <_raise_r+0x1e>
 8011b7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b7e:	b94b      	cbnz	r3, 8011b94 <_raise_r+0x32>
 8011b80:	4620      	mov	r0, r4
 8011b82:	f000 f831 	bl	8011be8 <_getpid_r>
 8011b86:	462a      	mov	r2, r5
 8011b88:	4601      	mov	r1, r0
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b90:	f000 b818 	b.w	8011bc4 <_kill_r>
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d00a      	beq.n	8011bae <_raise_r+0x4c>
 8011b98:	1c59      	adds	r1, r3, #1
 8011b9a:	d103      	bne.n	8011ba4 <_raise_r+0x42>
 8011b9c:	2316      	movs	r3, #22
 8011b9e:	6003      	str	r3, [r0, #0]
 8011ba0:	2001      	movs	r0, #1
 8011ba2:	e7e7      	b.n	8011b74 <_raise_r+0x12>
 8011ba4:	2400      	movs	r4, #0
 8011ba6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011baa:	4628      	mov	r0, r5
 8011bac:	4798      	blx	r3
 8011bae:	2000      	movs	r0, #0
 8011bb0:	e7e0      	b.n	8011b74 <_raise_r+0x12>
	...

08011bb4 <raise>:
 8011bb4:	4b02      	ldr	r3, [pc, #8]	; (8011bc0 <raise+0xc>)
 8011bb6:	4601      	mov	r1, r0
 8011bb8:	6818      	ldr	r0, [r3, #0]
 8011bba:	f7ff bfd2 	b.w	8011b62 <_raise_r>
 8011bbe:	bf00      	nop
 8011bc0:	20000030 	.word	0x20000030

08011bc4 <_kill_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	4d07      	ldr	r5, [pc, #28]	; (8011be4 <_kill_r+0x20>)
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4604      	mov	r4, r0
 8011bcc:	4608      	mov	r0, r1
 8011bce:	4611      	mov	r1, r2
 8011bd0:	602b      	str	r3, [r5, #0]
 8011bd2:	f7f3 fe31 	bl	8005838 <_kill>
 8011bd6:	1c43      	adds	r3, r0, #1
 8011bd8:	d102      	bne.n	8011be0 <_kill_r+0x1c>
 8011bda:	682b      	ldr	r3, [r5, #0]
 8011bdc:	b103      	cbz	r3, 8011be0 <_kill_r+0x1c>
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	bd38      	pop	{r3, r4, r5, pc}
 8011be2:	bf00      	nop
 8011be4:	20009594 	.word	0x20009594

08011be8 <_getpid_r>:
 8011be8:	f7f3 be1e 	b.w	8005828 <_getpid>

08011bec <round>:
 8011bec:	ec51 0b10 	vmov	r0, r1, d0
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011bf6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011bfa:	2c13      	cmp	r4, #19
 8011bfc:	ee10 2a10 	vmov	r2, s0
 8011c00:	460b      	mov	r3, r1
 8011c02:	dc19      	bgt.n	8011c38 <round+0x4c>
 8011c04:	2c00      	cmp	r4, #0
 8011c06:	da09      	bge.n	8011c1c <round+0x30>
 8011c08:	3401      	adds	r4, #1
 8011c0a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011c0e:	d103      	bne.n	8011c18 <round+0x2c>
 8011c10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011c14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011c18:	2100      	movs	r1, #0
 8011c1a:	e028      	b.n	8011c6e <round+0x82>
 8011c1c:	4d15      	ldr	r5, [pc, #84]	; (8011c74 <round+0x88>)
 8011c1e:	4125      	asrs	r5, r4
 8011c20:	ea01 0605 	and.w	r6, r1, r5
 8011c24:	4332      	orrs	r2, r6
 8011c26:	d00e      	beq.n	8011c46 <round+0x5a>
 8011c28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011c2c:	fa42 f404 	asr.w	r4, r2, r4
 8011c30:	4423      	add	r3, r4
 8011c32:	ea23 0305 	bic.w	r3, r3, r5
 8011c36:	e7ef      	b.n	8011c18 <round+0x2c>
 8011c38:	2c33      	cmp	r4, #51	; 0x33
 8011c3a:	dd07      	ble.n	8011c4c <round+0x60>
 8011c3c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011c40:	d101      	bne.n	8011c46 <round+0x5a>
 8011c42:	f7ee fb4b 	bl	80002dc <__adddf3>
 8011c46:	ec41 0b10 	vmov	d0, r0, r1
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011c50:	f04f 35ff 	mov.w	r5, #4294967295
 8011c54:	40f5      	lsrs	r5, r6
 8011c56:	4228      	tst	r0, r5
 8011c58:	d0f5      	beq.n	8011c46 <round+0x5a>
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011c60:	fa01 f404 	lsl.w	r4, r1, r4
 8011c64:	1912      	adds	r2, r2, r4
 8011c66:	bf28      	it	cs
 8011c68:	185b      	addcs	r3, r3, r1
 8011c6a:	ea22 0105 	bic.w	r1, r2, r5
 8011c6e:	4608      	mov	r0, r1
 8011c70:	4619      	mov	r1, r3
 8011c72:	e7e8      	b.n	8011c46 <round+0x5a>
 8011c74:	000fffff 	.word	0x000fffff

08011c78 <fmaxf>:
 8011c78:	b508      	push	{r3, lr}
 8011c7a:	ed2d 8b02 	vpush	{d8}
 8011c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8011c82:	eef0 8a60 	vmov.f32	s17, s1
 8011c86:	f000 f82d 	bl	8011ce4 <__fpclassifyf>
 8011c8a:	b148      	cbz	r0, 8011ca0 <fmaxf+0x28>
 8011c8c:	eeb0 0a68 	vmov.f32	s0, s17
 8011c90:	f000 f828 	bl	8011ce4 <__fpclassifyf>
 8011c94:	b130      	cbz	r0, 8011ca4 <fmaxf+0x2c>
 8011c96:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9e:	dc01      	bgt.n	8011ca4 <fmaxf+0x2c>
 8011ca0:	eeb0 8a68 	vmov.f32	s16, s17
 8011ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ca8:	ecbd 8b02 	vpop	{d8}
 8011cac:	bd08      	pop	{r3, pc}

08011cae <fminf>:
 8011cae:	b508      	push	{r3, lr}
 8011cb0:	ed2d 8b02 	vpush	{d8}
 8011cb4:	eeb0 8a40 	vmov.f32	s16, s0
 8011cb8:	eef0 8a60 	vmov.f32	s17, s1
 8011cbc:	f000 f812 	bl	8011ce4 <__fpclassifyf>
 8011cc0:	b148      	cbz	r0, 8011cd6 <fminf+0x28>
 8011cc2:	eeb0 0a68 	vmov.f32	s0, s17
 8011cc6:	f000 f80d 	bl	8011ce4 <__fpclassifyf>
 8011cca:	b130      	cbz	r0, 8011cda <fminf+0x2c>
 8011ccc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd4:	d401      	bmi.n	8011cda <fminf+0x2c>
 8011cd6:	eeb0 8a68 	vmov.f32	s16, s17
 8011cda:	eeb0 0a48 	vmov.f32	s0, s16
 8011cde:	ecbd 8b02 	vpop	{d8}
 8011ce2:	bd08      	pop	{r3, pc}

08011ce4 <__fpclassifyf>:
 8011ce4:	ee10 3a10 	vmov	r3, s0
 8011ce8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011cec:	d00d      	beq.n	8011d0a <__fpclassifyf+0x26>
 8011cee:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011cf2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011cf6:	d30a      	bcc.n	8011d0e <__fpclassifyf+0x2a>
 8011cf8:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <__fpclassifyf+0x34>)
 8011cfa:	1e42      	subs	r2, r0, #1
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d908      	bls.n	8011d12 <__fpclassifyf+0x2e>
 8011d00:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011d04:	4258      	negs	r0, r3
 8011d06:	4158      	adcs	r0, r3
 8011d08:	4770      	bx	lr
 8011d0a:	2002      	movs	r0, #2
 8011d0c:	4770      	bx	lr
 8011d0e:	2004      	movs	r0, #4
 8011d10:	4770      	bx	lr
 8011d12:	2003      	movs	r0, #3
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	007ffffe 	.word	0x007ffffe
 8011d1c:	00000000 	.word	0x00000000

08011d20 <exp>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	ed2d 8b02 	vpush	{d8}
 8011d26:	ec55 4b10 	vmov	r4, r5, d0
 8011d2a:	f000 f899 	bl	8011e60 <__ieee754_exp>
 8011d2e:	4b22      	ldr	r3, [pc, #136]	; (8011db8 <exp+0x98>)
 8011d30:	eeb0 8a40 	vmov.f32	s16, s0
 8011d34:	eef0 8a60 	vmov.f32	s17, s1
 8011d38:	f993 3000 	ldrsb.w	r3, [r3]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	d012      	beq.n	8011d66 <exp+0x46>
 8011d40:	ec45 4b10 	vmov	d0, r4, r5
 8011d44:	f000 fa8b 	bl	801225e <finite>
 8011d48:	b168      	cbz	r0, 8011d66 <exp+0x46>
 8011d4a:	a313      	add	r3, pc, #76	; (adr r3, 8011d98 <exp+0x78>)
 8011d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d50:	4620      	mov	r0, r4
 8011d52:	4629      	mov	r1, r5
 8011d54:	f7ee ff08 	bl	8000b68 <__aeabi_dcmpgt>
 8011d58:	b160      	cbz	r0, 8011d74 <exp+0x54>
 8011d5a:	f7fb fe31 	bl	800d9c0 <__errno>
 8011d5e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011da0 <exp+0x80>
 8011d62:	2322      	movs	r3, #34	; 0x22
 8011d64:	6003      	str	r3, [r0, #0]
 8011d66:	eeb0 0a48 	vmov.f32	s0, s16
 8011d6a:	eef0 0a68 	vmov.f32	s1, s17
 8011d6e:	ecbd 8b02 	vpop	{d8}
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	a30c      	add	r3, pc, #48	; (adr r3, 8011da8 <exp+0x88>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	f7ee fed5 	bl	8000b2c <__aeabi_dcmplt>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d0ef      	beq.n	8011d66 <exp+0x46>
 8011d86:	f7fb fe1b 	bl	800d9c0 <__errno>
 8011d8a:	2322      	movs	r3, #34	; 0x22
 8011d8c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011db0 <exp+0x90>
 8011d90:	6003      	str	r3, [r0, #0]
 8011d92:	e7e8      	b.n	8011d66 <exp+0x46>
 8011d94:	f3af 8000 	nop.w
 8011d98:	fefa39ef 	.word	0xfefa39ef
 8011d9c:	40862e42 	.word	0x40862e42
 8011da0:	00000000 	.word	0x00000000
 8011da4:	7ff00000 	.word	0x7ff00000
 8011da8:	d52d3051 	.word	0xd52d3051
 8011dac:	c0874910 	.word	0xc0874910
	...
 8011db8:	20000204 	.word	0x20000204

08011dbc <fmodf>:
 8011dbc:	b508      	push	{r3, lr}
 8011dbe:	ed2d 8b02 	vpush	{d8}
 8011dc2:	eef0 8a40 	vmov.f32	s17, s0
 8011dc6:	eeb0 8a60 	vmov.f32	s16, s1
 8011dca:	f000 f9c3 	bl	8012154 <__ieee754_fmodf>
 8011dce:	4b0f      	ldr	r3, [pc, #60]	; (8011e0c <fmodf+0x50>)
 8011dd0:	f993 3000 	ldrsb.w	r3, [r3]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	d016      	beq.n	8011e06 <fmodf+0x4a>
 8011dd8:	eeb4 8a48 	vcmp.f32	s16, s16
 8011ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de0:	d611      	bvs.n	8011e06 <fmodf+0x4a>
 8011de2:	eef4 8a68 	vcmp.f32	s17, s17
 8011de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dea:	d60c      	bvs.n	8011e06 <fmodf+0x4a>
 8011dec:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011e10 <fmodf+0x54>
 8011df0:	eeb4 8a68 	vcmp.f32	s16, s17
 8011df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df8:	d105      	bne.n	8011e06 <fmodf+0x4a>
 8011dfa:	f7fb fde1 	bl	800d9c0 <__errno>
 8011dfe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e02:	2321      	movs	r3, #33	; 0x21
 8011e04:	6003      	str	r3, [r0, #0]
 8011e06:	ecbd 8b02 	vpop	{d8}
 8011e0a:	bd08      	pop	{r3, pc}
 8011e0c:	20000204 	.word	0x20000204
 8011e10:	00000000 	.word	0x00000000

08011e14 <sqrtf>:
 8011e14:	b508      	push	{r3, lr}
 8011e16:	ed2d 8b02 	vpush	{d8}
 8011e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8011e1e:	f000 fa1b 	bl	8012258 <__ieee754_sqrtf>
 8011e22:	4b0d      	ldr	r3, [pc, #52]	; (8011e58 <sqrtf+0x44>)
 8011e24:	f993 3000 	ldrsb.w	r3, [r3]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	d011      	beq.n	8011e50 <sqrtf+0x3c>
 8011e2c:	eeb4 8a48 	vcmp.f32	s16, s16
 8011e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e34:	d60c      	bvs.n	8011e50 <sqrtf+0x3c>
 8011e36:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011e5c <sqrtf+0x48>
 8011e3a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	d505      	bpl.n	8011e50 <sqrtf+0x3c>
 8011e44:	f7fb fdbc 	bl	800d9c0 <__errno>
 8011e48:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e4c:	2321      	movs	r3, #33	; 0x21
 8011e4e:	6003      	str	r3, [r0, #0]
 8011e50:	ecbd 8b02 	vpop	{d8}
 8011e54:	bd08      	pop	{r3, pc}
 8011e56:	bf00      	nop
 8011e58:	20000204 	.word	0x20000204
 8011e5c:	00000000 	.word	0x00000000

08011e60 <__ieee754_exp>:
 8011e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e64:	ec55 4b10 	vmov	r4, r5, d0
 8011e68:	49b1      	ldr	r1, [pc, #708]	; (8012130 <__ieee754_exp+0x2d0>)
 8011e6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e6e:	428b      	cmp	r3, r1
 8011e70:	ed2d 8b04 	vpush	{d8-d9}
 8011e74:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011e78:	d937      	bls.n	8011eea <__ieee754_exp+0x8a>
 8011e7a:	49ae      	ldr	r1, [pc, #696]	; (8012134 <__ieee754_exp+0x2d4>)
 8011e7c:	428b      	cmp	r3, r1
 8011e7e:	d916      	bls.n	8011eae <__ieee754_exp+0x4e>
 8011e80:	ee10 3a10 	vmov	r3, s0
 8011e84:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	d009      	beq.n	8011ea0 <__ieee754_exp+0x40>
 8011e8c:	ee10 2a10 	vmov	r2, s0
 8011e90:	462b      	mov	r3, r5
 8011e92:	4620      	mov	r0, r4
 8011e94:	4629      	mov	r1, r5
 8011e96:	f7ee fa21 	bl	80002dc <__adddf3>
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	460d      	mov	r5, r1
 8011e9e:	e000      	b.n	8011ea2 <__ieee754_exp+0x42>
 8011ea0:	bb06      	cbnz	r6, 8011ee4 <__ieee754_exp+0x84>
 8011ea2:	ecbd 8b04 	vpop	{d8-d9}
 8011ea6:	ec45 4b10 	vmov	d0, r4, r5
 8011eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eae:	a38a      	add	r3, pc, #552	; (adr r3, 80120d8 <__ieee754_exp+0x278>)
 8011eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb4:	ee10 0a10 	vmov	r0, s0
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7ee fe55 	bl	8000b68 <__aeabi_dcmpgt>
 8011ebe:	b138      	cbz	r0, 8011ed0 <__ieee754_exp+0x70>
 8011ec0:	a387      	add	r3, pc, #540	; (adr r3, 80120e0 <__ieee754_exp+0x280>)
 8011ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec6:	4610      	mov	r0, r2
 8011ec8:	4619      	mov	r1, r3
 8011eca:	f7ee fbbd 	bl	8000648 <__aeabi_dmul>
 8011ece:	e7e4      	b.n	8011e9a <__ieee754_exp+0x3a>
 8011ed0:	a385      	add	r3, pc, #532	; (adr r3, 80120e8 <__ieee754_exp+0x288>)
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	4629      	mov	r1, r5
 8011eda:	f7ee fe27 	bl	8000b2c <__aeabi_dcmplt>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	f000 8087 	beq.w	8011ff2 <__ieee754_exp+0x192>
 8011ee4:	2400      	movs	r4, #0
 8011ee6:	2500      	movs	r5, #0
 8011ee8:	e7db      	b.n	8011ea2 <__ieee754_exp+0x42>
 8011eea:	4a93      	ldr	r2, [pc, #588]	; (8012138 <__ieee754_exp+0x2d8>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	f240 80ac 	bls.w	801204a <__ieee754_exp+0x1ea>
 8011ef2:	4a92      	ldr	r2, [pc, #584]	; (801213c <__ieee754_exp+0x2dc>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d87c      	bhi.n	8011ff2 <__ieee754_exp+0x192>
 8011ef8:	4b91      	ldr	r3, [pc, #580]	; (8012140 <__ieee754_exp+0x2e0>)
 8011efa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	ee10 0a10 	vmov	r0, s0
 8011f06:	4629      	mov	r1, r5
 8011f08:	f7ee f9e6 	bl	80002d8 <__aeabi_dsub>
 8011f0c:	4b8d      	ldr	r3, [pc, #564]	; (8012144 <__ieee754_exp+0x2e4>)
 8011f0e:	00f7      	lsls	r7, r6, #3
 8011f10:	443b      	add	r3, r7
 8011f12:	ed93 7b00 	vldr	d7, [r3]
 8011f16:	f1c6 0a01 	rsb	sl, r6, #1
 8011f1a:	4680      	mov	r8, r0
 8011f1c:	4689      	mov	r9, r1
 8011f1e:	ebaa 0a06 	sub.w	sl, sl, r6
 8011f22:	eeb0 8a47 	vmov.f32	s16, s14
 8011f26:	eef0 8a67 	vmov.f32	s17, s15
 8011f2a:	ec53 2b18 	vmov	r2, r3, d8
 8011f2e:	4640      	mov	r0, r8
 8011f30:	4649      	mov	r1, r9
 8011f32:	f7ee f9d1 	bl	80002d8 <__aeabi_dsub>
 8011f36:	4604      	mov	r4, r0
 8011f38:	460d      	mov	r5, r1
 8011f3a:	4622      	mov	r2, r4
 8011f3c:	462b      	mov	r3, r5
 8011f3e:	4620      	mov	r0, r4
 8011f40:	4629      	mov	r1, r5
 8011f42:	f7ee fb81 	bl	8000648 <__aeabi_dmul>
 8011f46:	a36a      	add	r3, pc, #424	; (adr r3, 80120f0 <__ieee754_exp+0x290>)
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	4606      	mov	r6, r0
 8011f4e:	460f      	mov	r7, r1
 8011f50:	f7ee fb7a 	bl	8000648 <__aeabi_dmul>
 8011f54:	a368      	add	r3, pc, #416	; (adr r3, 80120f8 <__ieee754_exp+0x298>)
 8011f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5a:	f7ee f9bd 	bl	80002d8 <__aeabi_dsub>
 8011f5e:	4632      	mov	r2, r6
 8011f60:	463b      	mov	r3, r7
 8011f62:	f7ee fb71 	bl	8000648 <__aeabi_dmul>
 8011f66:	a366      	add	r3, pc, #408	; (adr r3, 8012100 <__ieee754_exp+0x2a0>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	f7ee f9b6 	bl	80002dc <__adddf3>
 8011f70:	4632      	mov	r2, r6
 8011f72:	463b      	mov	r3, r7
 8011f74:	f7ee fb68 	bl	8000648 <__aeabi_dmul>
 8011f78:	a363      	add	r3, pc, #396	; (adr r3, 8012108 <__ieee754_exp+0x2a8>)
 8011f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7e:	f7ee f9ab 	bl	80002d8 <__aeabi_dsub>
 8011f82:	4632      	mov	r2, r6
 8011f84:	463b      	mov	r3, r7
 8011f86:	f7ee fb5f 	bl	8000648 <__aeabi_dmul>
 8011f8a:	a361      	add	r3, pc, #388	; (adr r3, 8012110 <__ieee754_exp+0x2b0>)
 8011f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f90:	f7ee f9a4 	bl	80002dc <__adddf3>
 8011f94:	4632      	mov	r2, r6
 8011f96:	463b      	mov	r3, r7
 8011f98:	f7ee fb56 	bl	8000648 <__aeabi_dmul>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f7ee f998 	bl	80002d8 <__aeabi_dsub>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	460b      	mov	r3, r1
 8011fac:	4606      	mov	r6, r0
 8011fae:	460f      	mov	r7, r1
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	f7ee fb48 	bl	8000648 <__aeabi_dmul>
 8011fb8:	ec41 0b19 	vmov	d9, r0, r1
 8011fbc:	f1ba 0f00 	cmp.w	sl, #0
 8011fc0:	d15d      	bne.n	801207e <__ieee754_exp+0x21e>
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	f7ee f984 	bl	80002d8 <__aeabi_dsub>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	460b      	mov	r3, r1
 8011fd4:	ec51 0b19 	vmov	r0, r1, d9
 8011fd8:	f7ee fc60 	bl	800089c <__aeabi_ddiv>
 8011fdc:	4622      	mov	r2, r4
 8011fde:	462b      	mov	r3, r5
 8011fe0:	f7ee f97a 	bl	80002d8 <__aeabi_dsub>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	2000      	movs	r0, #0
 8011fea:	4957      	ldr	r1, [pc, #348]	; (8012148 <__ieee754_exp+0x2e8>)
 8011fec:	f7ee f974 	bl	80002d8 <__aeabi_dsub>
 8011ff0:	e753      	b.n	8011e9a <__ieee754_exp+0x3a>
 8011ff2:	4856      	ldr	r0, [pc, #344]	; (801214c <__ieee754_exp+0x2ec>)
 8011ff4:	a348      	add	r3, pc, #288	; (adr r3, 8012118 <__ieee754_exp+0x2b8>)
 8011ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffa:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011ffe:	4629      	mov	r1, r5
 8012000:	4620      	mov	r0, r4
 8012002:	f7ee fb21 	bl	8000648 <__aeabi_dmul>
 8012006:	e9d6 2300 	ldrd	r2, r3, [r6]
 801200a:	f7ee f967 	bl	80002dc <__adddf3>
 801200e:	f7ee fdcb 	bl	8000ba8 <__aeabi_d2iz>
 8012012:	4682      	mov	sl, r0
 8012014:	f7ee faae 	bl	8000574 <__aeabi_i2d>
 8012018:	a341      	add	r3, pc, #260	; (adr r3, 8012120 <__ieee754_exp+0x2c0>)
 801201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201e:	4606      	mov	r6, r0
 8012020:	460f      	mov	r7, r1
 8012022:	f7ee fb11 	bl	8000648 <__aeabi_dmul>
 8012026:	4602      	mov	r2, r0
 8012028:	460b      	mov	r3, r1
 801202a:	4620      	mov	r0, r4
 801202c:	4629      	mov	r1, r5
 801202e:	f7ee f953 	bl	80002d8 <__aeabi_dsub>
 8012032:	a33d      	add	r3, pc, #244	; (adr r3, 8012128 <__ieee754_exp+0x2c8>)
 8012034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012038:	4680      	mov	r8, r0
 801203a:	4689      	mov	r9, r1
 801203c:	4630      	mov	r0, r6
 801203e:	4639      	mov	r1, r7
 8012040:	f7ee fb02 	bl	8000648 <__aeabi_dmul>
 8012044:	ec41 0b18 	vmov	d8, r0, r1
 8012048:	e76f      	b.n	8011f2a <__ieee754_exp+0xca>
 801204a:	4a41      	ldr	r2, [pc, #260]	; (8012150 <__ieee754_exp+0x2f0>)
 801204c:	4293      	cmp	r3, r2
 801204e:	d811      	bhi.n	8012074 <__ieee754_exp+0x214>
 8012050:	a323      	add	r3, pc, #140	; (adr r3, 80120e0 <__ieee754_exp+0x280>)
 8012052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012056:	ee10 0a10 	vmov	r0, s0
 801205a:	4629      	mov	r1, r5
 801205c:	f7ee f93e 	bl	80002dc <__adddf3>
 8012060:	4b39      	ldr	r3, [pc, #228]	; (8012148 <__ieee754_exp+0x2e8>)
 8012062:	2200      	movs	r2, #0
 8012064:	f7ee fd80 	bl	8000b68 <__aeabi_dcmpgt>
 8012068:	b138      	cbz	r0, 801207a <__ieee754_exp+0x21a>
 801206a:	4b37      	ldr	r3, [pc, #220]	; (8012148 <__ieee754_exp+0x2e8>)
 801206c:	2200      	movs	r2, #0
 801206e:	4620      	mov	r0, r4
 8012070:	4629      	mov	r1, r5
 8012072:	e710      	b.n	8011e96 <__ieee754_exp+0x36>
 8012074:	f04f 0a00 	mov.w	sl, #0
 8012078:	e75f      	b.n	8011f3a <__ieee754_exp+0xda>
 801207a:	4682      	mov	sl, r0
 801207c:	e75d      	b.n	8011f3a <__ieee754_exp+0xda>
 801207e:	4632      	mov	r2, r6
 8012080:	463b      	mov	r3, r7
 8012082:	2000      	movs	r0, #0
 8012084:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012088:	f7ee f926 	bl	80002d8 <__aeabi_dsub>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	ec51 0b19 	vmov	r0, r1, d9
 8012094:	f7ee fc02 	bl	800089c <__aeabi_ddiv>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	ec51 0b18 	vmov	r0, r1, d8
 80120a0:	f7ee f91a 	bl	80002d8 <__aeabi_dsub>
 80120a4:	4642      	mov	r2, r8
 80120a6:	464b      	mov	r3, r9
 80120a8:	f7ee f916 	bl	80002d8 <__aeabi_dsub>
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	2000      	movs	r0, #0
 80120b2:	4925      	ldr	r1, [pc, #148]	; (8012148 <__ieee754_exp+0x2e8>)
 80120b4:	f7ee f910 	bl	80002d8 <__aeabi_dsub>
 80120b8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80120bc:	4592      	cmp	sl, r2
 80120be:	db02      	blt.n	80120c6 <__ieee754_exp+0x266>
 80120c0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80120c4:	e6e9      	b.n	8011e9a <__ieee754_exp+0x3a>
 80120c6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80120ca:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80120ce:	2200      	movs	r2, #0
 80120d0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80120d4:	e6f9      	b.n	8011eca <__ieee754_exp+0x6a>
 80120d6:	bf00      	nop
 80120d8:	fefa39ef 	.word	0xfefa39ef
 80120dc:	40862e42 	.word	0x40862e42
 80120e0:	8800759c 	.word	0x8800759c
 80120e4:	7e37e43c 	.word	0x7e37e43c
 80120e8:	d52d3051 	.word	0xd52d3051
 80120ec:	c0874910 	.word	0xc0874910
 80120f0:	72bea4d0 	.word	0x72bea4d0
 80120f4:	3e663769 	.word	0x3e663769
 80120f8:	c5d26bf1 	.word	0xc5d26bf1
 80120fc:	3ebbbd41 	.word	0x3ebbbd41
 8012100:	af25de2c 	.word	0xaf25de2c
 8012104:	3f11566a 	.word	0x3f11566a
 8012108:	16bebd93 	.word	0x16bebd93
 801210c:	3f66c16c 	.word	0x3f66c16c
 8012110:	5555553e 	.word	0x5555553e
 8012114:	3fc55555 	.word	0x3fc55555
 8012118:	652b82fe 	.word	0x652b82fe
 801211c:	3ff71547 	.word	0x3ff71547
 8012120:	fee00000 	.word	0xfee00000
 8012124:	3fe62e42 	.word	0x3fe62e42
 8012128:	35793c76 	.word	0x35793c76
 801212c:	3dea39ef 	.word	0x3dea39ef
 8012130:	40862e41 	.word	0x40862e41
 8012134:	7fefffff 	.word	0x7fefffff
 8012138:	3fd62e42 	.word	0x3fd62e42
 801213c:	3ff0a2b1 	.word	0x3ff0a2b1
 8012140:	08013888 	.word	0x08013888
 8012144:	08013898 	.word	0x08013898
 8012148:	3ff00000 	.word	0x3ff00000
 801214c:	08013878 	.word	0x08013878
 8012150:	3e2fffff 	.word	0x3e2fffff

08012154 <__ieee754_fmodf>:
 8012154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012156:	ee10 6a90 	vmov	r6, s1
 801215a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801215e:	d009      	beq.n	8012174 <__ieee754_fmodf+0x20>
 8012160:	ee10 2a10 	vmov	r2, s0
 8012164:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012168:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801216c:	da02      	bge.n	8012174 <__ieee754_fmodf+0x20>
 801216e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012172:	dd04      	ble.n	801217e <__ieee754_fmodf+0x2a>
 8012174:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012178:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801217e:	42ab      	cmp	r3, r5
 8012180:	dbfc      	blt.n	801217c <__ieee754_fmodf+0x28>
 8012182:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8012186:	d106      	bne.n	8012196 <__ieee754_fmodf+0x42>
 8012188:	4a32      	ldr	r2, [pc, #200]	; (8012254 <__ieee754_fmodf+0x100>)
 801218a:	0fe3      	lsrs	r3, r4, #31
 801218c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012190:	ed93 0a00 	vldr	s0, [r3]
 8012194:	e7f2      	b.n	801217c <__ieee754_fmodf+0x28>
 8012196:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 801219a:	d13f      	bne.n	801221c <__ieee754_fmodf+0xc8>
 801219c:	0219      	lsls	r1, r3, #8
 801219e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80121a2:	2900      	cmp	r1, #0
 80121a4:	dc37      	bgt.n	8012216 <__ieee754_fmodf+0xc2>
 80121a6:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80121aa:	d13d      	bne.n	8012228 <__ieee754_fmodf+0xd4>
 80121ac:	022f      	lsls	r7, r5, #8
 80121ae:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80121b2:	2f00      	cmp	r7, #0
 80121b4:	da35      	bge.n	8012222 <__ieee754_fmodf+0xce>
 80121b6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80121ba:	bfbb      	ittet	lt
 80121bc:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80121c0:	1a12      	sublt	r2, r2, r0
 80121c2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80121c6:	4093      	lsllt	r3, r2
 80121c8:	bfa8      	it	ge
 80121ca:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80121ce:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80121d2:	bfb5      	itete	lt
 80121d4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80121d8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80121dc:	1a52      	sublt	r2, r2, r1
 80121de:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80121e2:	bfb8      	it	lt
 80121e4:	4095      	lsllt	r5, r2
 80121e6:	1a40      	subs	r0, r0, r1
 80121e8:	1b5a      	subs	r2, r3, r5
 80121ea:	bb00      	cbnz	r0, 801222e <__ieee754_fmodf+0xda>
 80121ec:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80121f0:	bf38      	it	cc
 80121f2:	4613      	movcc	r3, r2
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d0c7      	beq.n	8012188 <__ieee754_fmodf+0x34>
 80121f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80121fc:	db1f      	blt.n	801223e <__ieee754_fmodf+0xea>
 80121fe:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012202:	db1f      	blt.n	8012244 <__ieee754_fmodf+0xf0>
 8012204:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012208:	317f      	adds	r1, #127	; 0x7f
 801220a:	4323      	orrs	r3, r4
 801220c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012210:	ee00 3a10 	vmov	s0, r3
 8012214:	e7b2      	b.n	801217c <__ieee754_fmodf+0x28>
 8012216:	3801      	subs	r0, #1
 8012218:	0049      	lsls	r1, r1, #1
 801221a:	e7c2      	b.n	80121a2 <__ieee754_fmodf+0x4e>
 801221c:	15d8      	asrs	r0, r3, #23
 801221e:	387f      	subs	r0, #127	; 0x7f
 8012220:	e7c1      	b.n	80121a6 <__ieee754_fmodf+0x52>
 8012222:	3901      	subs	r1, #1
 8012224:	007f      	lsls	r7, r7, #1
 8012226:	e7c4      	b.n	80121b2 <__ieee754_fmodf+0x5e>
 8012228:	15e9      	asrs	r1, r5, #23
 801222a:	397f      	subs	r1, #127	; 0x7f
 801222c:	e7c3      	b.n	80121b6 <__ieee754_fmodf+0x62>
 801222e:	2a00      	cmp	r2, #0
 8012230:	da02      	bge.n	8012238 <__ieee754_fmodf+0xe4>
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	3801      	subs	r0, #1
 8012236:	e7d7      	b.n	80121e8 <__ieee754_fmodf+0x94>
 8012238:	d0a6      	beq.n	8012188 <__ieee754_fmodf+0x34>
 801223a:	0053      	lsls	r3, r2, #1
 801223c:	e7fa      	b.n	8012234 <__ieee754_fmodf+0xe0>
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	3901      	subs	r1, #1
 8012242:	e7d9      	b.n	80121f8 <__ieee754_fmodf+0xa4>
 8012244:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012248:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801224c:	3182      	adds	r1, #130	; 0x82
 801224e:	410b      	asrs	r3, r1
 8012250:	4323      	orrs	r3, r4
 8012252:	e7dd      	b.n	8012210 <__ieee754_fmodf+0xbc>
 8012254:	080138a8 	.word	0x080138a8

08012258 <__ieee754_sqrtf>:
 8012258:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801225c:	4770      	bx	lr

0801225e <finite>:
 801225e:	b082      	sub	sp, #8
 8012260:	ed8d 0b00 	vstr	d0, [sp]
 8012264:	9801      	ldr	r0, [sp, #4]
 8012266:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801226a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801226e:	0fc0      	lsrs	r0, r0, #31
 8012270:	b002      	add	sp, #8
 8012272:	4770      	bx	lr

08012274 <_init>:
 8012274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012276:	bf00      	nop
 8012278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801227a:	bc08      	pop	{r3}
 801227c:	469e      	mov	lr, r3
 801227e:	4770      	bx	lr

08012280 <_fini>:
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012282:	bf00      	nop
 8012284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012286:	bc08      	pop	{r3}
 8012288:	469e      	mov	lr, r3
 801228a:	4770      	bx	lr
