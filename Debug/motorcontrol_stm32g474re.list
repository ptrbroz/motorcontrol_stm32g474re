
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001630  080122a0  080122a0  000222a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138d0  080138d0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080138d0  080138d0  000238d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138d8  080138d8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138d8  080138d8  000238d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138dc  080138dc  000238dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080138e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009390  20000208  08013ae8  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009598  08013ae8  00039598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030982  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e1  00000000  00000000  00060bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00065ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00067c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da09  00000000  00000000  000697f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242ec  00000000  00000000  000971f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b179  00000000  00000000  000bb4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d665e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009480  00000000  00000000  001d66b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012284 	.word	0x08012284

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08012284 	.word	0x08012284

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fcf3 	bl	800da40 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_ADC1_Init+0xe8>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001084:	2204      	movs	r2, #4
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001096:	2201      	movs	r2, #1
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010c6:	f005 f957 	bl	8006378 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d0:	f003 fdd4 	bl	8004c7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010e0:	f006 f9cc 	bl	800747c <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f003 fdc7 	bl	8004c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_ADC1_Init+0xec>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	; 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0xe8>)
 800110c:	f005 fcee 	bl	8006aec <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001116:	f003 fdb1 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002a4 	.word	0x200002a4
 8001128:	19200040 	.word	0x19200040

0800112c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00c fc81 	bl	800da40 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001140:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <MX_ADC2_Init+0xc4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001146:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800114a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_ADC2_Init+0xc0>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a8:	f005 f8e6 	bl	8006378 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011b2:	f003 fd63 	bl	8004c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_ADC2_Init+0xc8>)
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011d4:	f005 fc8a 	bl	8006aec <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011de:	f003 fd4d 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000238 	.word	0x20000238
 80011f0:	50000100 	.word	0x50000100
 80011f4:	1d500080 	.word	0x1d500080

080011f8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00c fc15 	bl	800da40 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <MX_ADC3_Init+0xe8>)
 800121a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_ADC3_Init+0xe4>)
 800121e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001222:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001226:	2210      	movs	r2, #16
 8001228:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_ADC3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_ADC3_Init+0xe4>)
 800123e:	2204      	movs	r2, #4
 8001240:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_ADC3_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001250:	2201      	movs	r2, #1
 8001252:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_ADC3_Init+0xe4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001280:	f005 f87a 	bl	8006378 <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800128a:	f003 fcf7 	bl	8004c7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_ADC3_Init+0xe4>)
 800129a:	f006 f8ef 	bl	800747c <HAL_ADCEx_MultiModeConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f003 fcea 	bl	8004c7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_ADC3_Init+0xec>)
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012b0:	2307      	movs	r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	237f      	movs	r3, #127	; 0x7f
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_ADC3_Init+0xe4>)
 80012c6:	f005 fc11 	bl	8006aec <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012d0:	f003 fcd4 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000310 	.word	0x20000310
 80012e0:	50000400 	.word	0x50000400
 80012e4:	32601000 	.word	0x32601000

080012e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001308:	d12d      	bne.n	8001366 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001312:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10b      	bne.n	8001334 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_ADC_MspInit+0x144>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_ADC_MspInit+0x144>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_ADC_MspInit+0x144>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <HAL_ADC_MspInit+0x148>)
 8001360:	f007 fc32 	bl	8008bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001364:	e05b      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_ADC_MspInit+0x14c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12d      	bne.n	80013cc <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10b      	bne.n	800139a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_MspInit+0x144>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <HAL_ADC_MspInit+0x148>)
 80013c6:	f007 fbff 	bl	8008bc8 <HAL_GPIO_Init>
}
 80013ca:	e028      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_MspInit+0x150>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ADC_MspInit+0x154>)
 800141a:	f007 fbd5 	bl	8008bc8 <HAL_GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000224 	.word	0x20000224
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800
 8001434:	50000100 	.word	0x50000100
 8001438:	50000400 	.word	0x50000400
 800143c:	48000400 	.word	0x48000400

08001440 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b08c      	sub	sp, #48	; 0x30
 8001446:	af04      	add	r7, sp, #16
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001450:	4bc5      	ldr	r3, [pc, #788]	; (8001768 <order_phases+0x328>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

	static unsigned debugCounter = 0;


	if(!cal->started){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c1b      	ldrb	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <order_phases+0x30>
		printf("Checking phase sign, pole pairs\r\n");
 800145e:	48c3      	ldr	r0, [pc, #780]	; (800176c <order_phases+0x32c>)
 8001460:	f00c ffe6 	bl	800e430 <puts>
		cal->started = 1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001770 <order_phases+0x330>
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a05 	vstr	s15, [r3, #20]

	float A = 0.04;
 800148e:	4bb9      	ldr	r3, [pc, #740]	; (8001774 <order_phases+0x334>)
 8001490:	61fb      	str	r3, [r7, #28]
	float f = 10;
 8001492:	4bb9      	ldr	r3, [pc, #740]	; (8001778 <order_phases+0x338>)
 8001494:	61bb      	str	r3, [r7, #24]

	if(debugCounter%10000==0){
 8001496:	4bb9      	ldr	r3, [pc, #740]	; (800177c <order_phases+0x33c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4bb9      	ldr	r3, [pc, #740]	; (8001780 <order_phases+0x340>)
 800149c:	fba3 1302 	umull	r1, r3, r3, r2
 80014a0:	0b5b      	lsrs	r3, r3, #13
 80014a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12e      	bne.n	800150e <order_phases+0xce>
		printf("DC %u k, time = %f\n\r", debugCounter/1000, cal->time);
 80014b0:	4bb2      	ldr	r3, [pc, #712]	; (800177c <order_phases+0x33c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4ab3      	ldr	r2, [pc, #716]	; (8001784 <order_phases+0x344>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	099c      	lsrs	r4, r3, #6
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4621      	mov	r1, r4
 80014cc:	48ae      	ldr	r0, [pc, #696]	; (8001788 <order_phases+0x348>)
 80014ce:	f00c ff29 	bl	800e324 <iprintf>
		printf("%f %f %f \r\n", controller->i_a, controller->i_b, controller->i_c);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4680      	mov	r8, r0
 80014de:	4689      	mov	r9, r1
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001500:	e9cd 4500 	strd	r4, r5, [sp]
 8001504:	4642      	mov	r2, r8
 8001506:	464b      	mov	r3, r9
 8001508:	48a0      	ldr	r0, [pc, #640]	; (800178c <order_phases+0x34c>)
 800150a:	f00c ff0b 	bl	800e324 <iprintf>
	}

	debugCounter++;
 800150e:	4b9b      	ldr	r3, [pc, #620]	; (800177c <order_phases+0x33c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a99      	ldr	r2, [pc, #612]	; (800177c <order_phases+0x33c>)
 8001516:	6013      	str	r3, [r2, #0]

    //if(cal->time < T1){
	if(cal->time < 15.0){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a05 	vldr	s15, [r3, #20]
 800151e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	f140 80ae 	bpl.w	800168a <order_phases+0x24a>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001540:	3388      	adds	r3, #136	; 0x88
 8001542:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800154a:	3390      	adds	r3, #144	; 0x90
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
        //controller->i_d_des = I_CAL; Ben
        controller->i_d_des = 0.0f;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        //commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]

    	//debug manual rotation
    	controller->dtc_u = 0.5 + A*sin_lut(2*3.14*(f*cal->time));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed93 7a05 	vldr	s14, [r3, #20]
 8001574:	edd7 7a06 	vldr	s15, [r7, #24]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	ee17 0a90 	vmov	r0, s15
 8001580:	f7ff f80a 	bl	8000598 <__aeabi_f2d>
 8001584:	a372      	add	r3, pc, #456	; (adr r3, 8001750 <order_phases+0x310>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee00 3a10 	vmov	s0, r3
 80015a0:	f003 fc8e 	bl	8004ec0 <sin_lut>
 80015a4:	eeb0 7a40 	vmov.f32	s14, s0
 80015a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    	controller->dtc_v = 0.5 + A*sin_lut(2*3.14*(f*cal->time)+6.28/3.0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	ee17 0a90 	vmov	r0, s15
 80015d0:	f7fe ffe2 	bl	8000598 <__aeabi_f2d>
 80015d4:	a35e      	add	r3, pc, #376	; (adr r3, 8001750 <order_phases+0x310>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a35c      	add	r3, pc, #368	; (adr r3, 8001758 <order_phases+0x318>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7fe fe76 	bl	80002dc <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb1e 	bl	8000c38 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	ee00 3a10 	vmov	s0, r3
 8001602:	f003 fc5d 	bl	8004ec0 <sin_lut>
 8001606:	eeb0 7a40 	vmov.f32	s14, s0
 800160a:	edd7 7a07 	vldr	s15, [r7, #28]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    	controller->dtc_w = 0.5 + A*sin_lut(2*3.14*(f*cal->time)+2*6.28/3.0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	ed93 7a05 	vldr	s14, [r3, #20]
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ffb1 	bl	8000598 <__aeabi_f2d>
 8001636:	a346      	add	r3, pc, #280	; (adr r3, 8001750 <order_phases+0x310>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f804 	bl	8000648 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	a345      	add	r3, pc, #276	; (adr r3, 8001760 <order_phases+0x320>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7fe fe45 	bl	80002dc <__adddf3>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faed 	bl	8000c38 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	ee00 3a10 	vmov	s0, r3
 8001664:	f003 fc2c 	bl	8004ec0 <sin_lut>
 8001668:	eeb0 7a40 	vmov.f32	s14, s0
 800166c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60



    	//svm(controller->v_max, A*sin_lut(2*3.14*(f*cal->time)), A*sin_lut(2*3.14*(f*cal->time)+6.28/3.0), A*sin_lut(2*3.14*(f*cal->time)+2*6.28/3.0), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

    	set_dtc(controller);
 8001682:	68b8      	ldr	r0, [r7, #8]
 8001684:	f001 f8d4 	bl	8002830 <set_dtc>


    	return;
 8001688:	e0be      	b.n	8001808 <order_phases+0x3c8>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001690:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001790 <order_phases+0x350>
 8001694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d51d      	bpl.n	80016da <order_phases+0x29a>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016c4:	3388      	adds	r3, #136	; 0x88
 80016c6:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016ce:	332c      	adds	r3, #44	; 0x2c
 80016d0:	4619      	mov	r1, r3
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f001 fd84 	bl	80031e0 <commutate>
    	return;
 80016d8:	e096      	b.n	8001808 <order_phases+0x3c8>
    }

	reset_foc(controller);
 80016da:	68b8      	ldr	r0, [r7, #8]
 80016dc:	f001 fc96 	bl	800300c <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f4:	eef0 7ae7 	vabs.f32	s15, s15
 80016f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001794 <order_phases+0x354>
 80016fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001700:	ee16 0a90 	vmov	r0, s13
 8001704:	f7fe ff48 	bl	8000598 <__aeabi_f2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	f010 fa74 	bl	8011bfc <round>
 8001714:	ec53 2b10 	vmov	r2, r3, d0
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a06 	vldr	s15, [r3, #24]
 800172e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd2f      	ble.n	800179c <order_phases+0x35c>
		cal->phase_order = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001744:	4814      	ldr	r0, [pc, #80]	; (8001798 <order_phases+0x358>)
 8001746:	f00c fe73 	bl	800e430 <puts>
 800174a:	e02e      	b.n	80017aa <order_phases+0x36a>
 800174c:	f3af 8000 	nop.w
 8001750:	51eb851f 	.word	0x51eb851f
 8001754:	40191eb8 	.word	0x40191eb8
 8001758:	8bf258bf 	.word	0x8bf258bf
 800175c:	4000bf25 	.word	0x4000bf25
 8001760:	8bf258bf 	.word	0x8bf258bf
 8001764:	4010bf25 	.word	0x4010bf25
 8001768:	20008f34 	.word	0x20008f34
 800176c:	080122a0 	.word	0x080122a0
 8001770:	37d1b717 	.word	0x37d1b717
 8001774:	3d23d70a 	.word	0x3d23d70a
 8001778:	41200000 	.word	0x41200000
 800177c:	20000228 	.word	0x20000228
 8001780:	d1b71759 	.word	0xd1b71759
 8001784:	10624dd3 	.word	0x10624dd3
 8001788:	080122c4 	.word	0x080122c4
 800178c:	080122dc 	.word	0x080122dc
 8001790:	3fd06cbe 	.word	0x3fd06cbe
 8001794:	40c90fdb 	.word	0x40c90fdb
 8001798:	080122e8 	.word	0x080122e8
	}
	else{
		cal->phase_order = 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <order_phases+0x3d0>)
 80017a6:	f00c fe43 	bl	800e430 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4818      	ldr	r0, [pc, #96]	; (8001814 <order_phases+0x3d4>)
 80017b2:	f00c fdb7 	bl	800e324 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe feec 	bl	8000598 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	6978      	ldr	r0, [r7, #20]
 80017c6:	f7fe fee7 	bl	8000598 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9cd 2300 	strd	r2, r3, [sp]
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <order_phases+0x3d8>)
 80017d8:	f00c fda4 	bl	800e324 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <order_phases+0x3dc>)
 80017e6:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <order_phases+0x3e0>)
 80017f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001810:	08012300 	.word	0x08012300
 8001814:	08012318 	.word	0x08012318
 8001818:	0801232c 	.word	0x0801232c
 800181c:	20008f34 	.word	0x20008f34
 8001820:	20000684 	.word	0x20000684

08001824 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7c1b      	ldrb	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10f      	bne.n	800185a <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 800183a:	489e      	ldr	r0, [pc, #632]	; (8001ab4 <calibrate_encoder+0x290>)
 800183c:	f00c fdf8 	bl	800e430 <puts>
			cal->started = 1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ab8 <calibrate_encoder+0x294>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a05 	vldr	s15, [r3, #20]
 800187e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d525      	bpl.n	80018d8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800189e:	3388      	adds	r3, #136	; 0x88
 80018a0:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80018a2:	4b86      	ldr	r3, [pc, #536]	; (8001abc <calibrate_encoder+0x298>)
 80018a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018bc:	332c      	adds	r3, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fc8d 	bl	80031e0 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80018d6:	e259      	b.n	8001d8c <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	ed93 7a05 	vldr	s14, [r3, #20]
 80018de:	4b77      	ldr	r3, [pc, #476]	; (8001abc <calibrate_encoder+0x298>)
 80018e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018e4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001ac0 <calibrate_encoder+0x29c>
 80018e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018ec:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80018f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	f140 808f 	bpl.w	8001a26 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edd3 7a02 	vldr	s15, [r3, #8]
 800190e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001ac4 <calibrate_encoder+0x2a0>
 8001912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001926:	3388      	adds	r3, #136	; 0x88
 8001928:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001930:	332c      	adds	r3, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	f001 fc53 	bl	80031e0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	dc00      	bgt.n	8001952 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001950:	e21c      	b.n	8001d8c <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a02 	vldr	s15, [r3, #8]
 8001958:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001ad8 <calibrate_encoder+0x2b4>
 800195c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001960:	4b56      	ldr	r3, [pc, #344]	; (8001abc <calibrate_encoder+0x298>)
 8001962:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001966:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001ac0 <calibrate_encoder+0x29c>
 800196a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	13db      	asrs	r3, r3, #15
 800198a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001992:	4618      	mov	r0, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	441a      	add	r2, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f100 030a 	add.w	r3, r0, #10
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a8:	461d      	mov	r5, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	330a      	adds	r3, #10
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	685c      	ldr	r4, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9cd 2300 	strd	r2, r3, [sp]
 80019ca:	4623      	mov	r3, r4
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4629      	mov	r1, r5
 80019d0:	483d      	ldr	r0, [pc, #244]	; (8001ac8 <calibrate_encoder+0x2a4>)
 80019d2:	f00c fca7 	bl	800e324 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019dc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001acc <calibrate_encoder+0x2a8>
 80019e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <calibrate_encoder+0x298>)
 80019f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019fc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001ad0 <calibrate_encoder+0x2ac>
 8001a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a0c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	f000 81b7 	beq.w	8001d86 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001a24:	e1b2      	b.n	8001d8c <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <calibrate_encoder+0x298>)
 8001a2e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a32:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001ad4 <calibrate_encoder+0x2b0>
 8001a36:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a3a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001a3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	f140 80a9 	bpl.w	8001ba8 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ac4 <calibrate_encoder+0x2a0>
 8001a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <calibrate_encoder+0x298>)
 8001a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a88:	3388      	adds	r3, #136	; 0x88
 8001a8a:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001a92:	332c      	adds	r3, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	68b8      	ldr	r0, [r7, #8]
 8001a98:	f001 fba2 	bl	80031e0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dc14      	bgt.n	8001adc <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001ab2:	e16a      	b.n	8001d8a <calibrate_encoder+0x566>
 8001ab4:	08012348 	.word	0x08012348
 8001ab8:	37d1b717 	.word	0x37d1b717
 8001abc:	20000684 	.word	0x20000684
 8001ac0:	40c90fdb 	.word	0x40c90fdb
 8001ac4:	3983126e 	.word	0x3983126e
 8001ac8:	08012370 	.word	0x08012370
 8001acc:	3ba0d97c 	.word	0x3ba0d97c
 8001ad0:	43000000 	.word	0x43000000
 8001ad4:	41490fdb 	.word	0x41490fdb
 8001ad8:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8152 	beq.w	8001d8a <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aec:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001ad8 <calibrate_encoder+0x2b4>
 8001af0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001af4:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <calibrate_encoder+0x570>)
 8001af6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001afa:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001d98 <calibrate_encoder+0x574>
 8001afe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	13db      	asrs	r3, r3, #15
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	330a      	adds	r3, #10
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001b3e:	4610      	mov	r0, r2
 8001b40:	0fda      	lsrs	r2, r3, #31
 8001b42:	4413      	add	r3, r2
 8001b44:	105b      	asrs	r3, r3, #1
 8001b46:	4619      	mov	r1, r3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f100 030a 	add.w	r3, r0, #10
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	330a      	adds	r3, #10
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	685c      	ldr	r4, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd13 	bl	8000598 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9cd 2300 	strd	r2, r3, [sp]
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	6a3a      	ldr	r2, [r7, #32]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	4886      	ldr	r0, [pc, #536]	; (8001d9c <calibrate_encoder+0x578>)
 8001b82:	f00c fbcf 	bl	800e324 <iprintf>
			cal->sample_count--;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b98:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001da0 <calibrate_encoder+0x57c>
 8001b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001ba6:	e0f0      	b.n	8001d8a <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f001 fa2f 	bl	800300c <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb6:	e00b      	b.n	8001bd0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbc:	330a      	adds	r3, #10
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bc6:	4413      	add	r3, r2
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	3301      	adds	r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd0:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <calibrate_encoder+0x570>)
 8001bd2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbe8      	blt.n	8001bb8 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <calibrate_encoder+0x570>)
 8001bf2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001bf6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001da4 <calibrate_encoder+0x580>
 8001bfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 2a90 	vmov	r2, s15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da01      	bge.n	8001c22 <calibrate_encoder+0x3fe>
 8001c1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c22:	125b      	asrs	r3, r3, #9
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	e0a0      	b.n	8001d6e <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	0fda      	lsrs	r2, r3, #31
 8001c34:	4413      	add	r3, r2
 8001c36:	105b      	asrs	r3, r3, #1
 8001c38:	425b      	negs	r3, r3
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3c:	e068      	b.n	8001d10 <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <calibrate_encoder+0x570>)
 8001c4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001da4 <calibrate_encoder+0x580>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001da4 <calibrate_encoder+0x580>
 8001c5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c74:	ee17 3a90 	vmov	r3, s15
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da13      	bge.n	8001ca8 <calibrate_encoder+0x484>
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <calibrate_encoder+0x570>)
 8001c8c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001c90:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001da4 <calibrate_encoder+0x580>
 8001c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca6:	e027      	b.n	8001cf8 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <calibrate_encoder+0x570>)
 8001cb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cb8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001da4 <calibrate_encoder+0x580>
 8001cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	dd12      	ble.n	8001cf8 <calibrate_encoder+0x4d4>
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <calibrate_encoder+0x570>)
 8001cde:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ce2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001da4 <calibrate_encoder+0x580>
 8001ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	330a      	adds	r3, #10
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d06:	4413      	add	r3, r2
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	0fda      	lsrs	r2, r3, #31
 8001d14:	4413      	add	r3, r2
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	db8e      	blt.n	8001c3e <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2e:	4413      	add	r3, r2
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	2b7f      	cmp	r3, #127	; 0x7f
 8001d36:	dd02      	ble.n	8001d3e <calibrate_encoder+0x51a>
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	3b80      	subs	r3, #128	; 0x80
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d4e:	330a      	adds	r3, #10
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <calibrate_encoder+0x584>)
 8001d64:	f00c fade 	bl	800e324 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d70:	2b7f      	cmp	r3, #127	; 0x7f
 8001d72:	f77f af5b 	ble.w	8001c2c <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001d84:	e002      	b.n	8001d8c <calibrate_encoder+0x568>
				return;
 8001d86:	bf00      	nop
 8001d88:	e000      	b.n	8001d8c <calibrate_encoder+0x568>
		return;
 8001d8a:	bf00      	nop
}
 8001d8c:	3748      	adds	r7, #72	; 0x48
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000684 	.word	0x20000684
 8001d98:	40c90fdb 	.word	0x40c90fdb
 8001d9c:	08012370 	.word	0x08012370
 8001da0:	3ba0d97c 	.word	0x3ba0d97c
 8001da4:	43000000 	.word	0x43000000
 8001da8:	08012380 	.word	0x08012380

08001dac <drv_spi_write>:
#include <drv8353.h>
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f007 f881 	bl	8008ecc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1c9a      	adds	r2, r3, #2
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	480b      	ldr	r0, [pc, #44]	; (8001e04 <drv_spi_write+0x58>)
 8001dd8:	f008 f96f 	bl	800a0ba <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001ddc:	bf00      	nop
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <drv_spi_write+0x58>)
 8001de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d0f9      	beq.n	8001dde <drv_spi_write+0x32>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001dea:	2201      	movs	r2, #1
 8001dec:	2110      	movs	r1, #16
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f007 f86b 	bl	8008ecc <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	885b      	ldrh	r3, [r3, #2]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20009444 	.word	0x20009444

08001e08 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	463b      	mov	r3, r7
 8001e10:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001e14:	463b      	mov	r3, r7
 8001e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffc6 	bl	8001dac <drv_spi_write>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	463b      	mov	r3, r7
 8001e32:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001e36:	463b      	mov	r3, r7
 8001e38:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ffb5 	bl	8001dac <drv_spi_write>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e5a:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	02db      	lsls	r3, r3, #11
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff99 	bl	8001dac <drv_spi_write>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	f107 0408 	add.w	r4, r7, #8
 8001e8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	02db      	lsls	r3, r3, #11
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff7d 	bl	8001dac <drv_spi_write>
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}

08001eba <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001eba:	b590      	push	{r4, r7, lr}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	f107 0408 	add.w	r4, r7, #8
 8001ec4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	01db      	lsls	r3, r3, #7
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x07FF;
 8001f28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f2c:	82bb      	strh	r3, [r7, #20]
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
 8001f2e:	8afa      	ldrh	r2, [r7, #22]
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff38 	bl	8001dac <drv_spi_write>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	827b      	strh	r3, [r7, #18]
	//printf("loop retval = %d\n\r", (retval&mask));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	f107 0408 	add.w	r4, r7, #8
 8001f52:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	82fb      	strh	r3, [r7, #22]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
 8001f8e:	8afa      	ldrh	r2, [r7, #22]
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff08 	bl	8001dac <drv_spi_write>
}
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}

08001fa4 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	f107 0408 	add.w	r4, r7, #8
 8001fae:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	b21b      	sxth	r3, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	b21a      	sxth	r2, r3
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	82fb      	strh	r3, [r7, #22]
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
 8002012:	8afa      	ldrh	r2, [r7, #22]
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fec6 	bl	8001dac <drv_spi_write>
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	463b      	mov	r3, r7
 8002030:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002034:	2202      	movs	r2, #2
 8002036:	463b      	mov	r3, r7
 8002038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203c:	f7ff ff06 	bl	8001e4c <drv_read_register>
 8002040:	4603      	mov	r3, r0
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	81fb      	strh	r3, [r7, #14]
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	2202      	movs	r2, #2
 800204c:	4639      	mov	r1, r7
 800204e:	c903      	ldmia	r1, {r0, r1}
 8002050:	f7ff ff18 	bl	8001e84 <drv_write_register>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	463b      	mov	r3, r7
 8002064:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002068:	2202      	movs	r2, #2
 800206a:	463b      	mov	r3, r7
 800206c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002070:	f7ff feec 	bl	8001e4c <drv_read_register>
 8002074:	4603      	mov	r3, r0
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	81fb      	strh	r3, [r7, #14]
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	2202      	movs	r2, #2
 8002080:	4639      	mov	r1, r7
 8002082:	c903      	ldmia	r1, {r0, r1}
 8002084:	f7ff fefe 	bl	8001e84 <drv_write_register>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	463b      	mov	r3, r7
 8002098:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 800209c:	463b      	mov	r3, r7
 800209e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a2:	f7ff feb1 	bl	8001e08 <drv_read_FSR1>
 80020a6:	4603      	mov	r3, r0
 80020a8:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80020aa:	463b      	mov	r3, r7
 80020ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020b0:	f7ff febb 	bl	8001e2a <drv_read_FSR2>
 80020b4:	4603      	mov	r3, r0
 80020b6:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <drv_print_faults+0x38>
 80020c2:	4857      	ldr	r0, [pc, #348]	; (8002220 <drv_print_faults+0x190>)
 80020c4:	f00c f92e 	bl	800e324 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <drv_print_faults+0x48>
 80020d2:	4854      	ldr	r0, [pc, #336]	; (8002224 <drv_print_faults+0x194>)
 80020d4:	f00c f926 	bl	800e324 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <drv_print_faults+0x58>
 80020e2:	4851      	ldr	r0, [pc, #324]	; (8002228 <drv_print_faults+0x198>)
 80020e4:	f00c f91e 	bl	800e324 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <drv_print_faults+0x68>
 80020f2:	484e      	ldr	r0, [pc, #312]	; (800222c <drv_print_faults+0x19c>)
 80020f4:	f00c f916 	bl	800e324 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <drv_print_faults+0x78>
 8002102:	484b      	ldr	r0, [pc, #300]	; (8002230 <drv_print_faults+0x1a0>)
 8002104:	f00c f90e 	bl	800e324 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <drv_print_faults+0x88>
 8002112:	4848      	ldr	r0, [pc, #288]	; (8002234 <drv_print_faults+0x1a4>)
 8002114:	f00c f906 	bl	800e324 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <drv_print_faults+0x98>
 8002122:	4845      	ldr	r0, [pc, #276]	; (8002238 <drv_print_faults+0x1a8>)
 8002124:	f00c f8fe 	bl	800e324 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <drv_print_faults+0xa8>
 8002132:	4842      	ldr	r0, [pc, #264]	; (800223c <drv_print_faults+0x1ac>)
 8002134:	f00c f8f6 	bl	800e324 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <drv_print_faults+0xb8>
 8002142:	483f      	ldr	r0, [pc, #252]	; (8002240 <drv_print_faults+0x1b0>)
 8002144:	f00c f8ee 	bl	800e324 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <drv_print_faults+0xc8>
 8002152:	483c      	ldr	r0, [pc, #240]	; (8002244 <drv_print_faults+0x1b4>)
 8002154:	f00c f8e6 	bl	800e324 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <drv_print_faults+0xd8>
 8002162:	4839      	ldr	r0, [pc, #228]	; (8002248 <drv_print_faults+0x1b8>)
 8002164:	f00c f8de 	bl	800e324 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002168:	89bb      	ldrh	r3, [r7, #12]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <drv_print_faults+0xe8>
 8002172:	4836      	ldr	r0, [pc, #216]	; (800224c <drv_print_faults+0x1bc>)
 8002174:	f00c f8d6 	bl	800e324 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <drv_print_faults+0xf8>
 8002182:	4833      	ldr	r0, [pc, #204]	; (8002250 <drv_print_faults+0x1c0>)
 8002184:	f00c f8ce 	bl	800e324 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <drv_print_faults+0x108>
 8002192:	4830      	ldr	r0, [pc, #192]	; (8002254 <drv_print_faults+0x1c4>)
 8002194:	f00c f8c6 	bl	800e324 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8002198:	89bb      	ldrh	r3, [r7, #12]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <drv_print_faults+0x118>
 80021a2:	482d      	ldr	r0, [pc, #180]	; (8002258 <drv_print_faults+0x1c8>)
 80021a4:	f00c f8be 	bl	800e324 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80021a8:	89bb      	ldrh	r3, [r7, #12]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <drv_print_faults+0x128>
 80021b2:	482a      	ldr	r0, [pc, #168]	; (800225c <drv_print_faults+0x1cc>)
 80021b4:	f00c f8b6 	bl	800e324 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80021b8:	89bb      	ldrh	r3, [r7, #12]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <drv_print_faults+0x138>
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <drv_print_faults+0x1d0>)
 80021c4:	f00c f8ae 	bl	800e324 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <drv_print_faults+0x148>
 80021d2:	4824      	ldr	r0, [pc, #144]	; (8002264 <drv_print_faults+0x1d4>)
 80021d4:	f00c f8a6 	bl	800e324 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <drv_print_faults+0x158>
 80021e2:	4821      	ldr	r0, [pc, #132]	; (8002268 <drv_print_faults+0x1d8>)
 80021e4:	f00c f89e 	bl	800e324 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80021e8:	89bb      	ldrh	r3, [r7, #12]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <drv_print_faults+0x168>
 80021f2:	481e      	ldr	r0, [pc, #120]	; (800226c <drv_print_faults+0x1dc>)
 80021f4:	f00c f896 	bl	800e324 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <drv_print_faults+0x178>
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <drv_print_faults+0x1e0>)
 8002204:	f00c f88e 	bl	800e324 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002208:	89bb      	ldrh	r3, [r7, #12]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <drv_print_faults+0x188>
 8002212:	4818      	ldr	r0, [pc, #96]	; (8002274 <drv_print_faults+0x1e4>)
 8002214:	f00c f886 	bl	800e324 <iprintf>

}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	0801238c 	.word	0x0801238c
 8002224:	08012398 	.word	0x08012398
 8002228:	080123a4 	.word	0x080123a4
 800222c:	080123ac 	.word	0x080123ac
 8002230:	080123b4 	.word	0x080123b4
 8002234:	080123bc 	.word	0x080123bc
 8002238:	080123c8 	.word	0x080123c8
 800223c:	080123d4 	.word	0x080123d4
 8002240:	080123e0 	.word	0x080123e0
 8002244:	080123ec 	.word	0x080123ec
 8002248:	080123f8 	.word	0x080123f8
 800224c:	08012404 	.word	0x08012404
 8002250:	0801240c 	.word	0x0801240c
 8002254:	08012414 	.word	0x08012414
 8002258:	0801241c 	.word	0x0801241c
 800225c:	08012424 	.word	0x08012424
 8002260:	0801242c 	.word	0x0801242c
 8002264:	08012438 	.word	0x08012438
 8002268:	08012444 	.word	0x08012444
 800226c:	08012450 	.word	0x08012450
 8002270:	0801245c 	.word	0x0801245c
 8002274:	08012468 	.word	0x08012468

08002278 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800227e:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <MX_FDCAN2_Init+0x84>)
 8002280:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002290:	2200      	movs	r2, #0
 8002292:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 8002296:	2200      	movs	r2, #0
 8002298:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 800229c:	2200      	movs	r2, #0
 800229e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 12;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022b4:	2203      	movs	r2, #3
 80022b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 3;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022cc:	2203      	movs	r2, #3
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022d8:	2201      	movs	r2, #1
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022de:	2200      	movs	r2, #0
 80022e0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_FDCAN2_Init+0x80>)
 80022e4:	f005 fba2 	bl	8007a2c <HAL_FDCAN_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 80022ee:	f002 fcc5 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000037c 	.word	0x2000037c
 80022fc:	40006800 	.word	0x40006800

08002300 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_FDCAN_MspInit+0x8c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12f      	bne.n	8002382 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_FDCAN_MspInit+0x90>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002352:	2360      	movs	r3, #96	; 0x60
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002362:	2309      	movs	r3, #9
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_FDCAN_MspInit+0x94>)
 800236e:	f006 fc2b 	bl	8008bc8 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2056      	movs	r0, #86	; 0x56
 8002378:	f005 fa63 	bl	8007842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800237c:	2056      	movs	r0, #86	; 0x56
 800237e:	f005 fa7a 	bl	8007876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40006800 	.word	0x40006800
 8002390:	40021000 	.word	0x40021000
 8002394:	48000400 	.word	0x48000400

08002398 <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
	msg->filter.FilterID1 = CAN_ID;//<<5;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <can_rx_init+0x58>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = 0x7FF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023b0:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterIndex = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.IdType = FDCAN_STANDARD_ID;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3334      	adds	r3, #52	; 0x34
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <can_rx_init+0x5c>)
 80023d2:	f005 fc85 	bl	8007ce0 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	2202      	movs	r2, #2
 80023de:	2102      	movs	r1, #2
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <can_rx_init+0x5c>)
 80023e2:	f005 fcd7 	bl	8007d94 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20008f34 	.word	0x20008f34
 80023f4:	2000037c 	.word	0x2000037c

080023f8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800240c:	615a      	str	r2, [r3, #20]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <can_tx_init+0x54>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
	msg->tx_header.MessageMarker = 0; //???
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20008f34 	.word	0x20008f34

08002450 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8002450:	b084      	sub	sp, #16
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002460:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800246e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002478:	0912      	lsrs	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800248a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002492:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800249c:	0912      	lsrs	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 80024a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80024b2:	4313      	orrs	r3, r2
 80024b4:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <unpack_cmd+0x160>)
 80024b8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80024bc:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <unpack_cmd+0x160>)
 80024be:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80024c2:	2110      	movs	r1, #16
 80024c4:	eef0 0a47 	vmov.f32	s1, s14
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	6978      	ldr	r0, [r7, #20]
 80024ce:	f002 fcc5 	bl	8004e5c <uint_to_float>
 80024d2:	eef0 7a40 	vmov.f32	s15, s0
 80024d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d8:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <unpack_cmd+0x160>)
 80024de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <unpack_cmd+0x160>)
 80024e4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	1d1c      	adds	r4, r3, #4
 80024ec:	210c      	movs	r1, #12
 80024ee:	eef0 0a47 	vmov.f32	s1, s14
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	6938      	ldr	r0, [r7, #16]
 80024f8:	f002 fcb0 	bl	8004e5c <uint_to_float>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <unpack_cmd+0x160>)
 8002506:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	f103 0408 	add.w	r4, r3, #8
 8002510:	210c      	movs	r1, #12
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80025b4 <unpack_cmd+0x164>
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f002 fc9e 	bl	8004e5c <uint_to_float>
 8002520:	eef0 7a40 	vmov.f32	s15, s0
 8002524:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <unpack_cmd+0x160>)
 800252a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800252e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002530:	f103 040c 	add.w	r4, r3, #12
 8002534:	210c      	movs	r1, #12
 8002536:	eef0 0a67 	vmov.f32	s1, s15
 800253a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80025b4 <unpack_cmd+0x164>
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f002 fc8c 	bl	8004e5c <uint_to_float>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <unpack_cmd+0x160>)
 800254e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002552:	eeb1 7a67 	vneg.f32	s14, s15
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <unpack_cmd+0x160>)
 8002558:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800255c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <unpack_cmd+0x160>)
 8002562:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002566:	ee67 6a27 	vmul.f32	s13, s14, s15
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <unpack_cmd+0x160>)
 800256c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <unpack_cmd+0x160>)
 8002572:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <unpack_cmd+0x160>)
 800257c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002586:	f103 0410 	add.w	r4, r3, #16
 800258a:	210c      	movs	r1, #12
 800258c:	eef0 0a67 	vmov.f32	s1, s15
 8002590:	eeb0 0a66 	vmov.f32	s0, s13
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f002 fc61 	bl	8004e5c <uint_to_float>
 800259a:	eef0 7a40 	vmov.f32	s15, s0
 800259e:	edc4 7a00 	vstr	s15, [r4]

    }
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80025ac:	b004      	add	sp, #16
 80025ae:	4770      	bx	lr
 80025b0:	20000684 	.word	0x20000684
 80025b4:	00000000 	.word	0x00000000

080025b8 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 80025b8:	b480      	push	{r7}
 80025ba:	b093      	sub	sp, #76	; 0x4c
 80025bc:	af00      	add	r7, sp, #0
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 80025be:	2300      	movs	r3, #0
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	e02f      	b.n	8002624 <load_from_flash+0x6c>
    	uint32_t address = FLOATS_ADDR + i*4;
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025ca:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    	uint64_t doubleWord = *((uint64_t*)(address));
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	60fb      	str	r3, [r7, #12]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 80025e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	000a      	movs	r2, r1
 80025ee:	2300      	movs	r3, #0
 80025f0:	4613      	mov	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]

    	float float1 = *((float*)(&word1));
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
    	float float2 = *((float*)(&word2));
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]

    	__float_reg[i] =   float1;
 8002604:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <load_from_flash+0x10c>)
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	601a      	str	r2, [r3, #0]
    	__float_reg[i+1] = float2;
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	3301      	adds	r3, #1
 8002614:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <load_from_flash+0x10c>)
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	601a      	str	r2, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 800261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002620:	3302      	adds	r3, #2
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
 8002624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002626:	2b3f      	cmp	r3, #63	; 0x3f
 8002628:	ddcc      	ble.n	80025c4 <load_from_flash+0xc>

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 800262a:	2300      	movs	r3, #0
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
 800262e:	e03e      	b.n	80026ae <load_from_flash+0xf6>
    	uint32_t address = INTS_ADDR + i*4;
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	461a      	mov	r2, r3
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <load_from_flash+0x110>)
 8002638:	4413      	add	r3, r2
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c

    	uint64_t doubleWord = *((uint64_t*)(address));
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	607b      	str	r3, [r7, #4]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 800264a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	000a      	movs	r2, r1
 8002658:	2300      	movs	r3, #0
 800265a:	4613      	mov	r3, r2
 800265c:	603b      	str	r3, [r7, #0]

		float int1 = *((int*)(&word1));
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float int2 = *((int*)(&word2));
 800266e:	463b      	mov	r3, r7
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		__int_reg[i] =   int1;
 800267e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002686:	ee17 1a90 	vmov	r1, s15
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <load_from_flash+0x114>)
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__int_reg[i+1] = int2;
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	3301      	adds	r3, #1
 8002696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800269a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269e:	ee17 1a90 	vmov	r1, s15
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <load_from_flash+0x114>)
 80026a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 80026a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026aa:	3302      	adds	r3, #2
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
 80026ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b0:	2bff      	cmp	r3, #255	; 0xff
 80026b2:	ddbd      	ble.n	8002630 <load_from_flash+0x78>
    }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	374c      	adds	r7, #76	; 0x4c
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000684 	.word	0x20000684
 80026c8:	0807d900 	.word	0x0807d900
 80026cc:	20008f34 	.word	0x20008f34

080026d0 <erase_reserved_flash>:

/**
  * @brief  Erase used page of flash memory to prepare for reprogramming
  * @retval uint32_t PageError. 0xFFFFFFFF means no problem
  */
int erase_reserved_flash(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef eraseStruct;
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
    eraseStruct.Banks = FLASH_BANK_2;
 80026da:	2302      	movs	r3, #2
 80026dc:	60fb      	str	r3, [r7, #12]
    eraseStruct.Page = RESERVED_PAGE;
 80026de:	237b      	movs	r3, #123	; 0x7b
 80026e0:	613b      	str	r3, [r7, #16]
    eraseStruct.NbPages = 5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	617b      	str	r3, [r7, #20]
    uint32_t error;
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 80026e6:	1d3a      	adds	r2, r7, #4
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f006 f908 	bl	8008904 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <erase_reserved_flash+0x34>)
 80026f6:	f00b fe15 	bl	800e324 <iprintf>
    return error;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08012474 	.word	0x08012474

08002708 <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 800270e:	f005 ffcb 	bl	80086a8 <HAL_FLASH_Unlock>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 1;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <save_to_flash+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e075      	b.n	800280c <save_to_flash+0x104>

	status = HAL_FLASH_OB_Unlock();
 8002720:	f005 fffe 	bl	8008720 <HAL_FLASH_OB_Unlock>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 2;
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <save_to_flash+0x2a>
 800272e:	2302      	movs	r3, #2
 8002730:	e06c      	b.n	800280c <save_to_flash+0x104>

    unsigned int eraseError = erase_reserved_flash();
 8002732:	f7ff ffcd 	bl	80026d0 <erase_reserved_flash>
 8002736:	4603      	mov	r3, r0
 8002738:	613b      	str	r3, [r7, #16]
    if(eraseError!=0xFFFFFFFF) return 3;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d001      	beq.n	8002746 <save_to_flash+0x3e>
 8002742:	2303      	movs	r3, #3
 8002744:	e062      	b.n	800280c <save_to_flash+0x104>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <save_to_flash+0x10c>)
 8002748:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800274c:	611a      	str	r2, [r3, #16]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800274e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002752:	f006 f827 	bl	80087a4 <FLASH_WaitForLastOperation>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
    if(status!=HAL_OK) return 5;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <save_to_flash+0x5c>
 8002760:	2305      	movs	r3, #5
 8002762:	e053      	b.n	800280c <save_to_flash+0x104>

    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e020      	b.n	80027ac <save_to_flash+0xa4>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <save_to_flash+0x110>)
 8002770:	4413      	add	r3, r2
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	e9c7 2300 	strd	r2, r3, [r7]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002780:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 8002784:	0099      	lsls	r1, r3, #2
 8002786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278a:	2000      	movs	r0, #0
 800278c:	f005 ff36 	bl	80085fc <HAL_FLASH_Program>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <save_to_flash+0x9e>
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <save_to_flash+0x114>)
 800279e:	f00b fdc1 	bl	800e324 <iprintf>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e032      	b.n	800280c <save_to_flash+0x104>
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3302      	adds	r3, #2
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b3f      	cmp	r3, #63	; 0x3f
 80027b0:	dddb      	ble.n	800276a <save_to_flash+0x62>
    }

    for(int i=0;i<INTSCOUNT;i=i+2){
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	e01e      	b.n	80027f6 <save_to_flash+0xee>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <save_to_flash+0x118>)
 80027be:	4413      	add	r3, r2
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <save_to_flash+0x11c>)
 80027cc:	4413      	add	r3, r2
 80027ce:	0099      	lsls	r1, r3, #2
 80027d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d4:	2000      	movs	r0, #0
 80027d6:	f005 ff11 	bl	80085fc <HAL_FLASH_Program>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <save_to_flash+0xe8>
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	4810      	ldr	r0, [pc, #64]	; (8002828 <save_to_flash+0x120>)
 80027e8:	f00b fd9c 	bl	800e324 <iprintf>
 80027ec:	2307      	movs	r3, #7
 80027ee:	e00d      	b.n	800280c <save_to_flash+0x104>
    for(int i=0;i<INTSCOUNT;i=i+2){
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	3302      	adds	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2bff      	cmp	r3, #255	; 0xff
 80027fa:	dddd      	ble.n	80027b8 <save_to_flash+0xb0>
    }
    HAL_FLASH_Lock();
 80027fc:	f005 ff76 	bl	80086ec <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 8002800:	f005 ffb4 	bl	800876c <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <save_to_flash+0x124>)
 8002806:	f00b fe13 	bl	800e430 <puts>
    return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40022000 	.word	0x40022000
 8002818:	20000684 	.word	0x20000684
 800281c:	0801248c 	.word	0x0801248c
 8002820:	20008f34 	.word	0x20008f34
 8002824:	0201f640 	.word	0x0201f640
 8002828:	080124b0 	.word	0x080124b0
 800282c:	080124d4 	.word	0x080124d4

08002830 <set_dtc>:
#include "user_config.h"

#include <stdio.h>


void set_dtc(ControllerStruct *controller){
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002858:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287c:	edc7 7a03 	vstr	s15, [r7, #12]

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <set_dtc+0x140>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d136      	bne.n	80028f6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <set_dtc+0x144>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002896:	edd7 7a05 	vldr	s15, [r7, #20]
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b35      	ldr	r3, [pc, #212]	; (8002974 <set_dtc+0x144>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a6:	ee17 2a90 	vmov	r2, s15
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <set_dtc+0x144>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <set_dtc+0x144>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	ee17 2a90 	vmov	r2, s15
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <set_dtc+0x144>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028de:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <set_dtc+0x144>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80028f4:	e035      	b.n	8002962 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <set_dtc+0x144>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002904:	edd7 7a05 	vldr	s15, [r7, #20]
 8002908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <set_dtc+0x144>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002914:	ee17 2a90 	vmov	r2, s15
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <set_dtc+0x144>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002928:	edd7 7a04 	vldr	s15, [r7, #16]
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <set_dtc+0x144>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002938:	ee17 2a90 	vmov	r2, s15
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <set_dtc+0x144>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800294c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <set_dtc+0x144>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295c:	ee17 2a90 	vmov	r2, s15
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20008f34 	.word	0x20008f34
 8002974:	200094a8 	.word	0x200094a8

08002978 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */

	HAL_ADC_Start(&ADC_CH_IA);
 8002980:	4843      	ldr	r0, [pc, #268]	; (8002a90 <analog_sample+0x118>)
 8002982:	f003 febb 	bl	80066fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IA, HAL_MAX_DELAY);
 8002986:	f04f 31ff 	mov.w	r1, #4294967295
 800298a:	4841      	ldr	r0, [pc, #260]	; (8002a90 <analog_sample+0x118>)
 800298c:	f003 ff9a 	bl	80068c4 <HAL_ADC_PollForConversion>
	HAL_ADC_Start(&ADC_CH_IB);
 8002990:	4840      	ldr	r0, [pc, #256]	; (8002a94 <analog_sample+0x11c>)
 8002992:	f003 feb3 	bl	80066fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IB, HAL_MAX_DELAY);
 8002996:	f04f 31ff 	mov.w	r1, #4294967295
 800299a:	483e      	ldr	r0, [pc, #248]	; (8002a94 <analog_sample+0x11c>)
 800299c:	f003 ff92 	bl	80068c4 <HAL_ADC_PollForConversion>

	HAL_ADC_Start(&ADC_CH_MAIN);
 80029a0:	483b      	ldr	r0, [pc, #236]	; (8002a90 <analog_sample+0x118>)
 80029a2:	f003 feab 	bl	80066fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY); //vbus conversion is slower, probably replace with polling IB if vbus is ever removed
 80029a6:	f04f 31ff 	mov.w	r1, #4294967295
 80029aa:	4839      	ldr	r0, [pc, #228]	; (8002a90 <analog_sample+0x118>)
 80029ac:	f003 ff8a 	bl	80068c4 <HAL_ADC_PollForConversion>

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <analog_sample+0x120>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10e      	bne.n	80029d6 <analog_sample+0x5e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80029b8:	4835      	ldr	r0, [pc, #212]	; (8002a90 <analog_sample+0x118>)
 80029ba:	f004 f889 	bl	8006ad0 <HAL_ADC_GetValue>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80029c6:	4833      	ldr	r0, [pc, #204]	; (8002a94 <analog_sample+0x11c>)
 80029c8:	f004 f882 	bl	8006ad0 <HAL_ADC_GetValue>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e00d      	b.n	80029f2 <analog_sample+0x7a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80029d6:	482f      	ldr	r0, [pc, #188]	; (8002a94 <analog_sample+0x11c>)
 80029d8:	f004 f87a 	bl	8006ad0 <HAL_ADC_GetValue>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80029e4:	482a      	ldr	r0, [pc, #168]	; (8002a90 <analog_sample+0x118>)
 80029e6:	f004 f873 	bl	8006ad0 <HAL_ADC_GetValue>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80029f2:	482a      	ldr	r0, [pc, #168]	; (8002a9c <analog_sample+0x124>)
 80029f4:	f004 f86c 	bl	8006ad0 <HAL_ADC_GetValue>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002aa0 <analog_sample+0x128>
 8002a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a36:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa4 <analog_sample+0x12c>
 8002a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002aa4 <analog_sample+0x12c>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a6c:	eeb1 7a67 	vneg.f32	s14, s15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	edc3 7a07 	vstr	s15, [r3, #28]

    printf("sampleEnd\n\r");
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <analog_sample+0x130>)
 8002a82:	f00b fc4f 	bl	800e324 <iprintf>

}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200002a4 	.word	0x200002a4
 8002a94:	20000238 	.word	0x20000238
 8002a98:	20008f34 	.word	0x20008f34
 8002a9c:	20000310 	.word	0x20000310
 8002aa0:	3c533333 	.word	0x3c533333
 8002aa4:	3ca50000 	.word	0x3ca50000
 8002aa8:	080124e8 	.word	0x080124e8

08002aac <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002ab6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002aba:	ed87 1a03 	vstr	s2, [r7, #12]
 8002abe:	60b8      	str	r0, [r7, #8]
 8002ac0:	6079      	str	r1, [r7, #4]
 8002ac2:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002ac4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ac8:	f002 fa34 	bl	8004f34 <cos_lut>
 8002acc:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002ad0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ad4:	f002 f9f4 	bl	8004ec0 <sin_lut>
 8002ad8:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae8:	edd7 6a06 	vldr	s13, [r7, #24]
 8002aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b02:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002bac <abc+0x100>
 8002b06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b26:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002bb0 <abc+0x104>
 8002b2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b32:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b36:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002b50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b54:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002bb0 <abc+0x104>
 8002b58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b60:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b78:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002bac <abc+0x100>
 8002b7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b84:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b88:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	3f5db3d7 	.word	0x3f5db3d7
 8002bb0:	bf5db3d7 	.word	0xbf5db3d7

08002bb4 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bbe:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bc2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bc6:	edc7 1a02 	vstr	s3, [r7, #8]
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002bce:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bd2:	f002 f9af 	bl	8004f34 <cos_lut>
 8002bd6:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002bda:	ed97 0a05 	vldr	s0, [r7, #20]
 8002bde:	f002 f96f 	bl	8004ec0 <sin_lut>
 8002be2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002be6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bf6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002cc8 <dq0+0x114>
 8002bfa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c02:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c1e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002ccc <dq0+0x118>
 8002c22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c26:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c2a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c42:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002cd0 <dq0+0x11c>
 8002c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c54:	eeb1 7a67 	vneg.f32	s14, s15
 8002c58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c64:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002ccc <dq0+0x118>
 8002c68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c88:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c8c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002cc8 <dq0+0x114>
 8002c90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c94:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c98:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ca0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ca4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002cd0 <dq0+0x11c>
 8002cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	edc3 7a00 	vstr	s15, [r3]

    }
 8002cbe:	bf00      	nop
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	3f5db3d7 	.word	0x3f5db3d7
 8002ccc:	bf5db3d7 	.word	0xbf5db3d7
 8002cd0:	3f2aaaab 	.word	0x3f2aaaab

08002cd4 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	ed2d 8b02 	vpush	{d8}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	ed87 0a07 	vstr	s0, [r7, #28]
 8002ce2:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ce6:	ed87 1a05 	vstr	s2, [r7, #20]
 8002cea:	edc7 1a04 	vstr	s3, [r7, #16]
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002cf4:	ed97 1a04 	vldr	s2, [r7, #16]
 8002cf8:	edd7 0a05 	vldr	s1, [r7, #20]
 8002cfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d00:	f002 f82f 	bl	8004d62 <fminf3>
 8002d04:	eeb0 8a40 	vmov.f32	s16, s0
 8002d08:	ed97 1a04 	vldr	s2, [r7, #16]
 8002d0c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002d10:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d14:	f001 fff1 	bl	8004cfa <fmaxf3>
 8002d18:	eef0 7a40 	vmov.f32	s15, s0
 8002d1c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002d20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <svm+0x160>)
 8002d2e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d30:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d44:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002e38 <svm+0x164>
 8002d48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002e3c <svm+0x168>
 8002d60:	eeb0 0a67 	vmov.f32	s0, s15
 8002d64:	f001 ff91 	bl	8004c8a <fast_fmaxf>
 8002d68:	eef0 7a40 	vmov.f32	s15, s0
 8002d6c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002e40 <svm+0x16c>
 8002d70:	eeb0 0a67 	vmov.f32	s0, s15
 8002d74:	f001 ffa5 	bl	8004cc2 <fast_fminf>
 8002d78:	eef0 7a40 	vmov.f32	s15, s0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d82:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d96:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002e38 <svm+0x164>
 8002d9a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dae:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002e3c <svm+0x168>
 8002db2:	eeb0 0a67 	vmov.f32	s0, s15
 8002db6:	f001 ff68 	bl	8004c8a <fast_fmaxf>
 8002dba:	eef0 7a40 	vmov.f32	s15, s0
 8002dbe:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002e40 <svm+0x16c>
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	f001 ff7c 	bl	8004cc2 <fast_fminf>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002dd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002e38 <svm+0x164>
 8002dec:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002df0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002e3c <svm+0x168>
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	f001 ff3f 	bl	8004c8a <fast_fmaxf>
 8002e0c:	eef0 7a40 	vmov.f32	s15, s0
 8002e10:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002e40 <svm+0x16c>
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f001 ff53 	bl	8004cc2 <fast_fminf>
 8002e1c:	eef0 7a40 	vmov.f32	s15, s0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	edc3 7a00 	vstr	s15, [r3]

    }
 8002e26:	bf00      	nop
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	ecbd 8b02 	vpop	{d8}
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	3ef0a3d7 	.word	0x3ef0a3d7
 8002e38:	3f933333 	.word	0x3f933333
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	3f70a3d7 	.word	0x3f70a3d7

08002e44 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e58:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fcdc 	bl	8002830 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e00f      	b.n	8002e9e <zero_current+0x5a>
    	analog_sample(controller);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fd7a 	bl	8002978 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbeb      	blt.n	8002e7e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	fb92 f2f3 	sdiv	r2, r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <init_controller_params+0x114>)
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <init_controller_params+0x114>)
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <init_controller_params+0x118>)
 8002ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ee6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002fe8 <init_controller_params+0x11c>
 8002eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <init_controller_params+0x118>)
 8002ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002fe8 <init_controller_params+0x11c>
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <init_controller_params+0x118>)
 8002f0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f0e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002fec <init_controller_params+0x120>
 8002f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f16:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002ff0 <init_controller_params+0x124>
 8002f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002f42:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002ff4 <init_controller_params+0x128>
 8002f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <init_controller_params+0x12c>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e036      	b.n	8002fce <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ffc <init_controller_params+0x130>
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003000 <init_controller_params+0x134>
 8002f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f7a:	ee16 0a90 	vmov	r0, s13
 8002f7e:	f7fd fb0b 	bl	8000598 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	ec43 2b10 	vmov	d0, r2, r3
 8002f8a:	f00e fed1 	bl	8011d30 <exp>
 8002f8e:	ec51 0b10 	vmov	r0, r1, d0
 8002f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <init_controller_params+0x138>)
 8002f98:	f7fd fb56 	bl	8000648 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <init_controller_params+0x13c>)
 8002faa:	f7fd f997 	bl	80002dc <__adddf3>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f7fd fe3f 	bl	8000c38 <__aeabi_d2f>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	333c      	adds	r3, #60	; 0x3c
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd2:	ddc5      	ble.n	8002f60 <init_controller_params+0x94>
    }

    }
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	3d3851ec 	.word	0x3d3851ec
 8002fe4:	20000684 	.word	0x20000684
 8002fe8:	38d1b717 	.word	0x38d1b717
 8002fec:	37d1b717 	.word	0x37d1b717
 8002ff0:	40c90fdb 	.word	0x40c90fdb
 8002ff4:	3dcccccd 	.word	0x3dcccccd
 8002ff8:	20008f34 	.word	0x20008f34
 8002ffc:	bc000000 	.word	0xbc000000
 8003000:	3d03126f 	.word	0x3d03126f
 8003004:	3ff33333 	.word	0x3ff33333
 8003008:	3ff00000 	.word	0x3ff00000

0800300c <reset_foc>:

void reset_foc(ControllerStruct *controller){
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <reset_foc+0xe4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <reset_foc+0xe4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003032:	ee17 2a90 	vmov	r2, s15
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003038:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <reset_foc+0xe4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800304a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <reset_foc+0xe4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003056:	ee17 2a90 	vmov	r2, s15
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <reset_foc+0xe4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800306e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <reset_foc+0xe4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800307a:	ee17 2a90 	vmov	r2, s15
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	200094a8 	.word	0x200094a8

080030f4 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800310e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003112:	eddf 6a30 	vldr	s13, [pc, #192]	; 80031d4 <field_weaken+0xe0>
 8003116:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800311a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800312a:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80031d8 <field_weaken+0xe4>
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	f001 fdc6 	bl	8004cc2 <fast_fminf>
 8003136:	eeb0 7a40 	vmov.f32	s14, s0
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <field_weaken+0xe8>)
 800313c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003140:	eef1 7a67 	vneg.f32	s15, s15
 8003144:	eef0 0a67 	vmov.f32	s1, s15
 8003148:	eeb0 0a47 	vmov.f32	s0, s14
 800314c:	f001 fd9d 	bl	8004c8a <fast_fmaxf>
 8003150:	eef0 7a40 	vmov.f32	s15, s0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->i_d_des = controller->fw_int;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	f00e fe49 	bl	8011e24 <sqrtf>
 8003192:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800319c:	edd7 0a03 	vldr	s1, [r7, #12]
 80031a0:	eeb0 0a67 	vmov.f32	s0, s15
 80031a4:	f001 fd8d 	bl	8004cc2 <fast_fminf>
 80031a8:	eeb0 7a40 	vmov.f32	s14, s0
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	eef1 7a67 	vneg.f32	s15, s15
 80031b4:	eef0 0a67 	vmov.f32	s1, s15
 80031b8:	eeb0 0a47 	vmov.f32	s0, s14
 80031bc:	f001 fd65 	bl	8004c8a <fast_fmaxf>
 80031c0:	eef0 7a40 	vmov.f32	s15, s0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4


}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	3ba3d70a 	.word	0x3ba3d70a
 80031d8:	00000000 	.word	0x00000000
 80031dc:	20000684 	.word	0x20000684

080031e0 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity*GR;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003200:	4bd7      	ldr	r3, [pc, #860]	; (8003560 <commutate+0x380>)
 8003202:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	edd3 6a03 	vldr	s13, [r3, #12]
 8003216:	4bd2      	ldr	r3, [pc, #840]	; (8003560 <commutate+0x380>)
 8003218:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800321c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	edd3 6a06 	vldr	s13, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	ed93 6a07 	vldr	s12, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3340      	adds	r3, #64	; 0x40
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	eef0 1a46 	vmov.f32	s3, s12
 8003250:	eeb0 1a66 	vmov.f32	s2, s13
 8003254:	eef0 0a47 	vmov.f32	s1, s14
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	f7ff fcaa 	bl	8002bb4 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003266:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003564 <commutate+0x384>
 800326a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003274:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003568 <commutate+0x388>
 8003278:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800328c:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003564 <commutate+0x384>
 8003290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800329a:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003568 <commutate+0x388>
 800329e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032b2:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800356c <commutate+0x38c>
 80032b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80032c0:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003570 <commutate+0x390>
 80032c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80032d8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003574 <commutate+0x394>
 80032dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003578 <commutate+0x398>
 80032e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800357c <commutate+0x39c>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80032f6:	4b9a      	ldr	r3, [pc, #616]	; (8003560 <commutate+0x380>)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003312:	eeb0 0a67 	vmov.f32	s0, s15
 8003316:	4610      	mov	r0, r2
 8003318:	f001 fd57 	bl	8004dca <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332c:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800333c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003340:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003356:	edd7 7a07 	vldr	s15, [r7, #28]
 800335a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003368:	edd7 7a05 	vldr	s15, [r7, #20]
 800336c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003382:	eef0 0a47 	vmov.f32	s1, s14
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	f001 fc9a 	bl	8004cc2 <fast_fminf>
 800338e:	eeb0 7a40 	vmov.f32	s14, s0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	eef0 0a67 	vmov.f32	s1, s15
 80033a0:	eeb0 0a47 	vmov.f32	s0, s14
 80033a4:	f001 fc71 	bl	8004c8a <fast_fmaxf>
 80033a8:	eef0 7a40 	vmov.f32	s15, s0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80033c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80033cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80033e6:	eef0 0a47 	vmov.f32	s1, s14
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	f001 fc68 	bl	8004cc2 <fast_fminf>
 80033f2:	eeb0 7a40 	vmov.f32	s14, s0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	eef0 0a67 	vmov.f32	s1, s15
 8003404:	eeb0 0a47 	vmov.f32	s0, s14
 8003408:	f001 fc3f 	bl	8004c8a <fast_fmaxf>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343a:	eeb0 0a67 	vmov.f32	s0, s15
 800343e:	f00e fcf1 	bl	8011e24 <sqrtf>
 8003442:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800344c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800345a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800347e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003482:	edd7 7a06 	vldr	s15, [r7, #24]
 8003486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80034a0:	eef0 0a47 	vmov.f32	s1, s14
 80034a4:	eeb0 0a67 	vmov.f32	s0, s15
 80034a8:	f001 fc0b 	bl	8004cc2 <fast_fminf>
 80034ac:	eeb0 7a40 	vmov.f32	s14, s0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80034b6:	eef1 7a67 	vneg.f32	s15, s15
 80034ba:	eef0 0a67 	vmov.f32	s1, s15
 80034be:	eeb0 0a47 	vmov.f32	s0, s14
 80034c2:	f001 fbe2 	bl	8004c8a <fast_fmaxf>
 80034c6:	eef0 7a40 	vmov.f32	s15, s0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80034dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	eeb0 0a67 	vmov.f32	s0, s15
 80034f8:	f00e fc94 	bl	8011e24 <sqrtf>
 80034fc:	eef0 7a40 	vmov.f32	s15, s0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800350c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003510:	eeb0 0a67 	vmov.f32	s0, s15
 8003514:	f001 fbd5 	bl	8004cc2 <fast_fminf>
 8003518:	eeb0 7a40 	vmov.f32	s14, s0
 800351c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003520:	eef1 7a67 	vneg.f32	s15, s15
 8003524:	eef0 0a67 	vmov.f32	s1, s15
 8003528:	eeb0 0a47 	vmov.f32	s0, s14
 800352c:	f001 fbad 	bl	8004c8a <fast_fmaxf>
 8003530:	eef0 7a40 	vmov.f32	s15, s0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	4610      	mov	r0, r2
 8003552:	f001 fc3a 	bl	8004dca <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	e013      	b.n	8003588 <commutate+0x3a8>
 8003560:	20000684 	.word	0x20000684
 8003564:	3f7d70a4 	.word	0x3f7d70a4
 8003568:	3c23d70a 	.word	0x3c23d70a
 800356c:	3f666666 	.word	0x3f666666
 8003570:	3dcccccd 	.word	0x3dcccccd
 8003574:	3f933333 	.word	0x3f933333
 8003578:	3f70a3d7 	.word	0x3f70a3d7
 800357c:	3f13cd3a 	.word	0x3f13cd3a
 8003580:	381d4951 	.word	0x381d4951
 8003584:	00000000 	.word	0x00000000
 8003588:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800358c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8003580 <commutate+0x3a0>
 8003590:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	336c      	adds	r3, #108	; 0x6c
 80035b4:	461a      	mov	r2, r3
 80035b6:	eeb0 1a66 	vmov.f32	s2, s13
 80035ba:	eef0 0a47 	vmov.f32	s1, s14
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	f7ff fa73 	bl	8002aac <abc>
       //orig svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80035d2:	ed5f 6a14 	vldr	s13, [pc, #-80]	; 8003584 <commutate+0x3a4>
 80035d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80035e0:	ed1f 6a18 	vldr	s12, [pc, #-96]	; 8003584 <commutate+0x3a4>
 80035e4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80035ee:	ed5f 5a1b 	vldr	s11, [pc, #-108]	; 8003584 <commutate+0x3a4>
 80035f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3360      	adds	r3, #96	; 0x60
 8003606:	461a      	mov	r2, r3
 8003608:	eef0 1a67 	vmov.f32	s3, s15
 800360c:	eeb0 1a46 	vmov.f32	s2, s12
 8003610:	eef0 0a66 	vmov.f32	s1, s13
 8003614:	eeb0 0a47 	vmov.f32	s0, s14
 8003618:	f7ff fb5c 	bl	8002cd4 <svm>

       set_dtc(controller);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff f907 	bl	8002830 <set_dtc>

    }
 8003622:	bf00      	nop
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <torque_control>:


void torque_control(ControllerStruct *controller){
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003646:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800364a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800366a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800366e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <torque_control+0x84>)
 800367c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <torque_control+0x84>)
 8003682:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800368a:	edd7 6a03 	vldr	s13, [r7, #12]
 800368e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000684 	.word	0x20000684

080036b4 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	printf("ZERO COMMANDS!!");
 80036bc:	4812      	ldr	r0, [pc, #72]	; (8003708 <zero_commands+0x54>)
 80036be:	f00a fe31 	bl	800e324 <iprintf>
	controller->t_ff = 0;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	080124f4 	.word	0x080124f4

0800370c <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "flash_access.h"

 void run_fsm(FSMStruct * fsmstate){
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	785a      	ldrb	r2, [r3, #1]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d00d      	beq.n	800373c <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f92b 	bl	800397c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	785a      	ldrb	r2, [r3, #1]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8ba 	bl	80038b0 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b06      	cmp	r3, #6
 8003742:	f200 80a3 	bhi.w	800388c <run_fsm+0x180>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <run_fsm+0x40>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800388b 	.word	0x0800388b
 8003750:	08003769 	.word	0x08003769
 8003754:	0800383f 	.word	0x0800383f
 8003758:	0800388d 	.word	0x0800388d
 800375c:	0800388b 	.word	0x0800388b
 8003760:	08003881 	.word	0x08003881
 8003764:	0800388b 	.word	0x0800388b
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <run_fsm+0x188>)
 800376a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003772:	4b49      	ldr	r3, [pc, #292]	; (8003898 <run_fsm+0x18c>)
 8003774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003778:	4a46      	ldr	r2, [pc, #280]	; (8003894 <run_fsm+0x188>)
 800377a:	4947      	ldr	r1, [pc, #284]	; (8003898 <run_fsm+0x18c>)
 800377c:	4847      	ldr	r0, [pc, #284]	; (800389c <run_fsm+0x190>)
 800377e:	f7fd fe5f 	bl	8001440 <order_phases>
				 save_to_flash();
				 load_from_flash();
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8003782:	e083      	b.n	800388c <run_fsm+0x180>
			 else if(!comm_encoder_cal.done_cal){
 8003784:	4b43      	ldr	r3, [pc, #268]	; (8003894 <run_fsm+0x188>)
 8003786:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800378e:	4b42      	ldr	r3, [pc, #264]	; (8003898 <run_fsm+0x18c>)
 8003790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003794:	4a3f      	ldr	r2, [pc, #252]	; (8003894 <run_fsm+0x188>)
 8003796:	4940      	ldr	r1, [pc, #256]	; (8003898 <run_fsm+0x18c>)
 8003798:	4840      	ldr	r0, [pc, #256]	; (800389c <run_fsm+0x190>)
 800379a:	f7fe f843 	bl	8001824 <calibrate_encoder>
			 break;
 800379e:	e075      	b.n	800388c <run_fsm+0x180>
				 E_ZERO = comm_encoder_cal.ezero;
 80037a0:	4b3c      	ldr	r3, [pc, #240]	; (8003894 <run_fsm+0x188>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4a3e      	ldr	r2, [pc, #248]	; (80038a0 <run_fsm+0x194>)
 80037a6:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80037a8:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <run_fsm+0x194>)
 80037aa:	695c      	ldr	r4, [r3, #20]
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <run_fsm+0x190>)
 80037ae:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <run_fsm+0x194>)
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	425b      	negs	r3, r3
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80038a4 <run_fsm+0x198>
 80037c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037d0:	eeb0 0a47 	vmov.f32	s0, s14
 80037d4:	f00e fafa 	bl	8011dcc <fmodf>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80038a8 <run_fsm+0x19c>
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	ee17 0a90 	vmov	r0, s15
 80037e8:	f7fc fed6 	bl	8000598 <__aeabi_f2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4621      	mov	r1, r4
 80037f2:	482e      	ldr	r0, [pc, #184]	; (80038ac <run_fsm+0x1a0>)
 80037f4:	f00a fd96 	bl	800e324 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80037f8:	4a28      	ldr	r2, [pc, #160]	; (800389c <run_fsm+0x190>)
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <run_fsm+0x188>)
 80037fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003800:	332c      	adds	r3, #44	; 0x2c
 8003802:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 8003806:	4619      	mov	r1, r3
 8003808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800380c:	461a      	mov	r2, r3
 800380e:	f00a f909 	bl	800da24 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <run_fsm+0x194>)
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <run_fsm+0x188>)
 8003816:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800381a:	332c      	adds	r3, #44	; 0x2c
 800381c:	f102 0018 	add.w	r0, r2, #24
 8003820:	4619      	mov	r1, r3
 8003822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003826:	461a      	mov	r2, r3
 8003828:	f00a f8fc 	bl	800da24 <memcpy>
				 save_to_flash();
 800382c:	f7fe ff6c 	bl	8002708 <save_to_flash>
				 load_from_flash();
 8003830:	f7fe fec2 	bl	80025b8 <load_from_flash>
				 update_fsm(fsmstate, 27);
 8003834:	211b      	movs	r1, #27
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f912 	bl	8003a60 <update_fsm>
			 break;
 800383c:	e026      	b.n	800388c <run_fsm+0x180>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <run_fsm+0x194>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	dd0a      	ble.n	800385c <run_fsm+0x150>
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <run_fsm+0x18c>)
 8003848:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <run_fsm+0x194>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	dd03      	ble.n	800385c <run_fsm+0x150>
				 zero_commands(&controller);
 8003854:	4810      	ldr	r0, [pc, #64]	; (8003898 <run_fsm+0x18c>)
 8003856:	f7ff ff2d 	bl	80036b4 <zero_commands>
 800385a:	e009      	b.n	8003870 <run_fsm+0x164>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 800385c:	480e      	ldr	r0, [pc, #56]	; (8003898 <run_fsm+0x18c>)
 800385e:	f7ff fee5 	bl	800362c <torque_control>
				 field_weaken(&controller);
 8003862:	480d      	ldr	r0, [pc, #52]	; (8003898 <run_fsm+0x18c>)
 8003864:	f7ff fc46 	bl	80030f4 <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003868:	490c      	ldr	r1, [pc, #48]	; (800389c <run_fsm+0x190>)
 800386a:	480b      	ldr	r0, [pc, #44]	; (8003898 <run_fsm+0x18c>)
 800386c:	f7ff fcb8 	bl	80031e0 <commutate>
			 }
			 controller.timeout ++;
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <run_fsm+0x18c>)
 8003872:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003876:	3301      	adds	r3, #1
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <run_fsm+0x18c>)
 800387a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 800387e:	e005      	b.n	800388c <run_fsm+0x180>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003880:	2164      	movs	r1, #100	; 0x64
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <run_fsm+0x190>)
 8003884:	f001 fd18 	bl	80052b8 <ps_print>
			 break;
 8003888:	e000      	b.n	800388c <run_fsm+0x180>
			 break;
 800388a:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	20000a78 	.word	0x20000a78
 8003898:	20000784 	.word	0x20000784
 800389c:	200003e0 	.word	0x200003e0
 80038a0:	20008f34 	.word	0x20008f34
 80038a4:	47800000 	.word	0x47800000
 80038a8:	40c90fdb 	.word	0x40c90fdb
 80038ac:	08012504 	.word	0x08012504

080038b0 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d84d      	bhi.n	800395c <fsm_enter_state+0xac>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <fsm_enter_state+0x18>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038e1 	.word	0x080038e1
 80038cc:	08003917 	.word	0x08003917
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	0800395d 	.word	0x0800395d
 80038d8:	080038e7 	.word	0x080038e7
 80038dc:	0800395b 	.word	0x0800395b
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 80038e0:	f000 f980 	bl	8003be4 <enter_menu_state>
				break;
 80038e4:	e03a      	b.n	800395c <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 80038e6:	f000 f9a9 	bl	8003c3c <enter_setup_state>

				break;
 80038ea:	e037      	b.n	800395c <fsm_enter_state+0xac>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED1, GPIO_PIN_SET );
 80038ec:	2201      	movs	r2, #1
 80038ee:	2104      	movs	r1, #4
 80038f0:	481c      	ldr	r0, [pc, #112]	; (8003964 <fsm_enter_state+0xb4>)
 80038f2:	f005 faeb 	bl	8008ecc <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80038f6:	481c      	ldr	r0, [pc, #112]	; (8003968 <fsm_enter_state+0xb8>)
 80038f8:	f7ff fb88 	bl	800300c <reset_foc>
				drv_enable_gd(drv);
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <fsm_enter_state+0xbc>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2100      	movs	r1, #0
 8003902:	4611      	mov	r1, r2
 8003904:	889a      	ldrh	r2, [r3, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	f362 030f 	bfi	r3, r2, #0, #16
 800390c:	4608      	mov	r0, r1
 800390e:	4619      	mov	r1, r3
 8003910:	f7fe fb8a 	bl	8002028 <drv_enable_gd>
				break;
 8003914:	e022      	b.n	800395c <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <fsm_enter_state+0xc0>)
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <fsm_enter_state+0xc0>)
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <fsm_enter_state+0xc0>)
 8003928:	2200      	movs	r2, #0
 800392a:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <fsm_enter_state+0xc4>)
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	2100      	movs	r1, #0
 800393a:	480f      	ldr	r0, [pc, #60]	; (8003978 <fsm_enter_state+0xc8>)
 800393c:	f00a f880 	bl	800da40 <memset>
				drv_enable_gd(drv);
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <fsm_enter_state+0xbc>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2100      	movs	r1, #0
 8003946:	4611      	mov	r1, r2
 8003948:	889a      	ldrh	r2, [r3, #4]
 800394a:	2300      	movs	r3, #0
 800394c:	f362 030f 	bfi	r3, r2, #0, #16
 8003950:	4608      	mov	r0, r1
 8003952:	4619      	mov	r1, r3
 8003954:	f7fe fb68 	bl	8002028 <drv_enable_gd>
				break;
 8003958:	e000      	b.n	800395c <fsm_enter_state+0xac>
				break;
 800395a:	bf00      	nop

		}
 }
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	48000800 	.word	0x48000800
 8003968:	20000784 	.word	0x20000784
 800396c:	20009360 	.word	0x20009360
 8003970:	20000a78 	.word	0x20000a78
 8003974:	200003e0 	.word	0x200003e0
 8003978:	2000046c 	.word	0x2000046c

0800397c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b05      	cmp	r3, #5
 800398a:	d85e      	bhi.n	8003a4a <fsm_exit_state+0xce>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <fsm_exit_state+0x18>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039ad 	.word	0x080039ad
 8003998:	08003a2b 	.word	0x08003a2b
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	08003a4b 	.word	0x08003a4b
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039bd 	.word	0x080039bd
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	70da      	strb	r2, [r3, #3]
				break;
 80039b2:	e04a      	b.n	8003a4a <fsm_exit_state+0xce>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	70da      	strb	r2, [r3, #3]
				break;
 80039ba:	e046      	b.n	8003a4a <fsm_exit_state+0xce>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	70da      	strb	r2, [r3, #3]
				break;
 80039c2:	e042      	b.n	8003a4a <fsm_exit_state+0xce>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <fsm_exit_state+0xd8>)
 80039c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80039ca:	eef0 7ae7 	vabs.f32	s15, s15
 80039ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	d522      	bpl.n	8003a22 <fsm_exit_state+0xa6>
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <fsm_exit_state+0xd8>)
 80039de:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80039e2:	eef0 7ae7 	vabs.f32	s15, s15
 80039e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f2:	d516      	bpl.n	8003a22 <fsm_exit_state+0xa6>
					fsmstate->ready = 1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <fsm_exit_state+0xdc>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2100      	movs	r1, #0
 8003a00:	4611      	mov	r1, r2
 8003a02:	889a      	ldrh	r2, [r3, #4]
 8003a04:	2300      	movs	r3, #0
 8003a06:	f362 030f 	bfi	r3, r2, #0, #16
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fe fb25 	bl	800205c <drv_disable_gd>
					reset_foc(&controller);
 8003a12:	4810      	ldr	r0, [pc, #64]	; (8003a54 <fsm_exit_state+0xd8>)
 8003a14:	f7ff fafa 	bl	800300c <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED1, GPIO_PIN_RESET );
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	480f      	ldr	r0, [pc, #60]	; (8003a5c <fsm_exit_state+0xe0>)
 8003a1e:	f005 fa55 	bl	8008ecc <HAL_GPIO_WritePin>
				}
				zero_commands(&controller);		// Set commands to zero
 8003a22:	480c      	ldr	r0, [pc, #48]	; (8003a54 <fsm_exit_state+0xd8>)
 8003a24:	f7ff fe46 	bl	80036b4 <zero_commands>
				break;
 8003a28:	e00f      	b.n	8003a4a <fsm_exit_state+0xce>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <fsm_exit_state+0xdc>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4611      	mov	r1, r2
 8003a32:	889a      	ldrh	r2, [r3, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	f362 030f 	bfi	r3, r2, #0, #16
 8003a3a:	4608      	mov	r0, r1
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f7fe fb0d 	bl	800205c <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	70da      	strb	r2, [r3, #3]
				break;
 8003a48:	bf00      	nop
		}

 }
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000784 	.word	0x20000784
 8003a58:	20009360 	.word	0x20009360
 8003a5c:	48000800 	.word	0x48000800

08003a60 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b1b      	cmp	r3, #27
 8003a70:	d106      	bne.n	8003a80 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	70da      	strb	r2, [r3, #3]
		return;
 8003a7e:	e0a4      	b.n	8003bca <update_fsm+0x16a>
	}
	switch(fsmstate->state){
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	f200 80a0 	bhi.w	8003bca <update_fsm+0x16a>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <update_fsm+0x30>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa9 	.word	0x08003aa9
 8003a94:	08003bcb 	.word	0x08003bcb
 8003a98:	08003bcb 	.word	0x08003bcb
 8003a9c:	08003bcb 	.word	0x08003bcb
 8003aa0:	08003b8f 	.word	0x08003b8f
 8003aa4:	08003bcb 	.word	0x08003bcb
		case MENU_MODE:
			switch (fsm_input){
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	3b63      	subs	r3, #99	; 0x63
 8003aac:	2b17      	cmp	r3, #23
 8003aae:	f200 808b 	bhi.w	8003bc8 <update_fsm+0x168>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <update_fsm+0x58>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003b19 	.word	0x08003b19
 8003abc:	08003bc9 	.word	0x08003bc9
 8003ac0:	08003b35 	.word	0x08003b35
 8003ac4:	08003bc9 	.word	0x08003bc9
 8003ac8:	08003bc9 	.word	0x08003bc9
 8003acc:	08003bc9 	.word	0x08003bc9
 8003ad0:	08003bc9 	.word	0x08003bc9
 8003ad4:	08003bc9 	.word	0x08003bc9
 8003ad8:	08003bc9 	.word	0x08003bc9
 8003adc:	08003bc9 	.word	0x08003bc9
 8003ae0:	08003b27 	.word	0x08003b27
 8003ae4:	08003bc9 	.word	0x08003bc9
 8003ae8:	08003bc9 	.word	0x08003bc9
 8003aec:	08003bc9 	.word	0x08003bc9
 8003af0:	08003bc9 	.word	0x08003bc9
 8003af4:	08003bc9 	.word	0x08003bc9
 8003af8:	08003b43 	.word	0x08003b43
 8003afc:	08003bc9 	.word	0x08003bc9
 8003b00:	08003bc9 	.word	0x08003bc9
 8003b04:	08003bc9 	.word	0x08003bc9
 8003b08:	08003bc9 	.word	0x08003bc9
 8003b0c:	08003bc9 	.word	0x08003bc9
 8003b10:	08003bc9 	.word	0x08003bc9
 8003b14:	08003b51 	.word	0x08003b51
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	70da      	strb	r2, [r3, #3]
					break;
 8003b24:	e032      	b.n	8003b8c <update_fsm+0x12c>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	70da      	strb	r2, [r3, #3]
					break;
 8003b32:	e02b      	b.n	8003b8c <update_fsm+0x12c>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2205      	movs	r2, #5
 8003b38:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	70da      	strb	r2, [r3, #3]
					break;
 8003b40:	e024      	b.n	8003b8c <update_fsm+0x12c>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2204      	movs	r2, #4
 8003b46:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	70da      	strb	r2, [r3, #3]
					break;
 8003b4e:	e01d      	b.n	8003b8c <update_fsm+0x12c>
				case ZERO_CMD:
					printf("Zero pos command entry\n\r");
 8003b50:	481f      	ldr	r0, [pc, #124]	; (8003bd0 <update_fsm+0x170>)
 8003b52:	f00a fbe7 	bl	800e324 <iprintf>
					comm_encoder.m_zero = 0;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <update_fsm+0x174>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 8003b5e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003bd8 <update_fsm+0x178>
 8003b62:	481c      	ldr	r0, [pc, #112]	; (8003bd4 <update_fsm+0x174>)
 8003b64:	f001 fa36 	bl	8004fd4 <ps_sample>
					HAL_Delay(20);
 8003b68:	2014      	movs	r0, #20
 8003b6a:	f002 f9b7 	bl	8005edc <HAL_Delay>
					M_ZERO = comm_encoder.count;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <update_fsm+0x174>)
 8003b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <update_fsm+0x17c>)
 8003b74:	6113      	str	r3, [r2, #16]
					//if (!prefs.ready()) prefs.open();
					//    prefs.flush();                                                  // Write new prefs to flash
					//    prefs.close();
					//    prefs.load();
					//spi.SetMechOffset(M_OFFSET);
					save_to_flash();
 8003b76:	f7fe fdc7 	bl	8002708 <save_to_flash>
					load_from_flash();
 8003b7a:	f7fe fd1d 	bl	80025b8 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_ZERO);
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <update_fsm+0x17c>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4619      	mov	r1, r3
 8003b84:	4816      	ldr	r0, [pc, #88]	; (8003be0 <update_fsm+0x180>)
 8003b86:	f00a fbcd 	bl	800e324 <iprintf>
					break;
 8003b8a:	bf00      	nop
				}
			break;
 8003b8c:	e01c      	b.n	8003bc8 <update_fsm+0x168>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	2b0d      	cmp	r3, #13
 8003b92:	d103      	bne.n	8003b9c <update_fsm+0x13c>
				process_user_input(fsmstate);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f9c5 	bl	8003f24 <process_user_input>
				break;
 8003b9a:	e016      	b.n	8003bca <update_fsm+0x16a>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <update_fsm+0x14c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	735a      	strb	r2, [r3, #13]
 8003baa:	e006      	b.n	8003bba <update_fsm+0x15a>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7b1b      	ldrb	r3, [r3, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7b1b      	ldrb	r3, [r3, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003bc6:	e000      	b.n	8003bca <update_fsm+0x16a>
			break;
 8003bc8:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08012518 	.word	0x08012518
 8003bd4:	200003e0 	.word	0x200003e0
 8003bd8:	37d1b717 	.word	0x37d1b717
 8003bdc:	20008f34 	.word	0x20008f34
 8003be0:	08012534 	.word	0x08012534

08003be4 <enter_menu_state>:


 void enter_menu_state(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003be8:	480c      	ldr	r0, [pc, #48]	; (8003c1c <enter_menu_state+0x38>)
 8003bea:	f00a fb9b 	bl	800e324 <iprintf>
	    printf(" Commands:\n\r");
 8003bee:	480c      	ldr	r0, [pc, #48]	; (8003c20 <enter_menu_state+0x3c>)
 8003bf0:	f00a fb98 	bl	800e324 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003bf4:	480b      	ldr	r0, [pc, #44]	; (8003c24 <enter_menu_state+0x40>)
 8003bf6:	f00a fb95 	bl	800e324 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003bfa:	480b      	ldr	r0, [pc, #44]	; (8003c28 <enter_menu_state+0x44>)
 8003bfc:	f00a fb92 	bl	800e324 <iprintf>
	    printf(" s - Setup\n\r");
 8003c00:	480a      	ldr	r0, [pc, #40]	; (8003c2c <enter_menu_state+0x48>)
 8003c02:	f00a fb8f 	bl	800e324 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003c06:	480a      	ldr	r0, [pc, #40]	; (8003c30 <enter_menu_state+0x4c>)
 8003c08:	f00a fb8c 	bl	800e324 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003c0c:	4809      	ldr	r0, [pc, #36]	; (8003c34 <enter_menu_state+0x50>)
 8003c0e:	f00a fb89 	bl	800e324 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003c12:	4809      	ldr	r0, [pc, #36]	; (8003c38 <enter_menu_state+0x54>)
 8003c14:	f00a fb86 	bl	800e324 <iprintf>

	    //gpio.led->write(0);
 }
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	0801255c 	.word	0x0801255c
 8003c20:	08012564 	.word	0x08012564
 8003c24:	08012574 	.word	0x08012574
 8003c28:	08012588 	.word	0x08012588
 8003c2c:	080125a4 	.word	0x080125a4
 8003c30:	080125b4 	.word	0x080125b4
 8003c34:	080125cc 	.word	0x080125cc
 8003c38:	080125e8 	.word	0x080125e8

08003c3c <enter_setup_state>:

 void enter_setup_state(void){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003c42:	487d      	ldr	r0, [pc, #500]	; (8003e38 <enter_setup_state+0x1fc>)
 8003c44:	f00a fb6e 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003c48:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <enter_setup_state+0x200>)
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <enter_setup_state+0x204>)
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4b7c      	ldr	r3, [pc, #496]	; (8003e44 <enter_setup_state+0x208>)
 8003c52:	4a7d      	ldr	r2, [pc, #500]	; (8003e48 <enter_setup_state+0x20c>)
 8003c54:	497d      	ldr	r1, [pc, #500]	; (8003e4c <enter_setup_state+0x210>)
 8003c56:	487e      	ldr	r0, [pc, #504]	; (8003e50 <enter_setup_state+0x214>)
 8003c58:	f00a fb64 	bl	800e324 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003c5c:	487d      	ldr	r0, [pc, #500]	; (8003e54 <enter_setup_state+0x218>)
 8003c5e:	f00a fbe7 	bl	800e430 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003c62:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <enter_setup_state+0x21c>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fc96 	bl	8000598 <__aeabi_f2d>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c74:	4b79      	ldr	r3, [pc, #484]	; (8003e5c <enter_setup_state+0x220>)
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4b79      	ldr	r3, [pc, #484]	; (8003e60 <enter_setup_state+0x224>)
 8003c7a:	4a7a      	ldr	r2, [pc, #488]	; (8003e64 <enter_setup_state+0x228>)
 8003c7c:	497a      	ldr	r1, [pc, #488]	; (8003e68 <enter_setup_state+0x22c>)
 8003c7e:	487b      	ldr	r0, [pc, #492]	; (8003e6c <enter_setup_state+0x230>)
 8003c80:	f00a fb50 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003c84:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <enter_setup_state+0x21c>)
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc85 	bl	8000598 <__aeabi_f2d>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c96:	4b71      	ldr	r3, [pc, #452]	; (8003e5c <enter_setup_state+0x220>)
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <enter_setup_state+0x224>)
 8003c9c:	4a74      	ldr	r2, [pc, #464]	; (8003e70 <enter_setup_state+0x234>)
 8003c9e:	4975      	ldr	r1, [pc, #468]	; (8003e74 <enter_setup_state+0x238>)
 8003ca0:	4875      	ldr	r0, [pc, #468]	; (8003e78 <enter_setup_state+0x23c>)
 8003ca2:	f00a fb3f 	bl	800e324 <iprintf>
	    printf("\r\n Control:\r\n");
 8003ca6:	4875      	ldr	r0, [pc, #468]	; (8003e7c <enter_setup_state+0x240>)
 8003ca8:	f00a fbc2 	bl	800e430 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003cac:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <enter_setup_state+0x21c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fc71 	bl	8000598 <__aeabi_f2d>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <enter_setup_state+0x244>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <enter_setup_state+0x248>)
 8003cc4:	4a70      	ldr	r2, [pc, #448]	; (8003e88 <enter_setup_state+0x24c>)
 8003cc6:	4971      	ldr	r1, [pc, #452]	; (8003e8c <enter_setup_state+0x250>)
 8003cc8:	4871      	ldr	r0, [pc, #452]	; (8003e90 <enter_setup_state+0x254>)
 8003cca:	f00a fb2b 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <enter_setup_state+0x21c>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fc60 	bl	8000598 <__aeabi_f2d>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <enter_setup_state+0x258>)
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <enter_setup_state+0x25c>)
 8003ce6:	4a6d      	ldr	r2, [pc, #436]	; (8003e9c <enter_setup_state+0x260>)
 8003ce8:	496d      	ldr	r1, [pc, #436]	; (8003ea0 <enter_setup_state+0x264>)
 8003cea:	4869      	ldr	r0, [pc, #420]	; (8003e90 <enter_setup_state+0x254>)
 8003cec:	f00a fb1a 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <enter_setup_state+0x21c>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fc4f 	bl	8000598 <__aeabi_f2d>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <enter_setup_state+0x220>)
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4b55      	ldr	r3, [pc, #340]	; (8003e5c <enter_setup_state+0x220>)
 8003d08:	4a66      	ldr	r2, [pc, #408]	; (8003ea4 <enter_setup_state+0x268>)
 8003d0a:	4967      	ldr	r1, [pc, #412]	; (8003ea8 <enter_setup_state+0x26c>)
 8003d0c:	4860      	ldr	r0, [pc, #384]	; (8003e90 <enter_setup_state+0x254>)
 8003d0e:	f00a fb09 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <enter_setup_state+0x21c>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fc3e 	bl	8000598 <__aeabi_f2d>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d24:	4b4d      	ldr	r3, [pc, #308]	; (8003e5c <enter_setup_state+0x220>)
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <enter_setup_state+0x220>)
 8003d2a:	4a60      	ldr	r2, [pc, #384]	; (8003eac <enter_setup_state+0x270>)
 8003d2c:	4960      	ldr	r1, [pc, #384]	; (8003eb0 <enter_setup_state+0x274>)
 8003d2e:	4858      	ldr	r0, [pc, #352]	; (8003e90 <enter_setup_state+0x254>)
 8003d30:	f00a faf8 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <enter_setup_state+0x21c>)
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fc2d 	bl	8000598 <__aeabi_f2d>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d46:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <enter_setup_state+0x278>)
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <enter_setup_state+0x25c>)
 8003d4c:	4a5a      	ldr	r2, [pc, #360]	; (8003eb8 <enter_setup_state+0x27c>)
 8003d4e:	495b      	ldr	r1, [pc, #364]	; (8003ebc <enter_setup_state+0x280>)
 8003d50:	484f      	ldr	r0, [pc, #316]	; (8003e90 <enter_setup_state+0x254>)
 8003d52:	f00a fae7 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <enter_setup_state+0x21c>)
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fc1c 	bl	8000598 <__aeabi_f2d>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d68:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <enter_setup_state+0x284>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <enter_setup_state+0x25c>)
 8003d6e:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <enter_setup_state+0x288>)
 8003d70:	4955      	ldr	r1, [pc, #340]	; (8003ec8 <enter_setup_state+0x28c>)
 8003d72:	4847      	ldr	r0, [pc, #284]	; (8003e90 <enter_setup_state+0x254>)
 8003d74:	f00a fad6 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <enter_setup_state+0x21c>)
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fc0b 	bl	8000598 <__aeabi_f2d>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d8a:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <enter_setup_state+0x290>)
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <enter_setup_state+0x25c>)
 8003d90:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <enter_setup_state+0x294>)
 8003d92:	4950      	ldr	r1, [pc, #320]	; (8003ed4 <enter_setup_state+0x298>)
 8003d94:	483e      	ldr	r0, [pc, #248]	; (8003e90 <enter_setup_state+0x254>)
 8003d96:	f00a fac5 	bl	800e324 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <enter_setup_state+0x21c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fbfa 	bl	8000598 <__aeabi_f2d>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <enter_setup_state+0x258>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <enter_setup_state+0x25c>)
 8003db2:	4a49      	ldr	r2, [pc, #292]	; (8003ed8 <enter_setup_state+0x29c>)
 8003db4:	4949      	ldr	r1, [pc, #292]	; (8003edc <enter_setup_state+0x2a0>)
 8003db6:	4836      	ldr	r0, [pc, #216]	; (8003e90 <enter_setup_state+0x254>)
 8003db8:	f00a fab4 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <enter_setup_state+0x21c>)
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc fbe9 	bl	8000598 <__aeabi_f2d>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dce:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <enter_setup_state+0x2a4>)
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <enter_setup_state+0x25c>)
 8003dd4:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <enter_setup_state+0x2a8>)
 8003dd6:	4944      	ldr	r1, [pc, #272]	; (8003ee8 <enter_setup_state+0x2ac>)
 8003dd8:	482d      	ldr	r0, [pc, #180]	; (8003e90 <enter_setup_state+0x254>)
 8003dda:	f00a faa3 	bl	800e324 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003dde:	4843      	ldr	r0, [pc, #268]	; (8003eec <enter_setup_state+0x2b0>)
 8003de0:	f00a fb26 	bl	800e430 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <enter_setup_state+0x2b4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <enter_setup_state+0x2b8>)
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <enter_setup_state+0x224>)
 8003df0:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <enter_setup_state+0x2bc>)
 8003df2:	4942      	ldr	r1, [pc, #264]	; (8003efc <enter_setup_state+0x2c0>)
 8003df4:	4842      	ldr	r0, [pc, #264]	; (8003f00 <enter_setup_state+0x2c4>)
 8003df6:	f00a fa95 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <enter_setup_state+0x2b4>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	4b3c      	ldr	r3, [pc, #240]	; (8003ef4 <enter_setup_state+0x2b8>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <enter_setup_state+0x224>)
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <enter_setup_state+0x2c8>)
 8003e08:	493f      	ldr	r1, [pc, #252]	; (8003f08 <enter_setup_state+0x2cc>)
 8003e0a:	483d      	ldr	r0, [pc, #244]	; (8003f00 <enter_setup_state+0x2c4>)
 8003e0c:	f00a fa8a 	bl	800e324 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <enter_setup_state+0x2b4>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <enter_setup_state+0x2d0>)
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <enter_setup_state+0x224>)
 8003e1c:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <enter_setup_state+0x2d4>)
 8003e1e:	493d      	ldr	r1, [pc, #244]	; (8003f14 <enter_setup_state+0x2d8>)
 8003e20:	483d      	ldr	r0, [pc, #244]	; (8003f18 <enter_setup_state+0x2dc>)
 8003e22:	f00a fa7f 	bl	800e324 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003e26:	483d      	ldr	r0, [pc, #244]	; (8003f1c <enter_setup_state+0x2e0>)
 8003e28:	f00a fa7c 	bl	800e324 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003e2c:	483c      	ldr	r0, [pc, #240]	; (8003f20 <enter_setup_state+0x2e4>)
 8003e2e:	f00a fa79 	bl	800e324 <iprintf>
 }
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	08012600 	.word	0x08012600
 8003e3c:	08012654 	.word	0x08012654
 8003e40:	08012664 	.word	0x08012664
 8003e44:	0801261c 	.word	0x0801261c
 8003e48:	08012620 	.word	0x08012620
 8003e4c:	0801262c 	.word	0x0801262c
 8003e50:	08012634 	.word	0x08012634
 8003e54:	08012668 	.word	0x08012668
 8003e58:	20000684 	.word	0x20000684
 8003e5c:	080126a8 	.word	0x080126a8
 8003e60:	08012674 	.word	0x08012674
 8003e64:	08012678 	.word	0x08012678
 8003e68:	08012684 	.word	0x08012684
 8003e6c:	08012688 	.word	0x08012688
 8003e70:	080126ac 	.word	0x080126ac
 8003e74:	080126c4 	.word	0x080126c4
 8003e78:	080126c8 	.word	0x080126c8
 8003e7c:	080126e8 	.word	0x080126e8
 8003e80:	08012738 	.word	0x08012738
 8003e84:	080126f8 	.word	0x080126f8
 8003e88:	080126fc 	.word	0x080126fc
 8003e8c:	08012714 	.word	0x08012714
 8003e90:	08012718 	.word	0x08012718
 8003e94:	0801275c 	.word	0x0801275c
 8003e98:	08012740 	.word	0x08012740
 8003e9c:	08012744 	.word	0x08012744
 8003ea0:	08012758 	.word	0x08012758
 8003ea4:	08012764 	.word	0x08012764
 8003ea8:	08012780 	.word	0x08012780
 8003eac:	08012784 	.word	0x08012784
 8003eb0:	080127a4 	.word	0x080127a4
 8003eb4:	080127c8 	.word	0x080127c8
 8003eb8:	080127a8 	.word	0x080127a8
 8003ebc:	080127c4 	.word	0x080127c4
 8003ec0:	080127f4 	.word	0x080127f4
 8003ec4:	080127d0 	.word	0x080127d0
 8003ec8:	080127f0 	.word	0x080127f0
 8003ecc:	08012814 	.word	0x08012814
 8003ed0:	080127f8 	.word	0x080127f8
 8003ed4:	08012810 	.word	0x08012810
 8003ed8:	0801281c 	.word	0x0801281c
 8003edc:	08012834 	.word	0x08012834
 8003ee0:	08012854 	.word	0x08012854
 8003ee4:	08012838 	.word	0x08012838
 8003ee8:	08012850 	.word	0x08012850
 8003eec:	0801285c 	.word	0x0801285c
 8003ef0:	20008f34 	.word	0x20008f34
 8003ef4:	08012894 	.word	0x08012894
 8003ef8:	08012868 	.word	0x08012868
 8003efc:	08012870 	.word	0x08012870
 8003f00:	08012874 	.word	0x08012874
 8003f04:	08012898 	.word	0x08012898
 8003f08:	080128a8 	.word	0x080128a8
 8003f0c:	080128ec 	.word	0x080128ec
 8003f10:	080128ac 	.word	0x080128ac
 8003f14:	080128cc 	.word	0x080128cc
 8003f18:	080128d0 	.word	0x080128d0
 8003f1c:	080128f4 	.word	0x080128f4
 8003f20:	08012940 	.word	0x08012940

08003f24 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7b5b      	ldrb	r3, [r3, #13]
 8003f30:	3b61      	subs	r3, #97	; 0x61
 8003f32:	2b17      	cmp	r3, #23
 8003f34:	f200 8266 	bhi.w	8004404 <process_user_input+0x4e0>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <process_user_input+0x1c>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	0800419f 	.word	0x0800419f
 8003f44:	08003fa1 	.word	0x08003fa1
 8003f48:	0800414b 	.word	0x0800414b
 8003f4c:	08004319 	.word	0x08004319
 8003f50:	08004405 	.word	0x08004405
 8003f54:	08004085 	.word	0x08004085
 8003f58:	080041f3 	.word	0x080041f3
 8003f5c:	080040f7 	.word	0x080040f7
 8003f60:	08003ff5 	.word	0x08003ff5
 8003f64:	08004405 	.word	0x08004405
 8003f68:	08004237 	.word	0x08004237
 8003f6c:	08004031 	.word	0x08004031
 8003f70:	08004013 	.word	0x08004013
 8003f74:	08004405 	.word	0x08004405
 8003f78:	08004405 	.word	0x08004405
 8003f7c:	0800435d 	.word	0x0800435d
 8003f80:	08004405 	.word	0x08004405
 8003f84:	08004405 	.word	0x08004405
 8003f88:	08004405 	.word	0x08004405
 8003f8c:	080040d9 	.word	0x080040d9
 8003f90:	08004405 	.word	0x08004405
 8003f94:	080043b1 	.word	0x080043b1
 8003f98:	08004405 	.word	0x08004405
 8003f9c:	0800427b 	.word	0x0800427b
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f009 fd0b 	bl	800d9c0 <atof>
 8003faa:	ec53 2b10 	vmov	r2, r3, d0
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fe41 	bl	8000c38 <__aeabi_d2f>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80042c0 <process_user_input+0x39c>
 8003fbc:	ee00 3a10 	vmov	s0, r3
 8003fc0:	f00d fe7d 	bl	8011cbe <fminf>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	eddf 0abe 	vldr	s1, [pc, #760]	; 80042c4 <process_user_input+0x3a0>
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	f00d fe5a 	bl	8011c88 <fmaxf>
 8003fd4:	eef0 7a40 	vmov.f32	s15, s0
 8003fd8:	4bbb      	ldr	r3, [pc, #748]	; (80042c8 <process_user_input+0x3a4>)
 8003fda:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003fde:	4bba      	ldr	r3, [pc, #744]	; (80042c8 <process_user_input+0x3a4>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fad8 	bl	8000598 <__aeabi_f2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	48b7      	ldr	r0, [pc, #732]	; (80042cc <process_user_input+0x3a8>)
 8003fee:	f00a f999 	bl	800e324 <iprintf>
			 break;
 8003ff2:	e20e      	b.n	8004412 <process_user_input+0x4ee>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f009 fce4 	bl	800d9c6 <atoi>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4ab3      	ldr	r2, [pc, #716]	; (80042d0 <process_user_input+0x3ac>)
 8004002:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8004004:	4bb2      	ldr	r3, [pc, #712]	; (80042d0 <process_user_input+0x3ac>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	48b2      	ldr	r0, [pc, #712]	; (80042d4 <process_user_input+0x3b0>)
 800400c:	f00a f98a 	bl	800e324 <iprintf>
			 break;
 8004010:	e1ff      	b.n	8004412 <process_user_input+0x4ee>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f009 fcd5 	bl	800d9c6 <atoi>
 800401c:	4603      	mov	r3, r0
 800401e:	4aac      	ldr	r2, [pc, #688]	; (80042d0 <process_user_input+0x3ac>)
 8004020:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8004022:	4bab      	ldr	r3, [pc, #684]	; (80042d0 <process_user_input+0x3ac>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4619      	mov	r1, r3
 8004028:	48ab      	ldr	r0, [pc, #684]	; (80042d8 <process_user_input+0x3b4>)
 800402a:	f00a f97b 	bl	800e324 <iprintf>
			 break;
 800402e:	e1f0      	b.n	8004412 <process_user_input+0x4ee>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f009 fcc3 	bl	800d9c0 <atof>
 800403a:	ec53 2b10 	vmov	r2, r3, d0
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fdf9 	bl	8000c38 <__aeabi_d2f>
 8004046:	4603      	mov	r3, r0
 8004048:	eddf 0aa4 	vldr	s1, [pc, #656]	; 80042dc <process_user_input+0x3b8>
 800404c:	ee00 3a10 	vmov	s0, r3
 8004050:	f00d fe35 	bl	8011cbe <fminf>
 8004054:	eef0 7a40 	vmov.f32	s15, s0
 8004058:	eddf 0aae 	vldr	s1, [pc, #696]	; 8004314 <process_user_input+0x3f0>
 800405c:	eeb0 0a67 	vmov.f32	s0, s15
 8004060:	f00d fe12 	bl	8011c88 <fmaxf>
 8004064:	eef0 7a40 	vmov.f32	s15, s0
 8004068:	4b97      	ldr	r3, [pc, #604]	; (80042c8 <process_user_input+0x3a4>)
 800406a:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800406e:	4b96      	ldr	r3, [pc, #600]	; (80042c8 <process_user_input+0x3a4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa90 	bl	8000598 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4898      	ldr	r0, [pc, #608]	; (80042e0 <process_user_input+0x3bc>)
 800407e:	f00a f951 	bl	800e324 <iprintf>
			 break;
 8004082:	e1c6      	b.n	8004412 <process_user_input+0x4ee>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f009 fc99 	bl	800d9c0 <atof>
 800408e:	ec53 2b10 	vmov	r2, r3, d0
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fdcf 	bl	8000c38 <__aeabi_d2f>
 800409a:	4603      	mov	r3, r0
 800409c:	eddf 0a91 	vldr	s1, [pc, #580]	; 80042e4 <process_user_input+0x3c0>
 80040a0:	ee00 3a10 	vmov	s0, r3
 80040a4:	f00d fe0b 	bl	8011cbe <fminf>
 80040a8:	eef0 7a40 	vmov.f32	s15, s0
 80040ac:	eddf 0a99 	vldr	s1, [pc, #612]	; 8004314 <process_user_input+0x3f0>
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	f00d fde8 	bl	8011c88 <fmaxf>
 80040b8:	eef0 7a40 	vmov.f32	s15, s0
 80040bc:	4b82      	ldr	r3, [pc, #520]	; (80042c8 <process_user_input+0x3a4>)
 80040be:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 80040c2:	4b81      	ldr	r3, [pc, #516]	; (80042c8 <process_user_input+0x3a4>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fa66 	bl	8000598 <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4885      	ldr	r0, [pc, #532]	; (80042e8 <process_user_input+0x3c4>)
 80040d2:	f00a f927 	bl	800e324 <iprintf>
			 break;
 80040d6:	e19c      	b.n	8004412 <process_user_input+0x4ee>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f009 fc72 	bl	800d9c6 <atoi>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a7a      	ldr	r2, [pc, #488]	; (80042d0 <process_user_input+0x3ac>)
 80040e6:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <process_user_input+0x3ac>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4619      	mov	r1, r3
 80040ee:	487f      	ldr	r0, [pc, #508]	; (80042ec <process_user_input+0x3c8>)
 80040f0:	f00a f918 	bl	800e324 <iprintf>
			 break;
 80040f4:	e18d      	b.n	8004412 <process_user_input+0x4ee>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4618      	mov	r0, r3
 80040fc:	f009 fc60 	bl	800d9c0 <atof>
 8004100:	ec53 2b10 	vmov	r2, r3, d0
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	f7fc fd96 	bl	8000c38 <__aeabi_d2f>
 800410c:	4603      	mov	r3, r0
 800410e:	eddf 0a78 	vldr	s1, [pc, #480]	; 80042f0 <process_user_input+0x3cc>
 8004112:	ee00 3a10 	vmov	s0, r3
 8004116:	f00d fdd2 	bl	8011cbe <fminf>
 800411a:	eef0 7a40 	vmov.f32	s15, s0
 800411e:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8004314 <process_user_input+0x3f0>
 8004122:	eeb0 0a67 	vmov.f32	s0, s15
 8004126:	f00d fdaf 	bl	8011c88 <fmaxf>
 800412a:	eef0 7a40 	vmov.f32	s15, s0
 800412e:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <process_user_input+0x3a4>)
 8004130:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004134:	4b64      	ldr	r3, [pc, #400]	; (80042c8 <process_user_input+0x3a4>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fa2d 	bl	8000598 <__aeabi_f2d>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	486c      	ldr	r0, [pc, #432]	; (80042f4 <process_user_input+0x3d0>)
 8004144:	f00a f8ee 	bl	800e324 <iprintf>
			 break;
 8004148:	e163      	b.n	8004412 <process_user_input+0x4ee>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f009 fc36 	bl	800d9c0 <atof>
 8004154:	ec53 2b10 	vmov	r2, r3, d0
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f7fc fd6c 	bl	8000c38 <__aeabi_d2f>
 8004160:	4603      	mov	r3, r0
 8004162:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80042dc <process_user_input+0x3b8>
 8004166:	ee00 3a10 	vmov	s0, r3
 800416a:	f00d fda8 	bl	8011cbe <fminf>
 800416e:	eef0 7a40 	vmov.f32	s15, s0
 8004172:	eddf 0a68 	vldr	s1, [pc, #416]	; 8004314 <process_user_input+0x3f0>
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	f00d fd85 	bl	8011c88 <fmaxf>
 800417e:	eef0 7a40 	vmov.f32	s15, s0
 8004182:	4b51      	ldr	r3, [pc, #324]	; (80042c8 <process_user_input+0x3a4>)
 8004184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8004188:	4b4f      	ldr	r3, [pc, #316]	; (80042c8 <process_user_input+0x3a4>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	4618      	mov	r0, r3
 800418e:	f7fc fa03 	bl	8000598 <__aeabi_f2d>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4858      	ldr	r0, [pc, #352]	; (80042f8 <process_user_input+0x3d4>)
 8004198:	f00a f8c4 	bl	800e324 <iprintf>
			 break;
 800419c:	e139      	b.n	8004412 <process_user_input+0x4ee>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f009 fc0c 	bl	800d9c0 <atof>
 80041a8:	ec53 2b10 	vmov	r2, r3, d0
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f7fc fd42 	bl	8000c38 <__aeabi_d2f>
 80041b4:	4603      	mov	r3, r0
 80041b6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80041ba:	ee00 3a10 	vmov	s0, r3
 80041be:	f00d fd7e 	bl	8011cbe <fminf>
 80041c2:	eef0 7a40 	vmov.f32	s15, s0
 80041c6:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004314 <process_user_input+0x3f0>
 80041ca:	eeb0 0a67 	vmov.f32	s0, s15
 80041ce:	f00d fd5b 	bl	8011c88 <fmaxf>
 80041d2:	eef0 7a40 	vmov.f32	s15, s0
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <process_user_input+0x3a4>)
 80041d8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 80041dc:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <process_user_input+0x3a4>)
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc f9d9 	bl	8000598 <__aeabi_f2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4844      	ldr	r0, [pc, #272]	; (80042fc <process_user_input+0x3d8>)
 80041ec:	f00a f89a 	bl	800e324 <iprintf>
			 break;
 80041f0:	e10f      	b.n	8004412 <process_user_input+0x4ee>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f009 fbe2 	bl	800d9c0 <atof>
 80041fc:	ec53 2b10 	vmov	r2, r3, d0
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f7fc fd18 	bl	8000c38 <__aeabi_d2f>
 8004208:	4603      	mov	r3, r0
 800420a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8004300 <process_user_input+0x3dc>
 800420e:	ee00 3a10 	vmov	s0, r3
 8004212:	f00d fd39 	bl	8011c88 <fmaxf>
 8004216:	eef0 7a40 	vmov.f32	s15, s0
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <process_user_input+0x3a4>)
 800421c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <process_user_input+0x3a4>)
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f9b7 	bl	8000598 <__aeabi_f2d>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4835      	ldr	r0, [pc, #212]	; (8004304 <process_user_input+0x3e0>)
 8004230:	f00a f878 	bl	800e324 <iprintf>
			 break;
 8004234:	e0ed      	b.n	8004412 <process_user_input+0x4ee>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f009 fbc0 	bl	800d9c0 <atof>
 8004240:	ec53 2b10 	vmov	r2, r3, d0
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fcf6 	bl	8000c38 <__aeabi_d2f>
 800424c:	4603      	mov	r3, r0
 800424e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8004308 <process_user_input+0x3e4>
 8004252:	ee00 3a10 	vmov	s0, r3
 8004256:	f00d fd17 	bl	8011c88 <fmaxf>
 800425a:	eef0 7a40 	vmov.f32	s15, s0
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <process_user_input+0x3a4>)
 8004260:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <process_user_input+0x3a4>)
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc f995 	bl	8000598 <__aeabi_f2d>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4826      	ldr	r0, [pc, #152]	; (800430c <process_user_input+0x3e8>)
 8004274:	f00a f856 	bl	800e324 <iprintf>
			 break;
 8004278:	e0cb      	b.n	8004412 <process_user_input+0x4ee>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f009 fb9e 	bl	800d9c0 <atof>
 8004284:	ec53 2b10 	vmov	r2, r3, d0
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	f7fc fcd4 	bl	8000c38 <__aeabi_d2f>
 8004290:	4603      	mov	r3, r0
 8004292:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004314 <process_user_input+0x3f0>
 8004296:	ee00 3a10 	vmov	s0, r3
 800429a:	f00d fcf5 	bl	8011c88 <fmaxf>
 800429e:	eef0 7a40 	vmov.f32	s15, s0
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <process_user_input+0x3a4>)
 80042a4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <process_user_input+0x3a4>)
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc f973 	bl	8000598 <__aeabi_f2d>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4816      	ldr	r0, [pc, #88]	; (8004310 <process_user_input+0x3ec>)
 80042b8:	f00a f834 	bl	800e324 <iprintf>
			 break;
 80042bc:	e0a9      	b.n	8004412 <process_user_input+0x4ee>
 80042be:	bf00      	nop
 80042c0:	44fa0000 	.word	0x44fa0000
 80042c4:	42c80000 	.word	0x42c80000
 80042c8:	20000684 	.word	0x20000684
 80042cc:	0801296c 	.word	0x0801296c
 80042d0:	20008f34 	.word	0x20008f34
 80042d4:	08012980 	.word	0x08012980
 80042d8:	08012994 	.word	0x08012994
 80042dc:	42200000 	.word	0x42200000
 80042e0:	080129ac 	.word	0x080129ac
 80042e4:	42040000 	.word	0x42040000
 80042e8:	080129c0 	.word	0x080129c0
 80042ec:	080129d8 	.word	0x080129d8
 80042f0:	43160000 	.word	0x43160000
 80042f4:	080129f0 	.word	0x080129f0
 80042f8:	08012a08 	.word	0x08012a08
 80042fc:	08012a20 	.word	0x08012a20
 8004300:	3a83126f 	.word	0x3a83126f
 8004304:	08012a34 	.word	0x08012a34
 8004308:	38d1b717 	.word	0x38d1b717
 800430c:	08012a44 	.word	0x08012a44
 8004310:	08012a54 	.word	0x08012a54
 8004314:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f009 fb4f 	bl	800d9c0 <atof>
 8004322:	ec53 2b10 	vmov	r2, r3, d0
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc85 	bl	8000c38 <__aeabi_d2f>
 800432e:	4603      	mov	r3, r0
 8004330:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004314 <process_user_input+0x3f0>
 8004334:	ee00 3a10 	vmov	s0, r3
 8004338:	f00d fca6 	bl	8011c88 <fmaxf>
 800433c:	eef0 7a40 	vmov.f32	s15, s0
 8004340:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <process_user_input+0x51c>)
 8004342:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <process_user_input+0x51c>)
 8004348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f924 	bl	8000598 <__aeabi_f2d>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	483b      	ldr	r0, [pc, #236]	; (8004444 <process_user_input+0x520>)
 8004356:	f009 ffe5 	bl	800e324 <iprintf>
			 break;
 800435a:	e05a      	b.n	8004412 <process_user_input+0x4ee>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f009 fb2d 	bl	800d9c0 <atof>
 8004366:	ec53 2b10 	vmov	r2, r3, d0
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	f7fc fc63 	bl	8000c38 <__aeabi_d2f>
 8004372:	4603      	mov	r3, r0
 8004374:	eddf 0a34 	vldr	s1, [pc, #208]	; 8004448 <process_user_input+0x524>
 8004378:	ee00 3a10 	vmov	s0, r3
 800437c:	f00d fc84 	bl	8011c88 <fmaxf>
 8004380:	eef0 7a40 	vmov.f32	s15, s0
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <process_user_input+0x51c>)
 8004386:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 800438a:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <process_user_input+0x51c>)
 800438c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004390:	eef1 7a67 	vneg.f32	s15, s15
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <process_user_input+0x51c>)
 8004396:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <process_user_input+0x51c>)
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc f8fa 	bl	8000598 <__aeabi_f2d>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4828      	ldr	r0, [pc, #160]	; (800444c <process_user_input+0x528>)
 80043aa:	f009 ffbb 	bl	800e324 <iprintf>
			 break;
 80043ae:	e030      	b.n	8004412 <process_user_input+0x4ee>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f009 fb03 	bl	800d9c0 <atof>
 80043ba:	ec53 2b10 	vmov	r2, r3, d0
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fc fc39 	bl	8000c38 <__aeabi_d2f>
 80043c6:	4603      	mov	r3, r0
 80043c8:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004448 <process_user_input+0x524>
 80043cc:	ee00 3a10 	vmov	s0, r3
 80043d0:	f00d fc5a 	bl	8011c88 <fmaxf>
 80043d4:	eef0 7a40 	vmov.f32	s15, s0
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <process_user_input+0x51c>)
 80043da:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <process_user_input+0x51c>)
 80043e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043e4:	eef1 7a67 	vneg.f32	s15, s15
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <process_user_input+0x51c>)
 80043ea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <process_user_input+0x51c>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc f8d0 	bl	8000598 <__aeabi_f2d>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4814      	ldr	r0, [pc, #80]	; (8004450 <process_user_input+0x52c>)
 80043fe:	f009 ff91 	bl	800e324 <iprintf>
			 break;
 8004402:	e006      	b.n	8004412 <process_user_input+0x4ee>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4812      	ldr	r0, [pc, #72]	; (8004454 <process_user_input+0x530>)
 800440c:	f009 ff8a 	bl	800e324 <iprintf>
			 break;
 8004410:	bf00      	nop
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8004412:	f7fe f979 	bl	8002708 <save_to_flash>
	 load_from_flash();
 8004416:	f7fe f8cf 	bl	80025b8 <load_from_flash>
	 enter_setup_state();
 800441a:	f7ff fc0f 	bl	8003c3c <enter_setup_state>

	 fsmstate->bytecount = 0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2208      	movs	r2, #8
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f009 fb04 	bl	800da40 <memset>
 }
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000684 	.word	0x20000684
 8004444:	08012a68 	.word	0x08012a68
 8004448:	00000000 	.word	0x00000000
 800444c:	08012a7c 	.word	0x08012a7c
 8004450:	08012a90 	.word	0x08012a90
 8004454:	08012aa4 	.word	0x08012aa4

08004458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <MX_GPIO_Init+0xfc>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	4a38      	ldr	r2, [pc, #224]	; (8004554 <MX_GPIO_Init+0xfc>)
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <MX_GPIO_Init+0xfc>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <MX_GPIO_Init+0xfc>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <MX_GPIO_Init+0xfc>)
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <MX_GPIO_Init+0xfc>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <MX_GPIO_Init+0xfc>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80044ce:	2200      	movs	r2, #0
 80044d0:	210c      	movs	r1, #12
 80044d2:	4821      	ldr	r0, [pc, #132]	; (8004558 <MX_GPIO_Init+0x100>)
 80044d4:	f004 fcfa 	bl	8008ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80044d8:	2200      	movs	r2, #0
 80044da:	f648 0110 	movw	r1, #34832	; 0x8810
 80044de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044e2:	f004 fcf3 	bl	8008ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ec:	481b      	ldr	r0, [pc, #108]	; (800455c <MX_GPIO_Init+0x104>)
 80044ee:	f004 fced 	bl	8008ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044f2:	230c      	movs	r3, #12
 80044f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004502:	f107 0314 	add.w	r3, r7, #20
 8004506:	4619      	mov	r1, r3
 8004508:	4813      	ldr	r0, [pc, #76]	; (8004558 <MX_GPIO_Init+0x100>)
 800450a:	f004 fb5d 	bl	8008bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800450e:	f648 0310 	movw	r3, #34832	; 0x8810
 8004512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004514:	2301      	movs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4619      	mov	r1, r3
 8004526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800452a:	f004 fb4d 	bl	8008bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800452e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004534:	2301      	movs	r3, #1
 8004536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004540:	f107 0314 	add.w	r3, r7, #20
 8004544:	4619      	mov	r1, r3
 8004546:	4805      	ldr	r0, [pc, #20]	; (800455c <MX_GPIO_Init+0x104>)
 8004548:	f004 fb3e 	bl	8008bc8 <HAL_GPIO_Init>

}
 800454c:	bf00      	nop
 800454e:	3728      	adds	r7, #40	; 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	48000800 	.word	0x48000800
 800455c:	48000400 	.word	0x48000400

08004560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db0a      	blt.n	800458a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	490c      	ldr	r1, [pc, #48]	; (80045ac <__NVIC_SetPriority+0x4c>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	440b      	add	r3, r1
 8004584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004588:	e00a      	b.n	80045a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4908      	ldr	r1, [pc, #32]	; (80045b0 <__NVIC_SetPriority+0x50>)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	3b04      	subs	r3, #4
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	440b      	add	r3, r1
 800459e:	761a      	strb	r2, [r3, #24]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100
 80045b0:	e000ed00 	.word	0xe000ed00
 80045b4:	00000000 	.word	0x00000000

080045b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045be:	f001 fc1c 	bl	8005dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045c2:	f000 fae7 	bl	8004b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045c6:	f7ff ff47 	bl	8004458 <MX_GPIO_Init>
  MX_ADC1_Init();
 80045ca:	f7fc fd37 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 80045ce:	f7fd fe53 	bl	8002278 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80045d2:	f000 feb7 	bl	8005344 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80045d6:	f001 fb2d 	bl	8005c34 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80045da:	f000 fef1 	bl	80053c0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80045de:	f001 fa03 	bl	80059e8 <MX_TIM1_Init>
  MX_ADC2_Init();
 80045e2:	f7fc fda3 	bl	800112c <MX_ADC2_Init>
  MX_ADC3_Init();
 80045e6:	f7fc fe07 	bl	80011f8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */


  /* Load settings from flash */
    load_from_flash();
 80045ea:	f7fd ffe5 	bl	80025b8 <load_from_flash>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80045ee:	4bba      	ldr	r3, [pc, #744]	; (80048d8 <main+0x320>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d102      	bne.n	80045fe <main+0x46>
 80045f8:	4bb7      	ldr	r3, [pc, #732]	; (80048d8 <main+0x320>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80045fe:	4bb6      	ldr	r3, [pc, #728]	; (80048d8 <main+0x320>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d102      	bne.n	800460e <main+0x56>
 8004608:	4bb3      	ldr	r3, [pc, #716]	; (80048d8 <main+0x320>)
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800460e:	4bb3      	ldr	r3, [pc, #716]	; (80048dc <main+0x324>)
 8004610:	edd3 7a02 	vldr	s15, [r3, #8]
 8004614:	eef4 7a67 	vcmp.f32	s15, s15
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	d609      	bvs.n	8004632 <main+0x7a>
 800461e:	4baf      	ldr	r3, [pc, #700]	; (80048dc <main+0x324>)
 8004620:	edd3 7a02 	vldr	s15, [r3, #8]
 8004624:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004628:	eef4 7a47 	vcmp.f32	s15, s14
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	d102      	bne.n	8004638 <main+0x80>
 8004632:	4baa      	ldr	r3, [pc, #680]	; (80048dc <main+0x324>)
 8004634:	4aaa      	ldr	r2, [pc, #680]	; (80048e0 <main+0x328>)
 8004636:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004638:	4ba8      	ldr	r3, [pc, #672]	; (80048dc <main+0x324>)
 800463a:	edd3 7a03 	vldr	s15, [r3, #12]
 800463e:	eef4 7a67 	vcmp.f32	s15, s15
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	d609      	bvs.n	800465c <main+0xa4>
 8004648:	4ba4      	ldr	r3, [pc, #656]	; (80048dc <main+0x324>)
 800464a:	edd3 7a03 	vldr	s15, [r3, #12]
 800464e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004652:	eef4 7a47 	vcmp.f32	s15, s14
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d102      	bne.n	8004662 <main+0xaa>
 800465c:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <main+0x324>)
 800465e:	4aa1      	ldr	r2, [pc, #644]	; (80048e4 <main+0x32c>)
 8004660:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004662:	4b9e      	ldr	r3, [pc, #632]	; (80048dc <main+0x324>)
 8004664:	edd3 7a06 	vldr	s15, [r3, #24]
 8004668:	eef4 7a67 	vcmp.f32	s15, s15
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d609      	bvs.n	8004686 <main+0xce>
 8004672:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <main+0x324>)
 8004674:	edd3 7a06 	vldr	s15, [r3, #24]
 8004678:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800467c:	eef4 7a47 	vcmp.f32	s15, s14
 8004680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004684:	d103      	bne.n	800468e <main+0xd6>
 8004686:	4b95      	ldr	r3, [pc, #596]	; (80048dc <main+0x324>)
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 800468e:	4b92      	ldr	r3, [pc, #584]	; (80048d8 <main+0x320>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d102      	bne.n	800469e <main+0xe6>
 8004698:	4b8f      	ldr	r3, [pc, #572]	; (80048d8 <main+0x320>)
 800469a:	2201      	movs	r2, #1
 800469c:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 800469e:	4b8e      	ldr	r3, [pc, #568]	; (80048d8 <main+0x320>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d102      	bne.n	80046ae <main+0xf6>
 80046a8:	4b8b      	ldr	r3, [pc, #556]	; (80048d8 <main+0x320>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80046ae:	4b8a      	ldr	r3, [pc, #552]	; (80048d8 <main+0x320>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d103      	bne.n	80046c0 <main+0x108>
 80046b8:	4b87      	ldr	r3, [pc, #540]	; (80048d8 <main+0x320>)
 80046ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046be:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80046c0:	4b86      	ldr	r3, [pc, #536]	; (80048dc <main+0x324>)
 80046c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80046c6:	eef4 7a67 	vcmp.f32	s15, s15
 80046ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ce:	d609      	bvs.n	80046e4 <main+0x12c>
 80046d0:	4b82      	ldr	r3, [pc, #520]	; (80048dc <main+0x324>)
 80046d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80046d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046da:	eef4 7a47 	vcmp.f32	s15, s14
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e2:	d103      	bne.n	80046ec <main+0x134>
 80046e4:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <main+0x324>)
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80046ec:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <main+0x324>)
 80046ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80046f2:	eef4 7a67 	vcmp.f32	s15, s15
 80046f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fa:	d609      	bvs.n	8004710 <main+0x158>
 80046fc:	4b77      	ldr	r3, [pc, #476]	; (80048dc <main+0x324>)
 80046fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8004702:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004706:	eef4 7a47 	vcmp.f32	s15, s14
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	d102      	bne.n	8004716 <main+0x15e>
 8004710:	4b72      	ldr	r3, [pc, #456]	; (80048dc <main+0x324>)
 8004712:	4a75      	ldr	r2, [pc, #468]	; (80048e8 <main+0x330>)
 8004714:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004716:	4b71      	ldr	r3, [pc, #452]	; (80048dc <main+0x324>)
 8004718:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800471c:	eef4 7a67 	vcmp.f32	s15, s15
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	d609      	bvs.n	800473a <main+0x182>
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <main+0x324>)
 8004728:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800472c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004730:	eef4 7a47 	vcmp.f32	s15, s14
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	d102      	bne.n	8004740 <main+0x188>
 800473a:	4b68      	ldr	r3, [pc, #416]	; (80048dc <main+0x324>)
 800473c:	4a6b      	ldr	r2, [pc, #428]	; (80048ec <main+0x334>)
 800473e:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004740:	4b66      	ldr	r3, [pc, #408]	; (80048dc <main+0x324>)
 8004742:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004746:	eef4 7a67 	vcmp.f32	s15, s15
 800474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474e:	d609      	bvs.n	8004764 <main+0x1ac>
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <main+0x324>)
 8004752:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004756:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800475a:	eef4 7a47 	vcmp.f32	s15, s14
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	d102      	bne.n	800476a <main+0x1b2>
 8004764:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <main+0x324>)
 8004766:	4a62      	ldr	r2, [pc, #392]	; (80048f0 <main+0x338>)
 8004768:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <main+0x324>)
 800476c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004770:	eef4 7a67 	vcmp.f32	s15, s15
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	d609      	bvs.n	800478e <main+0x1d6>
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <main+0x324>)
 800477c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004780:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004784:	eef4 7a47 	vcmp.f32	s15, s14
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	d102      	bne.n	8004794 <main+0x1dc>
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <main+0x324>)
 8004790:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <main+0x33c>)
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <main+0x324>)
 8004796:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800479a:	eef4 7a67 	vcmp.f32	s15, s15
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d609      	bvs.n	80047b8 <main+0x200>
 80047a4:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <main+0x324>)
 80047a6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80047aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047ae:	eef4 7a47 	vcmp.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d103      	bne.n	80047c0 <main+0x208>
 80047b8:	4b48      	ldr	r3, [pc, #288]	; (80048dc <main+0x324>)
 80047ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80047c0:	4b46      	ldr	r3, [pc, #280]	; (80048dc <main+0x324>)
 80047c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047c6:	eef4 7a67 	vcmp.f32	s15, s15
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	d609      	bvs.n	80047e4 <main+0x22c>
 80047d0:	4b42      	ldr	r3, [pc, #264]	; (80048dc <main+0x324>)
 80047d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047da:	eef4 7a47 	vcmp.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d103      	bne.n	80047ec <main+0x234>
 80047e4:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <main+0x324>)
 80047e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80047ec:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <main+0x324>)
 80047ee:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80047f2:	eef4 7a67 	vcmp.f32	s15, s15
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d609      	bvs.n	8004810 <main+0x258>
 80047fc:	4b37      	ldr	r3, [pc, #220]	; (80048dc <main+0x324>)
 80047fe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004802:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004806:	eef4 7a47 	vcmp.f32	s15, s14
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d102      	bne.n	8004816 <main+0x25e>
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <main+0x324>)
 8004812:	4a39      	ldr	r2, [pc, #228]	; (80048f8 <main+0x340>)
 8004814:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <main+0x324>)
 8004818:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800481c:	eef4 7a67 	vcmp.f32	s15, s15
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d609      	bvs.n	800483a <main+0x282>
 8004826:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <main+0x324>)
 8004828:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800482c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004830:	eef4 7a47 	vcmp.f32	s15, s14
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	d102      	bne.n	8004840 <main+0x288>
 800483a:	4b28      	ldr	r3, [pc, #160]	; (80048dc <main+0x324>)
 800483c:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <main+0x338>)
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <main+0x324>)
 8004842:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004846:	eef4 7a67 	vcmp.f32	s15, s15
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d702      	bvc.n	8004856 <main+0x29e>
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <main+0x324>)
 8004852:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <main+0x344>)
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <main+0x324>)
 8004858:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800485c:	eef4 7a67 	vcmp.f32	s15, s15
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	d702      	bvc.n	800486c <main+0x2b4>
 8004866:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <main+0x324>)
 8004868:	4a25      	ldr	r2, [pc, #148]	; (8004900 <main+0x348>)
 800486a:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <main+0x324>)
 800486e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004872:	eef4 7a67 	vcmp.f32	s15, s15
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	d702      	bvc.n	8004882 <main+0x2ca>
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <main+0x324>)
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <main+0x34c>)
 8004880:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <main+0x324>)
 8004884:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004888:	eef4 7a67 	vcmp.f32	s15, s15
 800488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004890:	d702      	bvc.n	8004898 <main+0x2e0>
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <main+0x324>)
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <main+0x350>)
 8004896:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004898:	a30d      	add	r3, pc, #52	; (adr r3, 80048d0 <main+0x318>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	481b      	ldr	r0, [pc, #108]	; (800490c <main+0x354>)
 80048a0:	f009 fd40 	bl	800e324 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 80048a4:	481a      	ldr	r0, [pc, #104]	; (8004910 <main+0x358>)
 80048a6:	f7fe fb11 	bl	8002ecc <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80048aa:	f44f 7224 	mov.w	r2, #656	; 0x290
 80048ae:	2100      	movs	r1, #0
 80048b0:	4818      	ldr	r0, [pc, #96]	; (8004914 <main+0x35c>)
 80048b2:	f009 f8c5 	bl	800da40 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <main+0x320>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <main+0x360>)
 80048bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <main+0x320>)
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <main+0x360>)
 80048c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80048ca:	e027      	b.n	800491c <main+0x364>
 80048cc:	f3af 8000 	nop.w
 80048d0:	c0000000 	.word	0xc0000000
 80048d4:	4000cccc 	.word	0x4000cccc
 80048d8:	20008f34 	.word	0x20008f34
 80048dc:	20000684 	.word	0x20000684
 80048e0:	447a0000 	.word	0x447a0000
 80048e4:	42200000 	.word	0x42200000
 80048e8:	42fa0000 	.word	0x42fa0000
 80048ec:	41600000 	.word	0x41600000
 80048f0:	40a00000 	.word	0x40a00000
 80048f4:	41a80000 	.word	0x41a80000
 80048f8:	43fa0000 	.word	0x43fa0000
 80048fc:	41480000 	.word	0x41480000
 8004900:	c1480000 	.word	0xc1480000
 8004904:	42820000 	.word	0x42820000
 8004908:	c2820000 	.word	0xc2820000
 800490c:	08012acc 	.word	0x08012acc
 8004910:	20000784 	.word	0x20000784
 8004914:	20008ca4 	.word	0x20008ca4
 8004918:	200003e0 	.word	0x200003e0
  comm_encoder.ppairs = PPAIRS;
 800491c:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <main+0x594>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	4a8b      	ldr	r2, [pc, #556]	; (8004b50 <main+0x598>)
 8004922:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	488a      	ldr	r0, [pc, #552]	; (8004b50 <main+0x598>)
 8004928:	f000 fb1c 	bl	8004f64 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800492c:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <main+0x598>)
 800492e:	4a89      	ldr	r2, [pc, #548]	; (8004b54 <main+0x59c>)
 8004930:	338c      	adds	r3, #140	; 0x8c
 8004932:	f102 0118 	add.w	r1, r2, #24
 8004936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493a:	4618      	mov	r0, r3
 800493c:	f009 f872 	bl	800da24 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004940:	4885      	ldr	r0, [pc, #532]	; (8004b58 <main+0x5a0>)
 8004942:	f001 fedb 	bl	80066fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004946:	4885      	ldr	r0, [pc, #532]	; (8004b5c <main+0x5a4>)
 8004948:	f001 fed8 	bl	80066fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800494c:	4884      	ldr	r0, [pc, #528]	; (8004b60 <main+0x5a8>)
 800494e:	f001 fed5 	bl	80066fc <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004952:	2201      	movs	r2, #1
 8004954:	2110      	movs	r1, #16
 8004956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800495a:	f004 fab7 	bl	8008ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800495e:	2201      	movs	r2, #1
 8004960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004968:	f004 fab0 	bl	8008ecc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800496c:	2001      	movs	r0, #1
 800496e:	f001 fab5 	bl	8005edc <HAL_Delay>
  //drv_calibrate(drv);



  HAL_Delay(1);
 8004972:	2001      	movs	r0, #1
 8004974:	f001 fab2 	bl	8005edc <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004978:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <main+0x5ac>)
 800497a:	2201      	movs	r2, #1
 800497c:	9206      	str	r2, [sp, #24]
 800497e:	2200      	movs	r2, #0
 8004980:	9205      	str	r2, [sp, #20]
 8004982:	2200      	movs	r2, #0
 8004984:	9204      	str	r2, [sp, #16]
 8004986:	2200      	movs	r2, #0
 8004988:	9203      	str	r2, [sp, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	9202      	str	r2, [sp, #8]
 800498e:	2201      	movs	r2, #1
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	9200      	str	r2, [sp, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2000      	movs	r0, #0
 800499a:	4610      	mov	r0, r2
 800499c:	889b      	ldrh	r3, [r3, #4]
 800499e:	2100      	movs	r1, #0
 80049a0:	f363 010f 	bfi	r1, r3, #0, #16
 80049a4:	2300      	movs	r3, #0
 80049a6:	2200      	movs	r2, #0
 80049a8:	f7fd fa87 	bl	8001eba <drv_write_DCR>
	  HAL_Delay(1);
	  //val++;s
  }
  */

  HAL_Delay(1);
 80049ac:	2001      	movs	r0, #1
 80049ae:	f001 fa95 	bl	8005edc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 80049b2:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <main+0x5ac>)
 80049b4:	2203      	movs	r2, #3
 80049b6:	9206      	str	r2, [sp, #24]
 80049b8:	2201      	movs	r2, #1
 80049ba:	9205      	str	r2, [sp, #20]
 80049bc:	2201      	movs	r2, #1
 80049be:	9204      	str	r2, [sp, #16]
 80049c0:	2201      	movs	r2, #1
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	9202      	str	r2, [sp, #8]
 80049c8:	2203      	movs	r2, #3
 80049ca:	9201      	str	r2, [sp, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	9200      	str	r2, [sp, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2000      	movs	r0, #0
 80049d4:	4610      	mov	r0, r2
 80049d6:	889b      	ldrh	r3, [r3, #4]
 80049d8:	2100      	movs	r1, #0
 80049da:	f363 010f 	bfi	r1, r3, #0, #16
 80049de:	2301      	movs	r3, #1
 80049e0:	2200      	movs	r2, #0
 80049e2:	f7fd fadf 	bl	8001fa4 <drv_write_CSACR>
  HAL_Delay(1);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f001 fa78 	bl	8005edc <HAL_Delay>
  zero_current(&controller);
 80049ec:	485e      	ldr	r0, [pc, #376]	; (8004b68 <main+0x5b0>)
 80049ee:	f7fe fa29 	bl	8002e44 <zero_current>
  HAL_Delay(1);
 80049f2:	2001      	movs	r0, #1
 80049f4:	f001 fa72 	bl	8005edc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 80049f8:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <main+0x5ac>)
 80049fa:	2203      	movs	r2, #3
 80049fc:	9206      	str	r2, [sp, #24]
 80049fe:	2200      	movs	r2, #0
 8004a00:	9205      	str	r2, [sp, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	9204      	str	r2, [sp, #16]
 8004a06:	2200      	movs	r2, #0
 8004a08:	9203      	str	r2, [sp, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	9202      	str	r2, [sp, #8]
 8004a0e:	2203      	movs	r2, #3
 8004a10:	9201      	str	r2, [sp, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	9200      	str	r2, [sp, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2000      	movs	r0, #0
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	889b      	ldrh	r3, [r3, #4]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f363 010f 	bfi	r1, r3, #0, #16
 8004a24:	2301      	movs	r3, #1
 8004a26:	2200      	movs	r2, #0
 8004a28:	f7fd fabc 	bl	8001fa4 <drv_write_CSACR>
  HAL_Delay(1);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f001 fa55 	bl	8005edc <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8004a32:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <main+0x5ac>)
 8004a34:	220e      	movs	r2, #14
 8004a36:	9202      	str	r2, [sp, #8]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	9201      	str	r2, [sp, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	9200      	str	r2, [sp, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	2000      	movs	r0, #0
 8004a44:	4610      	mov	r0, r2
 8004a46:	889b      	ldrh	r3, [r3, #4]
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f363 010f 	bfi	r1, r3, #0, #16
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2201      	movs	r2, #1
 8004a52:	f7fd fa79 	bl	8001f48 <drv_write_OCPCR>
  HAL_Delay(1);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f001 fa40 	bl	8005edc <HAL_Delay>
  drv_disable_gd(drv);
 8004a5c:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <main+0x5ac>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	2100      	movs	r1, #0
 8004a62:	4611      	mov	r1, r2
 8004a64:	889a      	ldrh	r2, [r3, #4]
 8004a66:	2300      	movs	r3, #0
 8004a68:	f362 030f 	bfi	r3, r2, #0, #16
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7fd faf4 	bl	800205c <drv_disable_gd>
  HAL_Delay(1);
 8004a74:	2001      	movs	r0, #1
 8004a76:	f001 fa31 	bl	8005edc <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <main+0x5b0>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	4a39      	ldr	r2, [pc, #228]	; (8004b68 <main+0x5b0>)
 8004a82:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8004a86:	4619      	mov	r1, r3
 8004a88:	4838      	ldr	r0, [pc, #224]	; (8004b6c <main+0x5b4>)
 8004a8a:	f009 fc4b 	bl	800e324 <iprintf>


  HAL_GPIO_WritePin(LED1, 1 );
 8004a8e:	2201      	movs	r2, #1
 8004a90:	2104      	movs	r1, #4
 8004a92:	4837      	ldr	r0, [pc, #220]	; (8004b70 <main+0x5b8>)
 8004a94:	f004 fa1a 	bl	8008ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2108      	movs	r1, #8
 8004a9c:	4834      	ldr	r0, [pc, #208]	; (8004b70 <main+0x5b8>)
 8004a9e:	f004 fa15 	bl	8008ecc <HAL_GPIO_WritePin>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4833      	ldr	r0, [pc, #204]	; (8004b74 <main+0x5bc>)
 8004aa6:	f005 ffad 	bl	800aa04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004aaa:	2104      	movs	r1, #4
 8004aac:	4831      	ldr	r0, [pc, #196]	; (8004b74 <main+0x5bc>)
 8004aae:	f005 ffa9 	bl	800aa04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004ab2:	2108      	movs	r1, #8
 8004ab4:	482f      	ldr	r0, [pc, #188]	; (8004b74 <main+0x5bc>)
 8004ab6:	f005 ffa5 	bl	800aa04 <HAL_TIM_PWM_Start>
  can_tx_init(&can_tx);
  HAL_CAN_Start(&CAN_H); start CAN
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING);  Start can interrupt
	*/

  can_rx_init(&can_rx);
 8004aba:	482f      	ldr	r0, [pc, #188]	; (8004b78 <main+0x5c0>)
 8004abc:	f7fd fc6c 	bl	8002398 <can_rx_init>
  can_tx_init(&can_tx);
 8004ac0:	482e      	ldr	r0, [pc, #184]	; (8004b7c <main+0x5c4>)
 8004ac2:	f7fd fc99 	bl	80023f8 <can_tx_init>


  HAL_FDCAN_Start(&CAN_H);
 8004ac6:	482e      	ldr	r0, [pc, #184]	; (8004b80 <main+0x5c8>)
 8004ac8:	f003 f995 	bl	8007df6 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2101      	movs	r1, #1
 8004ad0:	482b      	ldr	r0, [pc, #172]	; (8004b80 <main+0x5c8>)
 8004ad2:	f003 fa93 	bl	8007ffc <HAL_FDCAN_ActivateNotification>
  //__HAL_FDCAN_ENABLE_IT(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE); DOES NOT WORK!



  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	2019      	movs	r0, #25
 8004ada:	f7ff fd41 	bl	8004560 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8004ade:	2103      	movs	r1, #3
 8004ae0:	2056      	movs	r0, #86	; 0x56
 8004ae2:	f7ff fd3d 	bl	8004560 <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <main+0x5cc>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <main+0x5cc>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <main+0x5cc>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004af8:	2201      	movs	r2, #1
 8004afa:	4923      	ldr	r1, [pc, #140]	; (8004b88 <main+0x5d0>)
 8004afc:	4823      	ldr	r0, [pc, #140]	; (8004b8c <main+0x5d4>)
 8004afe:	f007 fb6f 	bl	800c1e0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004b02:	481c      	ldr	r0, [pc, #112]	; (8004b74 <main+0x5bc>)
 8004b04:	f005 fea4 	bl	800a850 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_WritePin(LED1, 0 );
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	4818      	ldr	r0, [pc, #96]	; (8004b70 <main+0x5b8>)
 8004b0e:	f004 f9dd 	bl	8008ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 0 );
 8004b12:	2200      	movs	r2, #0
 8004b14:	2108      	movs	r1, #8
 8004b16:	4816      	ldr	r0, [pc, #88]	; (8004b70 <main+0x5b8>)
 8004b18:	f004 f9d8 	bl	8008ecc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(150);
 8004b1c:	2096      	movs	r0, #150	; 0x96
 8004b1e:	f001 f9dd 	bl	8005edc <HAL_Delay>
	  drv_print_faults(drv);
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <main+0x5ac>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4611      	mov	r1, r2
 8004b2a:	889a      	ldrh	r2, [r3, #4]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f362 030f 	bfi	r3, r2, #0, #16
 8004b32:	4608      	mov	r0, r1
 8004b34:	4619      	mov	r1, r3
 8004b36:	f7fd faab 	bl	8002090 <drv_print_faults>
	  printf("Ria,b %f %f \n\r", controller.adc_a_raw, controller.adc_b_raw);
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <main+0x5b0>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <main+0x5b0>)
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	4619      	mov	r1, r3
 8004b44:	4812      	ldr	r0, [pc, #72]	; (8004b90 <main+0x5d8>)
 8004b46:	f009 fbed 	bl	800e324 <iprintf>
	  HAL_Delay(150);
 8004b4a:	e7e7      	b.n	8004b1c <main+0x564>
 8004b4c:	20000684 	.word	0x20000684
 8004b50:	200003e0 	.word	0x200003e0
 8004b54:	20008f34 	.word	0x20008f34
 8004b58:	200002a4 	.word	0x200002a4
 8004b5c:	20000238 	.word	0x20000238
 8004b60:	20000310 	.word	0x20000310
 8004b64:	20009360 	.word	0x20009360
 8004b68:	20000784 	.word	0x20000784
 8004b6c:	08012af0 	.word	0x08012af0
 8004b70:	48000800 	.word	0x48000800
 8004b74:	200094a8 	.word	0x200094a8
 8004b78:	20009368 	.word	0x20009368
 8004b7c:	20009334 	.word	0x20009334
 8004b80:	2000037c 	.word	0x2000037c
 8004b84:	20000674 	.word	0x20000674
 8004b88:	20000670 	.word	0x20000670
 8004b8c:	200094f4 	.word	0x200094f4
 8004b90:	08012b18 	.word	0x08012b18

08004b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b0a8      	sub	sp, #160	; 0xa0
 8004b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b9e:	2238      	movs	r2, #56	; 0x38
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f008 ff4c 	bl	800da40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ba8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bb8:	463b      	mov	r3, r7
 8004bba:	2254      	movs	r2, #84	; 0x54
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f008 ff3e 	bl	800da40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bc8:	f004 f998 	bl	8008efc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8004be8:	231e      	movs	r3, #30
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c04:	4618      	mov	r0, r3
 8004c06:	f004 fa2d 	bl	8009064 <HAL_RCC_OscConfig>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004c10:	f000 f834 	bl	8004c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c14:	230f      	movs	r3, #15
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c20:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004c24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c30:	2103      	movs	r1, #3
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 fd2e 	bl	8009694 <HAL_RCC_ClockConfig>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004c3e:	f000 f81d 	bl	8004c7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <SystemClock_Config+0xe4>)
 8004c44:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f004 ff34 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004c6a:	f000 f807 	bl	8004c7c <Error_Handler>
  }
}
 8004c6e:	bf00      	nop
 8004c70:	37a0      	adds	r7, #160	; 0xa0
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00019002 	.word	0x00019002

08004c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c94:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004c98:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c9c:	edd7 7a00 	vldr	s15, [r7]
 8004ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	dd01      	ble.n	8004cae <fast_fmaxf+0x24>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	e000      	b.n	8004cb0 <fast_fmaxf+0x26>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	ee07 3a90 	vmov	s15, r3
    }
 8004cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <fast_fminf>:

float fast_fminf(float x, float y){
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ccc:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004cd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cd4:	edd7 7a00 	vldr	s15, [r7]
 8004cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	d501      	bpl.n	8004ce6 <fast_fminf+0x24>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	e000      	b.n	8004ce8 <fast_fminf+0x26>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	ee07 3a90 	vmov	s15, r3
    }
 8004cec:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d04:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d08:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004d0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d10:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1c:	dd0c      	ble.n	8004d38 <fmaxf3+0x3e>
 8004d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2e:	dd01      	ble.n	8004d34 <fmaxf3+0x3a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	e00d      	b.n	8004d50 <fmaxf3+0x56>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	e00b      	b.n	8004d50 <fmaxf3+0x56>
 8004d38:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	dd01      	ble.n	8004d4e <fmaxf3+0x54>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	e000      	b.n	8004d50 <fmaxf3+0x56>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ee07 3a90 	vmov	s15, r3
    }
 8004d54:	eeb0 0a67 	vmov.f32	s0, s15
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <fminf3>:

float fminf3(float x, float y, float z){
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d6c:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d70:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004d74:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	d50c      	bpl.n	8004da0 <fminf3+0x3e>
 8004d86:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d96:	d501      	bpl.n	8004d9c <fminf3+0x3a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	e00d      	b.n	8004db8 <fminf3+0x56>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	e00b      	b.n	8004db8 <fminf3+0x56>
 8004da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db0:	d501      	bpl.n	8004db6 <fminf3+0x54>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	e000      	b.n	8004db8 <fminf3+0x56>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	ee07 3a90 	vmov	s15, r3
    }
 8004dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	ed93 7a00 	vldr	s14, [r3]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	edd3 6a00 	vldr	s13, [r3]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	edd3 7a00 	vldr	s15, [r3]
 8004df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004e00:	f00d f810 	bl	8011e24 <sqrtf>
 8004e04:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004e08:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e18:	dc00      	bgt.n	8004e1c <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004e1a:	e01b      	b.n	8004e54 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	ed93 7a00 	vldr	s14, [r3]
 8004e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	ed93 7a00 	vldr	s14, [r3]
 8004e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	edc3 7a00 	vstr	s15, [r3]
    }
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <uint_to_float>:
    float offset = x_min;
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
    }
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e68:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004e6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e7a:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e94:	2201      	movs	r2, #1
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eae:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <sin_lut>:

float sin_lut(float theta){
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004eca:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004f28 <sin_lut+0x68>
 8004ece:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ed2:	f00c ff7b 	bl	8011dcc <fmodf>
 8004ed6:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	d506      	bpl.n	8004ef6 <sin_lut+0x36>
 8004ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004f28 <sin_lut+0x68>
 8004ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ef4:	e001      	b.n	8004efa <sin_lut+0x3a>
 8004ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004efa:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004efe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f02:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004f2c <sin_lut+0x6c>
 8004f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f0e:	ee17 3a90 	vmov	r3, s15
 8004f12:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <sin_lut+0x70>)
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	ee07 3a90 	vmov	s15, r3
}
 8004f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40c90fdb 	.word	0x40c90fdb
 8004f2c:	42a2f983 	.word	0x42a2f983
 8004f30:	08012b94 	.word	0x08012b94

08004f34 <cos_lut>:

float cos_lut(float theta){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004f3e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004f60 <cos_lut+0x2c>
 8004f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4e:	f7ff ffb7 	bl	8004ec0 <sin_lut>
 8004f52:	eef0 7a40 	vmov.f32	s15, s0
}
 8004f56:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	3fc90fdb 	.word	0x3fc90fdb

08004f64 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e023      	b.n	8004fbc <ps_warmup+0x58>
		encoder->spi_tx_word = 0x0000;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f84:	f003 ffa2 	bl	8008ecc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	2364      	movs	r3, #100	; 0x64
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	2301      	movs	r3, #1
 8004f94:	480e      	ldr	r0, [pc, #56]	; (8004fd0 <ps_warmup+0x6c>)
 8004f96:	f005 f890 	bl	800a0ba <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004f9a:	bf00      	nop
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <ps_warmup+0x6c>)
 8004f9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d0f9      	beq.n	8004f9c <ps_warmup+0x38>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fb2:	f003 ff8b 	bl	8008ecc <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	dbd7      	blt.n	8004f74 <ps_warmup+0x10>
	}
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200093e0 	.word	0x200093e0

08004fd4 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004fe8:	2313      	movs	r3, #19
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e011      	b.n	8005012 <ps_sample+0x3e>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3302      	adds	r3, #2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3304      	adds	r3, #4
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3b01      	subs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	dcea      	bgt.n	8004fee <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800501e:	2200      	movs	r2, #0
 8005020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005028:	f003 ff50 	bl	8008ecc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	2364      	movs	r3, #100	; 0x64
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2302      	movs	r3, #2
 8005038:	4899      	ldr	r0, [pc, #612]	; (80052a0 <ps_sample+0x2cc>)
 800503a:	f005 f83e 	bl	800a0ba <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800503e:	bf00      	nop
 8005040:	4b97      	ldr	r3, [pc, #604]	; (80052a0 <ps_sample+0x2cc>)
 8005042:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d0f9      	beq.n	8005040 <ps_sample+0x6c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800504c:	2201      	movs	r2, #1
 800504e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005056:	f003 ff39 	bl	8008ecc <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	885b      	ldrh	r3, [r3, #2]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	675a      	str	r2, [r3, #116]	; 0x74


	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005068:	125b      	asrs	r3, r3, #9
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	3322      	adds	r3, #34	; 0x22
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507a:	125b      	asrs	r3, r3, #9
 800507c:	3301      	adds	r3, #1
 800507e:	425a      	negs	r2, r3
 8005080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005088:	bf58      	it	pl
 800508a:	4253      	negpl	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	3322      	adds	r3, #34	; 0x22
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	125b      	asrs	r3, r3, #9
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4413      	add	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw + off_interp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80050c2:	4b78      	ldr	r3, [pc, #480]	; (80052a4 <ps_sample+0x2d0>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d0:	eddf 6a75 	vldr	s13, [pc, #468]	; 80052a8 <ps_sample+0x2d4>
 80050d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80050e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e8:	ee17 3a90 	vmov	r3, s15
 80050ec:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005102:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80052ac <ps_sample+0x2d8>
 8005106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	edd3 7a01 	vldr	s15, [r3, #4]
 8005116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	d507      	bpl.n	8005130 <ps_sample+0x15c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	edd3 7a01 	vldr	s15, [r3, #4]
 8005126:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80052ac <ps_sample+0x2d8>
 800512a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800512e:	e002      	b.n	8005136 <ps_sample+0x162>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	edd3 7a01 	vldr	s15, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005146:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <ps_sample+0x2d0>)
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005158:	eddf 6a53 	vldr	s13, [pc, #332]	; 80052a8 <ps_sample+0x2d4>
 800515c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800516c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005170:	ee17 3a90 	vmov	r3, s15
 8005174:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800518a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80052ac <ps_sample+0x2d8>
 800518e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800519e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	d507      	bpl.n	80051b8 <ps_sample+0x1e4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051ae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80052ac <ps_sample+0x2d8>
 80051b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b6:	e002      	b.n	80051be <ps_sample+0x1ea>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80051d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d4:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){encoder->turns--;}
 80051d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80051dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80052b0 <ps_sample+0x2dc>
 80051e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	dd07      	ble.n	80051fa <ps_sample+0x226>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80051f8:	e00f      	b.n	800521a <ps_sample+0x246>
	else if(angle_diff < -PI_F){encoder->turns++;}
 80051fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80051fe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80052b4 <ps_sample+0x2e0>
 8005202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	d506      	bpl.n	800521a <ps_sample+0x246>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <ps_sample+0x260>
		encoder->turns = 0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	ed93 7a01 	vldr	s14, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005248:	eddf 6a18 	vldr	s13, [pc, #96]	; 80052ac <ps_sample+0x2d8>
 800524c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8005266:	ee77 6a67 	vsub.f32	s13, s14, s15
 800526a:	edd7 7a00 	vldr	s15, [r7]
 800526e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005272:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800528c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 8005296:	bf00      	nop
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200093e0 	.word	0x200093e0
 80052a4:	20008f34 	.word	0x20008f34
 80052a8:	47800000 	.word	0x47800000
 80052ac:	40c90fdb 	.word	0x40c90fdb
 80052b0:	40490fdb 	.word	0x40490fdb
 80052b4:	c0490fdb 	.word	0xc0490fdb

080052b8 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	4619      	mov	r1, r3
 80052c8:	4818      	ldr	r0, [pc, #96]	; (800532c <ps_print+0x74>)
 80052ca:	f009 f82b 	bl	800e324 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	4619      	mov	r1, r3
 80052d4:	4816      	ldr	r0, [pc, #88]	; (8005330 <ps_print+0x78>)
 80052d6:	f009 f825 	bl	800e324 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb f95a 	bl	8000598 <__aeabi_f2d>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4812      	ldr	r0, [pc, #72]	; (8005334 <ps_print+0x7c>)
 80052ea:	f009 f81b 	bl	800e324 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f950 	bl	8000598 <__aeabi_f2d>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	480e      	ldr	r0, [pc, #56]	; (8005338 <ps_print+0x80>)
 80052fe:	f009 f811 	bl	800e324 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	4618      	mov	r0, r3
 8005308:	f7fb f946 	bl	8000598 <__aeabi_f2d>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	480a      	ldr	r0, [pc, #40]	; (800533c <ps_print+0x84>)
 8005312:	f009 f807 	bl	800e324 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531c:	4619      	mov	r1, r3
 800531e:	4808      	ldr	r0, [pc, #32]	; (8005340 <ps_print+0x88>)
 8005320:	f009 f800 	bl	800e324 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	08012b28 	.word	0x08012b28
 8005330:	08012b30 	.word	0x08012b30
 8005334:	08012b48 	.word	0x08012b48
 8005338:	08012b5c 	.word	0x08012b5c
 800533c:	08012b70 	.word	0x08012b70
 8005340:	08012b84 	.word	0x08012b84

08005344 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <MX_SPI1_Init+0x74>)
 800534a:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <MX_SPI1_Init+0x78>)
 800534c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800535c:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <MX_SPI1_Init+0x74>)
 800535e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005364:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005366:	2200      	movs	r2, #0
 8005368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <MX_SPI1_Init+0x74>)
 800536c:	2201      	movs	r2, #1
 800536e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <MX_SPI1_Init+0x74>)
 800537a:	2230      	movs	r2, #48	; 0x30
 800537c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005380:	2200      	movs	r2, #0
 8005382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005386:	2200      	movs	r2, #0
 8005388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <MX_SPI1_Init+0x74>)
 800538c:	2200      	movs	r2, #0
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005392:	2207      	movs	r2, #7
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <MX_SPI1_Init+0x74>)
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <MX_SPI1_Init+0x74>)
 800539e:	2200      	movs	r2, #0
 80053a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053a2:	4805      	ldr	r0, [pc, #20]	; (80053b8 <MX_SPI1_Init+0x74>)
 80053a4:	f004 fdde 	bl	8009f64 <HAL_SPI_Init>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80053ae:	f7ff fc65 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20009444 	.word	0x20009444
 80053bc:	40013000 	.word	0x40013000

080053c0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <MX_SPI3_Init+0x74>)
 80053c6:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <MX_SPI3_Init+0x78>)
 80053c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80053ca:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <MX_SPI3_Init+0x74>)
 80053cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <MX_SPI3_Init+0x74>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <MX_SPI3_Init+0x74>)
 80053da:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80053de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <MX_SPI3_Init+0x74>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <MX_SPI3_Init+0x74>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <MX_SPI3_Init+0x74>)
 80053ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <MX_SPI3_Init+0x74>)
 80053f6:	2208      	movs	r2, #8
 80053f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053fa:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <MX_SPI3_Init+0x74>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <MX_SPI3_Init+0x74>)
 8005402:	2200      	movs	r2, #0
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <MX_SPI3_Init+0x74>)
 8005408:	2200      	movs	r2, #0
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <MX_SPI3_Init+0x74>)
 800540e:	2207      	movs	r2, #7
 8005410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <MX_SPI3_Init+0x74>)
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <MX_SPI3_Init+0x74>)
 800541a:	2208      	movs	r2, #8
 800541c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800541e:	4805      	ldr	r0, [pc, #20]	; (8005434 <MX_SPI3_Init+0x74>)
 8005420:	f004 fda0 	bl	8009f64 <HAL_SPI_Init>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800542a:	f7ff fc27 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200093e0 	.word	0x200093e0
 8005438:	40003c00 	.word	0x40003c00

0800543c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005444:	f107 031c 	add.w	r3, r7, #28
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <HAL_SPI_MspInit+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d129      	bne.n	80054b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_SPI_MspInit+0xe0>)
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_SPI_MspInit+0xe0>)
 8005464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005468:	6613      	str	r3, [r2, #96]	; 0x60
 800546a:	4b2c      	ldr	r3, [pc, #176]	; (800551c <HAL_SPI_MspInit+0xe0>)
 800546c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <HAL_SPI_MspInit+0xe0>)
 8005478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547a:	4a28      	ldr	r2, [pc, #160]	; (800551c <HAL_SPI_MspInit+0xe0>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005482:	4b26      	ldr	r3, [pc, #152]	; (800551c <HAL_SPI_MspInit+0xe0>)
 8005484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800548e:	23e0      	movs	r3, #224	; 0xe0
 8005490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005492:	2302      	movs	r3, #2
 8005494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549a:	2300      	movs	r3, #0
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800549e:	2305      	movs	r3, #5
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a2:	f107 031c 	add.w	r3, r7, #28
 80054a6:	4619      	mov	r1, r3
 80054a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ac:	f003 fb8c 	bl	8008bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80054b0:	e02d      	b.n	800550e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <HAL_SPI_MspInit+0xe4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d128      	bne.n	800550e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	6593      	str	r3, [r2, #88]	; 0x58
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d8:	4a10      	ldr	r2, [pc, #64]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_SPI_MspInit+0xe0>)
 80054e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054fe:	2306      	movs	r3, #6
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005502:	f107 031c 	add.w	r3, r7, #28
 8005506:	4619      	mov	r1, r3
 8005508:	4806      	ldr	r0, [pc, #24]	; (8005524 <HAL_SPI_MspInit+0xe8>)
 800550a:	f003 fb5d 	bl	8008bc8 <HAL_GPIO_Init>
}
 800550e:	bf00      	nop
 8005510:	3730      	adds	r7, #48	; 0x30
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40013000 	.word	0x40013000
 800551c:	40021000 	.word	0x40021000
 8005520:	40003c00 	.word	0x40003c00
 8005524:	48000800 	.word	0x48000800

08005528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <HAL_MspInit+0x44>)
 8005530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005532:	4a0e      	ldr	r2, [pc, #56]	; (800556c <HAL_MspInit+0x44>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6613      	str	r3, [r2, #96]	; 0x60
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <HAL_MspInit+0x44>)
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_MspInit+0x44>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <HAL_MspInit+0x44>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005550:	6593      	str	r3, [r2, #88]	; 0x58
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_MspInit+0x44>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800555e:	f003 fd71 	bl	8009044 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000

08005570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005574:	e7fe      	b.n	8005574 <NMI_Handler+0x4>

08005576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800557a:	e7fe      	b.n	800557a <HardFault_Handler+0x4>

0800557c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005580:	e7fe      	b.n	8005580 <MemManage_Handler+0x4>

08005582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005586:	e7fe      	b.n	8005586 <BusFault_Handler+0x4>

08005588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800558c:	e7fe      	b.n	800558c <UsageFault_Handler+0x4>

0800558e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055bc:	f000 fc70 	bl	8005ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055c0:	bf00      	nop
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  analog_sample(&controller);
 80055c8:	4814      	ldr	r0, [pc, #80]	; (800561c <TIM1_UP_TIM16_IRQHandler+0x58>)
 80055ca:	f7fd f9d5 	bl	8002978 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 80055ce:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005620 <TIM1_UP_TIM16_IRQHandler+0x5c>
 80055d2:	4814      	ldr	r0, [pc, #80]	; (8005624 <TIM1_UP_TIM16_IRQHandler+0x60>)
 80055d4:	f7ff fcfe 	bl	8004fd4 <ps_sample>

  static int ledVal = 1;
  ledVal = !ledVal;
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055ea:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LED1, ledVal );
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	2104      	movs	r1, #4
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <TIM1_UP_TIM16_IRQHandler+0x68>)
 80055f8:	f003 fc68 	bl	8008ecc <HAL_GPIO_WritePin>

  /* Run Finite State Machine */
  run_fsm(&state);
 80055fc:	480c      	ldr	r0, [pc, #48]	; (8005630 <TIM1_UP_TIM16_IRQHandler+0x6c>)
 80055fe:	f7fe f885 	bl	800370c <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <TIM1_UP_TIM16_IRQHandler+0x58>)
 8005604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005608:	3301      	adds	r3, #1
 800560a:	4a04      	ldr	r2, [pc, #16]	; (800561c <TIM1_UP_TIM16_IRQHandler+0x58>)
 800560c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  //HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005610:	4808      	ldr	r0, [pc, #32]	; (8005634 <TIM1_UP_TIM16_IRQHandler+0x70>)
 8005612:	f005 fb09 	bl	800ac28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005616:	bf00      	nop
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000784 	.word	0x20000784
 8005620:	37d1b717 	.word	0x37d1b717
 8005624:	200003e0 	.word	0x200003e0
 8005628:	20000000 	.word	0x20000000
 800562c:	48000800 	.word	0x48000800
 8005630:	20000674 	.word	0x20000674
 8005634:	200094a8 	.word	0x200094a8

08005638 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800563e:	4807      	ldr	r0, [pc, #28]	; (800565c <USART2_IRQHandler+0x24>)
 8005640:	f006 fe14 	bl	800c26c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <USART2_IRQHandler+0x28>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	4619      	mov	r1, r3
 800564e:	4805      	ldr	r0, [pc, #20]	; (8005664 <USART2_IRQHandler+0x2c>)
 8005650:	f7fe fa06 	bl	8003a60 <update_fsm>
  /* USER CODE END USART2_IRQn 1 */
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200094f4 	.word	0x200094f4
 8005660:	20000670 	.word	0x20000670
 8005664:	20000674 	.word	0x20000674

08005668 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b091      	sub	sp, #68	; 0x44
 800566c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800566e:	486b      	ldr	r0, [pc, #428]	; (800581c <FDCAN2_IT0_IRQHandler+0x1b4>)
 8005670:	f002 fdaa 	bl	80081c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005674:	4b6a      	ldr	r3, [pc, #424]	; (8005820 <FDCAN2_IT0_IRQHandler+0x1b8>)
 8005676:	4a6b      	ldr	r2, [pc, #428]	; (8005824 <FDCAN2_IT0_IRQHandler+0x1bc>)
 8005678:	2140      	movs	r1, #64	; 0x40
 800567a:	4868      	ldr	r0, [pc, #416]	; (800581c <FDCAN2_IT0_IRQHandler+0x1b4>)
 800567c:	f002 fbe4 	bl	8007e48 <HAL_FDCAN_GetRxMessage>
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005680:	4b69      	ldr	r3, [pc, #420]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005682:	785a      	ldrb	r2, [r3, #1]
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005686:	789b      	ldrb	r3, [r3, #2]
 8005688:	4013      	ands	r3, r2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	4b66      	ldr	r3, [pc, #408]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800568e:	78db      	ldrb	r3, [r3, #3]
 8005690:	4013      	ands	r3, r2
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	4013      	ands	r3, r2
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b62      	ldr	r3, [pc, #392]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800569e:	795b      	ldrb	r3, [r3, #5]
 80056a0:	4013      	ands	r3, r2
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b60      	ldr	r3, [pc, #384]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056a6:	799b      	ldrb	r3, [r3, #6]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056ae:	79db      	ldrb	r3, [r3, #7]
 80056b0:	4013      	ands	r3, r2
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2bff      	cmp	r3, #255	; 0xff
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	4b5a      	ldr	r3, [pc, #360]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056c0:	7a1b      	ldrb	r3, [r3, #8]
 80056c2:	2bfc      	cmp	r3, #252	; 0xfc
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4013      	ands	r3, r2
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <FDCAN2_IT0_IRQHandler+0x76>
	  update_fsm(&state, MOTOR_CMD);
 80056d4:	216d      	movs	r1, #109	; 0x6d
 80056d6:	4855      	ldr	r0, [pc, #340]	; (800582c <FDCAN2_IT0_IRQHandler+0x1c4>)
 80056d8:	f7fe f9c2 	bl	8003a60 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80056dc:	e099      	b.n	8005812 <FDCAN2_IT0_IRQHandler+0x1aa>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80056de:	4b52      	ldr	r3, [pc, #328]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056e0:	785a      	ldrb	r2, [r3, #1]
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056e4:	789b      	ldrb	r3, [r3, #2]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80056ec:	78db      	ldrb	r3, [r3, #3]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2bff      	cmp	r3, #255	; 0xff
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005700:	791b      	ldrb	r3, [r3, #4]
 8005702:	2bff      	cmp	r3, #255	; 0xff
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	4b46      	ldr	r3, [pc, #280]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005710:	795b      	ldrb	r3, [r3, #5]
 8005712:	2bff      	cmp	r3, #255	; 0xff
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	fb03 f301 	mul.w	r3, r3, r1
 8005720:	4013      	ands	r3, r2
 8005722:	4a41      	ldr	r2, [pc, #260]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005724:	7992      	ldrb	r2, [r2, #6]
 8005726:	2aff      	cmp	r2, #255	; 0xff
 8005728:	bf0c      	ite	eq
 800572a:	2201      	moveq	r2, #1
 800572c:	2200      	movne	r2, #0
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	4013      	ands	r3, r2
 8005732:	4a3d      	ldr	r2, [pc, #244]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005734:	79d2      	ldrb	r2, [r2, #7]
 8005736:	2aff      	cmp	r2, #255	; 0xff
 8005738:	bf0c      	ite	eq
 800573a:	2201      	moveq	r2, #1
 800573c:	2200      	movne	r2, #0
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	4013      	ands	r3, r2
 8005742:	4a39      	ldr	r2, [pc, #228]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005744:	7a12      	ldrb	r2, [r2, #8]
 8005746:	2afd      	cmp	r2, #253	; 0xfd
 8005748:	bf0c      	ite	eq
 800574a:	2201      	moveq	r2, #1
 800574c:	2200      	movne	r2, #0
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <FDCAN2_IT0_IRQHandler+0xf8>
	  update_fsm(&state, MENU_CMD);
 8005756:	211b      	movs	r1, #27
 8005758:	4834      	ldr	r0, [pc, #208]	; (800582c <FDCAN2_IT0_IRQHandler+0x1c4>)
 800575a:	f7fe f981 	bl	8003a60 <update_fsm>
}
 800575e:	e058      	b.n	8005812 <FDCAN2_IT0_IRQHandler+0x1aa>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005762:	785a      	ldrb	r2, [r3, #1]
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005766:	789b      	ldrb	r3, [r3, #2]
 8005768:	4013      	ands	r3, r2
 800576a:	b2da      	uxtb	r2, r3
 800576c:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 800576e:	78db      	ldrb	r3, [r3, #3]
 8005770:	4013      	ands	r3, r2
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2bff      	cmp	r3, #255	; 0xff
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	4b29      	ldr	r3, [pc, #164]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2bff      	cmp	r3, #255	; 0xff
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	4619      	mov	r1, r3
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005792:	795b      	ldrb	r3, [r3, #5]
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	fb03 f301 	mul.w	r3, r3, r1
 80057a2:	4013      	ands	r3, r2
 80057a4:	4a20      	ldr	r2, [pc, #128]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057a6:	7992      	ldrb	r2, [r2, #6]
 80057a8:	2aff      	cmp	r2, #255	; 0xff
 80057aa:	bf0c      	ite	eq
 80057ac:	2201      	moveq	r2, #1
 80057ae:	2200      	movne	r2, #0
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	4013      	ands	r3, r2
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057b6:	79d2      	ldrb	r2, [r2, #7]
 80057b8:	2aff      	cmp	r2, #255	; 0xff
 80057ba:	bf0c      	ite	eq
 80057bc:	2201      	moveq	r2, #1
 80057be:	2200      	movne	r2, #0
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	4013      	ands	r3, r2
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057c6:	7a12      	ldrb	r2, [r2, #8]
 80057c8:	2afe      	cmp	r2, #254	; 0xfe
 80057ca:	bf0c      	ite	eq
 80057cc:	2201      	moveq	r2, #1
 80057ce:	2200      	movne	r2, #0
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <FDCAN2_IT0_IRQHandler+0x17a>
	  update_fsm(&state, ZERO_CMD);
 80057d8:	217a      	movs	r1, #122	; 0x7a
 80057da:	4814      	ldr	r0, [pc, #80]	; (800582c <FDCAN2_IT0_IRQHandler+0x1c4>)
 80057dc:	f7fe f940 	bl	8003a60 <update_fsm>
}
 80057e0:	e017      	b.n	8005812 <FDCAN2_IT0_IRQHandler+0x1aa>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80057e2:	4e11      	ldr	r6, [pc, #68]	; (8005828 <FDCAN2_IT0_IRQHandler+0x1c0>)
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80057e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e8:	466d      	mov	r5, sp
 80057ea:	f106 0410 	add.w	r4, r6, #16
 80057ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005802:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005806:	f7fc fe23 	bl	8002450 <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <FDCAN2_IT0_IRQHandler+0x1cc>)
 800580c:	2200      	movs	r2, #0
 800580e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005812:	bf00      	nop
 8005814:	3704      	adds	r7, #4
 8005816:	46bd      	mov	sp, r7
 8005818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581a:	bf00      	nop
 800581c:	2000037c 	.word	0x2000037c
 8005820:	20009369 	.word	0x20009369
 8005824:	20009374 	.word	0x20009374
 8005828:	20009368 	.word	0x20009368
 800582c:	20000674 	.word	0x20000674
 8005830:	2000084c 	.word	0x2000084c
 8005834:	20000784 	.word	0x20000784

08005838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
	return 1;
 800583c:	2301      	movs	r3, #1
}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <_kill>:

int _kill(int pid, int sig)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005852:	f008 f8bd 	bl	800d9d0 <__errno>
 8005856:	4603      	mov	r3, r0
 8005858:	2216      	movs	r2, #22
 800585a:	601a      	str	r2, [r3, #0]
	return -1;
 800585c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_exit>:

void _exit (int status)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005870:	f04f 31ff 	mov.w	r1, #4294967295
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ffe7 	bl	8005848 <_kill>
	while (1) {}		/* Make sure we hang here */
 800587a:	e7fe      	b.n	800587a <_exit+0x12>

0800587c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e00a      	b.n	80058a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800588e:	f3af 8000 	nop.w
 8005892:	4601      	mov	r1, r0
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	60ba      	str	r2, [r7, #8]
 800589a:	b2ca      	uxtb	r2, r1
 800589c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3301      	adds	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	dbf0      	blt.n	800588e <_read+0x12>
	}

return len;
 80058ac:	687b      	ldr	r3, [r7, #4]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	e009      	b.n	80058dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	60ba      	str	r2, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fa45 	bl	8005d60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	3301      	adds	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	dbf1      	blt.n	80058c8 <_write+0x12>
	}
	return len;
 80058e4:	687b      	ldr	r3, [r7, #4]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <_close>:

int _close(int file)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
	return -1;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005916:	605a      	str	r2, [r3, #4]
	return 0;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <_isatty>:

int _isatty(int file)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
	return 1;
 800592e:	2301      	movs	r3, #1
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	return 0;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <_sbrk+0x5c>)
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <_sbrk+0x60>)
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <_sbrk+0x64>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <_sbrk+0x64>)
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <_sbrk+0x68>)
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <_sbrk+0x64>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d207      	bcs.n	8005998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005988:	f008 f822 	bl	800d9d0 <__errno>
 800598c:	4603      	mov	r3, r0
 800598e:	220c      	movs	r2, #12
 8005990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	e009      	b.n	80059ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <_sbrk+0x64>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <_sbrk+0x64>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a05      	ldr	r2, [pc, #20]	; (80059bc <_sbrk+0x64>)
 80059a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20020000 	.word	0x20020000
 80059b8:	00000400 	.word	0x00000400
 80059bc:	2000022c 	.word	0x2000022c
 80059c0:	20009598 	.word	0x20009598

080059c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <SystemInit+0x20>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <SystemInit+0x20>)
 80059d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b09c      	sub	sp, #112	; 0x70
 80059ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	609a      	str	r2, [r3, #8]
 80059fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	611a      	str	r2, [r3, #16]
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	2234      	movs	r2, #52	; 0x34
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f008 f80c 	bl	800da40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005a28:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a2a:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <MX_TIM1_Init+0x18c>)
 8005a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005a2e:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a34:	4b4e      	ldr	r3, [pc, #312]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a42:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005a48:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a4e:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005a54:	4846      	ldr	r0, [pc, #280]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a56:	f004 fea3 	bl	800a7a0 <HAL_TIM_Base_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005a60:	f7ff f90c 	bl	8004c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005a6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005a6e:	4619      	mov	r1, r3
 8005a70:	483f      	ldr	r0, [pc, #252]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a72:	f005 fb69 	bl	800b148 <HAL_TIM_ConfigClockSource>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005a7c:	f7ff f8fe 	bl	8004c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a80:	483b      	ldr	r0, [pc, #236]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005a82:	f004 ff5d 	bl	800a940 <HAL_TIM_PWM_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005a8c:	f7ff f8f6 	bl	8004c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a90:	2300      	movs	r3, #0
 8005a92:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a94:	2300      	movs	r3, #0
 8005a96:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4833      	ldr	r0, [pc, #204]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005aa4:	f006 f928 	bl	800bcf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005aae:	f7ff f8e5 	bl	8004c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ab2:	2360      	movs	r3, #96	; 0x60
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005aba:	2302      	movs	r3, #2
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4826      	ldr	r0, [pc, #152]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005ad8:	f005 fa26 	bl	800af28 <HAL_TIM_PWM_ConfigChannel>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005ae2:	f7ff f8cb 	bl	8004c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005aea:	2204      	movs	r2, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4820      	ldr	r0, [pc, #128]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005af0:	f005 fa1a 	bl	800af28 <HAL_TIM_PWM_ConfigChannel>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005afa:	f7ff f8bf 	bl	8004c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b02:	2208      	movs	r2, #8
 8005b04:	4619      	mov	r1, r3
 8005b06:	481a      	ldr	r0, [pc, #104]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005b08:	f005 fa0e 	bl	800af28 <HAL_TIM_PWM_ConfigChannel>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005b12:	f7ff f8b3 	bl	8004c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005b46:	2300      	movs	r3, #0
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4807      	ldr	r0, [pc, #28]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005b54:	f006 f966 	bl	800be24 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8005b5e:	f7ff f88d 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005b62:	4803      	ldr	r0, [pc, #12]	; (8005b70 <MX_TIM1_Init+0x188>)
 8005b64:	f000 f82e 	bl	8005bc4 <HAL_TIM_MspPostInit>

}
 8005b68:	bf00      	nop
 8005b6a:	3770      	adds	r7, #112	; 0x70
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200094a8 	.word	0x200094a8
 8005b74:	40012c00 	.word	0x40012c00

08005b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0d      	ldr	r2, [pc, #52]	; (8005bbc <HAL_TIM_Base_MspInit+0x44>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d113      	bne.n	8005bb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <HAL_TIM_Base_MspInit+0x48>)
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <HAL_TIM_Base_MspInit+0x48>)
 8005b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b94:	6613      	str	r3, [r2, #96]	; 0x60
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <HAL_TIM_Base_MspInit+0x48>)
 8005b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	2019      	movs	r0, #25
 8005ba8:	f001 fe4b 	bl	8007842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005bac:	2019      	movs	r0, #25
 8005bae:	f001 fe62 	bl	8007876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bcc:	f107 030c 	add.w	r3, r7, #12
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	60da      	str	r2, [r3, #12]
 8005bda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <HAL_TIM_MspPostInit+0x68>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d11d      	bne.n	8005c22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <HAL_TIM_MspPostInit+0x6c>)
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <HAL_TIM_MspPostInit+0x6c>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <HAL_TIM_MspPostInit+0x6c>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005bfe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005c02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c04:	2302      	movs	r3, #2
 8005c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005c10:	2306      	movs	r3, #6
 8005c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c1e:	f002 ffd3 	bl	8008bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005c22:	bf00      	nop
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40021000 	.word	0x40021000

08005c34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c3a:	4a23      	ldr	r2, [pc, #140]	; (8005cc8 <MX_USART2_UART_Init+0x94>)
 8005c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c46:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c5a:	220c      	movs	r2, #12
 8005c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c6a:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c7c:	4811      	ldr	r0, [pc, #68]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c7e:	f006 f9c9 	bl	800c014 <HAL_UART_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005c88:	f7fe fff8 	bl	8004c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	480d      	ldr	r0, [pc, #52]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005c90:	f007 fdcb 	bl	800d82a <HAL_UARTEx_SetTxFifoThreshold>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005c9a:	f7fe ffef 	bl	8004c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005ca2:	f007 fe00 	bl	800d8a6 <HAL_UARTEx_SetRxFifoThreshold>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005cac:	f7fe ffe6 	bl	8004c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005cb0:	4804      	ldr	r0, [pc, #16]	; (8005cc4 <MX_USART2_UART_Init+0x90>)
 8005cb2:	f007 fd81 	bl	800d7b8 <HAL_UARTEx_DisableFifoMode>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005cbc:	f7fe ffde 	bl	8004c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cc0:	bf00      	nop
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200094f4 	.word	0x200094f4
 8005cc8:	40004400 	.word	0x40004400

08005ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <HAL_UART_MspInit+0x8c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d130      	bne.n	8005d50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfa:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0a:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_UART_MspInit+0x90>)
 8005d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d1e:	230c      	movs	r3, #12
 8005d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d22:	2302      	movs	r3, #2
 8005d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d2e:	2307      	movs	r3, #7
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	4619      	mov	r1, r3
 8005d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d3c:	f002 ff44 	bl	8008bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d40:	2200      	movs	r2, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	2026      	movs	r0, #38	; 0x26
 8005d46:	f001 fd7c 	bl	8007842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d4a:	2026      	movs	r0, #38	; 0x26
 8005d4c:	f001 fd93 	bl	8007876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d50:	bf00      	nop
 8005d52:	3728      	adds	r7, #40	; 0x28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40021000 	.word	0x40021000

08005d60 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005d68:	1d39      	adds	r1, r7, #4
 8005d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4803      	ldr	r0, [pc, #12]	; (8005d80 <__io_putchar+0x20>)
 8005d72:	f006 f99f 	bl	800c0b4 <HAL_UART_Transmit>
return 0;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200094f4 	.word	0x200094f4

08005d84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4904      	ldr	r1, [pc, #16]	; (8005da0 <HAL_UART_RxCpltCallback+0x1c>)
 8005d90:	4804      	ldr	r0, [pc, #16]	; (8005da4 <HAL_UART_RxCpltCallback+0x20>)
 8005d92:	f006 fa25 	bl	800c1e0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000670 	.word	0x20000670
 8005da4:	200094f4 	.word	0x200094f4

08005da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005daa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dac:	480d      	ldr	r0, [pc, #52]	; (8005de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005dae:	490e      	ldr	r1, [pc, #56]	; (8005de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005db0:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <LoopForever+0xe>)
  movs r3, #0
 8005db2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005db4:	e002      	b.n	8005dbc <LoopCopyDataInit>

08005db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dba:	3304      	adds	r3, #4

08005dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dc0:	d3f9      	bcc.n	8005db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dc2:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dc4:	4c0b      	ldr	r4, [pc, #44]	; (8005df4 <LoopForever+0x16>)
  movs r3, #0
 8005dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dc8:	e001      	b.n	8005dce <LoopFillZerobss>

08005dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dcc:	3204      	adds	r2, #4

08005dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dd0:	d3fb      	bcc.n	8005dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005dd2:	f7ff fdf7 	bl	80059c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dd6:	f007 fe01 	bl	800d9dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dda:	f7fe fbed 	bl	80045b8 <main>

08005dde <LoopForever>:

LoopForever:
    b LoopForever
 8005dde:	e7fe      	b.n	8005dde <LoopForever>
  ldr   r0, =_estack
 8005de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005de8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005dec:	080138e0 	.word	0x080138e0
  ldr r2, =_sbss
 8005df0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005df4:	20009598 	.word	0x20009598

08005df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005df8:	e7fe      	b.n	8005df8 <ADC1_2_IRQHandler>

08005dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e04:	2003      	movs	r0, #3
 8005e06:	f001 fd11 	bl	800782c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f000 f80e 	bl	8005e2c <HAL_InitTick>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	71fb      	strb	r3, [r7, #7]
 8005e1a:	e001      	b.n	8005e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e1c:	f7ff fb84 	bl	8005528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e20:	79fb      	ldrb	r3, [r7, #7]

}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <HAL_InitTick+0x68>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d022      	beq.n	8005e86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_InitTick+0x6c>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <HAL_InitTick+0x68>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fd1c 	bl	8007892 <HAL_SYSTICK_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b0f      	cmp	r3, #15
 8005e64:	d809      	bhi.n	8005e7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e66:	2200      	movs	r2, #0
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	f001 fce8 	bl	8007842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <HAL_InitTick+0x70>)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e007      	b.n	8005e8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
 8005e7e:	e004      	b.n	8005e8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e001      	b.n	8005e8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2000000c 	.word	0x2000000c
 8005e98:	20000004 	.word	0x20000004
 8005e9c:	20000008 	.word	0x20000008

08005ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_IncTick+0x1c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_IncTick+0x20>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	4a03      	ldr	r2, [pc, #12]	; (8005ebc <HAL_IncTick+0x1c>)
 8005eb0:	6013      	str	r3, [r2, #0]
}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20009584 	.word	0x20009584
 8005ec0:	2000000c 	.word	0x2000000c

08005ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ec8:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <HAL_GetTick+0x14>)
 8005eca:	681b      	ldr	r3, [r3, #0]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20009584 	.word	0x20009584

08005edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ee4:	f7ff ffee 	bl	8005ec4 <HAL_GetTick>
 8005ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d004      	beq.n	8005f00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ef6:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_Delay+0x40>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f00:	bf00      	nop
 8005f02:	f7ff ffdf 	bl	8005ec4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d8f7      	bhi.n	8005f02 <HAL_Delay+0x26>
  {
  }
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3360      	adds	r3, #96	; 0x60
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <LL_ADC_SetOffset+0x44>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	03fff000 	.word	0x03fff000

08005fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3360      	adds	r3, #96	; 0x60
 8005fde:	461a      	mov	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3360      	adds	r3, #96	; 0x60
 800600c:	461a      	mov	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	431a      	orrs	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006032:	b480      	push	{r7}
 8006034:	b087      	sub	sp, #28
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3360      	adds	r3, #96	; 0x60
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	431a      	orrs	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3360      	adds	r3, #96	; 0x60
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	431a      	orrs	r2, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	615a      	str	r2, [r3, #20]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3330      	adds	r3, #48	; 0x30
 80060fa:	461a      	mov	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	0a1b      	lsrs	r3, r3, #8
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	4413      	add	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	211f      	movs	r1, #31
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	401a      	ands	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0e9b      	lsrs	r3, r3, #26
 8006122:	f003 011f 	and.w	r1, r3, #31
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3314      	adds	r3, #20
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	0e5b      	lsrs	r3, r3, #25
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	4413      	add	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	0d1b      	lsrs	r3, r3, #20
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2107      	movs	r1, #7
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	401a      	ands	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	0d1b      	lsrs	r3, r3, #20
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	431a      	orrs	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0318 	and.w	r3, r3, #24
 80061ba:	4908      	ldr	r1, [pc, #32]	; (80061dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80061bc:	40d9      	lsrs	r1, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	400b      	ands	r3, r1
 80061c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	0007ffff 	.word	0x0007ffff

080061e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 031f 	and.w	r3, r3, #31
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6093      	str	r3, [r2, #8]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800624c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006250:	d101      	bne.n	8006256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006278:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062a0:	d101      	bne.n	80062a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <LL_ADC_IsEnabled+0x18>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <LL_ADC_IsEnabled+0x1a>
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006312:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006316:	f043 0204 	orr.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d101      	bne.n	8006342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b08      	cmp	r3, #8
 8006362:	d101      	bne.n	8006368 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b089      	sub	sp, #36	; 0x24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e1af      	b.n	80066f2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fa ffa1 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff3f 	bl	800623c <LL_ADC_IsDeepPowerDownEnabled>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ff25 	bl	8006218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ff5a 	bl	800628c <LL_ADC_IsInternalRegulatorEnabled>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d115      	bne.n	800640a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ff3e 	bl	8006264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063e8:	4b9f      	ldr	r3, [pc, #636]	; (8006668 <HAL_ADC_Init+0x2f0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	4a9f      	ldr	r2, [pc, #636]	; (800666c <HAL_ADC_Init+0x2f4>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	099b      	lsrs	r3, r3, #6
 80063f6:	3301      	adds	r3, #1
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063fc:	e002      	b.n	8006404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3b01      	subs	r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f9      	bne.n	80063fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff ff3c 	bl	800628c <LL_ADC_IsInternalRegulatorEnabled>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10d      	bne.n	8006436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f043 0210 	orr.w	r2, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff75 	bl	800632a <LL_ADC_REG_IsConversionOngoing>
 8006440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 8148 	bne.w	80066e0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8144 	bne.w	80066e0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006460:	f043 0202 	orr.w	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff ff35 	bl	80062dc <LL_ADC_IsEnabled>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d141      	bne.n	80064fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006480:	d004      	beq.n	800648c <HAL_ADC_Init+0x114>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a7a      	ldr	r2, [pc, #488]	; (8006670 <HAL_ADC_Init+0x2f8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10f      	bne.n	80064ac <HAL_ADC_Init+0x134>
 800648c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006490:	f7ff ff24 	bl	80062dc <LL_ADC_IsEnabled>
 8006494:	4604      	mov	r4, r0
 8006496:	4876      	ldr	r0, [pc, #472]	; (8006670 <HAL_ADC_Init+0x2f8>)
 8006498:	f7ff ff20 	bl	80062dc <LL_ADC_IsEnabled>
 800649c:	4603      	mov	r3, r0
 800649e:	4323      	orrs	r3, r4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e012      	b.n	80064d2 <HAL_ADC_Init+0x15a>
 80064ac:	4871      	ldr	r0, [pc, #452]	; (8006674 <HAL_ADC_Init+0x2fc>)
 80064ae:	f7ff ff15 	bl	80062dc <LL_ADC_IsEnabled>
 80064b2:	4604      	mov	r4, r0
 80064b4:	4870      	ldr	r0, [pc, #448]	; (8006678 <HAL_ADC_Init+0x300>)
 80064b6:	f7ff ff11 	bl	80062dc <LL_ADC_IsEnabled>
 80064ba:	4603      	mov	r3, r0
 80064bc:	431c      	orrs	r4, r3
 80064be:	486f      	ldr	r0, [pc, #444]	; (800667c <HAL_ADC_Init+0x304>)
 80064c0:	f7ff ff0c 	bl	80062dc <LL_ADC_IsEnabled>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4323      	orrs	r3, r4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d012      	beq.n	80064fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064de:	d004      	beq.n	80064ea <HAL_ADC_Init+0x172>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a62      	ldr	r2, [pc, #392]	; (8006670 <HAL_ADC_Init+0x2f8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_ADC_Init+0x176>
 80064ea:	4a65      	ldr	r2, [pc, #404]	; (8006680 <HAL_ADC_Init+0x308>)
 80064ec:	e000      	b.n	80064f0 <HAL_ADC_Init+0x178>
 80064ee:	4a65      	ldr	r2, [pc, #404]	; (8006684 <HAL_ADC_Init+0x30c>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7ff fd12 	bl	8005f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7f5b      	ldrb	r3, [r3, #29]
 8006500:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006506:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800650c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006512:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800651a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800651c:	4313      	orrs	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006526:	2b01      	cmp	r3, #1
 8006528:	d106      	bne.n	8006538 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	045b      	lsls	r3, r3, #17
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <HAL_ADC_Init+0x310>)
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	69b9      	ldr	r1, [r7, #24]
 8006564:	430b      	orrs	r3, r1
 8006566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fed1 	bl	800632a <LL_ADC_REG_IsConversionOngoing>
 8006588:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fede 	bl	8006350 <LL_ADC_INJ_IsConversionOngoing>
 8006594:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d17f      	bne.n	800669c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d17c      	bne.n	800669c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065be:	f023 0302 	bic.w	r3, r3, #2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	69b9      	ldr	r1, [r7, #24]
 80065c8:	430b      	orrs	r3, r1
 80065ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d017      	beq.n	8006604 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80065f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6911      	ldr	r1, [r2, #16]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006602:	e013      	b.n	800662c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006632:	2b01      	cmp	r3, #1
 8006634:	d12a      	bne.n	800668c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800664c:	4311      	orrs	r1, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006652:	4311      	orrs	r1, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006658:	430a      	orrs	r2, r1
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	611a      	str	r2, [r3, #16]
 8006666:	e019      	b.n	800669c <HAL_ADC_Init+0x324>
 8006668:	20000004 	.word	0x20000004
 800666c:	053e2d63 	.word	0x053e2d63
 8006670:	50000100 	.word	0x50000100
 8006674:	50000400 	.word	0x50000400
 8006678:	50000500 	.word	0x50000500
 800667c:	50000600 	.word	0x50000600
 8006680:	50000300 	.word	0x50000300
 8006684:	50000700 	.word	0x50000700
 8006688:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10c      	bne.n	80066be <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	f023 010f 	bic.w	r1, r3, #15
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	1e5a      	subs	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
 80066bc:	e007      	b.n	80066ce <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 020f 	bic.w	r2, r2, #15
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	f043 0201 	orr.w	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80066de:	e007      	b.n	80066f0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e4:	f043 0210 	orr.w	r2, r3, #16
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3724      	adds	r7, #36	; 0x24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	bf00      	nop

080066fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800670c:	d004      	beq.n	8006718 <HAL_ADC_Start+0x1c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a67      	ldr	r2, [pc, #412]	; (80068b0 <HAL_ADC_Start+0x1b4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d101      	bne.n	800671c <HAL_ADC_Start+0x20>
 8006718:	4b66      	ldr	r3, [pc, #408]	; (80068b4 <HAL_ADC_Start+0x1b8>)
 800671a:	e000      	b.n	800671e <HAL_ADC_Start+0x22>
 800671c:	4b66      	ldr	r3, [pc, #408]	; (80068b8 <HAL_ADC_Start+0x1bc>)
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fd5e 	bl	80061e0 <LL_ADC_GetMultimode>
 8006724:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fdfd 	bl	800632a <LL_ADC_REG_IsConversionOngoing>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 80b4 	bne.w	80068a0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_ADC_Start+0x4a>
 8006742:	2302      	movs	r3, #2
 8006744:	e0af      	b.n	80068a6 <HAL_ADC_Start+0x1aa>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fe0c 	bl	800736c <ADC_Enable>
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 809b 	bne.w	8006896 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a4d      	ldr	r2, [pc, #308]	; (80068b0 <HAL_ADC_Start+0x1b4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_ADC_Start+0x96>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a4e      	ldr	r2, [pc, #312]	; (80068bc <HAL_ADC_Start+0x1c0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d002      	beq.n	800678e <HAL_ADC_Start+0x92>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	e003      	b.n	8006796 <HAL_ADC_Start+0x9a>
 800678e:	4b4c      	ldr	r3, [pc, #304]	; (80068c0 <HAL_ADC_Start+0x1c4>)
 8006790:	e001      	b.n	8006796 <HAL_ADC_Start+0x9a>
 8006792:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	4293      	cmp	r3, r2
 800679c:	d002      	beq.n	80067a4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067bc:	d106      	bne.n	80067cc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	f023 0206 	bic.w	r2, r3, #6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	661a      	str	r2, [r3, #96]	; 0x60
 80067ca:	e002      	b.n	80067d2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	221c      	movs	r2, #28
 80067d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <HAL_ADC_Start+0x1b4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <HAL_ADC_Start+0x104>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a32      	ldr	r2, [pc, #200]	; (80068bc <HAL_ADC_Start+0x1c0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d002      	beq.n	80067fc <HAL_ADC_Start+0x100>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	e003      	b.n	8006804 <HAL_ADC_Start+0x108>
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_ADC_Start+0x1c4>)
 80067fe:	e001      	b.n	8006804 <HAL_ADC_Start+0x108>
 8006800:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	4293      	cmp	r3, r2
 800680a:	d008      	beq.n	800681e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b05      	cmp	r3, #5
 8006816:	d002      	beq.n	800681e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b09      	cmp	r3, #9
 800681c:	d114      	bne.n	8006848 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006834:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fd5e 	bl	8006302 <LL_ADC_REG_StartConversion>
 8006846:	e02d      	b.n	80068a4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <HAL_ADC_Start+0x1b4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_ADC_Start+0x176>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <HAL_ADC_Start+0x1c0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d002      	beq.n	800686e <HAL_ADC_Start+0x172>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	e003      	b.n	8006876 <HAL_ADC_Start+0x17a>
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_ADC_Start+0x1c4>)
 8006870:	e001      	b.n	8006876 <HAL_ADC_Start+0x17a>
 8006872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006876:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00f      	beq.n	80068a4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800688c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
 8006894:	e006      	b.n	80068a4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800689e:	e001      	b.n	80068a4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
 80068a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	50000100 	.word	0x50000100
 80068b4:	50000300 	.word	0x50000300
 80068b8:	50000700 	.word	0x50000700
 80068bc:	50000500 	.word	0x50000500
 80068c0:	50000400 	.word	0x50000400

080068c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068d6:	d004      	beq.n	80068e2 <HAL_ADC_PollForConversion+0x1e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a77      	ldr	r2, [pc, #476]	; (8006abc <HAL_ADC_PollForConversion+0x1f8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <HAL_ADC_PollForConversion+0x22>
 80068e2:	4b77      	ldr	r3, [pc, #476]	; (8006ac0 <HAL_ADC_PollForConversion+0x1fc>)
 80068e4:	e000      	b.n	80068e8 <HAL_ADC_PollForConversion+0x24>
 80068e6:	4b77      	ldr	r3, [pc, #476]	; (8006ac4 <HAL_ADC_PollForConversion+0x200>)
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fc79 	bl	80061e0 <LL_ADC_GetMultimode>
 80068ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d102      	bne.n	80068fe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80068f8:	2308      	movs	r3, #8
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e037      	b.n	800696e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b05      	cmp	r3, #5
 8006908:	d002      	beq.n	8006910 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b09      	cmp	r3, #9
 800690e:	d111      	bne.n	8006934 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e0c1      	b.n	8006ab2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800692e:	2304      	movs	r3, #4
 8006930:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006932:	e01c      	b.n	800696e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800693c:	d004      	beq.n	8006948 <HAL_ADC_PollForConversion+0x84>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a5e      	ldr	r2, [pc, #376]	; (8006abc <HAL_ADC_PollForConversion+0x1f8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d101      	bne.n	800694c <HAL_ADC_PollForConversion+0x88>
 8006948:	4b5d      	ldr	r3, [pc, #372]	; (8006ac0 <HAL_ADC_PollForConversion+0x1fc>)
 800694a:	e000      	b.n	800694e <HAL_ADC_PollForConversion+0x8a>
 800694c:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <HAL_ADC_PollForConversion+0x200>)
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fc54 	bl	80061fc <LL_ADC_GetMultiDMATransfer>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e0a3      	b.n	8006ab2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800696a:	2304      	movs	r3, #4
 800696c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800696e:	f7ff faa9 	bl	8005ec4 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006974:	e021      	b.n	80069ba <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d01d      	beq.n	80069ba <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800697e:	f7ff faa1 	bl	8005ec4 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <HAL_ADC_PollForConversion+0xd0>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d112      	bne.n	80069ba <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e07b      	b.n	8006ab2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0d6      	beq.n	8006976 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff fb73 	bl	80060c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01c      	beq.n	8006a1e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7f5b      	ldrb	r3, [r3, #29]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d118      	bne.n	8006a1e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d111      	bne.n	8006a1e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	f043 0201 	orr.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a26      	ldr	r2, [pc, #152]	; (8006abc <HAL_ADC_PollForConversion+0x1f8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_ADC_PollForConversion+0x178>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <HAL_ADC_PollForConversion+0x204>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d002      	beq.n	8006a38 <HAL_ADC_PollForConversion+0x174>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	e003      	b.n	8006a40 <HAL_ADC_PollForConversion+0x17c>
 8006a38:	4b24      	ldr	r3, [pc, #144]	; (8006acc <HAL_ADC_PollForConversion+0x208>)
 8006a3a:	e001      	b.n	8006a40 <HAL_ADC_PollForConversion+0x17c>
 8006a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d008      	beq.n	8006a5a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b05      	cmp	r3, #5
 8006a52:	d002      	beq.n	8006a5a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d104      	bne.n	8006a64 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e014      	b.n	8006a8e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_ADC_PollForConversion+0x1f8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_ADC_PollForConversion+0x1be>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <HAL_ADC_PollForConversion+0x204>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d002      	beq.n	8006a7e <HAL_ADC_PollForConversion+0x1ba>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	e003      	b.n	8006a86 <HAL_ADC_PollForConversion+0x1c2>
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <HAL_ADC_PollForConversion+0x208>)
 8006a80:	e001      	b.n	8006a86 <HAL_ADC_PollForConversion+0x1c2>
 8006a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a86:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d104      	bne.n	8006a9e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e008      	b.n	8006ab0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	220c      	movs	r2, #12
 8006aae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	50000100 	.word	0x50000100
 8006ac0:	50000300 	.word	0x50000300
 8006ac4:	50000700 	.word	0x50000700
 8006ac8:	50000500 	.word	0x50000500
 8006acc:	50000400 	.word	0x50000400

08006ad0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b0b6      	sub	sp, #216	; 0xd8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d102      	bne.n	8006b10 <HAL_ADC_ConfigChannel+0x24>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	f000 bc13 	b.w	8007336 <HAL_ADC_ConfigChannel+0x84a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fc04 	bl	800632a <LL_ADC_REG_IsConversionOngoing>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 83f3 	bne.w	8007310 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7ff fad7 	bl	80060ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fbf2 	bl	800632a <LL_ADC_REG_IsConversionOngoing>
 8006b46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fbfe 	bl	8006350 <LL_ADC_INJ_IsConversionOngoing>
 8006b54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 81d9 	bne.w	8006f14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 81d4 	bne.w	8006f14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b74:	d10f      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7ff fade 	bl	8006142 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fa85 	bl	800609e <LL_ADC_SetSamplingTimeCommonConfig>
 8006b94:	e00e      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f7ff facd 	bl	8006142 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fa75 	bl	800609e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	08db      	lsrs	r3, r3, #3
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d022      	beq.n	8006c1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6919      	ldr	r1, [r3, #16]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006be6:	f7ff f9cf 	bl	8005f88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6919      	ldr	r1, [r3, #16]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f7ff fa1b 	bl	8006032 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6919      	ldr	r1, [r3, #16]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	7f1b      	ldrb	r3, [r3, #28]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d102      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x126>
 8006c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c10:	e000      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x128>
 8006c12:	2300      	movs	r3, #0
 8006c14:	461a      	mov	r2, r3
 8006c16:	f7ff fa27 	bl	8006068 <LL_ADC_SetOffsetSaturation>
 8006c1a:	e17b      	b.n	8006f14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff f9d4 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_ADC_ConfigChannel+0x15c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f9c9 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	0e9b      	lsrs	r3, r3, #26
 8006c42:	f003 021f 	and.w	r2, r3, #31
 8006c46:	e01e      	b.n	8006c86 <HAL_ADC_ConfigChannel+0x19a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff f9be 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c5e:	fa93 f3a3 	rbit	r3, r3
 8006c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006c76:	2320      	movs	r3, #32
 8006c78:	e004      	b.n	8006c84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c7e:	fab3 f383 	clz	r3, r3
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x1b2>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	0e9b      	lsrs	r3, r3, #26
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	e018      	b.n	8006cd0 <HAL_ADC_ConfigChannel+0x1e4>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006caa:	fa93 f3a3 	rbit	r3, r3
 8006cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006cc2:	2320      	movs	r3, #32
 8006cc4:	e004      	b.n	8006cd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cca:	fab3 f383 	clz	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d106      	bne.n	8006ce2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff f98d 	bl	8005ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f971 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x222>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff f966 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006d04:	4603      	mov	r3, r0
 8006d06:	0e9b      	lsrs	r3, r3, #26
 8006d08:	f003 021f 	and.w	r2, r3, #31
 8006d0c:	e01e      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x260>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff f95b 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d24:	fa93 f3a3 	rbit	r3, r3
 8006d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	e004      	b.n	8006d4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d44:	fab3 f383 	clz	r3, r3
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <HAL_ADC_ConfigChannel+0x278>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	0e9b      	lsrs	r3, r3, #26
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	e018      	b.n	8006d96 <HAL_ADC_ConfigChannel+0x2aa>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d70:	fa93 f3a3 	rbit	r3, r3
 8006d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	e004      	b.n	8006d96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d90:	fab3 f383 	clz	r3, r3
 8006d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d106      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2101      	movs	r1, #1
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff f92a 	bl	8005ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2102      	movs	r1, #2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff f90e 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x2e8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff f903 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	0e9b      	lsrs	r3, r3, #26
 8006dce:	f003 021f 	and.w	r2, r3, #31
 8006dd2:	e01e      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x326>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2102      	movs	r1, #2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff f8f8 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dea:	fa93 f3a3 	rbit	r3, r3
 8006dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006e02:	2320      	movs	r3, #32
 8006e04:	e004      	b.n	8006e10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0a:	fab3 f383 	clz	r3, r3
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x33e>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	0e9b      	lsrs	r3, r3, #26
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	e016      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x36c>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e36:	fa93 f3a3 	rbit	r3, r3
 8006e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006e4a:	2320      	movs	r3, #32
 8006e4c:	e004      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e52:	fab3 f383 	clz	r3, r3
 8006e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d106      	bne.n	8006e6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	2102      	movs	r1, #2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f8c9 	bl	8005ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2103      	movs	r1, #3
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f8ad 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <HAL_ADC_ConfigChannel+0x3aa>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2103      	movs	r1, #3
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f8a2 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	0e9b      	lsrs	r3, r3, #26
 8006e90:	f003 021f 	and.w	r2, r3, #31
 8006e94:	e017      	b.n	8006ec6 <HAL_ADC_ConfigChannel+0x3da>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2103      	movs	r1, #3
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff f897 	bl	8005fd0 <LL_ADC_GetOffsetChannel>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea8:	fa93 f3a3 	rbit	r3, r3
 8006eac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006eb8:	2320      	movs	r3, #32
 8006eba:	e003      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ebe:	fab3 f383 	clz	r3, r3
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <HAL_ADC_ConfigChannel+0x3f2>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	0e9b      	lsrs	r3, r3, #26
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	e011      	b.n	8006f02 <HAL_ADC_ConfigChannel+0x416>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ee6:	fa93 f3a3 	rbit	r3, r3
 8006eea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006ef6:	2320      	movs	r3, #32
 8006ef8:	e003      	b.n	8006f02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efc:	fab3 f383 	clz	r3, r3
 8006f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d106      	bne.n	8006f14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2103      	movs	r1, #3
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff f874 	bl	8005ffc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff f9df 	bl	80062dc <LL_ADC_IsEnabled>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f040 813d 	bne.w	80071a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7ff f930 	bl	8006198 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4aa2      	ldr	r2, [pc, #648]	; (80071c8 <HAL_ADC_ConfigChannel+0x6dc>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	f040 812e 	bne.w	80071a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x480>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	0e9b      	lsrs	r3, r3, #26
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	2b09      	cmp	r3, #9
 8006f62:	bf94      	ite	ls
 8006f64:	2301      	movls	r3, #1
 8006f66:	2300      	movhi	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e019      	b.n	8006fa0 <HAL_ADC_ConfigChannel+0x4b4>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f74:	fa93 f3a3 	rbit	r3, r3
 8006f78:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006f84:	2320      	movs	r3, #32
 8006f86:	e003      	b.n	8006f90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f8a:	fab3 f383 	clz	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	3301      	adds	r3, #1
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	2b09      	cmp	r3, #9
 8006f98:	bf94      	ite	ls
 8006f9a:	2301      	movls	r3, #1
 8006f9c:	2300      	movhi	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d079      	beq.n	8007098 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d107      	bne.n	8006fc0 <HAL_ADC_ConfigChannel+0x4d4>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	0e9b      	lsrs	r3, r3, #26
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	069b      	lsls	r3, r3, #26
 8006fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fbe:	e015      	b.n	8006fec <HAL_ADC_ConfigChannel+0x500>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc8:	fa93 f3a3 	rbit	r3, r3
 8006fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006fd8:	2320      	movs	r3, #32
 8006fda:	e003      	b.n	8006fe4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fde:	fab3 f383 	clz	r3, r3
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	069b      	lsls	r3, r3, #26
 8006fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <HAL_ADC_ConfigChannel+0x520>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	0e9b      	lsrs	r3, r3, #26
 8006ffe:	3301      	adds	r3, #1
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f303 	lsl.w	r3, r1, r3
 800700a:	e017      	b.n	800703c <HAL_ADC_ConfigChannel+0x550>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007014:	fa93 f3a3 	rbit	r3, r3
 8007018:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800701a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800701e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007024:	2320      	movs	r3, #32
 8007026:	e003      	b.n	8007030 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702a:	fab3 f383 	clz	r3, r3
 800702e:	b2db      	uxtb	r3, r3
 8007030:	3301      	adds	r3, #1
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	2101      	movs	r1, #1
 8007038:	fa01 f303 	lsl.w	r3, r1, r3
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <HAL_ADC_ConfigChannel+0x576>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	0e9b      	lsrs	r3, r3, #26
 8007052:	3301      	adds	r3, #1
 8007054:	f003 021f 	and.w	r2, r3, #31
 8007058:	4613      	mov	r3, r2
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	4413      	add	r3, r2
 800705e:	051b      	lsls	r3, r3, #20
 8007060:	e018      	b.n	8007094 <HAL_ADC_ConfigChannel+0x5a8>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	fa93 f3a3 	rbit	r3, r3
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800707a:	2320      	movs	r3, #32
 800707c:	e003      	b.n	8007086 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	fab3 f383 	clz	r3, r3
 8007084:	b2db      	uxtb	r3, r3
 8007086:	3301      	adds	r3, #1
 8007088:	f003 021f 	and.w	r2, r3, #31
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007094:	430b      	orrs	r3, r1
 8007096:	e07e      	b.n	8007196 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <HAL_ADC_ConfigChannel+0x5c8>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	0e9b      	lsrs	r3, r3, #26
 80070aa:	3301      	adds	r3, #1
 80070ac:	069b      	lsls	r3, r3, #26
 80070ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070b2:	e015      	b.n	80070e0 <HAL_ADC_ConfigChannel+0x5f4>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	fa93 f3a3 	rbit	r3, r3
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80070cc:	2320      	movs	r3, #32
 80070ce:	e003      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	fab3 f383 	clz	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	3301      	adds	r3, #1
 80070da:	069b      	lsls	r3, r3, #26
 80070dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <HAL_ADC_ConfigChannel+0x614>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0e9b      	lsrs	r3, r3, #26
 80070f2:	3301      	adds	r3, #1
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	2101      	movs	r1, #1
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	e017      	b.n	8007130 <HAL_ADC_ConfigChannel+0x644>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	fa93 f3a3 	rbit	r3, r3
 800710c:	61fb      	str	r3, [r7, #28]
  return result;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007118:	2320      	movs	r3, #32
 800711a:	e003      	b.n	8007124 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	fab3 f383 	clz	r3, r3
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3301      	adds	r3, #1
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	2101      	movs	r1, #1
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	ea42 0103 	orr.w	r1, r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10d      	bne.n	800715c <HAL_ADC_ConfigChannel+0x670>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0e9b      	lsrs	r3, r3, #26
 8007146:	3301      	adds	r3, #1
 8007148:	f003 021f 	and.w	r2, r3, #31
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	3b1e      	subs	r3, #30
 8007154:	051b      	lsls	r3, r3, #20
 8007156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800715a:	e01b      	b.n	8007194 <HAL_ADC_ConfigChannel+0x6a8>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	613b      	str	r3, [r7, #16]
  return result;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007174:	2320      	movs	r3, #32
 8007176:	e003      	b.n	8007180 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	fab3 f383 	clz	r3, r3
 800717e:	b2db      	uxtb	r3, r3
 8007180:	3301      	adds	r3, #1
 8007182:	f003 021f 	and.w	r2, r3, #31
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	3b1e      	subs	r3, #30
 800718e:	051b      	lsls	r3, r3, #20
 8007190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007194:	430b      	orrs	r3, r1
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	6892      	ldr	r2, [r2, #8]
 800719a:	4619      	mov	r1, r3
 800719c:	f7fe ffd1 	bl	8006142 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <HAL_ADC_ConfigChannel+0x6e0>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80be 	beq.w	800732a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071b6:	d004      	beq.n	80071c2 <HAL_ADC_ConfigChannel+0x6d6>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10a      	bne.n	80071d8 <HAL_ADC_ConfigChannel+0x6ec>
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80071c4:	e009      	b.n	80071da <HAL_ADC_ConfigChannel+0x6ee>
 80071c6:	bf00      	nop
 80071c8:	407f0000 	.word	0x407f0000
 80071cc:	80080000 	.word	0x80080000
 80071d0:	50000100 	.word	0x50000100
 80071d4:	50000300 	.word	0x50000300
 80071d8:	4b59      	ldr	r3, [pc, #356]	; (8007340 <HAL_ADC_ConfigChannel+0x854>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fec6 	bl	8005f6c <LL_ADC_GetCommonPathInternalCh>
 80071e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a56      	ldr	r2, [pc, #344]	; (8007344 <HAL_ADC_ConfigChannel+0x858>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_ADC_ConfigChannel+0x70c>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a55      	ldr	r2, [pc, #340]	; (8007348 <HAL_ADC_ConfigChannel+0x85c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d13a      	bne.n	800726e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80071f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d134      	bne.n	800726e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800720c:	d005      	beq.n	800721a <HAL_ADC_ConfigChannel+0x72e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4e      	ldr	r2, [pc, #312]	; (800734c <HAL_ADC_ConfigChannel+0x860>)
 8007214:	4293      	cmp	r3, r2
 8007216:	f040 8085 	bne.w	8007324 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007222:	d004      	beq.n	800722e <HAL_ADC_ConfigChannel+0x742>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a49      	ldr	r2, [pc, #292]	; (8007350 <HAL_ADC_ConfigChannel+0x864>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d101      	bne.n	8007232 <HAL_ADC_ConfigChannel+0x746>
 800722e:	4a49      	ldr	r2, [pc, #292]	; (8007354 <HAL_ADC_ConfigChannel+0x868>)
 8007230:	e000      	b.n	8007234 <HAL_ADC_ConfigChannel+0x748>
 8007232:	4a43      	ldr	r2, [pc, #268]	; (8007340 <HAL_ADC_ConfigChannel+0x854>)
 8007234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7fe fe81 	bl	8005f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007244:	4b44      	ldr	r3, [pc, #272]	; (8007358 <HAL_ADC_ConfigChannel+0x86c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	099b      	lsrs	r3, r3, #6
 800724a:	4a44      	ldr	r2, [pc, #272]	; (800735c <HAL_ADC_ConfigChannel+0x870>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800725e:	e002      	b.n	8007266 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3b01      	subs	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f9      	bne.n	8007260 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800726c:	e05a      	b.n	8007324 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a3b      	ldr	r2, [pc, #236]	; (8007360 <HAL_ADC_ConfigChannel+0x874>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d125      	bne.n	80072c4 <HAL_ADC_ConfigChannel+0x7d8>
 8007278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800727c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11f      	bne.n	80072c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a31      	ldr	r2, [pc, #196]	; (8007350 <HAL_ADC_ConfigChannel+0x864>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d104      	bne.n	8007298 <HAL_ADC_ConfigChannel+0x7ac>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a34      	ldr	r2, [pc, #208]	; (8007364 <HAL_ADC_ConfigChannel+0x878>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d047      	beq.n	8007328 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a0:	d004      	beq.n	80072ac <HAL_ADC_ConfigChannel+0x7c0>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <HAL_ADC_ConfigChannel+0x864>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d101      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x7c4>
 80072ac:	4a29      	ldr	r2, [pc, #164]	; (8007354 <HAL_ADC_ConfigChannel+0x868>)
 80072ae:	e000      	b.n	80072b2 <HAL_ADC_ConfigChannel+0x7c6>
 80072b0:	4a23      	ldr	r2, [pc, #140]	; (8007340 <HAL_ADC_ConfigChannel+0x854>)
 80072b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fe fe42 	bl	8005f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072c2:	e031      	b.n	8007328 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a27      	ldr	r2, [pc, #156]	; (8007368 <HAL_ADC_ConfigChannel+0x87c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d12d      	bne.n	800732a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d127      	bne.n	800732a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1c      	ldr	r2, [pc, #112]	; (8007350 <HAL_ADC_ConfigChannel+0x864>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ec:	d004      	beq.n	80072f8 <HAL_ADC_ConfigChannel+0x80c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a17      	ldr	r2, [pc, #92]	; (8007350 <HAL_ADC_ConfigChannel+0x864>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d101      	bne.n	80072fc <HAL_ADC_ConfigChannel+0x810>
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <HAL_ADC_ConfigChannel+0x868>)
 80072fa:	e000      	b.n	80072fe <HAL_ADC_ConfigChannel+0x812>
 80072fc:	4a10      	ldr	r2, [pc, #64]	; (8007340 <HAL_ADC_ConfigChannel+0x854>)
 80072fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe fe1c 	bl	8005f46 <LL_ADC_SetCommonPathInternalCh>
 800730e:	e00c      	b.n	800732a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007314:	f043 0220 	orr.w	r2, r3, #32
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007322:	e002      	b.n	800732a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007324:	bf00      	nop
 8007326:	e000      	b.n	800732a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007332:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007336:	4618      	mov	r0, r3
 8007338:	37d8      	adds	r7, #216	; 0xd8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	50000700 	.word	0x50000700
 8007344:	c3210000 	.word	0xc3210000
 8007348:	90c00010 	.word	0x90c00010
 800734c:	50000600 	.word	0x50000600
 8007350:	50000100 	.word	0x50000100
 8007354:	50000300 	.word	0x50000300
 8007358:	20000004 	.word	0x20000004
 800735c:	053e2d63 	.word	0x053e2d63
 8007360:	c7520000 	.word	0xc7520000
 8007364:	50000500 	.word	0x50000500
 8007368:	cb840000 	.word	0xcb840000

0800736c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe ffaf 	bl	80062dc <LL_ADC_IsEnabled>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d14d      	bne.n	8007420 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	4b28      	ldr	r3, [pc, #160]	; (800742c <ADC_Enable+0xc0>)
 800738c:	4013      	ands	r3, r2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	f043 0210 	orr.w	r2, r3, #16
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e039      	b.n	8007422 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe ff7e 	bl	80062b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80073b8:	f7fe fd84 	bl	8005ec4 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073be:	e028      	b.n	8007412 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe ff89 	bl	80062dc <LL_ADC_IsEnabled>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe ff6d 	bl	80062b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073da:	f7fe fd73 	bl	8005ec4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d914      	bls.n	8007412 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d00d      	beq.n	8007412 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	f043 0210 	orr.w	r2, r3, #16
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e007      	b.n	8007422 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b01      	cmp	r3, #1
 800741e:	d1cf      	bne.n	80073c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	8000003f 	.word	0x8000003f

08007430 <LL_ADC_IsEnabled>:
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <LL_ADC_IsEnabled+0x18>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <LL_ADC_IsEnabled+0x1a>
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <LL_ADC_REG_IsConversionOngoing>:
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d101      	bne.n	800746e <LL_ADC_REG_IsConversionOngoing+0x18>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b0a1      	sub	sp, #132	; 0x84
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007496:	2302      	movs	r3, #2
 8007498:	e0e7      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80074a2:	2300      	movs	r3, #0
 80074a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80074a6:	2300      	movs	r3, #0
 80074a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b2:	d102      	bne.n	80074ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80074b6:	60bb      	str	r3, [r7, #8]
 80074b8:	e009      	b.n	80074ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a6e      	ldr	r2, [pc, #440]	; (8007678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d102      	bne.n	80074ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80074c4:	4b6d      	ldr	r3, [pc, #436]	; (800767c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	e001      	b.n	80074ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074ca:	2300      	movs	r3, #0
 80074cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10b      	bne.n	80074ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d8:	f043 0220 	orr.w	r2, r3, #32
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0be      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff ffb1 	bl	8007456 <LL_ADC_REG_IsConversionOngoing>
 80074f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff ffab 	bl	8007456 <LL_ADC_REG_IsConversionOngoing>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 80a0 	bne.w	8007648 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 809c 	bne.w	8007648 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007518:	d004      	beq.n	8007524 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a55      	ldr	r2, [pc, #340]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d101      	bne.n	8007528 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007524:	4b56      	ldr	r3, [pc, #344]	; (8007680 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007526:	e000      	b.n	800752a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007528:	4b56      	ldr	r3, [pc, #344]	; (8007684 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800752a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d04b      	beq.n	80075cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007546:	035b      	lsls	r3, r3, #13
 8007548:	430b      	orrs	r3, r1
 800754a:	431a      	orrs	r2, r3
 800754c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007558:	d004      	beq.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a45      	ldr	r2, [pc, #276]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d10f      	bne.n	8007584 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007564:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007568:	f7ff ff62 	bl	8007430 <LL_ADC_IsEnabled>
 800756c:	4604      	mov	r4, r0
 800756e:	4841      	ldr	r0, [pc, #260]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007570:	f7ff ff5e 	bl	8007430 <LL_ADC_IsEnabled>
 8007574:	4603      	mov	r3, r0
 8007576:	4323      	orrs	r3, r4
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf0c      	ite	eq
 800757c:	2301      	moveq	r3, #1
 800757e:	2300      	movne	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e012      	b.n	80075aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007584:	483c      	ldr	r0, [pc, #240]	; (8007678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007586:	f7ff ff53 	bl	8007430 <LL_ADC_IsEnabled>
 800758a:	4604      	mov	r4, r0
 800758c:	483b      	ldr	r0, [pc, #236]	; (800767c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800758e:	f7ff ff4f 	bl	8007430 <LL_ADC_IsEnabled>
 8007592:	4603      	mov	r3, r0
 8007594:	431c      	orrs	r4, r3
 8007596:	483c      	ldr	r0, [pc, #240]	; (8007688 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007598:	f7ff ff4a 	bl	8007430 <LL_ADC_IsEnabled>
 800759c:	4603      	mov	r3, r0
 800759e:	4323      	orrs	r3, r4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	bf0c      	ite	eq
 80075a4:	2301      	moveq	r3, #1
 80075a6:	2300      	movne	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d056      	beq.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80075ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80075b6:	f023 030f 	bic.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	6811      	ldr	r1, [r2, #0]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	6892      	ldr	r2, [r2, #8]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	431a      	orrs	r2, r3
 80075c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075ca:	e047      	b.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80075cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075e0:	d004      	beq.n	80075ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a23      	ldr	r2, [pc, #140]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d10f      	bne.n	800760c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80075ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80075f0:	f7ff ff1e 	bl	8007430 <LL_ADC_IsEnabled>
 80075f4:	4604      	mov	r4, r0
 80075f6:	481f      	ldr	r0, [pc, #124]	; (8007674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075f8:	f7ff ff1a 	bl	8007430 <LL_ADC_IsEnabled>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4323      	orrs	r3, r4
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf0c      	ite	eq
 8007604:	2301      	moveq	r3, #1
 8007606:	2300      	movne	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	e012      	b.n	8007632 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800760c:	481a      	ldr	r0, [pc, #104]	; (8007678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800760e:	f7ff ff0f 	bl	8007430 <LL_ADC_IsEnabled>
 8007612:	4604      	mov	r4, r0
 8007614:	4819      	ldr	r0, [pc, #100]	; (800767c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007616:	f7ff ff0b 	bl	8007430 <LL_ADC_IsEnabled>
 800761a:	4603      	mov	r3, r0
 800761c:	431c      	orrs	r4, r3
 800761e:	481a      	ldr	r0, [pc, #104]	; (8007688 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007620:	f7ff ff06 	bl	8007430 <LL_ADC_IsEnabled>
 8007624:	4603      	mov	r3, r0
 8007626:	4323      	orrs	r3, r4
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d012      	beq.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800763e:	f023 030f 	bic.w	r3, r3, #15
 8007642:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007644:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007646:	e009      	b.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800765a:	e000      	b.n	800765e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800765c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007666:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800766a:	4618      	mov	r0, r3
 800766c:	3784      	adds	r7, #132	; 0x84
 800766e:	46bd      	mov	sp, r7
 8007670:	bd90      	pop	{r4, r7, pc}
 8007672:	bf00      	nop
 8007674:	50000100 	.word	0x50000100
 8007678:	50000400 	.word	0x50000400
 800767c:	50000500 	.word	0x50000500
 8007680:	50000300 	.word	0x50000300
 8007684:	50000700 	.word	0x50000700
 8007688:	50000600 	.word	0x50000600

0800768c <__NVIC_SetPriorityGrouping>:
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <__NVIC_SetPriorityGrouping+0x44>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076a8:	4013      	ands	r3, r2
 80076aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076be:	4a04      	ldr	r2, [pc, #16]	; (80076d0 <__NVIC_SetPriorityGrouping+0x44>)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	60d3      	str	r3, [r2, #12]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	e000ed00 	.word	0xe000ed00

080076d4 <__NVIC_GetPriorityGrouping>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <__NVIC_GetPriorityGrouping+0x18>)
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	0a1b      	lsrs	r3, r3, #8
 80076de:	f003 0307 	and.w	r3, r3, #7
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	e000ed00 	.word	0xe000ed00

080076f0 <__NVIC_EnableIRQ>:
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	db0b      	blt.n	800771a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	f003 021f 	and.w	r2, r3, #31
 8007708:	4907      	ldr	r1, [pc, #28]	; (8007728 <__NVIC_EnableIRQ+0x38>)
 800770a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	2001      	movs	r0, #1
 8007712:	fa00 f202 	lsl.w	r2, r0, r2
 8007716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	e000e100 	.word	0xe000e100

0800772c <__NVIC_SetPriority>:
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773c:	2b00      	cmp	r3, #0
 800773e:	db0a      	blt.n	8007756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	490c      	ldr	r1, [pc, #48]	; (8007778 <__NVIC_SetPriority+0x4c>)
 8007746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774a:	0112      	lsls	r2, r2, #4
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	440b      	add	r3, r1
 8007750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007754:	e00a      	b.n	800776c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	4908      	ldr	r1, [pc, #32]	; (800777c <__NVIC_SetPriority+0x50>)
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	3b04      	subs	r3, #4
 8007764:	0112      	lsls	r2, r2, #4
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	440b      	add	r3, r1
 800776a:	761a      	strb	r2, [r3, #24]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	e000e100 	.word	0xe000e100
 800777c:	e000ed00 	.word	0xe000ed00

08007780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007780:	b480      	push	{r7}
 8007782:	b089      	sub	sp, #36	; 0x24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f1c3 0307 	rsb	r3, r3, #7
 800779a:	2b04      	cmp	r3, #4
 800779c:	bf28      	it	cs
 800779e:	2304      	movcs	r3, #4
 80077a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3304      	adds	r3, #4
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d902      	bls.n	80077b0 <NVIC_EncodePriority+0x30>
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	3b03      	subs	r3, #3
 80077ae:	e000      	b.n	80077b2 <NVIC_EncodePriority+0x32>
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43da      	mvns	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	401a      	ands	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077c8:	f04f 31ff 	mov.w	r1, #4294967295
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	43d9      	mvns	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077d8:	4313      	orrs	r3, r2
         );
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3724      	adds	r7, #36	; 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
	...

080077e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077f8:	d301      	bcc.n	80077fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077fa:	2301      	movs	r3, #1
 80077fc:	e00f      	b.n	800781e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077fe:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <SysTick_Config+0x40>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3b01      	subs	r3, #1
 8007804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007806:	210f      	movs	r1, #15
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	f7ff ff8e 	bl	800772c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <SysTick_Config+0x40>)
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <SysTick_Config+0x40>)
 8007818:	2207      	movs	r2, #7
 800781a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	e000e010 	.word	0xe000e010

0800782c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff ff29 	bl	800768c <__NVIC_SetPriorityGrouping>
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b086      	sub	sp, #24
 8007846:	af00      	add	r7, sp, #0
 8007848:	4603      	mov	r3, r0
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
 800784e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007850:	f7ff ff40 	bl	80076d4 <__NVIC_GetPriorityGrouping>
 8007854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	6978      	ldr	r0, [r7, #20]
 800785c:	f7ff ff90 	bl	8007780 <NVIC_EncodePriority>
 8007860:	4602      	mov	r2, r0
 8007862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff5f 	bl	800772c <__NVIC_SetPriority>
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	4603      	mov	r3, r0
 800787e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ff33 	bl	80076f0 <__NVIC_EnableIRQ>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ffa4 	bl	80077e8 <SysTick_Config>
 80078a0:	4603      	mov	r3, r0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d005      	beq.n	80078ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2204      	movs	r2, #4
 80078c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e037      	b.n	800793e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 020e 	bic.w	r2, r2, #14
 80078dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	f003 021f 	and.w	r2, r3, #31
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	2101      	movs	r1, #1
 800790c:	fa01 f202 	lsl.w	r2, r1, r2
 8007910:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800791a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00c      	beq.n	800793e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007932:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800793c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d00d      	beq.n	8007990 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2204      	movs	r2, #4
 8007978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
 800798e:	e047      	b.n	8007a20 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 020e 	bic.w	r2, r2, #14
 800799e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0201 	bic.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	f003 021f 	and.w	r2, r3, #31
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	2101      	movs	r1, #1
 80079ce:	fa01 f202 	lsl.w	r2, r1, r2
 80079d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00c      	beq.n	8007a00 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
    }
  }
  return status;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e147      	b.n	8007cce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fa fc54 	bl	8002300 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0210 	bic.w	r2, r2, #16
 8007a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a68:	f7fe fa2c 	bl	8005ec4 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a6e:	e012      	b.n	8007a96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a70:	f7fe fa28 	bl	8005ec4 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b0a      	cmp	r3, #10
 8007a7c:	d90b      	bls.n	8007a96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e11b      	b.n	8007cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d0e5      	beq.n	8007a70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ab4:	f7fe fa06 	bl	8005ec4 <HAL_GetTick>
 8007ab8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aba:	e012      	b.n	8007ae2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007abc:	f7fe fa02 	bl	8005ec4 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b0a      	cmp	r3, #10
 8007ac8:	d90b      	bls.n	8007ae2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ace:	f043 0201 	orr.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0f5      	b.n	8007cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0e5      	beq.n	8007abc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0202 	orr.w	r2, r2, #2
 8007afe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a74      	ldr	r2, [pc, #464]	; (8007cd8 <HAL_FDCAN_Init+0x2ac>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d103      	bne.n	8007b12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007b0a:	4a74      	ldr	r2, [pc, #464]	; (8007cdc <HAL_FDCAN_Init+0x2b0>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7c1b      	ldrb	r3, [r3, #16]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d108      	bne.n	8007b2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b28:	619a      	str	r2, [r3, #24]
 8007b2a:	e007      	b.n	8007b3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7c5b      	ldrb	r3, [r3, #17]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d108      	bne.n	8007b56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b52:	619a      	str	r2, [r3, #24]
 8007b54:	e007      	b.n	8007b66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7c9b      	ldrb	r3, [r3, #18]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d108      	bne.n	8007b80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b7c:	619a      	str	r2, [r3, #24]
 8007b7e:	e007      	b.n	8007b90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007bb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0210 	bic.w	r2, r2, #16
 8007bc4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d108      	bne.n	8007be0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0204 	orr.w	r2, r2, #4
 8007bdc:	619a      	str	r2, [r3, #24]
 8007bde:	e02c      	b.n	8007c3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d028      	beq.n	8007c3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d01c      	beq.n	8007c2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bfe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0210 	orr.w	r2, r2, #16
 8007c0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d110      	bne.n	8007c3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0220 	orr.w	r2, r2, #32
 8007c26:	619a      	str	r2, [r3, #24]
 8007c28:	e007      	b.n	8007c3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0220 	orr.w	r2, r2, #32
 8007c38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6e:	d115      	bne.n	8007c9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	3b01      	subs	r3, #1
 8007c86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	3b01      	subs	r3, #1
 8007c92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fc36 	bl	8008524 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40006400 	.word	0x40006400
 8007cdc:	40006500 	.word	0x40006500

08007ce0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cf0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <HAL_FDCAN_ConfigFilter+0x1e>
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d13d      	bne.n	8007d7a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d119      	bne.n	8007d3a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d12:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007d1a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	e01d      	b.n	8007d76 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	075a      	lsls	r2, r3, #29
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	079a      	lsls	r2, r3, #30
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4413      	add	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e006      	b.n	8007d88 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	f043 0202 	orr.w	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
  }
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d116      	bne.n	8007ddc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	011a      	lsls	r2, r3, #4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e006      	b.n	8007dea <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de0:	f043 0204 	orr.w	r2, r3, #4
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d110      	bne.n	8007e2c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e006      	b.n	8007e3a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e30:	f043 0204 	orr.w	r2, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b08b      	sub	sp, #44	; 0x2c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e5c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e5e:	7efb      	ldrb	r3, [r7, #27]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	f040 80bc 	bne.w	8007fde <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b40      	cmp	r3, #64	; 0x40
 8007e6a:	d121      	bne.n	8007eb0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d107      	bne.n	8007e8c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0af      	b.n	8007fec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	4413      	add	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	440b      	add	r3, r1
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
 8007eae:	e020      	b.n	8007ef2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d107      	bne.n	8007ed0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e08d      	b.n	8007fec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ed8:	0a1b      	lsrs	r3, r3, #8
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	440b      	add	r3, r1
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d107      	bne.n	8007f16 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	0c9b      	lsrs	r3, r3, #18
 8007f0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e005      	b.n	8007f22 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	0e1b      	lsrs	r3, r3, #24
 8007f74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	0fda      	lsrs	r2, r3, #31
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	3304      	adds	r3, #4
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f90:	2300      	movs	r3, #0
 8007f92:	623b      	str	r3, [r7, #32]
 8007f94:	e00a      	b.n	8007fac <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	441a      	add	r2, r3
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	440b      	add	r3, r1
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	623b      	str	r3, [r7, #32]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	4a11      	ldr	r2, [pc, #68]	; (8007ff8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007fb4:	5cd3      	ldrb	r3, [r2, r3]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d3eb      	bcc.n	8007f96 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d105      	bne.n	8007fd0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007fce:	e004      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e006      	b.n	8007fec <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe2:	f043 0208 	orr.w	r2, r3, #8
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	372c      	adds	r7, #44	; 0x2c
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	080133ac 	.word	0x080133ac

08007ffc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800800e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008010:	7dfb      	ldrb	r3, [r7, #23]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d003      	beq.n	800801e <HAL_FDCAN_ActivateNotification+0x22>
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b02      	cmp	r3, #2
 800801a:	f040 80c8 	bne.w	80081ae <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008024:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d03b      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d031      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d027      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01d      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0201 	orr.w	r2, r2, #1
 80080c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d13b      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d131      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d127      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d11d      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b00      	cmp	r3, #0
 8008124:	d113      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0202 	orr.w	r2, r2, #2
 800815c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	430a      	orrs	r2, r1
 8008178:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	430a      	orrs	r2, r1
 8008196:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e006      	b.n	80081bc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b2:	f043 0202 	orr.w	r2, r3, #2
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
  }
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e4:	4013      	ands	r3, r2
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	6a3a      	ldr	r2, [r7, #32]
 80081fc:	4013      	ands	r3, r2
 80081fe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800820a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	4013      	ands	r3, r2
 8008216:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8008222:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4013      	ands	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008236:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800823a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4013      	ands	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d006      	beq.n	8008272 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2240      	movs	r2, #64	; 0x40
 800826a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f939 	bl	80084e4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01b      	beq.n	80082b8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008296:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4013      	ands	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80082b0:	6939      	ldr	r1, [r7, #16]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f8f7 	bl	80084a6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80082c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f8b6 	bl	800843a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80082dc:	6a39      	ldr	r1, [r7, #32]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f8b6 	bl	8008450 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80082f2:	69f9      	ldr	r1, [r7, #28]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8b6 	bl	8008466 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800831e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8ab 	bl	800847c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01a      	beq.n	800836a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800834a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4013      	ands	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f893 	bl	8008490 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800838e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f893 	bl	80084bc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80083ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f887 	bl	80084d0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d011      	beq.n	80083f4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008402:	6979      	ldr	r1, [r7, #20]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f881 	bl	800850c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f863 	bl	80084f8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008432:	bf00      	nop
 8008434:	3728      	adds	r7, #40	; 0x28
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800852c:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800852e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d103      	bne.n	8008542 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008540:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d103      	bne.n	8008554 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008552:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008562:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	041a      	lsls	r2, r3, #16
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008588:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	061a      	lsls	r2, r3, #24
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e005      	b.n	80085d6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3304      	adds	r3, #4
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3f3      	bcc.n	80085ca <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	4000a400 	.word	0x4000a400
 80085f4:	40006800 	.word	0x40006800
 80085f8:	40006c00 	.word	0x40006c00

080085fc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800860e:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <HAL_FLASH_Program+0xa4>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_FLASH_Program+0x1e>
 8008616:	2302      	movs	r3, #2
 8008618:	e03e      	b.n	8008698 <HAL_FLASH_Program+0x9c>
 800861a:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_FLASH_Program+0xa4>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008624:	f000 f8be 	bl	80087a4 <FLASH_WaitForLastOperation>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d12e      	bne.n	8008690 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008632:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <HAL_FLASH_Program+0xa4>)
 8008634:	2200      	movs	r2, #0
 8008636:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d107      	bne.n	800864e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800863e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008642:	68b8      	ldr	r0, [r7, #8]
 8008644:	f000 f902 	bl	800884c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008648:	2301      	movs	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	e010      	b.n	8008670 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d002      	beq.n	800865a <HAL_FLASH_Program+0x5e>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d10a      	bne.n	8008670 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	4619      	mov	r1, r3
 800865e:	68b8      	ldr	r0, [r7, #8]
 8008660:	f000 f91a 	bl	8008898 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d102      	bne.n	8008670 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800866a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800866e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008674:	f000 f896 	bl	80087a4 <FLASH_WaitForLastOperation>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d006      	beq.n	8008690 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008682:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <HAL_FLASH_Program+0xa8>)
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	43db      	mvns	r3, r3
 800868a:	4906      	ldr	r1, [pc, #24]	; (80086a4 <HAL_FLASH_Program+0xa8>)
 800868c:	4013      	ands	r3, r2
 800868e:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <HAL_FLASH_Program+0xa4>)
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000010 	.word	0x20000010
 80086a4:	40022000 	.word	0x40022000

080086a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <HAL_FLASH_Unlock+0x38>)
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	da0b      	bge.n	80086d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <HAL_FLASH_Unlock+0x38>)
 80086bc:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <HAL_FLASH_Unlock+0x3c>)
 80086be:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <HAL_FLASH_Unlock+0x38>)
 80086c2:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <HAL_FLASH_Unlock+0x40>)
 80086c4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <HAL_FLASH_Unlock+0x38>)
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da01      	bge.n	80086d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80086d2:	79fb      	ldrb	r3, [r7, #7]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40022000 	.word	0x40022000
 80086e4:	45670123 	.word	0x45670123
 80086e8:	cdef89ab 	.word	0xcdef89ab

080086ec <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <HAL_FLASH_Lock+0x30>)
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	4a08      	ldr	r2, [pc, #32]	; (800871c <HAL_FLASH_Lock+0x30>)
 80086fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008700:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <HAL_FLASH_Lock+0x30>)
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	da01      	bge.n	800870e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800870e:	79fb      	ldrb	r3, [r7, #7]
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	40022000 	.word	0x40022000

08008720 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <HAL_FLASH_OB_Unlock+0x40>)
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00d      	beq.n	8008752 <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <HAL_FLASH_OB_Unlock+0x40>)
 8008738:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <HAL_FLASH_OB_Unlock+0x44>)
 800873a:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <HAL_FLASH_OB_Unlock+0x40>)
 800873e:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <HAL_FLASH_OB_Unlock+0x48>)
 8008740:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008742:	4b07      	ldr	r3, [pc, #28]	; (8008760 <HAL_FLASH_OB_Unlock+0x40>)
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008752:	79fb      	ldrb	r3, [r7, #7]
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	40022000 	.word	0x40022000
 8008764:	08192a3b 	.word	0x08192a3b
 8008768:	4c5d6e7f 	.word	0x4c5d6e7f

0800876c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <HAL_FLASH_OB_Lock+0x34>)
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4a09      	ldr	r2, [pc, #36]	; (80087a0 <HAL_FLASH_OB_Lock+0x34>)
 800877c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008780:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <HAL_FLASH_OB_Lock+0x34>)
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008792:	79fb      	ldrb	r3, [r7, #7]
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40022000 	.word	0x40022000

080087a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80087ac:	f7fd fb8a 	bl	8005ec4 <HAL_GetTick>
 80087b0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80087b2:	e009      	b.n	80087c8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80087b4:	f7fd fb86 	bl	8005ec4 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d201      	bcs.n	80087c8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e038      	b.n	800883a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80087c8:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d4:	d0ee      	beq.n	80087b4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80087d6:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80087de:	4013      	ands	r3, r2
 80087e0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01e      	beq.n	8008826 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80087e8:	4b17      	ldr	r3, [pc, #92]	; (8008848 <FLASH_WaitForLastOperation+0xa4>)
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <FLASH_WaitForLastOperation+0xa4>)
 80087f2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <FLASH_WaitForLastOperation+0x6a>
 80087fe:	4b11      	ldr	r3, [pc, #68]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008808:	490e      	ldr	r1, [pc, #56]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 800880a:	4313      	orrs	r3, r2
 800880c:	618b      	str	r3, [r1, #24]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <FLASH_WaitForLastOperation+0x7e>
 8008818:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008820:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e009      	b.n	800883a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008826:	4b07      	ldr	r3, [pc, #28]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b01      	cmp	r3, #1
 8008830:	d102      	bne.n	8008838 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <FLASH_WaitForLastOperation+0xa0>)
 8008834:	2201      	movs	r2, #1
 8008836:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40022000 	.word	0x40022000
 8008848:	20000010 	.word	0x20000010

0800884c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <FLASH_Program_DoubleWord+0x48>)
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	4a0d      	ldr	r2, [pc, #52]	; (8008894 <FLASH_Program_DoubleWord+0x48>)
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800886a:	f3bf 8f6f 	isb	sy
}
 800886e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	000a      	movs	r2, r1
 800887e:	2300      	movs	r3, #0
 8008880:	68f9      	ldr	r1, [r7, #12]
 8008882:	3104      	adds	r1, #4
 8008884:	4613      	mov	r3, r2
 8008886:	600b      	str	r3, [r1, #0]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40022000 	.word	0x40022000

08008898 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8008898:	b480      	push	{r7}
 800889a:	b089      	sub	sp, #36	; 0x24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80088ae:	4b14      	ldr	r3, [pc, #80]	; (8008900 <FLASH_Program_Fast+0x68>)
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	4a13      	ldr	r2, [pc, #76]	; (8008900 <FLASH_Program_Fast+0x68>)
 80088b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ba:	f3ef 8310 	mrs	r3, PRIMASK
 80088be:	60fb      	str	r3, [r7, #12]
  return(result);
 80088c0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80088c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80088c4:	b672      	cpsid	i
}
 80088c6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	3304      	adds	r3, #4
 80088d4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	3304      	adds	r3, #4
 80088da:	617b      	str	r3, [r7, #20]
    row_index--;
 80088dc:	7ffb      	ldrb	r3, [r7, #31]
 80088de:	3b01      	subs	r3, #1
 80088e0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80088e2:	7ffb      	ldrb	r3, [r7, #31]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1ef      	bne.n	80088c8 <FLASH_Program_Fast+0x30>
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f383 8810 	msr	PRIMASK, r3
}
 80088f2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80088f4:	bf00      	nop
 80088f6:	3724      	adds	r7, #36	; 0x24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40022000 	.word	0x40022000

08008904 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800890e:	4b4c      	ldr	r3, [pc, #304]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_FLASHEx_Erase+0x16>
 8008916:	2302      	movs	r3, #2
 8008918:	e08d      	b.n	8008a36 <HAL_FLASHEx_Erase+0x132>
 800891a:	4b49      	ldr	r3, [pc, #292]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 800891c:	2201      	movs	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008924:	f7ff ff3e 	bl	80087a4 <FLASH_WaitForLastOperation>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d17d      	bne.n	8008a2e <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008932:	4b43      	ldr	r3, [pc, #268]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 8008934:	2200      	movs	r2, #0
 8008936:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008940:	2b00      	cmp	r3, #0
 8008942:	d019      	beq.n	8008978 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008944:	4b3f      	ldr	r3, [pc, #252]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a3e      	ldr	r2, [pc, #248]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 800894a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800894e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008950:	4b3c      	ldr	r3, [pc, #240]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 8008962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008966:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008968:	4b35      	ldr	r3, [pc, #212]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 800896a:	2203      	movs	r2, #3
 800896c:	771a      	strb	r2, [r3, #28]
 800896e:	e016      	b.n	800899e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008970:	4b33      	ldr	r3, [pc, #204]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 8008972:	2201      	movs	r2, #1
 8008974:	771a      	strb	r2, [r3, #28]
 8008976:	e012      	b.n	800899e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008978:	4b32      	ldr	r3, [pc, #200]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008980:	2b00      	cmp	r3, #0
 8008982:	d009      	beq.n	8008998 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008984:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a2e      	ldr	r2, [pc, #184]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 800898a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800898e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 8008992:	2202      	movs	r2, #2
 8008994:	771a      	strb	r2, [r3, #28]
 8008996:	e002      	b.n	800899e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008998:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 800899a:	2200      	movs	r2, #0
 800899c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d113      	bne.n	80089ce <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f84c 	bl	8008a48 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089b4:	f7ff fef6 	bl	80087a4 <FLASH_WaitForLastOperation>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80089bc:	4b21      	ldr	r3, [pc, #132]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	4a20      	ldr	r2, [pc, #128]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 80089c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089c6:	f023 0304 	bic.w	r3, r3, #4
 80089ca:	6153      	str	r3, [r2, #20]
 80089cc:	e02d      	b.n	8008a2a <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	60bb      	str	r3, [r7, #8]
 80089dc:	e01d      	b.n	8008a1a <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	4619      	mov	r1, r3
 80089e4:	68b8      	ldr	r0, [r7, #8]
 80089e6:	f000 f867 	bl	8008ab8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089ee:	f7ff fed9 	bl	80087a4 <FLASH_WaitForLastOperation>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80089f6:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4a12      	ldr	r2, [pc, #72]	; (8008a44 <HAL_FLASHEx_Erase+0x140>)
 80089fc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8008a00:	f023 0302 	bic.w	r3, r3, #2
 8008a04:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	601a      	str	r2, [r3, #0]
          break;
 8008a12:	e00a      	b.n	8008a2a <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d3d9      	bcc.n	80089de <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008a2a:	f000 f889 	bl	8008b40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <HAL_FLASHEx_Erase+0x13c>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	701a      	strb	r2, [r3, #0]

  return status;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000010 	.word	0x20000010
 8008a44:	40022000 	.word	0x40022000

08008a48 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8008a50:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d016      	beq.n	8008a8a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008a66:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a6c:	f043 0304 	orr.w	r3, r3, #4
 8008a70:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00e      	beq.n	8008a9a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	4a0c      	ldr	r2, [pc, #48]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a86:	6153      	str	r3, [r2, #20]
 8008a88:	e007      	b.n	8008a9a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	4a09      	ldr	r2, [pc, #36]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a94:	f043 0304 	orr.w	r3, r3, #4
 8008a98:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <FLASH_MassErase+0x6c>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa4:	6153      	str	r3, [r2, #20]
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	40022000 	.word	0x40022000

08008ab8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <FLASH_PageErase+0x84>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008ace:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <FLASH_PageErase+0x84>)
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <FLASH_PageErase+0x84>)
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad8:	6153      	str	r3, [r2, #20]
 8008ada:	e011      	b.n	8008b00 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d006      	beq.n	8008af4 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <FLASH_PageErase+0x84>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	4a14      	ldr	r2, [pc, #80]	; (8008b3c <FLASH_PageErase+0x84>)
 8008aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af0:	6153      	str	r3, [r2, #20]
 8008af2:	e005      	b.n	8008b00 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008af4:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <FLASH_PageErase+0x84>)
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	4a10      	ldr	r2, [pc, #64]	; (8008b3c <FLASH_PageErase+0x84>)
 8008afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008afe:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008b00:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008b10:	490a      	ldr	r1, [pc, #40]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b1c:	f043 0302 	orr.w	r3, r3, #2
 8008b20:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008b22:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <FLASH_PageErase+0x84>)
 8008b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2c:	6153      	str	r3, [r2, #20]
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	40022000 	.word	0x40022000

08008b40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008b46:	4b1e      	ldr	r3, [pc, #120]	; (8008bc0 <FLASH_FlushCaches+0x80>)
 8008b48:	7f1b      	ldrb	r3, [r3, #28]
 8008b4a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d002      	beq.n	8008b58 <FLASH_FlushCaches+0x18>
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d111      	bne.n	8008b7c <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008b58:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	4b17      	ldr	r3, [pc, #92]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a16      	ldr	r2, [pc, #88]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b70:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a13      	ldr	r2, [pc, #76]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d002      	beq.n	8008b88 <FLASH_FlushCaches+0x48>
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d111      	bne.n	8008bac <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a0d      	ldr	r2, [pc, #52]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a0a      	ldr	r2, [pc, #40]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ba0:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a07      	ldr	r2, [pc, #28]	; (8008bc4 <FLASH_FlushCaches+0x84>)
 8008ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008baa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <FLASH_FlushCaches+0x80>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	771a      	strb	r2, [r3, #28]
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000010 	.word	0x20000010
 8008bc4:	40022000 	.word	0x40022000

08008bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008bd6:	e15a      	b.n	8008e8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	2101      	movs	r1, #1
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	4013      	ands	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 814c 	beq.w	8008e88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d00b      	beq.n	8008c10 <HAL_GPIO_Init+0x48>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d007      	beq.n	8008c10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c04:	2b11      	cmp	r3, #17
 8008c06:	d003      	beq.n	8008c10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b12      	cmp	r3, #18
 8008c0e:	d130      	bne.n	8008c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	43db      	mvns	r3, r3
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4013      	ands	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c46:	2201      	movs	r2, #1
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4e:	43db      	mvns	r3, r3
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4013      	ands	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	091b      	lsrs	r3, r3, #4
 8008c5c:	f003 0201 	and.w	r2, r3, #1
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4013      	ands	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d003      	beq.n	8008cb2 <HAL_GPIO_Init+0xea>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b12      	cmp	r3, #18
 8008cb0:	d123      	bne.n	8008cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	08da      	lsrs	r2, r3, #3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3208      	adds	r2, #8
 8008cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	220f      	movs	r2, #15
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	08da      	lsrs	r2, r3, #3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3208      	adds	r2, #8
 8008cf4:	6939      	ldr	r1, [r7, #16]
 8008cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	2203      	movs	r2, #3
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f003 0203 	and.w	r2, r3, #3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 80a6 	beq.w	8008e88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d3c:	4b5b      	ldr	r3, [pc, #364]	; (8008eac <HAL_GPIO_Init+0x2e4>)
 8008d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d40:	4a5a      	ldr	r2, [pc, #360]	; (8008eac <HAL_GPIO_Init+0x2e4>)
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	6613      	str	r3, [r2, #96]	; 0x60
 8008d48:	4b58      	ldr	r3, [pc, #352]	; (8008eac <HAL_GPIO_Init+0x2e4>)
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	60bb      	str	r3, [r7, #8]
 8008d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d54:	4a56      	ldr	r2, [pc, #344]	; (8008eb0 <HAL_GPIO_Init+0x2e8>)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f003 0303 	and.w	r3, r3, #3
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	220f      	movs	r2, #15
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	43db      	mvns	r3, r3
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4013      	ands	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008d7e:	d01f      	beq.n	8008dc0 <HAL_GPIO_Init+0x1f8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a4c      	ldr	r2, [pc, #304]	; (8008eb4 <HAL_GPIO_Init+0x2ec>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d019      	beq.n	8008dbc <HAL_GPIO_Init+0x1f4>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a4b      	ldr	r2, [pc, #300]	; (8008eb8 <HAL_GPIO_Init+0x2f0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d013      	beq.n	8008db8 <HAL_GPIO_Init+0x1f0>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a4a      	ldr	r2, [pc, #296]	; (8008ebc <HAL_GPIO_Init+0x2f4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00d      	beq.n	8008db4 <HAL_GPIO_Init+0x1ec>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a49      	ldr	r2, [pc, #292]	; (8008ec0 <HAL_GPIO_Init+0x2f8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d007      	beq.n	8008db0 <HAL_GPIO_Init+0x1e8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a48      	ldr	r2, [pc, #288]	; (8008ec4 <HAL_GPIO_Init+0x2fc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d101      	bne.n	8008dac <HAL_GPIO_Init+0x1e4>
 8008da8:	2305      	movs	r3, #5
 8008daa:	e00a      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008dac:	2306      	movs	r3, #6
 8008dae:	e008      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008db0:	2304      	movs	r3, #4
 8008db2:	e006      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008db4:	2303      	movs	r3, #3
 8008db6:	e004      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e002      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e000      	b.n	8008dc2 <HAL_GPIO_Init+0x1fa>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	f002 0203 	and.w	r2, r2, #3
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	4093      	lsls	r3, r2
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dd2:	4937      	ldr	r1, [pc, #220]	; (8008eb0 <HAL_GPIO_Init+0x2e8>)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	3302      	adds	r3, #2
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008de0:	4b39      	ldr	r3, [pc, #228]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	43db      	mvns	r3, r3
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4013      	ands	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e04:	4a30      	ldr	r2, [pc, #192]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4013      	ands	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e2e:	4a26      	ldr	r2, [pc, #152]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4013      	ands	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e58:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008e82:	4a11      	ldr	r2, [pc, #68]	; (8008ec8 <HAL_GPIO_Init+0x300>)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f47f ae9d 	bne.w	8008bd8 <HAL_GPIO_Init+0x10>
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	48000400 	.word	0x48000400
 8008eb8:	48000800 	.word	0x48000800
 8008ebc:	48000c00 	.word	0x48000c00
 8008ec0:	48001000 	.word	0x48001000
 8008ec4:	48001400 	.word	0x48001400
 8008ec8:	40010400 	.word	0x40010400

08008ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	807b      	strh	r3, [r7, #2]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008edc:	787b      	ldrb	r3, [r7, #1]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ee2:	887a      	ldrh	r2, [r7, #2]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ee8:	e002      	b.n	8008ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008eea:	887a      	ldrh	r2, [r7, #2]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d141      	bne.n	8008f8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f0a:	4b4b      	ldr	r3, [pc, #300]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f16:	d131      	bne.n	8008f7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f18:	4b47      	ldr	r3, [pc, #284]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1e:	4a46      	ldr	r2, [pc, #280]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f28:	4b43      	ldr	r3, [pc, #268]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f30:	4a41      	ldr	r2, [pc, #260]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f38:	4b40      	ldr	r3, [pc, #256]	; (800903c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2232      	movs	r2, #50	; 0x32
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	4a3f      	ldr	r2, [pc, #252]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	0c9b      	lsrs	r3, r3, #18
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f4e:	e002      	b.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f56:	4b38      	ldr	r3, [pc, #224]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f62:	d102      	bne.n	8008f6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f2      	bne.n	8008f50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f6a:	4b33      	ldr	r3, [pc, #204]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f76:	d158      	bne.n	800902a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e057      	b.n	800902c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f7c:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f82:	4a2d      	ldr	r2, [pc, #180]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f8c:	e04d      	b.n	800902a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f94:	d141      	bne.n	800901a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f96:	4b28      	ldr	r3, [pc, #160]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa2:	d131      	bne.n	8009008 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fa4:	4b24      	ldr	r3, [pc, #144]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008faa:	4a23      	ldr	r2, [pc, #140]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fb4:	4b20      	ldr	r3, [pc, #128]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fbc:	4a1e      	ldr	r2, [pc, #120]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fc4:	4b1d      	ldr	r3, [pc, #116]	; (800903c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2232      	movs	r2, #50	; 0x32
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	4a1c      	ldr	r2, [pc, #112]	; (8009040 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd4:	0c9b      	lsrs	r3, r3, #18
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fda:	e002      	b.n	8008fe2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fee:	d102      	bne.n	8008ff6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f2      	bne.n	8008fdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009002:	d112      	bne.n	800902a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e011      	b.n	800902c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800900e:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009018:	e007      	b.n	800902a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800901a:	4b07      	ldr	r3, [pc, #28]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009022:	4a05      	ldr	r2, [pc, #20]	; (8009038 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009024:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009028:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	40007000 	.word	0x40007000
 800903c:	20000004 	.word	0x20000004
 8009040:	431bde83 	.word	0x431bde83

08009044 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	4a04      	ldr	r2, [pc, #16]	; (8009060 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800904e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009052:	6093      	str	r3, [r2, #8]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40007000 	.word	0x40007000

08009064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e308      	b.n	8009688 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d075      	beq.n	800916e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009082:	4ba3      	ldr	r3, [pc, #652]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 030c 	and.w	r3, r3, #12
 800908a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800908c:	4ba0      	ldr	r3, [pc, #640]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b0c      	cmp	r3, #12
 800909a:	d102      	bne.n	80090a2 <HAL_RCC_OscConfig+0x3e>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d002      	beq.n	80090a8 <HAL_RCC_OscConfig+0x44>
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d10b      	bne.n	80090c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a8:	4b99      	ldr	r3, [pc, #612]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d05b      	beq.n	800916c <HAL_RCC_OscConfig+0x108>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d157      	bne.n	800916c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e2e3      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c8:	d106      	bne.n	80090d8 <HAL_RCC_OscConfig+0x74>
 80090ca:	4b91      	ldr	r3, [pc, #580]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a90      	ldr	r2, [pc, #576]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	e01d      	b.n	8009114 <HAL_RCC_OscConfig+0xb0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090e0:	d10c      	bne.n	80090fc <HAL_RCC_OscConfig+0x98>
 80090e2:	4b8b      	ldr	r3, [pc, #556]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a8a      	ldr	r2, [pc, #552]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	4b88      	ldr	r3, [pc, #544]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a87      	ldr	r2, [pc, #540]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	e00b      	b.n	8009114 <HAL_RCC_OscConfig+0xb0>
 80090fc:	4b84      	ldr	r3, [pc, #528]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a83      	ldr	r2, [pc, #524]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	4b81      	ldr	r3, [pc, #516]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a80      	ldr	r2, [pc, #512]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800910e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d013      	beq.n	8009144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800911c:	f7fc fed2 	bl	8005ec4 <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009122:	e008      	b.n	8009136 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009124:	f7fc fece 	bl	8005ec4 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b64      	cmp	r3, #100	; 0x64
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e2a8      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009136:	4b76      	ldr	r3, [pc, #472]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f0      	beq.n	8009124 <HAL_RCC_OscConfig+0xc0>
 8009142:	e014      	b.n	800916e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7fc febe 	bl	8005ec4 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800914c:	f7fc feba 	bl	8005ec4 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b64      	cmp	r3, #100	; 0x64
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e294      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800915e:	4b6c      	ldr	r3, [pc, #432]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f0      	bne.n	800914c <HAL_RCC_OscConfig+0xe8>
 800916a:	e000      	b.n	800916e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800916c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d075      	beq.n	8009266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800917a:	4b65      	ldr	r3, [pc, #404]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 030c 	and.w	r3, r3, #12
 8009182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009184:	4b62      	ldr	r3, [pc, #392]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b0c      	cmp	r3, #12
 8009192:	d102      	bne.n	800919a <HAL_RCC_OscConfig+0x136>
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d002      	beq.n	80091a0 <HAL_RCC_OscConfig+0x13c>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b04      	cmp	r3, #4
 800919e:	d11f      	bne.n	80091e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091a0:	4b5b      	ldr	r3, [pc, #364]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <HAL_RCC_OscConfig+0x154>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e267      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091b8:	4b55      	ldr	r3, [pc, #340]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	061b      	lsls	r3, r3, #24
 80091c6:	4952      	ldr	r1, [pc, #328]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091cc:	4b51      	ldr	r3, [pc, #324]	; (8009314 <HAL_RCC_OscConfig+0x2b0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fc fe2b 	bl	8005e2c <HAL_InitTick>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d043      	beq.n	8009264 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e253      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d023      	beq.n	8009230 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091e8:	4b49      	ldr	r3, [pc, #292]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a48      	ldr	r2, [pc, #288]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80091ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f4:	f7fc fe66 	bl	8005ec4 <HAL_GetTick>
 80091f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091fa:	e008      	b.n	800920e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091fc:	f7fc fe62 	bl	8005ec4 <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b02      	cmp	r3, #2
 8009208:	d901      	bls.n	800920e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e23c      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800920e:	4b40      	ldr	r3, [pc, #256]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0f0      	beq.n	80091fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800921a:	4b3d      	ldr	r3, [pc, #244]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	4939      	ldr	r1, [pc, #228]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800922a:	4313      	orrs	r3, r2
 800922c:	604b      	str	r3, [r1, #4]
 800922e:	e01a      	b.n	8009266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009230:	4b37      	ldr	r3, [pc, #220]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a36      	ldr	r2, [pc, #216]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923c:	f7fc fe42 	bl	8005ec4 <HAL_GetTick>
 8009240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009242:	e008      	b.n	8009256 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009244:	f7fc fe3e 	bl	8005ec4 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d901      	bls.n	8009256 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e218      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009256:	4b2e      	ldr	r3, [pc, #184]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1f0      	bne.n	8009244 <HAL_RCC_OscConfig+0x1e0>
 8009262:	e000      	b.n	8009266 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009264:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d03c      	beq.n	80092ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01c      	beq.n	80092b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800927a:	4b25      	ldr	r3, [pc, #148]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009280:	4a23      	ldr	r2, [pc, #140]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928a:	f7fc fe1b 	bl	8005ec4 <HAL_GetTick>
 800928e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009290:	e008      	b.n	80092a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009292:	f7fc fe17 	bl	8005ec4 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e1f1      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092a4:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80092a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0ef      	beq.n	8009292 <HAL_RCC_OscConfig+0x22e>
 80092b2:	e01b      	b.n	80092ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092b4:	4b16      	ldr	r3, [pc, #88]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80092b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ba:	4a15      	ldr	r2, [pc, #84]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80092bc:	f023 0301 	bic.w	r3, r3, #1
 80092c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c4:	f7fc fdfe 	bl	8005ec4 <HAL_GetTick>
 80092c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092cc:	f7fc fdfa 	bl	8005ec4 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e1d4      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 80092e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1ef      	bne.n	80092cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80ab 	beq.w	8009450 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092fa:	2300      	movs	r3, #0
 80092fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_OscConfig+0x2ac>)
 8009300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_RCC_OscConfig+0x2b4>
 800930a:	2301      	movs	r3, #1
 800930c:	e005      	b.n	800931a <HAL_RCC_OscConfig+0x2b6>
 800930e:	bf00      	nop
 8009310:	40021000 	.word	0x40021000
 8009314:	20000008 	.word	0x20000008
 8009318:	2300      	movs	r3, #0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800931e:	4baf      	ldr	r3, [pc, #700]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009322:	4aae      	ldr	r2, [pc, #696]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009328:	6593      	str	r3, [r2, #88]	; 0x58
 800932a:	4bac      	ldr	r3, [pc, #688]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800932c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009336:	2301      	movs	r3, #1
 8009338:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800933a:	4ba9      	ldr	r3, [pc, #676]	; (80095e0 <HAL_RCC_OscConfig+0x57c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d118      	bne.n	8009378 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009346:	4ba6      	ldr	r3, [pc, #664]	; (80095e0 <HAL_RCC_OscConfig+0x57c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4aa5      	ldr	r2, [pc, #660]	; (80095e0 <HAL_RCC_OscConfig+0x57c>)
 800934c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009352:	f7fc fdb7 	bl	8005ec4 <HAL_GetTick>
 8009356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009358:	e008      	b.n	800936c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800935a:	f7fc fdb3 	bl	8005ec4 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d901      	bls.n	800936c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e18d      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800936c:	4b9c      	ldr	r3, [pc, #624]	; (80095e0 <HAL_RCC_OscConfig+0x57c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0f0      	beq.n	800935a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d108      	bne.n	8009392 <HAL_RCC_OscConfig+0x32e>
 8009380:	4b96      	ldr	r3, [pc, #600]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009386:	4a95      	ldr	r2, [pc, #596]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009390:	e024      	b.n	80093dc <HAL_RCC_OscConfig+0x378>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	2b05      	cmp	r3, #5
 8009398:	d110      	bne.n	80093bc <HAL_RCC_OscConfig+0x358>
 800939a:	4b90      	ldr	r3, [pc, #576]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a0:	4a8e      	ldr	r2, [pc, #568]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093a2:	f043 0304 	orr.w	r3, r3, #4
 80093a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093aa:	4b8c      	ldr	r3, [pc, #560]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b0:	4a8a      	ldr	r2, [pc, #552]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093b2:	f043 0301 	orr.w	r3, r3, #1
 80093b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093ba:	e00f      	b.n	80093dc <HAL_RCC_OscConfig+0x378>
 80093bc:	4b87      	ldr	r3, [pc, #540]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c2:	4a86      	ldr	r2, [pc, #536]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80093cc:	4b83      	ldr	r3, [pc, #524]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d2:	4a82      	ldr	r2, [pc, #520]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80093d4:	f023 0304 	bic.w	r3, r3, #4
 80093d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d016      	beq.n	8009412 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e4:	f7fc fd6e 	bl	8005ec4 <HAL_GetTick>
 80093e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093ea:	e00a      	b.n	8009402 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ec:	f7fc fd6a 	bl	8005ec4 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e142      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009402:	4b76      	ldr	r3, [pc, #472]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0ed      	beq.n	80093ec <HAL_RCC_OscConfig+0x388>
 8009410:	e015      	b.n	800943e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009412:	f7fc fd57 	bl	8005ec4 <HAL_GetTick>
 8009416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009418:	e00a      	b.n	8009430 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800941a:	f7fc fd53 	bl	8005ec4 <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	f241 3288 	movw	r2, #5000	; 0x1388
 8009428:	4293      	cmp	r3, r2
 800942a:	d901      	bls.n	8009430 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e12b      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009430:	4b6a      	ldr	r3, [pc, #424]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1ed      	bne.n	800941a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800943e:	7ffb      	ldrb	r3, [r7, #31]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d105      	bne.n	8009450 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009444:	4b65      	ldr	r3, [pc, #404]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	4a64      	ldr	r2, [pc, #400]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800944a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800944e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0320 	and.w	r3, r3, #32
 8009458:	2b00      	cmp	r3, #0
 800945a:	d03c      	beq.n	80094d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01c      	beq.n	800949e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009464:	4b5d      	ldr	r3, [pc, #372]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800946a:	4a5c      	ldr	r2, [pc, #368]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009474:	f7fc fd26 	bl	8005ec4 <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800947c:	f7fc fd22 	bl	8005ec4 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e0fc      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800948e:	4b53      	ldr	r3, [pc, #332]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0ef      	beq.n	800947c <HAL_RCC_OscConfig+0x418>
 800949c:	e01b      	b.n	80094d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800949e:	4b4f      	ldr	r3, [pc, #316]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094a4:	4a4d      	ldr	r2, [pc, #308]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ae:	f7fc fd09 	bl	8005ec4 <HAL_GetTick>
 80094b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094b4:	e008      	b.n	80094c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094b6:	f7fc fd05 	bl	8005ec4 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d901      	bls.n	80094c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e0df      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80094c8:	4b44      	ldr	r3, [pc, #272]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1ef      	bne.n	80094b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80d3 	beq.w	8009686 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094e0:	4b3e      	ldr	r3, [pc, #248]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f003 030c 	and.w	r3, r3, #12
 80094e8:	2b0c      	cmp	r3, #12
 80094ea:	f000 808d 	beq.w	8009608 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d15a      	bne.n	80095ac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094f6:	4b39      	ldr	r3, [pc, #228]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a38      	ldr	r2, [pc, #224]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80094fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009502:	f7fc fcdf 	bl	8005ec4 <HAL_GetTick>
 8009506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009508:	e008      	b.n	800951c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800950a:	f7fc fcdb 	bl	8005ec4 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	2b02      	cmp	r3, #2
 8009516:	d901      	bls.n	800951c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e0b5      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800951c:	4b2f      	ldr	r3, [pc, #188]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f0      	bne.n	800950a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009528:	4b2c      	ldr	r3, [pc, #176]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	4b2d      	ldr	r3, [pc, #180]	; (80095e4 <HAL_RCC_OscConfig+0x580>)
 800952e:	4013      	ands	r3, r2
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	6a11      	ldr	r1, [r2, #32]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009538:	3a01      	subs	r2, #1
 800953a:	0112      	lsls	r2, r2, #4
 800953c:	4311      	orrs	r1, r2
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009542:	0212      	lsls	r2, r2, #8
 8009544:	4311      	orrs	r1, r2
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800954a:	0852      	lsrs	r2, r2, #1
 800954c:	3a01      	subs	r2, #1
 800954e:	0552      	lsls	r2, r2, #21
 8009550:	4311      	orrs	r1, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009556:	0852      	lsrs	r2, r2, #1
 8009558:	3a01      	subs	r2, #1
 800955a:	0652      	lsls	r2, r2, #25
 800955c:	4311      	orrs	r1, r2
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009562:	06d2      	lsls	r2, r2, #27
 8009564:	430a      	orrs	r2, r1
 8009566:	491d      	ldr	r1, [pc, #116]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009568:	4313      	orrs	r3, r2
 800956a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a1a      	ldr	r2, [pc, #104]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 8009572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009576:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009578:	4b18      	ldr	r3, [pc, #96]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 800957e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009582:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009584:	f7fc fc9e 	bl	8005ec4 <HAL_GetTick>
 8009588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800958c:	f7fc fc9a 	bl	8005ec4 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e074      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800959e:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0f0      	beq.n	800958c <HAL_RCC_OscConfig+0x528>
 80095aa:	e06c      	b.n	8009686 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ac:	4b0b      	ldr	r3, [pc, #44]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a07      	ldr	r2, [pc, #28]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a04      	ldr	r2, [pc, #16]	; (80095dc <HAL_RCC_OscConfig+0x578>)
 80095ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80095ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d4:	f7fc fc76 	bl	8005ec4 <HAL_GetTick>
 80095d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095da:	e00e      	b.n	80095fa <HAL_RCC_OscConfig+0x596>
 80095dc:	40021000 	.word	0x40021000
 80095e0:	40007000 	.word	0x40007000
 80095e4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e8:	f7fc fc6c 	bl	8005ec4 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d901      	bls.n	80095fa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e046      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095fa:	4b25      	ldr	r3, [pc, #148]	; (8009690 <HAL_RCC_OscConfig+0x62c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f0      	bne.n	80095e8 <HAL_RCC_OscConfig+0x584>
 8009606:	e03e      	b.n	8009686 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e039      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009614:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <HAL_RCC_OscConfig+0x62c>)
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f003 0203 	and.w	r2, r3, #3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	429a      	cmp	r2, r3
 8009626:	d12c      	bne.n	8009682 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	3b01      	subs	r3, #1
 8009634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d123      	bne.n	8009682 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009646:	429a      	cmp	r2, r3
 8009648:	d11b      	bne.n	8009682 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009656:	429a      	cmp	r2, r3
 8009658:	d113      	bne.n	8009682 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	085b      	lsrs	r3, r3, #1
 8009666:	3b01      	subs	r3, #1
 8009668:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800966a:	429a      	cmp	r2, r3
 800966c:	d109      	bne.n	8009682 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	3b01      	subs	r3, #1
 800967c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800967e:	429a      	cmp	r2, r3
 8009680:	d001      	beq.n	8009686 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	40021000 	.word	0x40021000

08009694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e11e      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096ac:	4b91      	ldr	r3, [pc, #580]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d910      	bls.n	80096dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ba:	4b8e      	ldr	r3, [pc, #568]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 020f 	bic.w	r2, r3, #15
 80096c2:	498c      	ldr	r1, [pc, #560]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ca:	4b8a      	ldr	r3, [pc, #552]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 030f 	and.w	r3, r3, #15
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d001      	beq.n	80096dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e106      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d073      	beq.n	80097d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d129      	bne.n	8009744 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f0:	4b81      	ldr	r3, [pc, #516]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e0f4      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009700:	f000 f99e 	bl	8009a40 <RCC_GetSysClockFreqFromPLLSource>
 8009704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	4a7c      	ldr	r2, [pc, #496]	; (80098fc <HAL_RCC_ClockConfig+0x268>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d93f      	bls.n	800978e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800970e:	4b7a      	ldr	r3, [pc, #488]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d009      	beq.n	800972e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009722:	2b00      	cmp	r3, #0
 8009724:	d033      	beq.n	800978e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800972a:	2b00      	cmp	r3, #0
 800972c:	d12f      	bne.n	800978e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800972e:	4b72      	ldr	r3, [pc, #456]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009736:	4a70      	ldr	r2, [pc, #448]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800973e:	2380      	movs	r3, #128	; 0x80
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	e024      	b.n	800978e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b02      	cmp	r3, #2
 800974a:	d107      	bne.n	800975c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800974c:	4b6a      	ldr	r3, [pc, #424]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e0c6      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800975c:	4b66      	ldr	r3, [pc, #408]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e0be      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800976c:	f000 f8ce 	bl	800990c <HAL_RCC_GetSysClockFreq>
 8009770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	4a61      	ldr	r2, [pc, #388]	; (80098fc <HAL_RCC_ClockConfig+0x268>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d909      	bls.n	800978e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800977a:	4b5f      	ldr	r3, [pc, #380]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009782:	4a5d      	ldr	r2, [pc, #372]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009788:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800978a:	2380      	movs	r3, #128	; 0x80
 800978c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800978e:	4b5a      	ldr	r3, [pc, #360]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f023 0203 	bic.w	r2, r3, #3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4957      	ldr	r1, [pc, #348]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800979c:	4313      	orrs	r3, r2
 800979e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a0:	f7fc fb90 	bl	8005ec4 <HAL_GetTick>
 80097a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097a6:	e00a      	b.n	80097be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097a8:	f7fc fb8c 	bl	8005ec4 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d901      	bls.n	80097be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e095      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097be:	4b4e      	ldr	r3, [pc, #312]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 020c 	and.w	r2, r3, #12
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1eb      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d023      	beq.n	8009824 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d005      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097e8:	4b43      	ldr	r3, [pc, #268]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	4a42      	ldr	r2, [pc, #264]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80097ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009800:	4b3d      	ldr	r3, [pc, #244]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009808:	4a3b      	ldr	r2, [pc, #236]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800980a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800980e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009810:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	4936      	ldr	r1, [pc, #216]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800981e:	4313      	orrs	r3, r2
 8009820:	608b      	str	r3, [r1, #8]
 8009822:	e008      	b.n	8009836 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d105      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800982a:	4b33      	ldr	r3, [pc, #204]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	4a32      	ldr	r2, [pc, #200]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 8009830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009834:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009836:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d21d      	bcs.n	8009880 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009844:	4b2b      	ldr	r3, [pc, #172]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f023 020f 	bic.w	r2, r3, #15
 800984c:	4929      	ldr	r1, [pc, #164]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	4313      	orrs	r3, r2
 8009852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009854:	f7fc fb36 	bl	8005ec4 <HAL_GetTick>
 8009858:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800985a:	e00a      	b.n	8009872 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800985c:	f7fc fb32 	bl	8005ec4 <HAL_GetTick>
 8009860:	4602      	mov	r2, r0
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	f241 3288 	movw	r2, #5000	; 0x1388
 800986a:	4293      	cmp	r3, r2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e03b      	b.n	80098ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009872:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <HAL_RCC_ClockConfig+0x260>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 030f 	and.w	r3, r3, #15
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d1ed      	bne.n	800985c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d008      	beq.n	800989e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800988c:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4917      	ldr	r1, [pc, #92]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 800989a:	4313      	orrs	r3, r2
 800989c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0308 	and.w	r3, r3, #8
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098aa:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	490f      	ldr	r1, [pc, #60]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80098be:	f000 f825 	bl	800990c <HAL_RCC_GetSysClockFreq>
 80098c2:	4602      	mov	r2, r0
 80098c4:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <HAL_RCC_ClockConfig+0x264>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	091b      	lsrs	r3, r3, #4
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	490c      	ldr	r1, [pc, #48]	; (8009900 <HAL_RCC_ClockConfig+0x26c>)
 80098d0:	5ccb      	ldrb	r3, [r1, r3]
 80098d2:	f003 031f 	and.w	r3, r3, #31
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	4a0a      	ldr	r2, [pc, #40]	; (8009904 <HAL_RCC_ClockConfig+0x270>)
 80098dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80098de:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <HAL_RCC_ClockConfig+0x274>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fc faa2 	bl	8005e2c <HAL_InitTick>
 80098e8:	4603      	mov	r3, r0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40022000 	.word	0x40022000
 80098f8:	40021000 	.word	0x40021000
 80098fc:	04c4b400 	.word	0x04c4b400
 8009900:	08013394 	.word	0x08013394
 8009904:	20000004 	.word	0x20000004
 8009908:	20000008 	.word	0x20000008

0800990c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009912:	4b2c      	ldr	r3, [pc, #176]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 030c 	and.w	r3, r3, #12
 800991a:	2b04      	cmp	r3, #4
 800991c:	d102      	bne.n	8009924 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	e047      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009924:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f003 030c 	and.w	r3, r3, #12
 800992c:	2b08      	cmp	r3, #8
 800992e:	d102      	bne.n	8009936 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009930:	4b26      	ldr	r3, [pc, #152]	; (80099cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	e03e      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009936:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f003 030c 	and.w	r3, r3, #12
 800993e:	2b0c      	cmp	r3, #12
 8009940:	d136      	bne.n	80099b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009942:	4b20      	ldr	r3, [pc, #128]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800994c:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	091b      	lsrs	r3, r3, #4
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	3301      	adds	r3, #1
 8009958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b03      	cmp	r3, #3
 800995e:	d10c      	bne.n	800997a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009960:	4a1a      	ldr	r2, [pc, #104]	; (80099cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	fbb2 f3f3 	udiv	r3, r2, r3
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800996a:	68d2      	ldr	r2, [r2, #12]
 800996c:	0a12      	lsrs	r2, r2, #8
 800996e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	617b      	str	r3, [r7, #20]
      break;
 8009978:	e00c      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800997a:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009982:	4a10      	ldr	r2, [pc, #64]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009984:	68d2      	ldr	r2, [r2, #12]
 8009986:	0a12      	lsrs	r2, r2, #8
 8009988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800998c:	fb02 f303 	mul.w	r3, r2, r3
 8009990:	617b      	str	r3, [r7, #20]
      break;
 8009992:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009994:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	0e5b      	lsrs	r3, r3, #25
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	3301      	adds	r3, #1
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	e001      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80099b4:	693b      	ldr	r3, [r7, #16]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40021000 	.word	0x40021000
 80099c8:	00f42400 	.word	0x00f42400
 80099cc:	007a1200 	.word	0x007a1200

080099d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099d4:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80099d6:	681b      	ldr	r3, [r3, #0]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000004 	.word	0x20000004

080099e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099ec:	f7ff fff0 	bl	80099d0 <HAL_RCC_GetHCLKFreq>
 80099f0:	4602      	mov	r2, r0
 80099f2:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	4904      	ldr	r1, [pc, #16]	; (8009a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80099fe:	5ccb      	ldrb	r3, [r1, r3]
 8009a00:	f003 031f 	and.w	r3, r3, #31
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	40021000 	.word	0x40021000
 8009a10:	080133a4 	.word	0x080133a4

08009a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a18:	f7ff ffda 	bl	80099d0 <HAL_RCC_GetHCLKFreq>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	0adb      	lsrs	r3, r3, #11
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a2a:	5ccb      	ldrb	r3, [r1, r3]
 8009a2c:	f003 031f 	and.w	r3, r3, #31
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	080133a4 	.word	0x080133a4

08009a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a46:	4b1e      	ldr	r3, [pc, #120]	; (8009ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	091b      	lsrs	r3, r3, #4
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d10c      	bne.n	8009a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a64:	4a17      	ldr	r2, [pc, #92]	; (8009ac4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6c:	4a14      	ldr	r2, [pc, #80]	; (8009ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a6e:	68d2      	ldr	r2, [r2, #12]
 8009a70:	0a12      	lsrs	r2, r2, #8
 8009a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
 8009a7a:	617b      	str	r3, [r7, #20]
    break;
 8009a7c:	e00c      	b.n	8009a98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a7e:	4a12      	ldr	r2, [pc, #72]	; (8009ac8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a86:	4a0e      	ldr	r2, [pc, #56]	; (8009ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a88:	68d2      	ldr	r2, [r2, #12]
 8009a8a:	0a12      	lsrs	r2, r2, #8
 8009a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a90:	fb02 f303 	mul.w	r3, r2, r3
 8009a94:	617b      	str	r3, [r7, #20]
    break;
 8009a96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a98:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	0e5b      	lsrs	r3, r3, #25
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009ab2:	687b      	ldr	r3, [r7, #4]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	007a1200 	.word	0x007a1200
 8009ac8:	00f42400 	.word	0x00f42400

08009acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ad8:	2300      	movs	r3, #0
 8009ada:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8098 	beq.w	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009aea:	2300      	movs	r3, #0
 8009aec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009aee:	4b43      	ldr	r3, [pc, #268]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009afa:	4b40      	ldr	r3, [pc, #256]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	4a3f      	ldr	r2, [pc, #252]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6593      	str	r3, [r2, #88]	; 0x58
 8009b06:	4b3d      	ldr	r3, [pc, #244]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b0e:	60bb      	str	r3, [r7, #8]
 8009b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b12:	2301      	movs	r3, #1
 8009b14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b16:	4b3a      	ldr	r3, [pc, #232]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a39      	ldr	r2, [pc, #228]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b22:	f7fc f9cf 	bl	8005ec4 <HAL_GetTick>
 8009b26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b28:	e009      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b2a:	f7fc f9cb 	bl	8005ec4 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d902      	bls.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	74fb      	strb	r3, [r7, #19]
        break;
 8009b3c:	e005      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b3e:	4b30      	ldr	r3, [pc, #192]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0ef      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009b4a:	7cfb      	ldrb	r3, [r7, #19]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d159      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b50:	4b2a      	ldr	r3, [pc, #168]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d01e      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d019      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b6c:	4b23      	ldr	r3, [pc, #140]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b78:	4b20      	ldr	r3, [pc, #128]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7e:	4a1f      	ldr	r2, [pc, #124]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8e:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b98:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d016      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009baa:	f7fc f98b 	bl	8005ec4 <HAL_GetTick>
 8009bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bb0:	e00b      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7fc f987 	bl	8005ec4 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d902      	bls.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8009bc8:	e006      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0ec      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009bd8:	7cfb      	ldrb	r3, [r7, #19]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bec:	4903      	ldr	r1, [pc, #12]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009bf4:	e008      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bf6:	7cfb      	ldrb	r3, [r7, #19]
 8009bf8:	74bb      	strb	r3, [r7, #18]
 8009bfa:	e005      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009bfc:	40021000 	.word	0x40021000
 8009c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
 8009c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c08:	7c7b      	ldrb	r3, [r7, #17]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d105      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c0e:	4baf      	ldr	r3, [pc, #700]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	4aae      	ldr	r2, [pc, #696]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c26:	4ba9      	ldr	r3, [pc, #676]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2c:	f023 0203 	bic.w	r2, r3, #3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	49a5      	ldr	r1, [pc, #660]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c48:	4ba0      	ldr	r3, [pc, #640]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	f023 020c 	bic.w	r2, r3, #12
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	499d      	ldr	r1, [pc, #628]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0304 	and.w	r3, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c6a:	4b98      	ldr	r3, [pc, #608]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	4994      	ldr	r1, [pc, #592]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c8c:	4b8f      	ldr	r3, [pc, #572]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	498c      	ldr	r1, [pc, #560]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009cae:	4b87      	ldr	r3, [pc, #540]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	4983      	ldr	r1, [pc, #524]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cd0:	4b7e      	ldr	r3, [pc, #504]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	497b      	ldr	r1, [pc, #492]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cf2:	4b76      	ldr	r3, [pc, #472]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	4972      	ldr	r1, [pc, #456]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d14:	4b6d      	ldr	r3, [pc, #436]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	496a      	ldr	r1, [pc, #424]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d36:	4b65      	ldr	r3, [pc, #404]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	4961      	ldr	r1, [pc, #388]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d58:	4b5c      	ldr	r3, [pc, #368]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d5e:	f023 0203 	bic.w	r2, r3, #3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d66:	4959      	ldr	r1, [pc, #356]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d7a:	4b54      	ldr	r3, [pc, #336]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d88:	4950      	ldr	r1, [pc, #320]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d9c:	4b4b      	ldr	r3, [pc, #300]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	4948      	ldr	r1, [pc, #288]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dba:	d105      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dbc:	4b43      	ldr	r3, [pc, #268]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a42      	ldr	r2, [pc, #264]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009dd4:	4b3d      	ldr	r3, [pc, #244]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de2:	493a      	ldr	r1, [pc, #232]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009df2:	d105      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009df4:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a34      	ldr	r2, [pc, #208]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d015      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e0c:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	492c      	ldr	r1, [pc, #176]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e2a:	d105      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e2c:	4b27      	ldr	r3, [pc, #156]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a26      	ldr	r2, [pc, #152]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d015      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e44:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	491e      	ldr	r1, [pc, #120]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e62:	d105      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e64:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	4a18      	ldr	r2, [pc, #96]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d015      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e7c:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	4910      	ldr	r1, [pc, #64]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e9a:	d105      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d018      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009eb4:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec2:	4902      	ldr	r1, [pc, #8]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009eca:	e001      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009ecc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed8:	d105      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009eda:	4b21      	ldr	r3, [pc, #132]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	4a20      	ldr	r2, [pc, #128]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d015      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f00:	4917      	ldr	r1, [pc, #92]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f10:	d105      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	4a12      	ldr	r2, [pc, #72]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f1c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d015      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f38:	4909      	ldr	r1, [pc, #36]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f48:	d105      	bne.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f54:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40021000 	.word	0x40021000

08009f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e09d      	b.n	800a0b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d108      	bne.n	8009f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f86:	d009      	beq.n	8009f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	61da      	str	r2, [r3, #28]
 8009f8e:	e005      	b.n	8009f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fb fa40 	bl	800543c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fdc:	d902      	bls.n	8009fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e002      	b.n	8009fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ff2:	d007      	beq.n	800a004 <HAL_SPI_Init+0xa0>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ffc:	d002      	beq.n	800a004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	ea42 0103 	orr.w	r1, r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	f003 0204 	and.w	r2, r3, #4
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	f003 0310 	and.w	r3, r3, #16
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a080:	ea42 0103 	orr.w	r1, r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b08a      	sub	sp, #40	; 0x28
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
 800a0c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_SPI_TransmitReceive+0x26>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e1fb      	b.n	800a4d8 <HAL_SPI_TransmitReceive+0x41e>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0e8:	f7fb feec 	bl	8005ec4 <HAL_GetTick>
 800a0ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a0fc:	887b      	ldrh	r3, [r7, #2]
 800a0fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a100:	887b      	ldrh	r3, [r7, #2]
 800a102:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a104:	7efb      	ldrb	r3, [r7, #27]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d00e      	beq.n	800a128 <HAL_SPI_TransmitReceive+0x6e>
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a110:	d106      	bne.n	800a120 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <HAL_SPI_TransmitReceive+0x66>
 800a11a:	7efb      	ldrb	r3, [r7, #27]
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d003      	beq.n	800a128 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a120:	2302      	movs	r3, #2
 800a122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a126:	e1cd      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <HAL_SPI_TransmitReceive+0x80>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <HAL_SPI_TransmitReceive+0x80>
 800a134:	887b      	ldrh	r3, [r7, #2]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a140:	e1c0      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d003      	beq.n	800a156 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2205      	movs	r2, #5
 800a152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	887a      	ldrh	r2, [r7, #2]
 800a166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	887a      	ldrh	r2, [r7, #2]
 800a16e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	887a      	ldrh	r2, [r7, #2]
 800a17c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	887a      	ldrh	r2, [r7, #2]
 800a182:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a198:	d802      	bhi.n	800a1a0 <HAL_SPI_TransmitReceive+0xe6>
 800a19a:	8a3b      	ldrh	r3, [r7, #16]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d908      	bls.n	800a1b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1ae:	605a      	str	r2, [r3, #4]
 800a1b0:	e007      	b.n	800a1c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d007      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1e8:	d97c      	bls.n	800a2e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <HAL_SPI_TransmitReceive+0x13e>
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d169      	bne.n	800a2cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	881a      	ldrh	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	1c9a      	adds	r2, r3, #2
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a21c:	e056      	b.n	800a2cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0302 	and.w	r3, r3, #2
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d11b      	bne.n	800a264 <HAL_SPI_TransmitReceive+0x1aa>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a230:	b29b      	uxth	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d016      	beq.n	800a264 <HAL_SPI_TransmitReceive+0x1aa>
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d113      	bne.n	800a264 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	881a      	ldrh	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	1c9a      	adds	r2, r3, #2
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a256:	b29b      	uxth	r3, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d11c      	bne.n	800a2ac <HAL_SPI_TransmitReceive+0x1f2>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a278:	b29b      	uxth	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d016      	beq.n	800a2ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	b292      	uxth	r2, r2
 800a28a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	1c9a      	adds	r2, r3, #2
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2ac:	f7fb fe0a 	bl	8005ec4 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d807      	bhi.n	800a2cc <HAL_SPI_TransmitReceive+0x212>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d003      	beq.n	800a2cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a2ca:	e0fb      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1a3      	bne.n	800a21e <HAL_SPI_TransmitReceive+0x164>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d19d      	bne.n	800a21e <HAL_SPI_TransmitReceive+0x164>
 800a2e2:	e0df      	b.n	800a4a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0x23a>
 800a2ec:	8a7b      	ldrh	r3, [r7, #18]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	f040 80cb 	bne.w	800a48a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d912      	bls.n	800a324 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	881a      	ldrh	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	1c9a      	adds	r2, r3, #2
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a318:	b29b      	uxth	r3, r3
 800a31a:	3b02      	subs	r3, #2
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a322:	e0b2      	b.n	800a48a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	330c      	adds	r3, #12
 800a32e:	7812      	ldrb	r2, [r2, #0]
 800a330:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a340:	b29b      	uxth	r3, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	b29a      	uxth	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a34a:	e09e      	b.n	800a48a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b02      	cmp	r3, #2
 800a358:	d134      	bne.n	800a3c4 <HAL_SPI_TransmitReceive+0x30a>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a35e:	b29b      	uxth	r3, r3
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02f      	beq.n	800a3c4 <HAL_SPI_TransmitReceive+0x30a>
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	2b01      	cmp	r3, #1
 800a368:	d12c      	bne.n	800a3c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b01      	cmp	r3, #1
 800a372:	d912      	bls.n	800a39a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a378:	881a      	ldrh	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	1c9a      	adds	r2, r3, #2
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a38e:	b29b      	uxth	r3, r3
 800a390:	3b02      	subs	r3, #2
 800a392:	b29a      	uxth	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a398:	e012      	b.n	800a3c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330c      	adds	r3, #12
 800a3a4:	7812      	ldrb	r2, [r2, #0]
 800a3a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d148      	bne.n	800a464 <HAL_SPI_TransmitReceive+0x3aa>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d042      	beq.n	800a464 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d923      	bls.n	800a432 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68da      	ldr	r2, [r3, #12]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	b292      	uxth	r2, r2
 800a3f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fc:	1c9a      	adds	r2, r3, #2
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a408:	b29b      	uxth	r3, r3
 800a40a:	3b02      	subs	r3, #2
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d81f      	bhi.n	800a460 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a42e:	605a      	str	r2, [r3, #4]
 800a430:	e016      	b.n	800a460 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f103 020c 	add.w	r2, r3, #12
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	7812      	ldrb	r2, [r2, #0]
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a460:	2301      	movs	r3, #1
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a464:	f7fb fd2e 	bl	8005ec4 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a470:	429a      	cmp	r2, r3
 800a472:	d803      	bhi.n	800a47c <HAL_SPI_TransmitReceive+0x3c2>
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d102      	bne.n	800a482 <HAL_SPI_TransmitReceive+0x3c8>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a488:	e01c      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f af5b 	bne.w	800a34c <HAL_SPI_TransmitReceive+0x292>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f47f af54 	bne.w	800a34c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4a4:	69fa      	ldr	r2, [r7, #28]
 800a4a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f933 	bl	800a714 <SPI_EndRxTxTransaction>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	661a      	str	r2, [r3, #96]	; 0x60
 800a4c0:	e000      	b.n	800a4c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a4c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a4d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3728      	adds	r7, #40	; 0x28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4f0:	f7fb fce8 	bl	8005ec4 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a500:	f7fb fce0 	bl	8005ec4 <HAL_GetTick>
 800a504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a506:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	015b      	lsls	r3, r3, #5
 800a50c:	0d1b      	lsrs	r3, r3, #20
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a516:	e054      	b.n	800a5c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d050      	beq.n	800a5c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a520:	f7fb fcd0 	bl	8005ec4 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d902      	bls.n	800a536 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d13d      	bne.n	800a5b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a54e:	d111      	bne.n	800a574 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a558:	d004      	beq.n	800a564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a562:	d107      	bne.n	800a574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a57c:	d10f      	bne.n	800a59e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a59c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e017      	b.n	800a5e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2301      	moveq	r3, #1
 800a5d4:	2300      	movne	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	461a      	mov	r2, r3
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d19b      	bne.n	800a518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000004 	.word	0x20000004

0800a5f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5fe:	f7fb fc61 	bl	8005ec4 <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	4413      	add	r3, r2
 800a60c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a60e:	f7fb fc59 	bl	8005ec4 <HAL_GetTick>
 800a612:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	00da      	lsls	r2, r3, #3
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	0d1b      	lsrs	r3, r3, #20
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800a62c:	e062      	b.n	800a6f4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a634:	d109      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0x5a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	330c      	adds	r3, #12
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800a648:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d050      	beq.n	800a6f4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a652:	f7fb fc37 	bl	8005ec4 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d902      	bls.n	800a668 <SPI_WaitFifoStateUntilTimeout+0x78>
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d13d      	bne.n	800a6e4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a676:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a680:	d111      	bne.n	800a6a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a68a:	d004      	beq.n	800a696 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a694:	d107      	bne.n	800a6a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ae:	d10f      	bne.n	800a6d0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e010      	b.n	800a706 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	429a      	cmp	r2, r3
 800a702:	d194      	bne.n	800a62e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000004 	.word	0x20000004

0800a714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af02      	add	r7, sp, #8
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff ff5f 	bl	800a5f0 <SPI_WaitFifoStateUntilTimeout>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a73c:	f043 0220 	orr.w	r2, r3, #32
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e027      	b.n	800a798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	2180      	movs	r1, #128	; 0x80
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff fec4 	bl	800a4e0 <SPI_WaitFlagStateUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a762:	f043 0220 	orr.w	r2, r3, #32
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e014      	b.n	800a798 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2200      	movs	r2, #0
 800a776:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff ff38 	bl	800a5f0 <SPI_WaitFifoStateUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d007      	beq.n	800a796 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a78a:	f043 0220 	orr.w	r2, r3, #32
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e000      	b.n	800a798 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e049      	b.n	800a846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7fb f9d6 	bl	8005b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f000 fdf6 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
	...

0800a850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b01      	cmp	r3, #1
 800a862:	d001      	beq.n	800a868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e054      	b.n	800a912 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a26      	ldr	r2, [pc, #152]	; (800a920 <HAL_TIM_Base_Start_IT+0xd0>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d022      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a892:	d01d      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a22      	ldr	r2, [pc, #136]	; (800a924 <HAL_TIM_Base_Start_IT+0xd4>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d018      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a21      	ldr	r2, [pc, #132]	; (800a928 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d013      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <HAL_TIM_Base_Start_IT+0xdc>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d00e      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1e      	ldr	r2, [pc, #120]	; (800a930 <HAL_TIM_Base_Start_IT+0xe0>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d009      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1c      	ldr	r2, [pc, #112]	; (800a934 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d004      	beq.n	800a8d0 <HAL_TIM_Base_Start_IT+0x80>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1b      	ldr	r2, [pc, #108]	; (800a938 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d115      	bne.n	800a8fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689a      	ldr	r2, [r3, #8]
 800a8d6:	4b19      	ldr	r3, [pc, #100]	; (800a93c <HAL_TIM_Base_Start_IT+0xec>)
 800a8d8:	4013      	ands	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b06      	cmp	r3, #6
 800a8e0:	d015      	beq.n	800a90e <HAL_TIM_Base_Start_IT+0xbe>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e8:	d011      	beq.n	800a90e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f042 0201 	orr.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fa:	e008      	b.n	800a90e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0201 	orr.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	e000      	b.n	800a910 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	40012c00 	.word	0x40012c00
 800a924:	40000400 	.word	0x40000400
 800a928:	40000800 	.word	0x40000800
 800a92c:	40000c00 	.word	0x40000c00
 800a930:	40013400 	.word	0x40013400
 800a934:	40014000 	.word	0x40014000
 800a938:	40015000 	.word	0x40015000
 800a93c:	00010007 	.word	0x00010007

0800a940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e049      	b.n	800a9e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f841 	bl	800a9ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2202      	movs	r2, #2
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f000 fd26 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b083      	sub	sp, #12
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d109      	bne.n	800aa28 <HAL_TIM_PWM_Start+0x24>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	bf14      	ite	ne
 800aa20:	2301      	movne	r3, #1
 800aa22:	2300      	moveq	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	e03c      	b.n	800aaa2 <HAL_TIM_PWM_Start+0x9e>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d109      	bne.n	800aa42 <HAL_TIM_PWM_Start+0x3e>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	bf14      	ite	ne
 800aa3a:	2301      	movne	r3, #1
 800aa3c:	2300      	moveq	r3, #0
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	e02f      	b.n	800aaa2 <HAL_TIM_PWM_Start+0x9e>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d109      	bne.n	800aa5c <HAL_TIM_PWM_Start+0x58>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	bf14      	ite	ne
 800aa54:	2301      	movne	r3, #1
 800aa56:	2300      	moveq	r3, #0
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	e022      	b.n	800aaa2 <HAL_TIM_PWM_Start+0x9e>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b0c      	cmp	r3, #12
 800aa60:	d109      	bne.n	800aa76 <HAL_TIM_PWM_Start+0x72>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	bf14      	ite	ne
 800aa6e:	2301      	movne	r3, #1
 800aa70:	2300      	moveq	r3, #0
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	e015      	b.n	800aaa2 <HAL_TIM_PWM_Start+0x9e>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d109      	bne.n	800aa90 <HAL_TIM_PWM_Start+0x8c>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	bf14      	ite	ne
 800aa88:	2301      	movne	r3, #1
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e008      	b.n	800aaa2 <HAL_TIM_PWM_Start+0x9e>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	bf14      	ite	ne
 800aa9c:	2301      	movne	r3, #1
 800aa9e:	2300      	moveq	r3, #0
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e0a6      	b.n	800abf8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <HAL_TIM_PWM_Start+0xb6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aab8:	e023      	b.n	800ab02 <HAL_TIM_PWM_Start+0xfe>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d104      	bne.n	800aaca <HAL_TIM_PWM_Start+0xc6>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aac8:	e01b      	b.n	800ab02 <HAL_TIM_PWM_Start+0xfe>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b08      	cmp	r3, #8
 800aace:	d104      	bne.n	800aada <HAL_TIM_PWM_Start+0xd6>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad8:	e013      	b.n	800ab02 <HAL_TIM_PWM_Start+0xfe>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b0c      	cmp	r3, #12
 800aade:	d104      	bne.n	800aaea <HAL_TIM_PWM_Start+0xe6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aae8:	e00b      	b.n	800ab02 <HAL_TIM_PWM_Start+0xfe>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b10      	cmp	r3, #16
 800aaee:	d104      	bne.n	800aafa <HAL_TIM_PWM_Start+0xf6>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaf8:	e003      	b.n	800ab02 <HAL_TIM_PWM_Start+0xfe>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2202      	movs	r2, #2
 800aafe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2201      	movs	r2, #1
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f001 f8ce 	bl	800bcac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a3a      	ldr	r2, [pc, #232]	; (800ac00 <HAL_TIM_PWM_Start+0x1fc>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d018      	beq.n	800ab4c <HAL_TIM_PWM_Start+0x148>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a39      	ldr	r2, [pc, #228]	; (800ac04 <HAL_TIM_PWM_Start+0x200>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d013      	beq.n	800ab4c <HAL_TIM_PWM_Start+0x148>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a37      	ldr	r2, [pc, #220]	; (800ac08 <HAL_TIM_PWM_Start+0x204>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d00e      	beq.n	800ab4c <HAL_TIM_PWM_Start+0x148>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a36      	ldr	r2, [pc, #216]	; (800ac0c <HAL_TIM_PWM_Start+0x208>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d009      	beq.n	800ab4c <HAL_TIM_PWM_Start+0x148>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a34      	ldr	r2, [pc, #208]	; (800ac10 <HAL_TIM_PWM_Start+0x20c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d004      	beq.n	800ab4c <HAL_TIM_PWM_Start+0x148>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a33      	ldr	r2, [pc, #204]	; (800ac14 <HAL_TIM_PWM_Start+0x210>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIM_PWM_Start+0x14c>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <HAL_TIM_PWM_Start+0x14e>
 800ab50:	2300      	movs	r3, #0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d007      	beq.n	800ab66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a25      	ldr	r2, [pc, #148]	; (800ac00 <HAL_TIM_PWM_Start+0x1fc>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d022      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab78:	d01d      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a26      	ldr	r2, [pc, #152]	; (800ac18 <HAL_TIM_PWM_Start+0x214>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d018      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a24      	ldr	r2, [pc, #144]	; (800ac1c <HAL_TIM_PWM_Start+0x218>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d013      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a23      	ldr	r2, [pc, #140]	; (800ac20 <HAL_TIM_PWM_Start+0x21c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d00e      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a19      	ldr	r2, [pc, #100]	; (800ac04 <HAL_TIM_PWM_Start+0x200>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d009      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a18      	ldr	r2, [pc, #96]	; (800ac08 <HAL_TIM_PWM_Start+0x204>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d004      	beq.n	800abb6 <HAL_TIM_PWM_Start+0x1b2>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a18      	ldr	r2, [pc, #96]	; (800ac14 <HAL_TIM_PWM_Start+0x210>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d115      	bne.n	800abe2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	4b19      	ldr	r3, [pc, #100]	; (800ac24 <HAL_TIM_PWM_Start+0x220>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b06      	cmp	r3, #6
 800abc6:	d015      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1f0>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abce:	d011      	beq.n	800abf4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0201 	orr.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe0:	e008      	b.n	800abf4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f042 0201 	orr.w	r2, r2, #1
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	e000      	b.n	800abf6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	40012c00 	.word	0x40012c00
 800ac04:	40013400 	.word	0x40013400
 800ac08:	40014000 	.word	0x40014000
 800ac0c:	40014400 	.word	0x40014400
 800ac10:	40014800 	.word	0x40014800
 800ac14:	40015000 	.word	0x40015000
 800ac18:	40000400 	.word	0x40000400
 800ac1c:	40000800 	.word	0x40000800
 800ac20:	40000c00 	.word	0x40000c00
 800ac24:	00010007 	.word	0x00010007

0800ac28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d122      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d11b      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0202 	mvn.w	r2, #2
 800ac54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb92 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ac70:	e005      	b.n	800ac7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fb84 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fb95 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d122      	bne.n	800acd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d11b      	bne.n	800acd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f06f 0204 	mvn.w	r2, #4
 800aca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fb68 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800acc4:	e005      	b.n	800acd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb5a 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fb6b 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b08      	cmp	r3, #8
 800ace4:	d122      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	f003 0308 	and.w	r3, r3, #8
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d11b      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f06f 0208 	mvn.w	r2, #8
 800acfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2204      	movs	r2, #4
 800ad02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fb3e 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ad18:	e005      	b.n	800ad26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fb30 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fb41 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b10      	cmp	r3, #16
 800ad38:	d122      	bne.n	800ad80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b10      	cmp	r3, #16
 800ad46:	d11b      	bne.n	800ad80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0210 	mvn.w	r2, #16
 800ad50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2208      	movs	r2, #8
 800ad56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fb14 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ad6c:	e005      	b.n	800ad7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fb06 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb17 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d10e      	bne.n	800adac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d107      	bne.n	800adac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0201 	mvn.w	r2, #1
 800ada4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fae0 	bl	800b36c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb6:	2b80      	cmp	r3, #128	; 0x80
 800adb8:	d10e      	bne.n	800add8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc4:	2b80      	cmp	r3, #128	; 0x80
 800adc6:	d107      	bne.n	800add8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800add0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 f8e2 	bl	800bf9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade6:	d10e      	bne.n	800ae06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf2:	2b80      	cmp	r3, #128	; 0x80
 800adf4:	d107      	bne.n	800ae06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800adfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 f8d5 	bl	800bfb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae10:	2b40      	cmp	r3, #64	; 0x40
 800ae12:	d10e      	bne.n	800ae32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d107      	bne.n	800ae32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fac5 	bl	800b3bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d10e      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d107      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f06f 0220 	mvn.w	r2, #32
 800ae56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f895 	bl	800bf88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae6c:	d10f      	bne.n	800ae8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae7c:	d107      	bne.n	800ae8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ae86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 f89b 	bl	800bfc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae9c:	d10f      	bne.n	800aebe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aeac:	d107      	bne.n	800aebe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aeb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 f88d 	bl	800bfd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aecc:	d10f      	bne.n	800aeee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aedc:	d107      	bne.n	800aeee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 f87f 	bl	800bfec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aefc:	d10f      	bne.n	800af1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af0c:	d107      	bne.n	800af1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800af16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 f871 	bl	800c000 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d101      	bne.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af3e:	2302      	movs	r3, #2
 800af40:	e0fd      	b.n	800b13e <HAL_TIM_PWM_ConfigChannel+0x216>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b14      	cmp	r3, #20
 800af4e:	f200 80f0 	bhi.w	800b132 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800af52:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af58:	0800afad 	.word	0x0800afad
 800af5c:	0800b133 	.word	0x0800b133
 800af60:	0800b133 	.word	0x0800b133
 800af64:	0800b133 	.word	0x0800b133
 800af68:	0800afed 	.word	0x0800afed
 800af6c:	0800b133 	.word	0x0800b133
 800af70:	0800b133 	.word	0x0800b133
 800af74:	0800b133 	.word	0x0800b133
 800af78:	0800b02f 	.word	0x0800b02f
 800af7c:	0800b133 	.word	0x0800b133
 800af80:	0800b133 	.word	0x0800b133
 800af84:	0800b133 	.word	0x0800b133
 800af88:	0800b06f 	.word	0x0800b06f
 800af8c:	0800b133 	.word	0x0800b133
 800af90:	0800b133 	.word	0x0800b133
 800af94:	0800b133 	.word	0x0800b133
 800af98:	0800b0b1 	.word	0x0800b0b1
 800af9c:	0800b133 	.word	0x0800b133
 800afa0:	0800b133 	.word	0x0800b133
 800afa4:	0800b133 	.word	0x0800b133
 800afa8:	0800b0f1 	.word	0x0800b0f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 fab4 	bl	800b520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0208 	orr.w	r2, r2, #8
 800afc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	699a      	ldr	r2, [r3, #24]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0204 	bic.w	r2, r2, #4
 800afd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6999      	ldr	r1, [r3, #24]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	691a      	ldr	r2, [r3, #16]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	619a      	str	r2, [r3, #24]
      break;
 800afea:	e0a3      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68b9      	ldr	r1, [r7, #8]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fb2e 	bl	800b654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699a      	ldr	r2, [r3, #24]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	699a      	ldr	r2, [r3, #24]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6999      	ldr	r1, [r3, #24]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	021a      	lsls	r2, r3, #8
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	619a      	str	r2, [r3, #24]
      break;
 800b02c:	e082      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68b9      	ldr	r1, [r7, #8]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fba1 	bl	800b77c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69da      	ldr	r2, [r3, #28]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f042 0208 	orr.w	r2, r2, #8
 800b048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69da      	ldr	r2, [r3, #28]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f022 0204 	bic.w	r2, r2, #4
 800b058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69d9      	ldr	r1, [r3, #28]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	691a      	ldr	r2, [r3, #16]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	430a      	orrs	r2, r1
 800b06a:	61da      	str	r2, [r3, #28]
      break;
 800b06c:	e062      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fc13 	bl	800b8a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69da      	ldr	r2, [r3, #28]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69da      	ldr	r2, [r3, #28]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69d9      	ldr	r1, [r3, #28]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	021a      	lsls	r2, r3, #8
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	61da      	str	r2, [r3, #28]
      break;
 800b0ae:	e041      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68b9      	ldr	r1, [r7, #8]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 fc86 	bl	800b9c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f042 0208 	orr.w	r2, r2, #8
 800b0ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f022 0204 	bic.w	r2, r2, #4
 800b0da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	691a      	ldr	r2, [r3, #16]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b0ee:	e021      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fcd0 	bl	800ba9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b10a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b11a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	021a      	lsls	r2, r3, #8
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	430a      	orrs	r2, r1
 800b12e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b130:	e000      	b.n	800b134 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop

0800b148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_TIM_ConfigClockSource+0x18>
 800b15c:	2302      	movs	r3, #2
 800b15e:	e0f5      	b.n	800b34c <HAL_TIM_ConfigClockSource+0x204>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b17e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b18a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a6e      	ldr	r2, [pc, #440]	; (800b354 <HAL_TIM_ConfigClockSource+0x20c>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	f000 80c1 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1a0:	4a6c      	ldr	r2, [pc, #432]	; (800b354 <HAL_TIM_ConfigClockSource+0x20c>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f200 80c6 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1a8:	4a6b      	ldr	r2, [pc, #428]	; (800b358 <HAL_TIM_ConfigClockSource+0x210>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	f000 80b9 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1b0:	4a69      	ldr	r2, [pc, #420]	; (800b358 <HAL_TIM_ConfigClockSource+0x210>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	f200 80be 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1b8:	4a68      	ldr	r2, [pc, #416]	; (800b35c <HAL_TIM_ConfigClockSource+0x214>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	f000 80b1 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1c0:	4a66      	ldr	r2, [pc, #408]	; (800b35c <HAL_TIM_ConfigClockSource+0x214>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	f200 80b6 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1c8:	4a65      	ldr	r2, [pc, #404]	; (800b360 <HAL_TIM_ConfigClockSource+0x218>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	f000 80a9 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1d0:	4a63      	ldr	r2, [pc, #396]	; (800b360 <HAL_TIM_ConfigClockSource+0x218>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	f200 80ae 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1d8:	4a62      	ldr	r2, [pc, #392]	; (800b364 <HAL_TIM_ConfigClockSource+0x21c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	f000 80a1 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1e0:	4a60      	ldr	r2, [pc, #384]	; (800b364 <HAL_TIM_ConfigClockSource+0x21c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	f200 80a6 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1e8:	4a5f      	ldr	r2, [pc, #380]	; (800b368 <HAL_TIM_ConfigClockSource+0x220>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	f000 8099 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b1f0:	4a5d      	ldr	r2, [pc, #372]	; (800b368 <HAL_TIM_ConfigClockSource+0x220>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	f200 809e 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1fc:	f000 8091 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b204:	f200 8096 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b20c:	f000 8089 	beq.w	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b214:	f200 808e 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b21c:	d03e      	beq.n	800b29c <HAL_TIM_ConfigClockSource+0x154>
 800b21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b222:	f200 8087 	bhi.w	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b22a:	f000 8085 	beq.w	800b338 <HAL_TIM_ConfigClockSource+0x1f0>
 800b22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b232:	d87f      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b234:	2b70      	cmp	r3, #112	; 0x70
 800b236:	d01a      	beq.n	800b26e <HAL_TIM_ConfigClockSource+0x126>
 800b238:	2b70      	cmp	r3, #112	; 0x70
 800b23a:	d87b      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b23c:	2b60      	cmp	r3, #96	; 0x60
 800b23e:	d050      	beq.n	800b2e2 <HAL_TIM_ConfigClockSource+0x19a>
 800b240:	2b60      	cmp	r3, #96	; 0x60
 800b242:	d877      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b244:	2b50      	cmp	r3, #80	; 0x50
 800b246:	d03c      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0x17a>
 800b248:	2b50      	cmp	r3, #80	; 0x50
 800b24a:	d873      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b24c:	2b40      	cmp	r3, #64	; 0x40
 800b24e:	d058      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x1ba>
 800b250:	2b40      	cmp	r3, #64	; 0x40
 800b252:	d86f      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b254:	2b30      	cmp	r3, #48	; 0x30
 800b256:	d064      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b258:	2b30      	cmp	r3, #48	; 0x30
 800b25a:	d86b      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	d060      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b260:	2b20      	cmp	r3, #32
 800b262:	d867      	bhi.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d05c      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x1da>
 800b268:	2b10      	cmp	r3, #16
 800b26a:	d05a      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b26c:	e062      	b.n	800b334 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6899      	ldr	r1, [r3, #8]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f000 fcf5 	bl	800bc6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	609a      	str	r2, [r3, #8]
      break;
 800b29a:	e04e      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6899      	ldr	r1, [r3, #8]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f000 fcde 	bl	800bc6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2be:	609a      	str	r2, [r3, #8]
      break;
 800b2c0:	e03b      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6859      	ldr	r1, [r3, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f000 fc50 	bl	800bb74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2150      	movs	r1, #80	; 0x50
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fca9 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800b2e0:	e02b      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6859      	ldr	r1, [r3, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f000 fc6f 	bl	800bbd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2160      	movs	r1, #96	; 0x60
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fc99 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800b300:	e01b      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	6859      	ldr	r1, [r3, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	461a      	mov	r2, r3
 800b310:	f000 fc30 	bl	800bb74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2140      	movs	r1, #64	; 0x40
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fc89 	bl	800bc32 <TIM_ITRx_SetConfig>
      break;
 800b320:	e00b      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f000 fc80 	bl	800bc32 <TIM_ITRx_SetConfig>
        break;
 800b332:	e002      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	00100070 	.word	0x00100070
 800b358:	00100060 	.word	0x00100060
 800b35c:	00100050 	.word	0x00100050
 800b360:	00100040 	.word	0x00100040
 800b364:	00100030 	.word	0x00100030
 800b368:	00100020 	.word	0x00100020

0800b36c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a46      	ldr	r2, [pc, #280]	; (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d017      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ee:	d013      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a43      	ldr	r2, [pc, #268]	; (800b500 <TIM_Base_SetConfig+0x130>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00f      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a42      	ldr	r2, [pc, #264]	; (800b504 <TIM_Base_SetConfig+0x134>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d00b      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a41      	ldr	r2, [pc, #260]	; (800b508 <TIM_Base_SetConfig+0x138>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d007      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a40      	ldr	r2, [pc, #256]	; (800b50c <TIM_Base_SetConfig+0x13c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_Base_SetConfig+0x48>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a3f      	ldr	r2, [pc, #252]	; (800b510 <TIM_Base_SetConfig+0x140>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d108      	bne.n	800b42a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b41e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a33      	ldr	r2, [pc, #204]	; (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d023      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b438:	d01f      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a30      	ldr	r2, [pc, #192]	; (800b500 <TIM_Base_SetConfig+0x130>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d01b      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a2f      	ldr	r2, [pc, #188]	; (800b504 <TIM_Base_SetConfig+0x134>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d017      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a2e      	ldr	r2, [pc, #184]	; (800b508 <TIM_Base_SetConfig+0x138>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d013      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a2d      	ldr	r2, [pc, #180]	; (800b50c <TIM_Base_SetConfig+0x13c>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00f      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a2d      	ldr	r2, [pc, #180]	; (800b514 <TIM_Base_SetConfig+0x144>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00b      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a2c      	ldr	r2, [pc, #176]	; (800b518 <TIM_Base_SetConfig+0x148>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d007      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a2b      	ldr	r2, [pc, #172]	; (800b51c <TIM_Base_SetConfig+0x14c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d003      	beq.n	800b47a <TIM_Base_SetConfig+0xaa>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a26      	ldr	r2, [pc, #152]	; (800b510 <TIM_Base_SetConfig+0x140>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d108      	bne.n	800b48c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a12      	ldr	r2, [pc, #72]	; (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d013      	beq.n	800b4e0 <TIM_Base_SetConfig+0x110>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a14      	ldr	r2, [pc, #80]	; (800b50c <TIM_Base_SetConfig+0x13c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d00f      	beq.n	800b4e0 <TIM_Base_SetConfig+0x110>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a14      	ldr	r2, [pc, #80]	; (800b514 <TIM_Base_SetConfig+0x144>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d00b      	beq.n	800b4e0 <TIM_Base_SetConfig+0x110>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a13      	ldr	r2, [pc, #76]	; (800b518 <TIM_Base_SetConfig+0x148>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d007      	beq.n	800b4e0 <TIM_Base_SetConfig+0x110>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a12      	ldr	r2, [pc, #72]	; (800b51c <TIM_Base_SetConfig+0x14c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d003      	beq.n	800b4e0 <TIM_Base_SetConfig+0x110>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a0d      	ldr	r2, [pc, #52]	; (800b510 <TIM_Base_SetConfig+0x140>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d103      	bne.n	800b4e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	691a      	ldr	r2, [r3, #16]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	615a      	str	r2, [r3, #20]
}
 800b4ee:	bf00      	nop
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	40012c00 	.word	0x40012c00
 800b500:	40000400 	.word	0x40000400
 800b504:	40000800 	.word	0x40000800
 800b508:	40000c00 	.word	0x40000c00
 800b50c:	40013400 	.word	0x40013400
 800b510:	40015000 	.word	0x40015000
 800b514:	40014000 	.word	0x40014000
 800b518:	40014400 	.word	0x40014400
 800b51c:	40014800 	.word	0x40014800

0800b520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	f023 0201 	bic.w	r2, r3, #1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f023 0303 	bic.w	r3, r3, #3
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f023 0302 	bic.w	r3, r3, #2
 800b56c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a30      	ldr	r2, [pc, #192]	; (800b63c <TIM_OC1_SetConfig+0x11c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d013      	beq.n	800b5a8 <TIM_OC1_SetConfig+0x88>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a2f      	ldr	r2, [pc, #188]	; (800b640 <TIM_OC1_SetConfig+0x120>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d00f      	beq.n	800b5a8 <TIM_OC1_SetConfig+0x88>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a2e      	ldr	r2, [pc, #184]	; (800b644 <TIM_OC1_SetConfig+0x124>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d00b      	beq.n	800b5a8 <TIM_OC1_SetConfig+0x88>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a2d      	ldr	r2, [pc, #180]	; (800b648 <TIM_OC1_SetConfig+0x128>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d007      	beq.n	800b5a8 <TIM_OC1_SetConfig+0x88>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a2c      	ldr	r2, [pc, #176]	; (800b64c <TIM_OC1_SetConfig+0x12c>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d003      	beq.n	800b5a8 <TIM_OC1_SetConfig+0x88>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a2b      	ldr	r2, [pc, #172]	; (800b650 <TIM_OC1_SetConfig+0x130>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d10c      	bne.n	800b5c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f023 0308 	bic.w	r3, r3, #8
 800b5ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f023 0304 	bic.w	r3, r3, #4
 800b5c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a1d      	ldr	r2, [pc, #116]	; (800b63c <TIM_OC1_SetConfig+0x11c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d013      	beq.n	800b5f2 <TIM_OC1_SetConfig+0xd2>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a1c      	ldr	r2, [pc, #112]	; (800b640 <TIM_OC1_SetConfig+0x120>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d00f      	beq.n	800b5f2 <TIM_OC1_SetConfig+0xd2>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a1b      	ldr	r2, [pc, #108]	; (800b644 <TIM_OC1_SetConfig+0x124>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d00b      	beq.n	800b5f2 <TIM_OC1_SetConfig+0xd2>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a1a      	ldr	r2, [pc, #104]	; (800b648 <TIM_OC1_SetConfig+0x128>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d007      	beq.n	800b5f2 <TIM_OC1_SetConfig+0xd2>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a19      	ldr	r2, [pc, #100]	; (800b64c <TIM_OC1_SetConfig+0x12c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d003      	beq.n	800b5f2 <TIM_OC1_SetConfig+0xd2>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a18      	ldr	r2, [pc, #96]	; (800b650 <TIM_OC1_SetConfig+0x130>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d111      	bne.n	800b616 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	4313      	orrs	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	4313      	orrs	r3, r2
 800b614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	621a      	str	r2, [r3, #32]
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	40012c00 	.word	0x40012c00
 800b640:	40013400 	.word	0x40013400
 800b644:	40014000 	.word	0x40014000
 800b648:	40014400 	.word	0x40014400
 800b64c:	40014800 	.word	0x40014800
 800b650:	40015000 	.word	0x40015000

0800b654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	f023 0210 	bic.w	r2, r3, #16
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f023 0320 	bic.w	r3, r3, #32
 800b6a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a2c      	ldr	r2, [pc, #176]	; (800b764 <TIM_OC2_SetConfig+0x110>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d007      	beq.n	800b6c8 <TIM_OC2_SetConfig+0x74>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a2b      	ldr	r2, [pc, #172]	; (800b768 <TIM_OC2_SetConfig+0x114>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_OC2_SetConfig+0x74>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a2a      	ldr	r2, [pc, #168]	; (800b76c <TIM_OC2_SetConfig+0x118>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d10d      	bne.n	800b6e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	011b      	lsls	r3, r3, #4
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a1f      	ldr	r2, [pc, #124]	; (800b764 <TIM_OC2_SetConfig+0x110>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d013      	beq.n	800b714 <TIM_OC2_SetConfig+0xc0>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a1e      	ldr	r2, [pc, #120]	; (800b768 <TIM_OC2_SetConfig+0x114>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d00f      	beq.n	800b714 <TIM_OC2_SetConfig+0xc0>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a1e      	ldr	r2, [pc, #120]	; (800b770 <TIM_OC2_SetConfig+0x11c>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d00b      	beq.n	800b714 <TIM_OC2_SetConfig+0xc0>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a1d      	ldr	r2, [pc, #116]	; (800b774 <TIM_OC2_SetConfig+0x120>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d007      	beq.n	800b714 <TIM_OC2_SetConfig+0xc0>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <TIM_OC2_SetConfig+0x124>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d003      	beq.n	800b714 <TIM_OC2_SetConfig+0xc0>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a17      	ldr	r2, [pc, #92]	; (800b76c <TIM_OC2_SetConfig+0x118>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d113      	bne.n	800b73c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b71a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	4313      	orrs	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	621a      	str	r2, [r3, #32]
}
 800b756:	bf00      	nop
 800b758:	371c      	adds	r7, #28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	40012c00 	.word	0x40012c00
 800b768:	40013400 	.word	0x40013400
 800b76c:	40015000 	.word	0x40015000
 800b770:	40014000 	.word	0x40014000
 800b774:	40014400 	.word	0x40014400
 800b778:	40014800 	.word	0x40014800

0800b77c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 0303 	bic.w	r3, r3, #3
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a2b      	ldr	r2, [pc, #172]	; (800b888 <TIM_OC3_SetConfig+0x10c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d007      	beq.n	800b7ee <TIM_OC3_SetConfig+0x72>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a2a      	ldr	r2, [pc, #168]	; (800b88c <TIM_OC3_SetConfig+0x110>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d003      	beq.n	800b7ee <TIM_OC3_SetConfig+0x72>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a29      	ldr	r2, [pc, #164]	; (800b890 <TIM_OC3_SetConfig+0x114>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d10d      	bne.n	800b80a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1e      	ldr	r2, [pc, #120]	; (800b888 <TIM_OC3_SetConfig+0x10c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d013      	beq.n	800b83a <TIM_OC3_SetConfig+0xbe>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1d      	ldr	r2, [pc, #116]	; (800b88c <TIM_OC3_SetConfig+0x110>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d00f      	beq.n	800b83a <TIM_OC3_SetConfig+0xbe>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1d      	ldr	r2, [pc, #116]	; (800b894 <TIM_OC3_SetConfig+0x118>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00b      	beq.n	800b83a <TIM_OC3_SetConfig+0xbe>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1c      	ldr	r2, [pc, #112]	; (800b898 <TIM_OC3_SetConfig+0x11c>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d007      	beq.n	800b83a <TIM_OC3_SetConfig+0xbe>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a1b      	ldr	r2, [pc, #108]	; (800b89c <TIM_OC3_SetConfig+0x120>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d003      	beq.n	800b83a <TIM_OC3_SetConfig+0xbe>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a16      	ldr	r2, [pc, #88]	; (800b890 <TIM_OC3_SetConfig+0x114>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d113      	bne.n	800b862 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	4313      	orrs	r3, r2
 800b854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	011b      	lsls	r3, r3, #4
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	4313      	orrs	r3, r2
 800b860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	621a      	str	r2, [r3, #32]
}
 800b87c:	bf00      	nop
 800b87e:	371c      	adds	r7, #28
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	40012c00 	.word	0x40012c00
 800b88c:	40013400 	.word	0x40013400
 800b890:	40015000 	.word	0x40015000
 800b894:	40014000 	.word	0x40014000
 800b898:	40014400 	.word	0x40014400
 800b89c:	40014800 	.word	0x40014800

0800b8a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	031b      	lsls	r3, r3, #12
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a2c      	ldr	r2, [pc, #176]	; (800b9b0 <TIM_OC4_SetConfig+0x110>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d007      	beq.n	800b914 <TIM_OC4_SetConfig+0x74>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a2b      	ldr	r2, [pc, #172]	; (800b9b4 <TIM_OC4_SetConfig+0x114>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d003      	beq.n	800b914 <TIM_OC4_SetConfig+0x74>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a2a      	ldr	r2, [pc, #168]	; (800b9b8 <TIM_OC4_SetConfig+0x118>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d10d      	bne.n	800b930 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b91a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	031b      	lsls	r3, r3, #12
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	4313      	orrs	r3, r2
 800b926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b92e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a1f      	ldr	r2, [pc, #124]	; (800b9b0 <TIM_OC4_SetConfig+0x110>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d013      	beq.n	800b960 <TIM_OC4_SetConfig+0xc0>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <TIM_OC4_SetConfig+0x114>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d00f      	beq.n	800b960 <TIM_OC4_SetConfig+0xc0>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1e      	ldr	r2, [pc, #120]	; (800b9bc <TIM_OC4_SetConfig+0x11c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d00b      	beq.n	800b960 <TIM_OC4_SetConfig+0xc0>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a1d      	ldr	r2, [pc, #116]	; (800b9c0 <TIM_OC4_SetConfig+0x120>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d007      	beq.n	800b960 <TIM_OC4_SetConfig+0xc0>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a1c      	ldr	r2, [pc, #112]	; (800b9c4 <TIM_OC4_SetConfig+0x124>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d003      	beq.n	800b960 <TIM_OC4_SetConfig+0xc0>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a17      	ldr	r2, [pc, #92]	; (800b9b8 <TIM_OC4_SetConfig+0x118>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d113      	bne.n	800b988 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b966:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b96e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	019b      	lsls	r3, r3, #6
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	4313      	orrs	r3, r2
 800b97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	019b      	lsls	r3, r3, #6
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	4313      	orrs	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	621a      	str	r2, [r3, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	40012c00 	.word	0x40012c00
 800b9b4:	40013400 	.word	0x40013400
 800b9b8:	40015000 	.word	0x40015000
 800b9bc:	40014000 	.word	0x40014000
 800b9c0:	40014400 	.word	0x40014400
 800b9c4:	40014800 	.word	0x40014800

0800b9c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	041b      	lsls	r3, r3, #16
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a19      	ldr	r2, [pc, #100]	; (800ba84 <TIM_OC5_SetConfig+0xbc>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d013      	beq.n	800ba4a <TIM_OC5_SetConfig+0x82>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a18      	ldr	r2, [pc, #96]	; (800ba88 <TIM_OC5_SetConfig+0xc0>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00f      	beq.n	800ba4a <TIM_OC5_SetConfig+0x82>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a17      	ldr	r2, [pc, #92]	; (800ba8c <TIM_OC5_SetConfig+0xc4>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00b      	beq.n	800ba4a <TIM_OC5_SetConfig+0x82>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a16      	ldr	r2, [pc, #88]	; (800ba90 <TIM_OC5_SetConfig+0xc8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d007      	beq.n	800ba4a <TIM_OC5_SetConfig+0x82>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a15      	ldr	r2, [pc, #84]	; (800ba94 <TIM_OC5_SetConfig+0xcc>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d003      	beq.n	800ba4a <TIM_OC5_SetConfig+0x82>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a14      	ldr	r2, [pc, #80]	; (800ba98 <TIM_OC5_SetConfig+0xd0>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d109      	bne.n	800ba5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	021b      	lsls	r3, r3, #8
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	621a      	str	r2, [r3, #32]
}
 800ba78:	bf00      	nop
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	40012c00 	.word	0x40012c00
 800ba88:	40013400 	.word	0x40013400
 800ba8c:	40014000 	.word	0x40014000
 800ba90:	40014400 	.word	0x40014400
 800ba94:	40014800 	.word	0x40014800
 800ba98:	40015000 	.word	0x40015000

0800ba9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800baca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	051b      	lsls	r3, r3, #20
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a1a      	ldr	r2, [pc, #104]	; (800bb5c <TIM_OC6_SetConfig+0xc0>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d013      	beq.n	800bb20 <TIM_OC6_SetConfig+0x84>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a19      	ldr	r2, [pc, #100]	; (800bb60 <TIM_OC6_SetConfig+0xc4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d00f      	beq.n	800bb20 <TIM_OC6_SetConfig+0x84>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a18      	ldr	r2, [pc, #96]	; (800bb64 <TIM_OC6_SetConfig+0xc8>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00b      	beq.n	800bb20 <TIM_OC6_SetConfig+0x84>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <TIM_OC6_SetConfig+0xcc>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d007      	beq.n	800bb20 <TIM_OC6_SetConfig+0x84>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a16      	ldr	r2, [pc, #88]	; (800bb6c <TIM_OC6_SetConfig+0xd0>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_OC6_SetConfig+0x84>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a15      	ldr	r2, [pc, #84]	; (800bb70 <TIM_OC6_SetConfig+0xd4>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d109      	bne.n	800bb34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	029b      	lsls	r3, r3, #10
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	621a      	str	r2, [r3, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	40012c00 	.word	0x40012c00
 800bb60:	40013400 	.word	0x40013400
 800bb64:	40014000 	.word	0x40014000
 800bb68:	40014400 	.word	0x40014400
 800bb6c:	40014800 	.word	0x40014800
 800bb70:	40015000 	.word	0x40015000

0800bb74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6a1b      	ldr	r3, [r3, #32]
 800bb84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	f023 0201 	bic.w	r2, r3, #1
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	011b      	lsls	r3, r3, #4
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f023 030a 	bic.w	r3, r3, #10
 800bbb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	621a      	str	r2, [r3, #32]
}
 800bbc6:	bf00      	nop
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b087      	sub	sp, #28
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	f023 0210 	bic.w	r2, r3, #16
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	031b      	lsls	r3, r3, #12
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	621a      	str	r2, [r3, #32]
}
 800bc26:	bf00      	nop
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	f043 0307 	orr.w	r3, r3, #7
 800bc58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	609a      	str	r2, [r3, #8]
}
 800bc60:	bf00      	nop
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	021a      	lsls	r2, r3, #8
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	609a      	str	r2, [r3, #8]
}
 800bca0:	bf00      	nop
 800bca2:	371c      	adds	r7, #28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f003 031f 	and.w	r3, r3, #31
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	43db      	mvns	r3, r3
 800bcce:	401a      	ands	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6a1a      	ldr	r2, [r3, #32]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f003 031f 	and.w	r3, r3, #31
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	fa01 f303 	lsl.w	r3, r1, r3
 800bce4:	431a      	orrs	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	621a      	str	r2, [r3, #32]
}
 800bcea:	bf00      	nop
 800bcec:	371c      	adds	r7, #28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
	...

0800bcf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d101      	bne.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e074      	b.n	800bdfa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a34      	ldr	r2, [pc, #208]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d009      	beq.n	800bd4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a33      	ldr	r2, [pc, #204]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d004      	beq.n	800bd4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a31      	ldr	r2, [pc, #196]	; (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d108      	bne.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a21      	ldr	r2, [pc, #132]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d022      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd90:	d01d      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a1f      	ldr	r2, [pc, #124]	; (800be14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d018      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a1d      	ldr	r2, [pc, #116]	; (800be18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d013      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a1c      	ldr	r2, [pc, #112]	; (800be1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d00e      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a15      	ldr	r2, [pc, #84]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d009      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a18      	ldr	r2, [pc, #96]	; (800be20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d004      	beq.n	800bdce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a11      	ldr	r2, [pc, #68]	; (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d10c      	bne.n	800bde8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40012c00 	.word	0x40012c00
 800be0c:	40013400 	.word	0x40013400
 800be10:	40015000 	.word	0x40015000
 800be14:	40000400 	.word	0x40000400
 800be18:	40000800 	.word	0x40000800
 800be1c:	40000c00 	.word	0x40000c00
 800be20:	40014000 	.word	0x40014000

0800be24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d101      	bne.n	800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be3c:	2302      	movs	r3, #2
 800be3e:	e096      	b.n	800bf6e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	4313      	orrs	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4313      	orrs	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	4313      	orrs	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	041b      	lsls	r3, r3, #16
 800beb6:	4313      	orrs	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a2f      	ldr	r2, [pc, #188]	; (800bf7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d009      	beq.n	800bed8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a2d      	ldr	r2, [pc, #180]	; (800bf80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d004      	beq.n	800bed8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a2c      	ldr	r2, [pc, #176]	; (800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d106      	bne.n	800bee6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	69db      	ldr	r3, [r3, #28]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a24      	ldr	r2, [pc, #144]	; (800bf7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d009      	beq.n	800bf04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a22      	ldr	r2, [pc, #136]	; (800bf80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d004      	beq.n	800bf04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a21      	ldr	r2, [pc, #132]	; (800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d12b      	bne.n	800bf5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	051b      	lsls	r3, r3, #20
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d009      	beq.n	800bf4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a10      	ldr	r2, [pc, #64]	; (800bf80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d004      	beq.n	800bf4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a0e      	ldr	r2, [pc, #56]	; (800bf84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d106      	bne.n	800bf5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	40012c00 	.word	0x40012c00
 800bf80:	40013400 	.word	0x40013400
 800bf84:	40015000 	.word	0x40015000

0800bf88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e042      	b.n	800c0ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7f9 fe47 	bl	8005ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2224      	movs	r2, #36	; 0x24
 800c042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0201 	bic.w	r2, r2, #1
 800c054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fb5c 	bl	800c714 <UART_SetConfig>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d101      	bne.n	800c066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e022      	b.n	800c0ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fe1a 	bl	800cca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689a      	ldr	r2, [r3, #8]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fea1 	bl	800cdec <UART_CheckIdleState>
 800c0aa:	4603      	mov	r3, r0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08a      	sub	sp, #40	; 0x28
 800c0b8:	af02      	add	r7, sp, #8
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	f040 8083 	bne.w	800c1d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <HAL_UART_Transmit+0x28>
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e07b      	b.n	800c1d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <HAL_UART_Transmit+0x3a>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e074      	b.n	800c1d8 <HAL_UART_Transmit+0x124>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2221      	movs	r2, #33	; 0x21
 800c102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c106:	f7f9 fedd 	bl	8005ec4 <HAL_GetTick>
 800c10a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	88fa      	ldrh	r2, [r7, #6]
 800c110:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	88fa      	ldrh	r2, [r7, #6]
 800c118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c124:	d108      	bne.n	800c138 <HAL_UART_Transmit+0x84>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d104      	bne.n	800c138 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	61bb      	str	r3, [r7, #24]
 800c136:	e003      	b.n	800c140 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c148:	e02c      	b.n	800c1a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2200      	movs	r2, #0
 800c152:	2180      	movs	r1, #128	; 0x80
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 fe94 	bl	800ce82 <UART_WaitOnFlagUntilTimeout>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c160:	2303      	movs	r3, #3
 800c162:	e039      	b.n	800c1d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10b      	bne.n	800c182 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c178:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	3302      	adds	r3, #2
 800c17e:	61bb      	str	r3, [r7, #24]
 800c180:	e007      	b.n	800c192 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	781a      	ldrb	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	3301      	adds	r3, #1
 800c190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c198:	b29b      	uxth	r3, r3
 800c19a:	3b01      	subs	r3, #1
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1cc      	bne.n	800c14a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2140      	movs	r1, #64	; 0x40
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 fe61 	bl	800ce82 <UART_WaitOnFlagUntilTimeout>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e006      	b.n	800c1d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e000      	b.n	800c1d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c1d6:	2302      	movs	r3, #2
  }
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f4:	2b20      	cmp	r3, #32
 800c1f6:	d131      	bne.n	800c25c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <HAL_UART_Receive_IT+0x24>
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	e02a      	b.n	800c25e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <HAL_UART_Receive_IT+0x36>
 800c212:	2302      	movs	r3, #2
 800c214:	e023      	b.n	800c25e <HAL_UART_Receive_IT+0x7e>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a0f      	ldr	r2, [pc, #60]	; (800c268 <HAL_UART_Receive_IT+0x88>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00e      	beq.n	800c24c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d007      	beq.n	800c24c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c24a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	461a      	mov	r2, r3
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fe96 	bl	800cf84 <UART_Start_Receive_IT>
 800c258:	4603      	mov	r3, r0
 800c25a:	e000      	b.n	800c25e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c25c:	2302      	movs	r3, #2
  }
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	40008000 	.word	0x40008000

0800c26c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c28c:	69fa      	ldr	r2, [r7, #28]
 800c28e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c292:	4013      	ands	r3, r2
 800c294:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d118      	bne.n	800c2ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d013      	beq.n	800c2ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	f003 0320 	and.w	r3, r3, #32
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d104      	bne.n	800c2ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 81fb 	beq.w	800c6ba <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	4798      	blx	r3
      }
      return;
 800c2cc:	e1f5      	b.n	800c6ba <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80ef 	beq.w	800c4b4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	4b73      	ldr	r3, [pc, #460]	; (800c4a8 <HAL_UART_IRQHandler+0x23c>)
 800c2da:	4013      	ands	r3, r2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	4b72      	ldr	r3, [pc, #456]	; (800c4ac <HAL_UART_IRQHandler+0x240>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 80e4 	beq.w	800c4b4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d010      	beq.n	800c318 <HAL_UART_IRQHandler+0xac>
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2201      	movs	r2, #1
 800c306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30e:	f043 0201 	orr.w	r2, r3, #1
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f003 0302 	and.w	r3, r3, #2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d010      	beq.n	800c344 <HAL_UART_IRQHandler+0xd8>
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2202      	movs	r2, #2
 800c332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c33a:	f043 0204 	orr.w	r2, r3, #4
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d010      	beq.n	800c370 <HAL_UART_IRQHandler+0x104>
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2204      	movs	r2, #4
 800c35e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c366:	f043 0202 	orr.w	r2, r3, #2
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	f003 0308 	and.w	r3, r3, #8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d015      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	f003 0320 	and.w	r3, r3, #32
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	4b48      	ldr	r3, [pc, #288]	; (800c4a8 <HAL_UART_IRQHandler+0x23c>)
 800c388:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2208      	movs	r2, #8
 800c394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c39c:	f043 0208 	orr.w	r2, r3, #8
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d011      	beq.n	800c3d4 <HAL_UART_IRQHandler+0x168>
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00c      	beq.n	800c3d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ca:	f043 0220 	orr.w	r2, r3, #32
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 816f 	beq.w	800c6be <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d011      	beq.n	800c40e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	f003 0320 	and.w	r3, r3, #32
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d007      	beq.n	800c40e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c414:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c420:	2b40      	cmp	r3, #64	; 0x40
 800c422:	d004      	beq.n	800c42e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d031      	beq.n	800c492 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fe66 	bl	800d100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43e:	2b40      	cmp	r3, #64	; 0x40
 800c440:	d123      	bne.n	800c48a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689a      	ldr	r2, [r3, #8]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c450:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d013      	beq.n	800c482 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45e:	4a14      	ldr	r2, [pc, #80]	; (800c4b0 <HAL_UART_IRQHandler+0x244>)
 800c460:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	4618      	mov	r0, r3
 800c468:	f7fb fa78 	bl	800795c <HAL_DMA_Abort_IT>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d017      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c480:	e00f      	b.n	800c4a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f930 	bl	800c6e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c488:	e00b      	b.n	800c4a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f92c 	bl	800c6e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c490:	e007      	b.n	800c4a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f928 	bl	800c6e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c4a0:	e10d      	b.n	800c6be <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a2:	bf00      	nop
    return;
 800c4a4:	e10b      	b.n	800c6be <HAL_UART_IRQHandler+0x452>
 800c4a6:	bf00      	nop
 800c4a8:	10000001 	.word	0x10000001
 800c4ac:	04000120 	.word	0x04000120
 800c4b0:	0800d165 	.word	0x0800d165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	f040 80ab 	bne.w	800c614 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	f003 0310 	and.w	r3, r3, #16
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 80a5 	beq.w	800c614 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	f003 0310 	and.w	r3, r3, #16
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 809f 	beq.w	800c614 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2210      	movs	r2, #16
 800c4dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e8:	2b40      	cmp	r3, #64	; 0x40
 800c4ea:	d155      	bne.n	800c598 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c4f6:	893b      	ldrh	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80e2 	beq.w	800c6c2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c504:	893a      	ldrh	r2, [r7, #8]
 800c506:	429a      	cmp	r2, r3
 800c508:	f080 80db 	bcs.w	800c6c2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	893a      	ldrh	r2, [r7, #8]
 800c510:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b00      	cmp	r3, #0
 800c522:	d12b      	bne.n	800c57c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c532:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689a      	ldr	r2, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f022 0201 	bic.w	r2, r2, #1
 800c542:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689a      	ldr	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c552:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2220      	movs	r2, #32
 800c558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0210 	bic.w	r2, r2, #16
 800c570:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb f997 	bl	80078aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f8b3 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c596:	e094      	b.n	800c6c2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 8087 	beq.w	800c6c6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c5b8:	897b      	ldrh	r3, [r7, #10]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 8083 	beq.w	800c6c6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	6812      	ldr	r2, [r2, #0]
 800c5da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f022 0210 	bic.w	r2, r2, #16
 800c606:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c608:	897b      	ldrh	r3, [r7, #10]
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f875 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c612:	e058      	b.n	800c6c6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <HAL_UART_IRQHandler+0x3ce>
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d008      	beq.n	800c63a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 f8a2 	bl	800d77c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c638:	e048      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c640:	2b00      	cmp	r3, #0
 800c642:	d012      	beq.n	800c66a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d104      	bne.n	800c658 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d008      	beq.n	800c66a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d034      	beq.n	800c6ca <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	4798      	blx	r3
    }
    return;
 800c668:	e02f      	b.n	800c6ca <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c670:	2b00      	cmp	r3, #0
 800c672:	d008      	beq.n	800c686 <HAL_UART_IRQHandler+0x41a>
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fd86 	bl	800d190 <UART_EndTransmit_IT>
    return;
 800c684:	e022      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d008      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x436>
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 f882 	bl	800d7a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6a0:	e014      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00f      	beq.n	800c6cc <HAL_UART_IRQHandler+0x460>
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	da0c      	bge.n	800c6cc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 f86c 	bl	800d790 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6b8:	e008      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
      return;
 800c6ba:	bf00      	nop
 800c6bc:	e006      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
    return;
 800c6be:	bf00      	nop
 800c6c0:	e004      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
      return;
 800c6c2:	bf00      	nop
 800c6c4:	e002      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
      return;
 800c6c6:	bf00      	nop
 800c6c8:	e000      	b.n	800c6cc <HAL_UART_IRQHandler+0x460>
    return;
 800c6ca:	bf00      	nop
  }
}
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop

0800c6d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c714:	b5b0      	push	{r4, r5, r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689a      	ldr	r2, [r3, #8]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	4313      	orrs	r3, r2
 800c736:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	4bb1      	ldr	r3, [pc, #708]	; (800ca04 <UART_SetConfig+0x2f0>)
 800c740:	4013      	ands	r3, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6812      	ldr	r2, [r2, #0]
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	430b      	orrs	r3, r1
 800c74a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68da      	ldr	r2, [r3, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	430a      	orrs	r2, r1
 800c760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4aa6      	ldr	r2, [pc, #664]	; (800ca08 <UART_SetConfig+0x2f4>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d004      	beq.n	800c77c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	4313      	orrs	r3, r2
 800c77a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c786:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6812      	ldr	r2, [r2, #0]
 800c78e:	69f9      	ldr	r1, [r7, #28]
 800c790:	430b      	orrs	r3, r1
 800c792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	f023 010f 	bic.w	r1, r3, #15
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a97      	ldr	r2, [pc, #604]	; (800ca0c <UART_SetConfig+0x2f8>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d120      	bne.n	800c7f6 <UART_SetConfig+0xe2>
 800c7b4:	4b96      	ldr	r3, [pc, #600]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ba:	f003 0303 	and.w	r3, r3, #3
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d816      	bhi.n	800c7f0 <UART_SetConfig+0xdc>
 800c7c2:	a201      	add	r2, pc, #4	; (adr r2, 800c7c8 <UART_SetConfig+0xb4>)
 800c7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c8:	0800c7d9 	.word	0x0800c7d9
 800c7cc:	0800c7e5 	.word	0x0800c7e5
 800c7d0:	0800c7df 	.word	0x0800c7df
 800c7d4:	0800c7eb 	.word	0x0800c7eb
 800c7d8:	2301      	movs	r3, #1
 800c7da:	76fb      	strb	r3, [r7, #27]
 800c7dc:	e0e7      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	76fb      	strb	r3, [r7, #27]
 800c7e2:	e0e4      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	76fb      	strb	r3, [r7, #27]
 800c7e8:	e0e1      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c7ea:	2308      	movs	r3, #8
 800c7ec:	76fb      	strb	r3, [r7, #27]
 800c7ee:	e0de      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	76fb      	strb	r3, [r7, #27]
 800c7f4:	e0db      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a86      	ldr	r2, [pc, #536]	; (800ca14 <UART_SetConfig+0x300>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d132      	bne.n	800c866 <UART_SetConfig+0x152>
 800c800:	4b83      	ldr	r3, [pc, #524]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c806:	f003 030c 	and.w	r3, r3, #12
 800c80a:	2b0c      	cmp	r3, #12
 800c80c:	d828      	bhi.n	800c860 <UART_SetConfig+0x14c>
 800c80e:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <UART_SetConfig+0x100>)
 800c810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c814:	0800c849 	.word	0x0800c849
 800c818:	0800c861 	.word	0x0800c861
 800c81c:	0800c861 	.word	0x0800c861
 800c820:	0800c861 	.word	0x0800c861
 800c824:	0800c855 	.word	0x0800c855
 800c828:	0800c861 	.word	0x0800c861
 800c82c:	0800c861 	.word	0x0800c861
 800c830:	0800c861 	.word	0x0800c861
 800c834:	0800c84f 	.word	0x0800c84f
 800c838:	0800c861 	.word	0x0800c861
 800c83c:	0800c861 	.word	0x0800c861
 800c840:	0800c861 	.word	0x0800c861
 800c844:	0800c85b 	.word	0x0800c85b
 800c848:	2300      	movs	r3, #0
 800c84a:	76fb      	strb	r3, [r7, #27]
 800c84c:	e0af      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c84e:	2302      	movs	r3, #2
 800c850:	76fb      	strb	r3, [r7, #27]
 800c852:	e0ac      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c854:	2304      	movs	r3, #4
 800c856:	76fb      	strb	r3, [r7, #27]
 800c858:	e0a9      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c85a:	2308      	movs	r3, #8
 800c85c:	76fb      	strb	r3, [r7, #27]
 800c85e:	e0a6      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c860:	2310      	movs	r3, #16
 800c862:	76fb      	strb	r3, [r7, #27]
 800c864:	e0a3      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a6b      	ldr	r2, [pc, #428]	; (800ca18 <UART_SetConfig+0x304>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d120      	bne.n	800c8b2 <UART_SetConfig+0x19e>
 800c870:	4b67      	ldr	r3, [pc, #412]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c876:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c87a:	2b30      	cmp	r3, #48	; 0x30
 800c87c:	d013      	beq.n	800c8a6 <UART_SetConfig+0x192>
 800c87e:	2b30      	cmp	r3, #48	; 0x30
 800c880:	d814      	bhi.n	800c8ac <UART_SetConfig+0x198>
 800c882:	2b20      	cmp	r3, #32
 800c884:	d009      	beq.n	800c89a <UART_SetConfig+0x186>
 800c886:	2b20      	cmp	r3, #32
 800c888:	d810      	bhi.n	800c8ac <UART_SetConfig+0x198>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <UART_SetConfig+0x180>
 800c88e:	2b10      	cmp	r3, #16
 800c890:	d006      	beq.n	800c8a0 <UART_SetConfig+0x18c>
 800c892:	e00b      	b.n	800c8ac <UART_SetConfig+0x198>
 800c894:	2300      	movs	r3, #0
 800c896:	76fb      	strb	r3, [r7, #27]
 800c898:	e089      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c89a:	2302      	movs	r3, #2
 800c89c:	76fb      	strb	r3, [r7, #27]
 800c89e:	e086      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8a0:	2304      	movs	r3, #4
 800c8a2:	76fb      	strb	r3, [r7, #27]
 800c8a4:	e083      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8a6:	2308      	movs	r3, #8
 800c8a8:	76fb      	strb	r3, [r7, #27]
 800c8aa:	e080      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8ac:	2310      	movs	r3, #16
 800c8ae:	76fb      	strb	r3, [r7, #27]
 800c8b0:	e07d      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a59      	ldr	r2, [pc, #356]	; (800ca1c <UART_SetConfig+0x308>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d120      	bne.n	800c8fe <UART_SetConfig+0x1ea>
 800c8bc:	4b54      	ldr	r3, [pc, #336]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c8c6:	2bc0      	cmp	r3, #192	; 0xc0
 800c8c8:	d013      	beq.n	800c8f2 <UART_SetConfig+0x1de>
 800c8ca:	2bc0      	cmp	r3, #192	; 0xc0
 800c8cc:	d814      	bhi.n	800c8f8 <UART_SetConfig+0x1e4>
 800c8ce:	2b80      	cmp	r3, #128	; 0x80
 800c8d0:	d009      	beq.n	800c8e6 <UART_SetConfig+0x1d2>
 800c8d2:	2b80      	cmp	r3, #128	; 0x80
 800c8d4:	d810      	bhi.n	800c8f8 <UART_SetConfig+0x1e4>
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <UART_SetConfig+0x1cc>
 800c8da:	2b40      	cmp	r3, #64	; 0x40
 800c8dc:	d006      	beq.n	800c8ec <UART_SetConfig+0x1d8>
 800c8de:	e00b      	b.n	800c8f8 <UART_SetConfig+0x1e4>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	76fb      	strb	r3, [r7, #27]
 800c8e4:	e063      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	76fb      	strb	r3, [r7, #27]
 800c8ea:	e060      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	76fb      	strb	r3, [r7, #27]
 800c8f0:	e05d      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8f2:	2308      	movs	r3, #8
 800c8f4:	76fb      	strb	r3, [r7, #27]
 800c8f6:	e05a      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	76fb      	strb	r3, [r7, #27]
 800c8fc:	e057      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a47      	ldr	r2, [pc, #284]	; (800ca20 <UART_SetConfig+0x30c>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d125      	bne.n	800c954 <UART_SetConfig+0x240>
 800c908:	4b41      	ldr	r3, [pc, #260]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c90e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c916:	d017      	beq.n	800c948 <UART_SetConfig+0x234>
 800c918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c91c:	d817      	bhi.n	800c94e <UART_SetConfig+0x23a>
 800c91e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c922:	d00b      	beq.n	800c93c <UART_SetConfig+0x228>
 800c924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c928:	d811      	bhi.n	800c94e <UART_SetConfig+0x23a>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <UART_SetConfig+0x222>
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c932:	d006      	beq.n	800c942 <UART_SetConfig+0x22e>
 800c934:	e00b      	b.n	800c94e <UART_SetConfig+0x23a>
 800c936:	2300      	movs	r3, #0
 800c938:	76fb      	strb	r3, [r7, #27]
 800c93a:	e038      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c93c:	2302      	movs	r3, #2
 800c93e:	76fb      	strb	r3, [r7, #27]
 800c940:	e035      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c942:	2304      	movs	r3, #4
 800c944:	76fb      	strb	r3, [r7, #27]
 800c946:	e032      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c948:	2308      	movs	r3, #8
 800c94a:	76fb      	strb	r3, [r7, #27]
 800c94c:	e02f      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c94e:	2310      	movs	r3, #16
 800c950:	76fb      	strb	r3, [r7, #27]
 800c952:	e02c      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a2b      	ldr	r2, [pc, #172]	; (800ca08 <UART_SetConfig+0x2f4>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d125      	bne.n	800c9aa <UART_SetConfig+0x296>
 800c95e:	4b2c      	ldr	r3, [pc, #176]	; (800ca10 <UART_SetConfig+0x2fc>)
 800c960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c96c:	d017      	beq.n	800c99e <UART_SetConfig+0x28a>
 800c96e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c972:	d817      	bhi.n	800c9a4 <UART_SetConfig+0x290>
 800c974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c978:	d00b      	beq.n	800c992 <UART_SetConfig+0x27e>
 800c97a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c97e:	d811      	bhi.n	800c9a4 <UART_SetConfig+0x290>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <UART_SetConfig+0x278>
 800c984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c988:	d006      	beq.n	800c998 <UART_SetConfig+0x284>
 800c98a:	e00b      	b.n	800c9a4 <UART_SetConfig+0x290>
 800c98c:	2300      	movs	r3, #0
 800c98e:	76fb      	strb	r3, [r7, #27]
 800c990:	e00d      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c992:	2302      	movs	r3, #2
 800c994:	76fb      	strb	r3, [r7, #27]
 800c996:	e00a      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c998:	2304      	movs	r3, #4
 800c99a:	76fb      	strb	r3, [r7, #27]
 800c99c:	e007      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c99e:	2308      	movs	r3, #8
 800c9a0:	76fb      	strb	r3, [r7, #27]
 800c9a2:	e004      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	76fb      	strb	r3, [r7, #27]
 800c9a8:	e001      	b.n	800c9ae <UART_SetConfig+0x29a>
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <UART_SetConfig+0x2f4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	f040 809f 	bne.w	800caf8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9ba:	7efb      	ldrb	r3, [r7, #27]
 800c9bc:	2b08      	cmp	r3, #8
 800c9be:	d837      	bhi.n	800ca30 <UART_SetConfig+0x31c>
 800c9c0:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <UART_SetConfig+0x2b4>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800ca31 	.word	0x0800ca31
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	0800ca31 	.word	0x0800ca31
 800c9d8:	0800c9fb 	.word	0x0800c9fb
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800ca31 	.word	0x0800ca31
 800c9e4:	0800ca31 	.word	0x0800ca31
 800c9e8:	0800ca29 	.word	0x0800ca29
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9ec:	f7fc fffc 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800c9f0:	6178      	str	r0, [r7, #20]
        break;
 800c9f2:	e022      	b.n	800ca3a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ca24 <UART_SetConfig+0x310>)
 800c9f6:	617b      	str	r3, [r7, #20]
        break;
 800c9f8:	e01f      	b.n	800ca3a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9fa:	f7fc ff87 	bl	800990c <HAL_RCC_GetSysClockFreq>
 800c9fe:	6178      	str	r0, [r7, #20]
        break;
 800ca00:	e01b      	b.n	800ca3a <UART_SetConfig+0x326>
 800ca02:	bf00      	nop
 800ca04:	cfff69f3 	.word	0xcfff69f3
 800ca08:	40008000 	.word	0x40008000
 800ca0c:	40013800 	.word	0x40013800
 800ca10:	40021000 	.word	0x40021000
 800ca14:	40004400 	.word	0x40004400
 800ca18:	40004800 	.word	0x40004800
 800ca1c:	40004c00 	.word	0x40004c00
 800ca20:	40005000 	.word	0x40005000
 800ca24:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca2c:	617b      	str	r3, [r7, #20]
        break;
 800ca2e:	e004      	b.n	800ca3a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800ca30:	2300      	movs	r3, #0
 800ca32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	76bb      	strb	r3, [r7, #26]
        break;
 800ca38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 811b 	beq.w	800cc78 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca46:	4a96      	ldr	r2, [pc, #600]	; (800cca0 <UART_SetConfig+0x58c>)
 800ca48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca54:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d305      	bcc.n	800ca72 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d902      	bls.n	800ca78 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	76bb      	strb	r3, [r7, #26]
 800ca76:	e0ff      	b.n	800cc78 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f04f 0100 	mov.w	r1, #0
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	4a86      	ldr	r2, [pc, #536]	; (800cca0 <UART_SetConfig+0x58c>)
 800ca86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	f04f 0300 	mov.w	r3, #0
 800ca90:	f7f4 f922 	bl	8000cd8 <__aeabi_uldivmod>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	f04f 0200 	mov.w	r2, #0
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	020b      	lsls	r3, r1, #8
 800caa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800caaa:	0202      	lsls	r2, r0, #8
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	6849      	ldr	r1, [r1, #4]
 800cab0:	0849      	lsrs	r1, r1, #1
 800cab2:	4608      	mov	r0, r1
 800cab4:	f04f 0100 	mov.w	r1, #0
 800cab8:	1814      	adds	r4, r2, r0
 800caba:	eb43 0501 	adc.w	r5, r3, r1
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f04f 0300 	mov.w	r3, #0
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f4 f904 	bl	8000cd8 <__aeabi_uldivmod>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4613      	mov	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cade:	d308      	bcc.n	800caf2 <UART_SetConfig+0x3de>
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cae6:	d204      	bcs.n	800caf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	60da      	str	r2, [r3, #12]
 800caf0:	e0c2      	b.n	800cc78 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	76bb      	strb	r3, [r7, #26]
 800caf6:	e0bf      	b.n	800cc78 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb00:	d165      	bne.n	800cbce <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800cb02:	7efb      	ldrb	r3, [r7, #27]
 800cb04:	2b08      	cmp	r3, #8
 800cb06:	d828      	bhi.n	800cb5a <UART_SetConfig+0x446>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <UART_SetConfig+0x3fc>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb35 	.word	0x0800cb35
 800cb14:	0800cb3d 	.word	0x0800cb3d
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	0800cb5b 	.word	0x0800cb5b
 800cb20:	0800cb4b 	.word	0x0800cb4b
 800cb24:	0800cb5b 	.word	0x0800cb5b
 800cb28:	0800cb5b 	.word	0x0800cb5b
 800cb2c:	0800cb5b 	.word	0x0800cb5b
 800cb30:	0800cb53 	.word	0x0800cb53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb34:	f7fc ff58 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800cb38:	6178      	str	r0, [r7, #20]
        break;
 800cb3a:	e013      	b.n	800cb64 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb3c:	f7fc ff6a 	bl	8009a14 <HAL_RCC_GetPCLK2Freq>
 800cb40:	6178      	str	r0, [r7, #20]
        break;
 800cb42:	e00f      	b.n	800cb64 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb44:	4b57      	ldr	r3, [pc, #348]	; (800cca4 <UART_SetConfig+0x590>)
 800cb46:	617b      	str	r3, [r7, #20]
        break;
 800cb48:	e00c      	b.n	800cb64 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb4a:	f7fc fedf 	bl	800990c <HAL_RCC_GetSysClockFreq>
 800cb4e:	6178      	str	r0, [r7, #20]
        break;
 800cb50:	e008      	b.n	800cb64 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb56:	617b      	str	r3, [r7, #20]
        break;
 800cb58:	e004      	b.n	800cb64 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	76bb      	strb	r3, [r7, #26]
        break;
 800cb62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 8086 	beq.w	800cc78 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb70:	4a4b      	ldr	r2, [pc, #300]	; (800cca0 <UART_SetConfig+0x58c>)
 800cb72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb76:	461a      	mov	r2, r3
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb7e:	005a      	lsls	r2, r3, #1
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	085b      	lsrs	r3, r3, #1
 800cb86:	441a      	add	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2b0f      	cmp	r3, #15
 800cb98:	d916      	bls.n	800cbc8 <UART_SetConfig+0x4b4>
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cba0:	d212      	bcs.n	800cbc8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	f023 030f 	bic.w	r3, r3, #15
 800cbaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f003 0307 	and.w	r3, r3, #7
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	89fb      	ldrh	r3, [r7, #14]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	89fa      	ldrh	r2, [r7, #14]
 800cbc4:	60da      	str	r2, [r3, #12]
 800cbc6:	e057      	b.n	800cc78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	76bb      	strb	r3, [r7, #26]
 800cbcc:	e054      	b.n	800cc78 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbce:	7efb      	ldrb	r3, [r7, #27]
 800cbd0:	2b08      	cmp	r3, #8
 800cbd2:	d828      	bhi.n	800cc26 <UART_SetConfig+0x512>
 800cbd4:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <UART_SetConfig+0x4c8>)
 800cbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbda:	bf00      	nop
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cc09 	.word	0x0800cc09
 800cbe4:	0800cc11 	.word	0x0800cc11
 800cbe8:	0800cc27 	.word	0x0800cc27
 800cbec:	0800cc17 	.word	0x0800cc17
 800cbf0:	0800cc27 	.word	0x0800cc27
 800cbf4:	0800cc27 	.word	0x0800cc27
 800cbf8:	0800cc27 	.word	0x0800cc27
 800cbfc:	0800cc1f 	.word	0x0800cc1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc00:	f7fc fef2 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800cc04:	6178      	str	r0, [r7, #20]
        break;
 800cc06:	e013      	b.n	800cc30 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc08:	f7fc ff04 	bl	8009a14 <HAL_RCC_GetPCLK2Freq>
 800cc0c:	6178      	str	r0, [r7, #20]
        break;
 800cc0e:	e00f      	b.n	800cc30 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc10:	4b24      	ldr	r3, [pc, #144]	; (800cca4 <UART_SetConfig+0x590>)
 800cc12:	617b      	str	r3, [r7, #20]
        break;
 800cc14:	e00c      	b.n	800cc30 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc16:	f7fc fe79 	bl	800990c <HAL_RCC_GetSysClockFreq>
 800cc1a:	6178      	str	r0, [r7, #20]
        break;
 800cc1c:	e008      	b.n	800cc30 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc22:	617b      	str	r3, [r7, #20]
        break;
 800cc24:	e004      	b.n	800cc30 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	76bb      	strb	r3, [r7, #26]
        break;
 800cc2e:	bf00      	nop
    }

    if (pclk != 0U)
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d020      	beq.n	800cc78 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3a:	4a19      	ldr	r2, [pc, #100]	; (800cca0 <UART_SetConfig+0x58c>)
 800cc3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc40:	461a      	mov	r2, r3
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	085b      	lsrs	r3, r3, #1
 800cc4e:	441a      	add	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2b0f      	cmp	r3, #15
 800cc60:	d908      	bls.n	800cc74 <UART_SetConfig+0x560>
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc68:	d204      	bcs.n	800cc74 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	60da      	str	r2, [r3, #12]
 800cc72:	e001      	b.n	800cc78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc94:	7ebb      	ldrb	r3, [r7, #26]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3720      	adds	r7, #32
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	080133bc 	.word	0x080133bc
 800cca4:	00f42400 	.word	0x00f42400

0800cca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00a      	beq.n	800ccd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f003 0302 	and.w	r3, r3, #2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00a      	beq.n	800cd16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1a:	f003 0308 	and.w	r3, r3, #8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	f003 0310 	and.w	r3, r3, #16
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00a      	beq.n	800cd5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01a      	beq.n	800cdbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cda6:	d10a      	bne.n	800cdbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00a      	beq.n	800cde0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	430a      	orrs	r2, r1
 800cdde:	605a      	str	r2, [r3, #4]
  }
}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af02      	add	r7, sp, #8
 800cdf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdfc:	f7f9 f862 	bl	8005ec4 <HAL_GetTick>
 800ce00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b08      	cmp	r3, #8
 800ce0e:	d10e      	bne.n	800ce2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f82f 	bl	800ce82 <UART_WaitOnFlagUntilTimeout>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e025      	b.n	800ce7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0304 	and.w	r3, r3, #4
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	d10e      	bne.n	800ce5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f819 	bl	800ce82 <UART_WaitOnFlagUntilTimeout>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	e00f      	b.n	800ce7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60f8      	str	r0, [r7, #12]
 800ce8a:	60b9      	str	r1, [r7, #8]
 800ce8c:	603b      	str	r3, [r7, #0]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce92:	e062      	b.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9a:	d05e      	beq.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce9c:	f7f9 f812 	bl	8005ec4 <HAL_GetTick>
 800cea0:	4602      	mov	r2, r0
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	69ba      	ldr	r2, [r7, #24]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d302      	bcc.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d11d      	bne.n	800ceee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	689a      	ldr	r2, [r3, #8]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0201 	bic.w	r2, r2, #1
 800ced0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2220      	movs	r2, #32
 800cede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e045      	b.n	800cf7a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d02e      	beq.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf0a:	d126      	bne.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cf24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f022 0201 	bic.w	r2, r2, #1
 800cf34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e00f      	b.n	800cf7a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	69da      	ldr	r2, [r3, #28]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	4013      	ands	r3, r2
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	bf0c      	ite	eq
 800cf6a:	2301      	moveq	r3, #1
 800cf6c:	2300      	movne	r3, #0
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	461a      	mov	r2, r3
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d08d      	beq.n	800ce94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
	...

0800cf84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	88fa      	ldrh	r2, [r7, #6]
 800cf9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	88fa      	ldrh	r2, [r7, #6]
 800cfa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb6:	d10e      	bne.n	800cfd6 <UART_Start_Receive_IT+0x52>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d105      	bne.n	800cfcc <UART_Start_Receive_IT+0x48>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cfc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfca:	e02d      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	22ff      	movs	r2, #255	; 0xff
 800cfd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfd4:	e028      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10d      	bne.n	800cffa <UART_Start_Receive_IT+0x76>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d104      	bne.n	800cff0 <UART_Start_Receive_IT+0x6c>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	22ff      	movs	r2, #255	; 0xff
 800cfea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfee:	e01b      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	227f      	movs	r2, #127	; 0x7f
 800cff4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cff8:	e016      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d002:	d10d      	bne.n	800d020 <UART_Start_Receive_IT+0x9c>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d104      	bne.n	800d016 <UART_Start_Receive_IT+0x92>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	227f      	movs	r2, #127	; 0x7f
 800d010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d014:	e008      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	223f      	movs	r2, #63	; 0x3f
 800d01a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d01e:	e003      	b.n	800d028 <UART_Start_Receive_IT+0xa4>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2222      	movs	r2, #34	; 0x22
 800d034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689a      	ldr	r2, [r3, #8]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0201 	orr.w	r2, r2, #1
 800d046:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d050:	d12a      	bne.n	800d0a8 <UART_Start_Receive_IT+0x124>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d058:	88fa      	ldrh	r2, [r7, #6]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d324      	bcc.n	800d0a8 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d066:	d107      	bne.n	800d078 <UART_Start_Receive_IT+0xf4>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d103      	bne.n	800d078 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4a1f      	ldr	r2, [pc, #124]	; (800d0f0 <UART_Start_Receive_IT+0x16c>)
 800d074:	671a      	str	r2, [r3, #112]	; 0x70
 800d076:	e002      	b.n	800d07e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	4a1e      	ldr	r2, [pc, #120]	; (800d0f4 <UART_Start_Receive_IT+0x170>)
 800d07c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d094:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689a      	ldr	r2, [r3, #8]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d0a4:	609a      	str	r2, [r3, #8]
 800d0a6:	e01b      	b.n	800d0e0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0b0:	d107      	bne.n	800d0c2 <UART_Start_Receive_IT+0x13e>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4a0e      	ldr	r2, [pc, #56]	; (800d0f8 <UART_Start_Receive_IT+0x174>)
 800d0be:	671a      	str	r2, [r3, #112]	; 0x70
 800d0c0:	e002      	b.n	800d0c8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	; (800d0fc <UART_Start_Receive_IT+0x178>)
 800d0c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d0de:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	0800d579 	.word	0x0800d579
 800d0f4:	0800d375 	.word	0x0800d375
 800d0f8:	0800d29d 	.word	0x0800d29d
 800d0fc:	0800d1c5 	.word	0x0800d1c5

0800d100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d116:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d126:	f023 0301 	bic.w	r3, r3, #1
 800d12a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d130:	2b01      	cmp	r3, #1
 800d132:	d107      	bne.n	800d144 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f022 0210 	bic.w	r2, r2, #16
 800d142:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2220      	movs	r2, #32
 800d148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f7ff fab0 	bl	800c6e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fa8c 	bl	800c6d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1da:	2b22      	cmp	r3, #34	; 0x22
 800d1dc:	d152      	bne.n	800d284 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d1e6:	89bb      	ldrh	r3, [r7, #12]
 800d1e8:	b2d9      	uxtb	r1, r3
 800d1ea:	89fb      	ldrh	r3, [r7, #14]
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	400a      	ands	r2, r1
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d208:	b29b      	uxth	r3, r3
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d139      	bne.n	800d294 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d22e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0201 	bic.w	r2, r2, #1
 800d23e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2220      	movs	r2, #32
 800d244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d252:	2b01      	cmp	r3, #1
 800d254:	d10f      	bne.n	800d276 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f022 0210 	bic.w	r2, r2, #16
 800d264:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff fa44 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
 800d274:	e002      	b.n	800d27c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7f8 fd84 	bl	8005d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d282:	e007      	b.n	800d294 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	699a      	ldr	r2, [r3, #24]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f042 0208 	orr.w	r2, r2, #8
 800d292:	619a      	str	r2, [r3, #24]
}
 800d294:	bf00      	nop
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2aa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2b2:	2b22      	cmp	r3, #34	; 0x22
 800d2b4:	d152      	bne.n	800d35c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2bc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2c2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d2c4:	89ba      	ldrh	r2, [r7, #12]
 800d2c6:	89fb      	ldrh	r3, [r7, #14]
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d4:	1c9a      	adds	r2, r3, #2
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d139      	bne.n	800d36c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d306:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f022 0201 	bic.w	r2, r2, #1
 800d316:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2220      	movs	r2, #32
 800d31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d10f      	bne.n	800d34e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f022 0210 	bic.w	r2, r2, #16
 800d33c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff f9d8 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
 800d34c:	e002      	b.n	800d354 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f8 fd18 	bl	8005d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d35a:	e007      	b.n	800d36c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	699a      	ldr	r2, [r3, #24]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f042 0208 	orr.w	r2, r2, #8
 800d36a:	619a      	str	r2, [r3, #24]
}
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d382:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a2:	2b22      	cmp	r3, #34	; 0x22
 800d3a4:	f040 80da 	bne.w	800d55c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3ae:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3b0:	e0aa      	b.n	800d508 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b8:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d3ba:	89bb      	ldrh	r3, [r7, #12]
 800d3bc:	b2d9      	uxtb	r1, r3
 800d3be:	8b7b      	ldrh	r3, [r7, #26]
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3c6:	400a      	ands	r2, r1
 800d3c8:	b2d2      	uxtb	r2, r2
 800d3ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	f003 0307 	and.w	r3, r3, #7
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d04d      	beq.n	800d496 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d010      	beq.n	800d426 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00b      	beq.n	800d426 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2201      	movs	r2, #1
 800d414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d41c:	f043 0201 	orr.w	r2, r3, #1
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	f003 0302 	and.w	r3, r3, #2
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d010      	beq.n	800d452 <UART_RxISR_8BIT_FIFOEN+0xde>
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00b      	beq.n	800d452 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2202      	movs	r2, #2
 800d440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d448:	f043 0204 	orr.w	r2, r3, #4
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f003 0304 	and.w	r3, r3, #4
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d010      	beq.n	800d47e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00b      	beq.n	800d47e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2204      	movs	r2, #4
 800d46c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d474:	f043 0202 	orr.w	r2, r3, #2
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d006      	beq.n	800d496 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7ff f92d 	bl	800c6e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d132      	bne.n	800d508 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d4b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4c0:	f023 0301 	bic.w	r3, r3, #1
 800d4c4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d10f      	bne.n	800d4fc <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f022 0210 	bic.w	r2, r2, #16
 800d4ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff f901 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
 800d4fa:	e002      	b.n	800d502 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7f8 fc41 	bl	8005d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d508:	89fb      	ldrh	r3, [r7, #14]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	f003 0320 	and.w	r3, r3, #32
 800d514:	2b00      	cmp	r3, #0
 800d516:	f47f af4c 	bne.w	800d3b2 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d520:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d522:	897b      	ldrh	r3, [r7, #10]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d021      	beq.n	800d56c <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d52e:	897a      	ldrh	r2, [r7, #10]
 800d530:	429a      	cmp	r2, r3
 800d532:	d21b      	bcs.n	800d56c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689a      	ldr	r2, [r3, #8]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d542:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a0b      	ldr	r2, [pc, #44]	; (800d574 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d548:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f042 0220 	orr.w	r2, r2, #32
 800d558:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d55a:	e007      	b.n	800d56c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	699a      	ldr	r2, [r3, #24]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f042 0208 	orr.w	r2, r2, #8
 800d56a:	619a      	str	r2, [r3, #24]
}
 800d56c:	bf00      	nop
 800d56e:	3720      	adds	r7, #32
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	0800d1c5 	.word	0x0800d1c5

0800d578 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d586:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5a6:	2b22      	cmp	r3, #34	; 0x22
 800d5a8:	f040 80da 	bne.w	800d760 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5b2:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5b4:	e0aa      	b.n	800d70c <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d5c4:	8aba      	ldrh	r2, [r7, #20]
 800d5c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5d4:	1c9a      	adds	r2, r3, #2
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d04d      	beq.n	800d69a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	2b00      	cmp	r3, #0
 800d606:	d010      	beq.n	800d62a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00b      	beq.n	800d62a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2201      	movs	r2, #1
 800d618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d620:	f043 0201 	orr.w	r2, r3, #1
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	f003 0302 	and.w	r3, r3, #2
 800d630:	2b00      	cmp	r3, #0
 800d632:	d010      	beq.n	800d656 <UART_RxISR_16BIT_FIFOEN+0xde>
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2202      	movs	r2, #2
 800d644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d64c:	f043 0204 	orr.w	r2, r3, #4
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d010      	beq.n	800d682 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00b      	beq.n	800d682 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2204      	movs	r2, #4
 800d670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d678:	f043 0202 	orr.w	r2, r3, #2
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d006      	beq.n	800d69a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff f82b 	bl	800c6e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d132      	bne.n	800d70c <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	6812      	ldr	r2, [r2, #0]
 800d6c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6c4:	f023 0301 	bic.w	r3, r3, #1
 800d6c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2220      	movs	r2, #32
 800d6ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d10f      	bne.n	800d700 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f022 0210 	bic.w	r2, r2, #16
 800d6ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7fe ffff 	bl	800c6fc <HAL_UARTEx_RxEventCallback>
 800d6fe:	e002      	b.n	800d706 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7f8 fb3f 	bl	8005d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d70c:	8afb      	ldrh	r3, [r7, #22]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	f003 0320 	and.w	r3, r3, #32
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f47f af4c 	bne.w	800d5b6 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d724:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d726:	89fb      	ldrh	r3, [r7, #14]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d021      	beq.n	800d770 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d732:	89fa      	ldrh	r2, [r7, #14]
 800d734:	429a      	cmp	r2, r3
 800d736:	d21b      	bcs.n	800d770 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689a      	ldr	r2, [r3, #8]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d746:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a0b      	ldr	r2, [pc, #44]	; (800d778 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d74c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f042 0220 	orr.w	r2, r2, #32
 800d75c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d75e:	e007      	b.n	800d770 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	699a      	ldr	r2, [r3, #24]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f042 0208 	orr.w	r2, r2, #8
 800d76e:	619a      	str	r2, [r3, #24]
}
 800d770:	bf00      	nop
 800d772:	3728      	adds	r7, #40	; 0x28
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	0800d29d 	.word	0x0800d29d

0800d77c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d101      	bne.n	800d7ce <HAL_UARTEx_DisableFifoMode+0x16>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e027      	b.n	800d81e <HAL_UARTEx_DisableFifoMode+0x66>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2224      	movs	r2, #36	; 0x24
 800d7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f022 0201 	bic.w	r2, r2, #1
 800d7f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2220      	movs	r2, #32
 800d810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d101      	bne.n	800d842 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d83e:	2302      	movs	r3, #2
 800d840:	e02d      	b.n	800d89e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2224      	movs	r2, #36	; 0x24
 800d84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 0201 	bic.w	r2, r2, #1
 800d868:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	430a      	orrs	r2, r1
 800d87c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f850 	bl	800d924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2220      	movs	r2, #32
 800d890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d101      	bne.n	800d8be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	e02d      	b.n	800d91a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2224      	movs	r2, #36	; 0x24
 800d8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 0201 	bic.w	r2, r2, #1
 800d8e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f812 	bl	800d924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2220      	movs	r2, #32
 800d90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
	...

0800d924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d930:	2b00      	cmp	r3, #0
 800d932:	d108      	bne.n	800d946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d944:	e031      	b.n	800d9aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d946:	2308      	movs	r3, #8
 800d948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d94a:	2308      	movs	r3, #8
 800d94c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	0e5b      	lsrs	r3, r3, #25
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	0f5b      	lsrs	r3, r3, #29
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d96e:	7bbb      	ldrb	r3, [r7, #14]
 800d970:	7b3a      	ldrb	r2, [r7, #12]
 800d972:	4911      	ldr	r1, [pc, #68]	; (800d9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d974:	5c8a      	ldrb	r2, [r1, r2]
 800d976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d97a:	7b3a      	ldrb	r2, [r7, #12]
 800d97c:	490f      	ldr	r1, [pc, #60]	; (800d9bc <UARTEx_SetNbDataToProcess+0x98>)
 800d97e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d980:	fb93 f3f2 	sdiv	r3, r3, r2
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	7b7a      	ldrb	r2, [r7, #13]
 800d990:	4909      	ldr	r1, [pc, #36]	; (800d9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d992:	5c8a      	ldrb	r2, [r1, r2]
 800d994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d998:	7b7a      	ldrb	r2, [r7, #13]
 800d99a:	4908      	ldr	r1, [pc, #32]	; (800d9bc <UARTEx_SetNbDataToProcess+0x98>)
 800d99c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d99e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9aa:	bf00      	nop
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	080133d4 	.word	0x080133d4
 800d9bc:	080133dc 	.word	0x080133dc

0800d9c0 <atof>:
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	f001 bb63 	b.w	800f08c <strtod>

0800d9c6 <atoi>:
 800d9c6:	220a      	movs	r2, #10
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	f001 bbef 	b.w	800f1ac <strtol>
	...

0800d9d0 <__errno>:
 800d9d0:	4b01      	ldr	r3, [pc, #4]	; (800d9d8 <__errno+0x8>)
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	20000030 	.word	0x20000030

0800d9dc <__libc_init_array>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	4d0d      	ldr	r5, [pc, #52]	; (800da14 <__libc_init_array+0x38>)
 800d9e0:	4c0d      	ldr	r4, [pc, #52]	; (800da18 <__libc_init_array+0x3c>)
 800d9e2:	1b64      	subs	r4, r4, r5
 800d9e4:	10a4      	asrs	r4, r4, #2
 800d9e6:	2600      	movs	r6, #0
 800d9e8:	42a6      	cmp	r6, r4
 800d9ea:	d109      	bne.n	800da00 <__libc_init_array+0x24>
 800d9ec:	4d0b      	ldr	r5, [pc, #44]	; (800da1c <__libc_init_array+0x40>)
 800d9ee:	4c0c      	ldr	r4, [pc, #48]	; (800da20 <__libc_init_array+0x44>)
 800d9f0:	f004 fc48 	bl	8012284 <_init>
 800d9f4:	1b64      	subs	r4, r4, r5
 800d9f6:	10a4      	asrs	r4, r4, #2
 800d9f8:	2600      	movs	r6, #0
 800d9fa:	42a6      	cmp	r6, r4
 800d9fc:	d105      	bne.n	800da0a <__libc_init_array+0x2e>
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	f855 3b04 	ldr.w	r3, [r5], #4
 800da04:	4798      	blx	r3
 800da06:	3601      	adds	r6, #1
 800da08:	e7ee      	b.n	800d9e8 <__libc_init_array+0xc>
 800da0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da0e:	4798      	blx	r3
 800da10:	3601      	adds	r6, #1
 800da12:	e7f2      	b.n	800d9fa <__libc_init_array+0x1e>
 800da14:	080138d8 	.word	0x080138d8
 800da18:	080138d8 	.word	0x080138d8
 800da1c:	080138d8 	.word	0x080138d8
 800da20:	080138dc 	.word	0x080138dc

0800da24 <memcpy>:
 800da24:	440a      	add	r2, r1
 800da26:	4291      	cmp	r1, r2
 800da28:	f100 33ff 	add.w	r3, r0, #4294967295
 800da2c:	d100      	bne.n	800da30 <memcpy+0xc>
 800da2e:	4770      	bx	lr
 800da30:	b510      	push	{r4, lr}
 800da32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da3a:	4291      	cmp	r1, r2
 800da3c:	d1f9      	bne.n	800da32 <memcpy+0xe>
 800da3e:	bd10      	pop	{r4, pc}

0800da40 <memset>:
 800da40:	4402      	add	r2, r0
 800da42:	4603      	mov	r3, r0
 800da44:	4293      	cmp	r3, r2
 800da46:	d100      	bne.n	800da4a <memset+0xa>
 800da48:	4770      	bx	lr
 800da4a:	f803 1b01 	strb.w	r1, [r3], #1
 800da4e:	e7f9      	b.n	800da44 <memset+0x4>

0800da50 <__cvt>:
 800da50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da54:	ec55 4b10 	vmov	r4, r5, d0
 800da58:	2d00      	cmp	r5, #0
 800da5a:	460e      	mov	r6, r1
 800da5c:	4619      	mov	r1, r3
 800da5e:	462b      	mov	r3, r5
 800da60:	bfbb      	ittet	lt
 800da62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da66:	461d      	movlt	r5, r3
 800da68:	2300      	movge	r3, #0
 800da6a:	232d      	movlt	r3, #45	; 0x2d
 800da6c:	700b      	strb	r3, [r1, #0]
 800da6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da74:	4691      	mov	r9, r2
 800da76:	f023 0820 	bic.w	r8, r3, #32
 800da7a:	bfbc      	itt	lt
 800da7c:	4622      	movlt	r2, r4
 800da7e:	4614      	movlt	r4, r2
 800da80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da84:	d005      	beq.n	800da92 <__cvt+0x42>
 800da86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da8a:	d100      	bne.n	800da8e <__cvt+0x3e>
 800da8c:	3601      	adds	r6, #1
 800da8e:	2102      	movs	r1, #2
 800da90:	e000      	b.n	800da94 <__cvt+0x44>
 800da92:	2103      	movs	r1, #3
 800da94:	ab03      	add	r3, sp, #12
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	ab02      	add	r3, sp, #8
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	ec45 4b10 	vmov	d0, r4, r5
 800daa0:	4653      	mov	r3, sl
 800daa2:	4632      	mov	r2, r6
 800daa4:	f001 fcd8 	bl	800f458 <_dtoa_r>
 800daa8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800daac:	4607      	mov	r7, r0
 800daae:	d102      	bne.n	800dab6 <__cvt+0x66>
 800dab0:	f019 0f01 	tst.w	r9, #1
 800dab4:	d022      	beq.n	800dafc <__cvt+0xac>
 800dab6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800daba:	eb07 0906 	add.w	r9, r7, r6
 800dabe:	d110      	bne.n	800dae2 <__cvt+0x92>
 800dac0:	783b      	ldrb	r3, [r7, #0]
 800dac2:	2b30      	cmp	r3, #48	; 0x30
 800dac4:	d10a      	bne.n	800dadc <__cvt+0x8c>
 800dac6:	2200      	movs	r2, #0
 800dac8:	2300      	movs	r3, #0
 800daca:	4620      	mov	r0, r4
 800dacc:	4629      	mov	r1, r5
 800dace:	f7f3 f823 	bl	8000b18 <__aeabi_dcmpeq>
 800dad2:	b918      	cbnz	r0, 800dadc <__cvt+0x8c>
 800dad4:	f1c6 0601 	rsb	r6, r6, #1
 800dad8:	f8ca 6000 	str.w	r6, [sl]
 800dadc:	f8da 3000 	ldr.w	r3, [sl]
 800dae0:	4499      	add	r9, r3
 800dae2:	2200      	movs	r2, #0
 800dae4:	2300      	movs	r3, #0
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	f7f3 f815 	bl	8000b18 <__aeabi_dcmpeq>
 800daee:	b108      	cbz	r0, 800daf4 <__cvt+0xa4>
 800daf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800daf4:	2230      	movs	r2, #48	; 0x30
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	454b      	cmp	r3, r9
 800dafa:	d307      	bcc.n	800db0c <__cvt+0xbc>
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db00:	1bdb      	subs	r3, r3, r7
 800db02:	4638      	mov	r0, r7
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	b004      	add	sp, #16
 800db08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0c:	1c59      	adds	r1, r3, #1
 800db0e:	9103      	str	r1, [sp, #12]
 800db10:	701a      	strb	r2, [r3, #0]
 800db12:	e7f0      	b.n	800daf6 <__cvt+0xa6>

0800db14 <__exponent>:
 800db14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db16:	4603      	mov	r3, r0
 800db18:	2900      	cmp	r1, #0
 800db1a:	bfb8      	it	lt
 800db1c:	4249      	neglt	r1, r1
 800db1e:	f803 2b02 	strb.w	r2, [r3], #2
 800db22:	bfb4      	ite	lt
 800db24:	222d      	movlt	r2, #45	; 0x2d
 800db26:	222b      	movge	r2, #43	; 0x2b
 800db28:	2909      	cmp	r1, #9
 800db2a:	7042      	strb	r2, [r0, #1]
 800db2c:	dd2a      	ble.n	800db84 <__exponent+0x70>
 800db2e:	f10d 0407 	add.w	r4, sp, #7
 800db32:	46a4      	mov	ip, r4
 800db34:	270a      	movs	r7, #10
 800db36:	46a6      	mov	lr, r4
 800db38:	460a      	mov	r2, r1
 800db3a:	fb91 f6f7 	sdiv	r6, r1, r7
 800db3e:	fb07 1516 	mls	r5, r7, r6, r1
 800db42:	3530      	adds	r5, #48	; 0x30
 800db44:	2a63      	cmp	r2, #99	; 0x63
 800db46:	f104 34ff 	add.w	r4, r4, #4294967295
 800db4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db4e:	4631      	mov	r1, r6
 800db50:	dcf1      	bgt.n	800db36 <__exponent+0x22>
 800db52:	3130      	adds	r1, #48	; 0x30
 800db54:	f1ae 0502 	sub.w	r5, lr, #2
 800db58:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db5c:	1c44      	adds	r4, r0, #1
 800db5e:	4629      	mov	r1, r5
 800db60:	4561      	cmp	r1, ip
 800db62:	d30a      	bcc.n	800db7a <__exponent+0x66>
 800db64:	f10d 0209 	add.w	r2, sp, #9
 800db68:	eba2 020e 	sub.w	r2, r2, lr
 800db6c:	4565      	cmp	r5, ip
 800db6e:	bf88      	it	hi
 800db70:	2200      	movhi	r2, #0
 800db72:	4413      	add	r3, r2
 800db74:	1a18      	subs	r0, r3, r0
 800db76:	b003      	add	sp, #12
 800db78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db82:	e7ed      	b.n	800db60 <__exponent+0x4c>
 800db84:	2330      	movs	r3, #48	; 0x30
 800db86:	3130      	adds	r1, #48	; 0x30
 800db88:	7083      	strb	r3, [r0, #2]
 800db8a:	70c1      	strb	r1, [r0, #3]
 800db8c:	1d03      	adds	r3, r0, #4
 800db8e:	e7f1      	b.n	800db74 <__exponent+0x60>

0800db90 <_printf_float>:
 800db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	ed2d 8b02 	vpush	{d8}
 800db98:	b08d      	sub	sp, #52	; 0x34
 800db9a:	460c      	mov	r4, r1
 800db9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dba0:	4616      	mov	r6, r2
 800dba2:	461f      	mov	r7, r3
 800dba4:	4605      	mov	r5, r0
 800dba6:	f002 ff69 	bl	8010a7c <_localeconv_r>
 800dbaa:	f8d0 a000 	ldr.w	sl, [r0]
 800dbae:	4650      	mov	r0, sl
 800dbb0:	f7f2 fb36 	bl	8000220 <strlen>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	9305      	str	r3, [sp, #20]
 800dbbc:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dbc4:	3307      	adds	r3, #7
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	f103 0208 	add.w	r2, r3, #8
 800dbce:	f8c8 2000 	str.w	r2, [r8]
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dbda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dbde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbe2:	9307      	str	r3, [sp, #28]
 800dbe4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbe8:	ee08 0a10 	vmov	s16, r0
 800dbec:	4b9f      	ldr	r3, [pc, #636]	; (800de6c <_printf_float+0x2dc>)
 800dbee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf6:	f7f2 ffc1 	bl	8000b7c <__aeabi_dcmpun>
 800dbfa:	bb88      	cbnz	r0, 800dc60 <_printf_float+0xd0>
 800dbfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc00:	4b9a      	ldr	r3, [pc, #616]	; (800de6c <_printf_float+0x2dc>)
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295
 800dc06:	f7f2 ff9b 	bl	8000b40 <__aeabi_dcmple>
 800dc0a:	bb48      	cbnz	r0, 800dc60 <_printf_float+0xd0>
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	2300      	movs	r3, #0
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	f7f2 ff8a 	bl	8000b2c <__aeabi_dcmplt>
 800dc18:	b110      	cbz	r0, 800dc20 <_printf_float+0x90>
 800dc1a:	232d      	movs	r3, #45	; 0x2d
 800dc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc20:	4b93      	ldr	r3, [pc, #588]	; (800de70 <_printf_float+0x2e0>)
 800dc22:	4894      	ldr	r0, [pc, #592]	; (800de74 <_printf_float+0x2e4>)
 800dc24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dc28:	bf94      	ite	ls
 800dc2a:	4698      	movls	r8, r3
 800dc2c:	4680      	movhi	r8, r0
 800dc2e:	2303      	movs	r3, #3
 800dc30:	6123      	str	r3, [r4, #16]
 800dc32:	9b05      	ldr	r3, [sp, #20]
 800dc34:	f023 0204 	bic.w	r2, r3, #4
 800dc38:	6022      	str	r2, [r4, #0]
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	9700      	str	r7, [sp, #0]
 800dc40:	4633      	mov	r3, r6
 800dc42:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc44:	4621      	mov	r1, r4
 800dc46:	4628      	mov	r0, r5
 800dc48:	f000 f9d8 	bl	800dffc <_printf_common>
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	f040 8090 	bne.w	800dd72 <_printf_float+0x1e2>
 800dc52:	f04f 30ff 	mov.w	r0, #4294967295
 800dc56:	b00d      	add	sp, #52	; 0x34
 800dc58:	ecbd 8b02 	vpop	{d8}
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	4642      	mov	r2, r8
 800dc62:	464b      	mov	r3, r9
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 ff88 	bl	8000b7c <__aeabi_dcmpun>
 800dc6c:	b140      	cbz	r0, 800dc80 <_printf_float+0xf0>
 800dc6e:	464b      	mov	r3, r9
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfbc      	itt	lt
 800dc74:	232d      	movlt	r3, #45	; 0x2d
 800dc76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc7a:	487f      	ldr	r0, [pc, #508]	; (800de78 <_printf_float+0x2e8>)
 800dc7c:	4b7f      	ldr	r3, [pc, #508]	; (800de7c <_printf_float+0x2ec>)
 800dc7e:	e7d1      	b.n	800dc24 <_printf_float+0x94>
 800dc80:	6863      	ldr	r3, [r4, #4]
 800dc82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc86:	9206      	str	r2, [sp, #24]
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	d13f      	bne.n	800dd0c <_printf_float+0x17c>
 800dc8c:	2306      	movs	r3, #6
 800dc8e:	6063      	str	r3, [r4, #4]
 800dc90:	9b05      	ldr	r3, [sp, #20]
 800dc92:	6861      	ldr	r1, [r4, #4]
 800dc94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc98:	2300      	movs	r3, #0
 800dc9a:	9303      	str	r3, [sp, #12]
 800dc9c:	ab0a      	add	r3, sp, #40	; 0x28
 800dc9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dca2:	ab09      	add	r3, sp, #36	; 0x24
 800dca4:	ec49 8b10 	vmov	d0, r8, r9
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	6022      	str	r2, [r4, #0]
 800dcac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	f7ff fecd 	bl	800da50 <__cvt>
 800dcb6:	9b06      	ldr	r3, [sp, #24]
 800dcb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcba:	2b47      	cmp	r3, #71	; 0x47
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	d108      	bne.n	800dcd2 <_printf_float+0x142>
 800dcc0:	1cc8      	adds	r0, r1, #3
 800dcc2:	db02      	blt.n	800dcca <_printf_float+0x13a>
 800dcc4:	6863      	ldr	r3, [r4, #4]
 800dcc6:	4299      	cmp	r1, r3
 800dcc8:	dd41      	ble.n	800dd4e <_printf_float+0x1be>
 800dcca:	f1ab 0b02 	sub.w	fp, fp, #2
 800dcce:	fa5f fb8b 	uxtb.w	fp, fp
 800dcd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dcd6:	d820      	bhi.n	800dd1a <_printf_float+0x18a>
 800dcd8:	3901      	subs	r1, #1
 800dcda:	465a      	mov	r2, fp
 800dcdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dce0:	9109      	str	r1, [sp, #36]	; 0x24
 800dce2:	f7ff ff17 	bl	800db14 <__exponent>
 800dce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dce8:	1813      	adds	r3, r2, r0
 800dcea:	2a01      	cmp	r2, #1
 800dcec:	4681      	mov	r9, r0
 800dcee:	6123      	str	r3, [r4, #16]
 800dcf0:	dc02      	bgt.n	800dcf8 <_printf_float+0x168>
 800dcf2:	6822      	ldr	r2, [r4, #0]
 800dcf4:	07d2      	lsls	r2, r2, #31
 800dcf6:	d501      	bpl.n	800dcfc <_printf_float+0x16c>
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	6123      	str	r3, [r4, #16]
 800dcfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d09c      	beq.n	800dc3e <_printf_float+0xae>
 800dd04:	232d      	movs	r3, #45	; 0x2d
 800dd06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd0a:	e798      	b.n	800dc3e <_printf_float+0xae>
 800dd0c:	9a06      	ldr	r2, [sp, #24]
 800dd0e:	2a47      	cmp	r2, #71	; 0x47
 800dd10:	d1be      	bne.n	800dc90 <_printf_float+0x100>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1bc      	bne.n	800dc90 <_printf_float+0x100>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e7b9      	b.n	800dc8e <_printf_float+0xfe>
 800dd1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dd1e:	d118      	bne.n	800dd52 <_printf_float+0x1c2>
 800dd20:	2900      	cmp	r1, #0
 800dd22:	6863      	ldr	r3, [r4, #4]
 800dd24:	dd0b      	ble.n	800dd3e <_printf_float+0x1ae>
 800dd26:	6121      	str	r1, [r4, #16]
 800dd28:	b913      	cbnz	r3, 800dd30 <_printf_float+0x1a0>
 800dd2a:	6822      	ldr	r2, [r4, #0]
 800dd2c:	07d0      	lsls	r0, r2, #31
 800dd2e:	d502      	bpl.n	800dd36 <_printf_float+0x1a6>
 800dd30:	3301      	adds	r3, #1
 800dd32:	440b      	add	r3, r1
 800dd34:	6123      	str	r3, [r4, #16]
 800dd36:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd38:	f04f 0900 	mov.w	r9, #0
 800dd3c:	e7de      	b.n	800dcfc <_printf_float+0x16c>
 800dd3e:	b913      	cbnz	r3, 800dd46 <_printf_float+0x1b6>
 800dd40:	6822      	ldr	r2, [r4, #0]
 800dd42:	07d2      	lsls	r2, r2, #31
 800dd44:	d501      	bpl.n	800dd4a <_printf_float+0x1ba>
 800dd46:	3302      	adds	r3, #2
 800dd48:	e7f4      	b.n	800dd34 <_printf_float+0x1a4>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e7f2      	b.n	800dd34 <_printf_float+0x1a4>
 800dd4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd54:	4299      	cmp	r1, r3
 800dd56:	db05      	blt.n	800dd64 <_printf_float+0x1d4>
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	6121      	str	r1, [r4, #16]
 800dd5c:	07d8      	lsls	r0, r3, #31
 800dd5e:	d5ea      	bpl.n	800dd36 <_printf_float+0x1a6>
 800dd60:	1c4b      	adds	r3, r1, #1
 800dd62:	e7e7      	b.n	800dd34 <_printf_float+0x1a4>
 800dd64:	2900      	cmp	r1, #0
 800dd66:	bfd4      	ite	le
 800dd68:	f1c1 0202 	rsble	r2, r1, #2
 800dd6c:	2201      	movgt	r2, #1
 800dd6e:	4413      	add	r3, r2
 800dd70:	e7e0      	b.n	800dd34 <_printf_float+0x1a4>
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	055a      	lsls	r2, r3, #21
 800dd76:	d407      	bmi.n	800dd88 <_printf_float+0x1f8>
 800dd78:	6923      	ldr	r3, [r4, #16]
 800dd7a:	4642      	mov	r2, r8
 800dd7c:	4631      	mov	r1, r6
 800dd7e:	4628      	mov	r0, r5
 800dd80:	47b8      	blx	r7
 800dd82:	3001      	adds	r0, #1
 800dd84:	d12c      	bne.n	800dde0 <_printf_float+0x250>
 800dd86:	e764      	b.n	800dc52 <_printf_float+0xc2>
 800dd88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd8c:	f240 80e0 	bls.w	800df50 <_printf_float+0x3c0>
 800dd90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd94:	2200      	movs	r2, #0
 800dd96:	2300      	movs	r3, #0
 800dd98:	f7f2 febe 	bl	8000b18 <__aeabi_dcmpeq>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d034      	beq.n	800de0a <_printf_float+0x27a>
 800dda0:	4a37      	ldr	r2, [pc, #220]	; (800de80 <_printf_float+0x2f0>)
 800dda2:	2301      	movs	r3, #1
 800dda4:	4631      	mov	r1, r6
 800dda6:	4628      	mov	r0, r5
 800dda8:	47b8      	blx	r7
 800ddaa:	3001      	adds	r0, #1
 800ddac:	f43f af51 	beq.w	800dc52 <_printf_float+0xc2>
 800ddb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	db02      	blt.n	800ddbe <_printf_float+0x22e>
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	07d8      	lsls	r0, r3, #31
 800ddbc:	d510      	bpl.n	800dde0 <_printf_float+0x250>
 800ddbe:	ee18 3a10 	vmov	r3, s16
 800ddc2:	4652      	mov	r2, sl
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f af41 	beq.w	800dc52 <_printf_float+0xc2>
 800ddd0:	f04f 0800 	mov.w	r8, #0
 800ddd4:	f104 091a 	add.w	r9, r4, #26
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddda:	3b01      	subs	r3, #1
 800dddc:	4543      	cmp	r3, r8
 800ddde:	dc09      	bgt.n	800ddf4 <_printf_float+0x264>
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	079b      	lsls	r3, r3, #30
 800dde4:	f100 8105 	bmi.w	800dff2 <_printf_float+0x462>
 800dde8:	68e0      	ldr	r0, [r4, #12]
 800ddea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddec:	4298      	cmp	r0, r3
 800ddee:	bfb8      	it	lt
 800ddf0:	4618      	movlt	r0, r3
 800ddf2:	e730      	b.n	800dc56 <_printf_float+0xc6>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	464a      	mov	r2, r9
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	47b8      	blx	r7
 800ddfe:	3001      	adds	r0, #1
 800de00:	f43f af27 	beq.w	800dc52 <_printf_float+0xc2>
 800de04:	f108 0801 	add.w	r8, r8, #1
 800de08:	e7e6      	b.n	800ddd8 <_printf_float+0x248>
 800de0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dc39      	bgt.n	800de84 <_printf_float+0x2f4>
 800de10:	4a1b      	ldr	r2, [pc, #108]	; (800de80 <_printf_float+0x2f0>)
 800de12:	2301      	movs	r3, #1
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	47b8      	blx	r7
 800de1a:	3001      	adds	r0, #1
 800de1c:	f43f af19 	beq.w	800dc52 <_printf_float+0xc2>
 800de20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de24:	4313      	orrs	r3, r2
 800de26:	d102      	bne.n	800de2e <_printf_float+0x29e>
 800de28:	6823      	ldr	r3, [r4, #0]
 800de2a:	07d9      	lsls	r1, r3, #31
 800de2c:	d5d8      	bpl.n	800dde0 <_printf_float+0x250>
 800de2e:	ee18 3a10 	vmov	r3, s16
 800de32:	4652      	mov	r2, sl
 800de34:	4631      	mov	r1, r6
 800de36:	4628      	mov	r0, r5
 800de38:	47b8      	blx	r7
 800de3a:	3001      	adds	r0, #1
 800de3c:	f43f af09 	beq.w	800dc52 <_printf_float+0xc2>
 800de40:	f04f 0900 	mov.w	r9, #0
 800de44:	f104 0a1a 	add.w	sl, r4, #26
 800de48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de4a:	425b      	negs	r3, r3
 800de4c:	454b      	cmp	r3, r9
 800de4e:	dc01      	bgt.n	800de54 <_printf_float+0x2c4>
 800de50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de52:	e792      	b.n	800dd7a <_printf_float+0x1ea>
 800de54:	2301      	movs	r3, #1
 800de56:	4652      	mov	r2, sl
 800de58:	4631      	mov	r1, r6
 800de5a:	4628      	mov	r0, r5
 800de5c:	47b8      	blx	r7
 800de5e:	3001      	adds	r0, #1
 800de60:	f43f aef7 	beq.w	800dc52 <_printf_float+0xc2>
 800de64:	f109 0901 	add.w	r9, r9, #1
 800de68:	e7ee      	b.n	800de48 <_printf_float+0x2b8>
 800de6a:	bf00      	nop
 800de6c:	7fefffff 	.word	0x7fefffff
 800de70:	080133e8 	.word	0x080133e8
 800de74:	080133ec 	.word	0x080133ec
 800de78:	080133f4 	.word	0x080133f4
 800de7c:	080133f0 	.word	0x080133f0
 800de80:	080133f8 	.word	0x080133f8
 800de84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de88:	429a      	cmp	r2, r3
 800de8a:	bfa8      	it	ge
 800de8c:	461a      	movge	r2, r3
 800de8e:	2a00      	cmp	r2, #0
 800de90:	4691      	mov	r9, r2
 800de92:	dc37      	bgt.n	800df04 <_printf_float+0x374>
 800de94:	f04f 0b00 	mov.w	fp, #0
 800de98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de9c:	f104 021a 	add.w	r2, r4, #26
 800dea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dea2:	9305      	str	r3, [sp, #20]
 800dea4:	eba3 0309 	sub.w	r3, r3, r9
 800dea8:	455b      	cmp	r3, fp
 800deaa:	dc33      	bgt.n	800df14 <_printf_float+0x384>
 800deac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800deb0:	429a      	cmp	r2, r3
 800deb2:	db3b      	blt.n	800df2c <_printf_float+0x39c>
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	07da      	lsls	r2, r3, #31
 800deb8:	d438      	bmi.n	800df2c <_printf_float+0x39c>
 800deba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800debc:	9b05      	ldr	r3, [sp, #20]
 800debe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	eba2 0901 	sub.w	r9, r2, r1
 800dec6:	4599      	cmp	r9, r3
 800dec8:	bfa8      	it	ge
 800deca:	4699      	movge	r9, r3
 800decc:	f1b9 0f00 	cmp.w	r9, #0
 800ded0:	dc35      	bgt.n	800df3e <_printf_float+0x3ae>
 800ded2:	f04f 0800 	mov.w	r8, #0
 800ded6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deda:	f104 0a1a 	add.w	sl, r4, #26
 800dede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dee2:	1a9b      	subs	r3, r3, r2
 800dee4:	eba3 0309 	sub.w	r3, r3, r9
 800dee8:	4543      	cmp	r3, r8
 800deea:	f77f af79 	ble.w	800dde0 <_printf_float+0x250>
 800deee:	2301      	movs	r3, #1
 800def0:	4652      	mov	r2, sl
 800def2:	4631      	mov	r1, r6
 800def4:	4628      	mov	r0, r5
 800def6:	47b8      	blx	r7
 800def8:	3001      	adds	r0, #1
 800defa:	f43f aeaa 	beq.w	800dc52 <_printf_float+0xc2>
 800defe:	f108 0801 	add.w	r8, r8, #1
 800df02:	e7ec      	b.n	800dede <_printf_float+0x34e>
 800df04:	4613      	mov	r3, r2
 800df06:	4631      	mov	r1, r6
 800df08:	4642      	mov	r2, r8
 800df0a:	4628      	mov	r0, r5
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	d1c0      	bne.n	800de94 <_printf_float+0x304>
 800df12:	e69e      	b.n	800dc52 <_printf_float+0xc2>
 800df14:	2301      	movs	r3, #1
 800df16:	4631      	mov	r1, r6
 800df18:	4628      	mov	r0, r5
 800df1a:	9205      	str	r2, [sp, #20]
 800df1c:	47b8      	blx	r7
 800df1e:	3001      	adds	r0, #1
 800df20:	f43f ae97 	beq.w	800dc52 <_printf_float+0xc2>
 800df24:	9a05      	ldr	r2, [sp, #20]
 800df26:	f10b 0b01 	add.w	fp, fp, #1
 800df2a:	e7b9      	b.n	800dea0 <_printf_float+0x310>
 800df2c:	ee18 3a10 	vmov	r3, s16
 800df30:	4652      	mov	r2, sl
 800df32:	4631      	mov	r1, r6
 800df34:	4628      	mov	r0, r5
 800df36:	47b8      	blx	r7
 800df38:	3001      	adds	r0, #1
 800df3a:	d1be      	bne.n	800deba <_printf_float+0x32a>
 800df3c:	e689      	b.n	800dc52 <_printf_float+0xc2>
 800df3e:	9a05      	ldr	r2, [sp, #20]
 800df40:	464b      	mov	r3, r9
 800df42:	4442      	add	r2, r8
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	47b8      	blx	r7
 800df4a:	3001      	adds	r0, #1
 800df4c:	d1c1      	bne.n	800ded2 <_printf_float+0x342>
 800df4e:	e680      	b.n	800dc52 <_printf_float+0xc2>
 800df50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df52:	2a01      	cmp	r2, #1
 800df54:	dc01      	bgt.n	800df5a <_printf_float+0x3ca>
 800df56:	07db      	lsls	r3, r3, #31
 800df58:	d538      	bpl.n	800dfcc <_printf_float+0x43c>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4642      	mov	r2, r8
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	f43f ae74 	beq.w	800dc52 <_printf_float+0xc2>
 800df6a:	ee18 3a10 	vmov	r3, s16
 800df6e:	4652      	mov	r2, sl
 800df70:	4631      	mov	r1, r6
 800df72:	4628      	mov	r0, r5
 800df74:	47b8      	blx	r7
 800df76:	3001      	adds	r0, #1
 800df78:	f43f ae6b 	beq.w	800dc52 <_printf_float+0xc2>
 800df7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df80:	2200      	movs	r2, #0
 800df82:	2300      	movs	r3, #0
 800df84:	f7f2 fdc8 	bl	8000b18 <__aeabi_dcmpeq>
 800df88:	b9d8      	cbnz	r0, 800dfc2 <_printf_float+0x432>
 800df8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8c:	f108 0201 	add.w	r2, r8, #1
 800df90:	3b01      	subs	r3, #1
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	d10e      	bne.n	800dfba <_printf_float+0x42a>
 800df9c:	e659      	b.n	800dc52 <_printf_float+0xc2>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	4652      	mov	r2, sl
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b8      	blx	r7
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f43f ae52 	beq.w	800dc52 <_printf_float+0xc2>
 800dfae:	f108 0801 	add.w	r8, r8, #1
 800dfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	4543      	cmp	r3, r8
 800dfb8:	dcf1      	bgt.n	800df9e <_printf_float+0x40e>
 800dfba:	464b      	mov	r3, r9
 800dfbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfc0:	e6dc      	b.n	800dd7c <_printf_float+0x1ec>
 800dfc2:	f04f 0800 	mov.w	r8, #0
 800dfc6:	f104 0a1a 	add.w	sl, r4, #26
 800dfca:	e7f2      	b.n	800dfb2 <_printf_float+0x422>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4642      	mov	r2, r8
 800dfd0:	e7df      	b.n	800df92 <_printf_float+0x402>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	464a      	mov	r2, r9
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	4628      	mov	r0, r5
 800dfda:	47b8      	blx	r7
 800dfdc:	3001      	adds	r0, #1
 800dfde:	f43f ae38 	beq.w	800dc52 <_printf_float+0xc2>
 800dfe2:	f108 0801 	add.w	r8, r8, #1
 800dfe6:	68e3      	ldr	r3, [r4, #12]
 800dfe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfea:	1a5b      	subs	r3, r3, r1
 800dfec:	4543      	cmp	r3, r8
 800dfee:	dcf0      	bgt.n	800dfd2 <_printf_float+0x442>
 800dff0:	e6fa      	b.n	800dde8 <_printf_float+0x258>
 800dff2:	f04f 0800 	mov.w	r8, #0
 800dff6:	f104 0919 	add.w	r9, r4, #25
 800dffa:	e7f4      	b.n	800dfe6 <_printf_float+0x456>

0800dffc <_printf_common>:
 800dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e000:	4616      	mov	r6, r2
 800e002:	4699      	mov	r9, r3
 800e004:	688a      	ldr	r2, [r1, #8]
 800e006:	690b      	ldr	r3, [r1, #16]
 800e008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e00c:	4293      	cmp	r3, r2
 800e00e:	bfb8      	it	lt
 800e010:	4613      	movlt	r3, r2
 800e012:	6033      	str	r3, [r6, #0]
 800e014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e018:	4607      	mov	r7, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	b10a      	cbz	r2, 800e022 <_printf_common+0x26>
 800e01e:	3301      	adds	r3, #1
 800e020:	6033      	str	r3, [r6, #0]
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	0699      	lsls	r1, r3, #26
 800e026:	bf42      	ittt	mi
 800e028:	6833      	ldrmi	r3, [r6, #0]
 800e02a:	3302      	addmi	r3, #2
 800e02c:	6033      	strmi	r3, [r6, #0]
 800e02e:	6825      	ldr	r5, [r4, #0]
 800e030:	f015 0506 	ands.w	r5, r5, #6
 800e034:	d106      	bne.n	800e044 <_printf_common+0x48>
 800e036:	f104 0a19 	add.w	sl, r4, #25
 800e03a:	68e3      	ldr	r3, [r4, #12]
 800e03c:	6832      	ldr	r2, [r6, #0]
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	42ab      	cmp	r3, r5
 800e042:	dc26      	bgt.n	800e092 <_printf_common+0x96>
 800e044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e048:	1e13      	subs	r3, r2, #0
 800e04a:	6822      	ldr	r2, [r4, #0]
 800e04c:	bf18      	it	ne
 800e04e:	2301      	movne	r3, #1
 800e050:	0692      	lsls	r2, r2, #26
 800e052:	d42b      	bmi.n	800e0ac <_printf_common+0xb0>
 800e054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e058:	4649      	mov	r1, r9
 800e05a:	4638      	mov	r0, r7
 800e05c:	47c0      	blx	r8
 800e05e:	3001      	adds	r0, #1
 800e060:	d01e      	beq.n	800e0a0 <_printf_common+0xa4>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	68e5      	ldr	r5, [r4, #12]
 800e066:	6832      	ldr	r2, [r6, #0]
 800e068:	f003 0306 	and.w	r3, r3, #6
 800e06c:	2b04      	cmp	r3, #4
 800e06e:	bf08      	it	eq
 800e070:	1aad      	subeq	r5, r5, r2
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	6922      	ldr	r2, [r4, #16]
 800e076:	bf0c      	ite	eq
 800e078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e07c:	2500      	movne	r5, #0
 800e07e:	4293      	cmp	r3, r2
 800e080:	bfc4      	itt	gt
 800e082:	1a9b      	subgt	r3, r3, r2
 800e084:	18ed      	addgt	r5, r5, r3
 800e086:	2600      	movs	r6, #0
 800e088:	341a      	adds	r4, #26
 800e08a:	42b5      	cmp	r5, r6
 800e08c:	d11a      	bne.n	800e0c4 <_printf_common+0xc8>
 800e08e:	2000      	movs	r0, #0
 800e090:	e008      	b.n	800e0a4 <_printf_common+0xa8>
 800e092:	2301      	movs	r3, #1
 800e094:	4652      	mov	r2, sl
 800e096:	4649      	mov	r1, r9
 800e098:	4638      	mov	r0, r7
 800e09a:	47c0      	blx	r8
 800e09c:	3001      	adds	r0, #1
 800e09e:	d103      	bne.n	800e0a8 <_printf_common+0xac>
 800e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	e7c6      	b.n	800e03a <_printf_common+0x3e>
 800e0ac:	18e1      	adds	r1, r4, r3
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	2030      	movs	r0, #48	; 0x30
 800e0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0b6:	4422      	add	r2, r4
 800e0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0c0:	3302      	adds	r3, #2
 800e0c2:	e7c7      	b.n	800e054 <_printf_common+0x58>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	47c0      	blx	r8
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	d0e6      	beq.n	800e0a0 <_printf_common+0xa4>
 800e0d2:	3601      	adds	r6, #1
 800e0d4:	e7d9      	b.n	800e08a <_printf_common+0x8e>
	...

0800e0d8 <_printf_i>:
 800e0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0dc:	460c      	mov	r4, r1
 800e0de:	4691      	mov	r9, r2
 800e0e0:	7e27      	ldrb	r7, [r4, #24]
 800e0e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0e4:	2f78      	cmp	r7, #120	; 0x78
 800e0e6:	4680      	mov	r8, r0
 800e0e8:	469a      	mov	sl, r3
 800e0ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0ee:	d807      	bhi.n	800e100 <_printf_i+0x28>
 800e0f0:	2f62      	cmp	r7, #98	; 0x62
 800e0f2:	d80a      	bhi.n	800e10a <_printf_i+0x32>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	f000 80d8 	beq.w	800e2aa <_printf_i+0x1d2>
 800e0fa:	2f58      	cmp	r7, #88	; 0x58
 800e0fc:	f000 80a3 	beq.w	800e246 <_printf_i+0x16e>
 800e100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e108:	e03a      	b.n	800e180 <_printf_i+0xa8>
 800e10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e10e:	2b15      	cmp	r3, #21
 800e110:	d8f6      	bhi.n	800e100 <_printf_i+0x28>
 800e112:	a001      	add	r0, pc, #4	; (adr r0, 800e118 <_printf_i+0x40>)
 800e114:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e185 	.word	0x0800e185
 800e120:	0800e101 	.word	0x0800e101
 800e124:	0800e101 	.word	0x0800e101
 800e128:	0800e101 	.word	0x0800e101
 800e12c:	0800e101 	.word	0x0800e101
 800e130:	0800e185 	.word	0x0800e185
 800e134:	0800e101 	.word	0x0800e101
 800e138:	0800e101 	.word	0x0800e101
 800e13c:	0800e101 	.word	0x0800e101
 800e140:	0800e101 	.word	0x0800e101
 800e144:	0800e291 	.word	0x0800e291
 800e148:	0800e1b5 	.word	0x0800e1b5
 800e14c:	0800e273 	.word	0x0800e273
 800e150:	0800e101 	.word	0x0800e101
 800e154:	0800e101 	.word	0x0800e101
 800e158:	0800e2b3 	.word	0x0800e2b3
 800e15c:	0800e101 	.word	0x0800e101
 800e160:	0800e1b5 	.word	0x0800e1b5
 800e164:	0800e101 	.word	0x0800e101
 800e168:	0800e101 	.word	0x0800e101
 800e16c:	0800e27b 	.word	0x0800e27b
 800e170:	680b      	ldr	r3, [r1, #0]
 800e172:	1d1a      	adds	r2, r3, #4
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	600a      	str	r2, [r1, #0]
 800e178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e180:	2301      	movs	r3, #1
 800e182:	e0a3      	b.n	800e2cc <_printf_i+0x1f4>
 800e184:	6825      	ldr	r5, [r4, #0]
 800e186:	6808      	ldr	r0, [r1, #0]
 800e188:	062e      	lsls	r6, r5, #24
 800e18a:	f100 0304 	add.w	r3, r0, #4
 800e18e:	d50a      	bpl.n	800e1a6 <_printf_i+0xce>
 800e190:	6805      	ldr	r5, [r0, #0]
 800e192:	600b      	str	r3, [r1, #0]
 800e194:	2d00      	cmp	r5, #0
 800e196:	da03      	bge.n	800e1a0 <_printf_i+0xc8>
 800e198:	232d      	movs	r3, #45	; 0x2d
 800e19a:	426d      	negs	r5, r5
 800e19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1a0:	485e      	ldr	r0, [pc, #376]	; (800e31c <_printf_i+0x244>)
 800e1a2:	230a      	movs	r3, #10
 800e1a4:	e019      	b.n	800e1da <_printf_i+0x102>
 800e1a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e1aa:	6805      	ldr	r5, [r0, #0]
 800e1ac:	600b      	str	r3, [r1, #0]
 800e1ae:	bf18      	it	ne
 800e1b0:	b22d      	sxthne	r5, r5
 800e1b2:	e7ef      	b.n	800e194 <_printf_i+0xbc>
 800e1b4:	680b      	ldr	r3, [r1, #0]
 800e1b6:	6825      	ldr	r5, [r4, #0]
 800e1b8:	1d18      	adds	r0, r3, #4
 800e1ba:	6008      	str	r0, [r1, #0]
 800e1bc:	0628      	lsls	r0, r5, #24
 800e1be:	d501      	bpl.n	800e1c4 <_printf_i+0xec>
 800e1c0:	681d      	ldr	r5, [r3, #0]
 800e1c2:	e002      	b.n	800e1ca <_printf_i+0xf2>
 800e1c4:	0669      	lsls	r1, r5, #25
 800e1c6:	d5fb      	bpl.n	800e1c0 <_printf_i+0xe8>
 800e1c8:	881d      	ldrh	r5, [r3, #0]
 800e1ca:	4854      	ldr	r0, [pc, #336]	; (800e31c <_printf_i+0x244>)
 800e1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2308      	moveq	r3, #8
 800e1d2:	230a      	movne	r3, #10
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1da:	6866      	ldr	r6, [r4, #4]
 800e1dc:	60a6      	str	r6, [r4, #8]
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	bfa2      	ittt	ge
 800e1e2:	6821      	ldrge	r1, [r4, #0]
 800e1e4:	f021 0104 	bicge.w	r1, r1, #4
 800e1e8:	6021      	strge	r1, [r4, #0]
 800e1ea:	b90d      	cbnz	r5, 800e1f0 <_printf_i+0x118>
 800e1ec:	2e00      	cmp	r6, #0
 800e1ee:	d04d      	beq.n	800e28c <_printf_i+0x1b4>
 800e1f0:	4616      	mov	r6, r2
 800e1f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1f6:	fb03 5711 	mls	r7, r3, r1, r5
 800e1fa:	5dc7      	ldrb	r7, [r0, r7]
 800e1fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e200:	462f      	mov	r7, r5
 800e202:	42bb      	cmp	r3, r7
 800e204:	460d      	mov	r5, r1
 800e206:	d9f4      	bls.n	800e1f2 <_printf_i+0x11a>
 800e208:	2b08      	cmp	r3, #8
 800e20a:	d10b      	bne.n	800e224 <_printf_i+0x14c>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	07df      	lsls	r7, r3, #31
 800e210:	d508      	bpl.n	800e224 <_printf_i+0x14c>
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	6861      	ldr	r1, [r4, #4]
 800e216:	4299      	cmp	r1, r3
 800e218:	bfde      	ittt	le
 800e21a:	2330      	movle	r3, #48	; 0x30
 800e21c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e220:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e224:	1b92      	subs	r2, r2, r6
 800e226:	6122      	str	r2, [r4, #16]
 800e228:	f8cd a000 	str.w	sl, [sp]
 800e22c:	464b      	mov	r3, r9
 800e22e:	aa03      	add	r2, sp, #12
 800e230:	4621      	mov	r1, r4
 800e232:	4640      	mov	r0, r8
 800e234:	f7ff fee2 	bl	800dffc <_printf_common>
 800e238:	3001      	adds	r0, #1
 800e23a:	d14c      	bne.n	800e2d6 <_printf_i+0x1fe>
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295
 800e240:	b004      	add	sp, #16
 800e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e246:	4835      	ldr	r0, [pc, #212]	; (800e31c <_printf_i+0x244>)
 800e248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	680e      	ldr	r6, [r1, #0]
 800e250:	061f      	lsls	r7, r3, #24
 800e252:	f856 5b04 	ldr.w	r5, [r6], #4
 800e256:	600e      	str	r6, [r1, #0]
 800e258:	d514      	bpl.n	800e284 <_printf_i+0x1ac>
 800e25a:	07d9      	lsls	r1, r3, #31
 800e25c:	bf44      	itt	mi
 800e25e:	f043 0320 	orrmi.w	r3, r3, #32
 800e262:	6023      	strmi	r3, [r4, #0]
 800e264:	b91d      	cbnz	r5, 800e26e <_printf_i+0x196>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	f023 0320 	bic.w	r3, r3, #32
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	2310      	movs	r3, #16
 800e270:	e7b0      	b.n	800e1d4 <_printf_i+0xfc>
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	f043 0320 	orr.w	r3, r3, #32
 800e278:	6023      	str	r3, [r4, #0]
 800e27a:	2378      	movs	r3, #120	; 0x78
 800e27c:	4828      	ldr	r0, [pc, #160]	; (800e320 <_printf_i+0x248>)
 800e27e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e282:	e7e3      	b.n	800e24c <_printf_i+0x174>
 800e284:	065e      	lsls	r6, r3, #25
 800e286:	bf48      	it	mi
 800e288:	b2ad      	uxthmi	r5, r5
 800e28a:	e7e6      	b.n	800e25a <_printf_i+0x182>
 800e28c:	4616      	mov	r6, r2
 800e28e:	e7bb      	b.n	800e208 <_printf_i+0x130>
 800e290:	680b      	ldr	r3, [r1, #0]
 800e292:	6826      	ldr	r6, [r4, #0]
 800e294:	6960      	ldr	r0, [r4, #20]
 800e296:	1d1d      	adds	r5, r3, #4
 800e298:	600d      	str	r5, [r1, #0]
 800e29a:	0635      	lsls	r5, r6, #24
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	d501      	bpl.n	800e2a4 <_printf_i+0x1cc>
 800e2a0:	6018      	str	r0, [r3, #0]
 800e2a2:	e002      	b.n	800e2aa <_printf_i+0x1d2>
 800e2a4:	0671      	lsls	r1, r6, #25
 800e2a6:	d5fb      	bpl.n	800e2a0 <_printf_i+0x1c8>
 800e2a8:	8018      	strh	r0, [r3, #0]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	6123      	str	r3, [r4, #16]
 800e2ae:	4616      	mov	r6, r2
 800e2b0:	e7ba      	b.n	800e228 <_printf_i+0x150>
 800e2b2:	680b      	ldr	r3, [r1, #0]
 800e2b4:	1d1a      	adds	r2, r3, #4
 800e2b6:	600a      	str	r2, [r1, #0]
 800e2b8:	681e      	ldr	r6, [r3, #0]
 800e2ba:	6862      	ldr	r2, [r4, #4]
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7f1 ffb6 	bl	8000230 <memchr>
 800e2c4:	b108      	cbz	r0, 800e2ca <_printf_i+0x1f2>
 800e2c6:	1b80      	subs	r0, r0, r6
 800e2c8:	6060      	str	r0, [r4, #4]
 800e2ca:	6863      	ldr	r3, [r4, #4]
 800e2cc:	6123      	str	r3, [r4, #16]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2d4:	e7a8      	b.n	800e228 <_printf_i+0x150>
 800e2d6:	6923      	ldr	r3, [r4, #16]
 800e2d8:	4632      	mov	r2, r6
 800e2da:	4649      	mov	r1, r9
 800e2dc:	4640      	mov	r0, r8
 800e2de:	47d0      	blx	sl
 800e2e0:	3001      	adds	r0, #1
 800e2e2:	d0ab      	beq.n	800e23c <_printf_i+0x164>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	079b      	lsls	r3, r3, #30
 800e2e8:	d413      	bmi.n	800e312 <_printf_i+0x23a>
 800e2ea:	68e0      	ldr	r0, [r4, #12]
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	4298      	cmp	r0, r3
 800e2f0:	bfb8      	it	lt
 800e2f2:	4618      	movlt	r0, r3
 800e2f4:	e7a4      	b.n	800e240 <_printf_i+0x168>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	4632      	mov	r2, r6
 800e2fa:	4649      	mov	r1, r9
 800e2fc:	4640      	mov	r0, r8
 800e2fe:	47d0      	blx	sl
 800e300:	3001      	adds	r0, #1
 800e302:	d09b      	beq.n	800e23c <_printf_i+0x164>
 800e304:	3501      	adds	r5, #1
 800e306:	68e3      	ldr	r3, [r4, #12]
 800e308:	9903      	ldr	r1, [sp, #12]
 800e30a:	1a5b      	subs	r3, r3, r1
 800e30c:	42ab      	cmp	r3, r5
 800e30e:	dcf2      	bgt.n	800e2f6 <_printf_i+0x21e>
 800e310:	e7eb      	b.n	800e2ea <_printf_i+0x212>
 800e312:	2500      	movs	r5, #0
 800e314:	f104 0619 	add.w	r6, r4, #25
 800e318:	e7f5      	b.n	800e306 <_printf_i+0x22e>
 800e31a:	bf00      	nop
 800e31c:	080133fa 	.word	0x080133fa
 800e320:	0801340b 	.word	0x0801340b

0800e324 <iprintf>:
 800e324:	b40f      	push	{r0, r1, r2, r3}
 800e326:	4b0a      	ldr	r3, [pc, #40]	; (800e350 <iprintf+0x2c>)
 800e328:	b513      	push	{r0, r1, r4, lr}
 800e32a:	681c      	ldr	r4, [r3, #0]
 800e32c:	b124      	cbz	r4, 800e338 <iprintf+0x14>
 800e32e:	69a3      	ldr	r3, [r4, #24]
 800e330:	b913      	cbnz	r3, 800e338 <iprintf+0x14>
 800e332:	4620      	mov	r0, r4
 800e334:	f001 ff96 	bl	8010264 <__sinit>
 800e338:	ab05      	add	r3, sp, #20
 800e33a:	9a04      	ldr	r2, [sp, #16]
 800e33c:	68a1      	ldr	r1, [r4, #8]
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	4620      	mov	r0, r4
 800e342:	f003 f9bf 	bl	80116c4 <_vfiprintf_r>
 800e346:	b002      	add	sp, #8
 800e348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e34c:	b004      	add	sp, #16
 800e34e:	4770      	bx	lr
 800e350:	20000030 	.word	0x20000030

0800e354 <_puts_r>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	460e      	mov	r6, r1
 800e358:	4605      	mov	r5, r0
 800e35a:	b118      	cbz	r0, 800e364 <_puts_r+0x10>
 800e35c:	6983      	ldr	r3, [r0, #24]
 800e35e:	b90b      	cbnz	r3, 800e364 <_puts_r+0x10>
 800e360:	f001 ff80 	bl	8010264 <__sinit>
 800e364:	69ab      	ldr	r3, [r5, #24]
 800e366:	68ac      	ldr	r4, [r5, #8]
 800e368:	b913      	cbnz	r3, 800e370 <_puts_r+0x1c>
 800e36a:	4628      	mov	r0, r5
 800e36c:	f001 ff7a 	bl	8010264 <__sinit>
 800e370:	4b2c      	ldr	r3, [pc, #176]	; (800e424 <_puts_r+0xd0>)
 800e372:	429c      	cmp	r4, r3
 800e374:	d120      	bne.n	800e3b8 <_puts_r+0x64>
 800e376:	686c      	ldr	r4, [r5, #4]
 800e378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e37a:	07db      	lsls	r3, r3, #31
 800e37c:	d405      	bmi.n	800e38a <_puts_r+0x36>
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	0598      	lsls	r0, r3, #22
 800e382:	d402      	bmi.n	800e38a <_puts_r+0x36>
 800e384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e386:	f002 fb7e 	bl	8010a86 <__retarget_lock_acquire_recursive>
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	0719      	lsls	r1, r3, #28
 800e38e:	d51d      	bpl.n	800e3cc <_puts_r+0x78>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	b1db      	cbz	r3, 800e3cc <_puts_r+0x78>
 800e394:	3e01      	subs	r6, #1
 800e396:	68a3      	ldr	r3, [r4, #8]
 800e398:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e39c:	3b01      	subs	r3, #1
 800e39e:	60a3      	str	r3, [r4, #8]
 800e3a0:	bb39      	cbnz	r1, 800e3f2 <_puts_r+0x9e>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da38      	bge.n	800e418 <_puts_r+0xc4>
 800e3a6:	4622      	mov	r2, r4
 800e3a8:	210a      	movs	r1, #10
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f000 ff08 	bl	800f1c0 <__swbuf_r>
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	d011      	beq.n	800e3d8 <_puts_r+0x84>
 800e3b4:	250a      	movs	r5, #10
 800e3b6:	e011      	b.n	800e3dc <_puts_r+0x88>
 800e3b8:	4b1b      	ldr	r3, [pc, #108]	; (800e428 <_puts_r+0xd4>)
 800e3ba:	429c      	cmp	r4, r3
 800e3bc:	d101      	bne.n	800e3c2 <_puts_r+0x6e>
 800e3be:	68ac      	ldr	r4, [r5, #8]
 800e3c0:	e7da      	b.n	800e378 <_puts_r+0x24>
 800e3c2:	4b1a      	ldr	r3, [pc, #104]	; (800e42c <_puts_r+0xd8>)
 800e3c4:	429c      	cmp	r4, r3
 800e3c6:	bf08      	it	eq
 800e3c8:	68ec      	ldreq	r4, [r5, #12]
 800e3ca:	e7d5      	b.n	800e378 <_puts_r+0x24>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f000 ff48 	bl	800f264 <__swsetup_r>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0dd      	beq.n	800e394 <_puts_r+0x40>
 800e3d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e3dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3de:	07da      	lsls	r2, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_puts_r+0x9a>
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	059b      	lsls	r3, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_puts_r+0x9a>
 800e3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3ea:	f002 fb4d 	bl	8010a88 <__retarget_lock_release_recursive>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	bd70      	pop	{r4, r5, r6, pc}
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	da04      	bge.n	800e400 <_puts_r+0xac>
 800e3f6:	69a2      	ldr	r2, [r4, #24]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	dc06      	bgt.n	800e40a <_puts_r+0xb6>
 800e3fc:	290a      	cmp	r1, #10
 800e3fe:	d004      	beq.n	800e40a <_puts_r+0xb6>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	1c5a      	adds	r2, r3, #1
 800e404:	6022      	str	r2, [r4, #0]
 800e406:	7019      	strb	r1, [r3, #0]
 800e408:	e7c5      	b.n	800e396 <_puts_r+0x42>
 800e40a:	4622      	mov	r2, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f000 fed7 	bl	800f1c0 <__swbuf_r>
 800e412:	3001      	adds	r0, #1
 800e414:	d1bf      	bne.n	800e396 <_puts_r+0x42>
 800e416:	e7df      	b.n	800e3d8 <_puts_r+0x84>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	250a      	movs	r5, #10
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	6022      	str	r2, [r4, #0]
 800e420:	701d      	strb	r5, [r3, #0]
 800e422:	e7db      	b.n	800e3dc <_puts_r+0x88>
 800e424:	08013628 	.word	0x08013628
 800e428:	08013648 	.word	0x08013648
 800e42c:	08013608 	.word	0x08013608

0800e430 <puts>:
 800e430:	4b02      	ldr	r3, [pc, #8]	; (800e43c <puts+0xc>)
 800e432:	4601      	mov	r1, r0
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f7ff bf8d 	b.w	800e354 <_puts_r>
 800e43a:	bf00      	nop
 800e43c:	20000030 	.word	0x20000030

0800e440 <sulp>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	4604      	mov	r4, r0
 800e444:	460d      	mov	r5, r1
 800e446:	ec45 4b10 	vmov	d0, r4, r5
 800e44a:	4616      	mov	r6, r2
 800e44c:	f002 ff08 	bl	8011260 <__ulp>
 800e450:	ec51 0b10 	vmov	r0, r1, d0
 800e454:	b17e      	cbz	r6, 800e476 <sulp+0x36>
 800e456:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e45a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dd09      	ble.n	800e476 <sulp+0x36>
 800e462:	051b      	lsls	r3, r3, #20
 800e464:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e468:	2400      	movs	r4, #0
 800e46a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e46e:	4622      	mov	r2, r4
 800e470:	462b      	mov	r3, r5
 800e472:	f7f2 f8e9 	bl	8000648 <__aeabi_dmul>
 800e476:	bd70      	pop	{r4, r5, r6, pc}

0800e478 <_strtod_l>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	b0a3      	sub	sp, #140	; 0x8c
 800e47e:	461f      	mov	r7, r3
 800e480:	2300      	movs	r3, #0
 800e482:	931e      	str	r3, [sp, #120]	; 0x78
 800e484:	4ba4      	ldr	r3, [pc, #656]	; (800e718 <_strtod_l+0x2a0>)
 800e486:	9219      	str	r2, [sp, #100]	; 0x64
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	9307      	str	r3, [sp, #28]
 800e48c:	4604      	mov	r4, r0
 800e48e:	4618      	mov	r0, r3
 800e490:	4688      	mov	r8, r1
 800e492:	f7f1 fec5 	bl	8000220 <strlen>
 800e496:	f04f 0a00 	mov.w	sl, #0
 800e49a:	4605      	mov	r5, r0
 800e49c:	f04f 0b00 	mov.w	fp, #0
 800e4a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	2a2b      	cmp	r2, #43	; 0x2b
 800e4aa:	d04c      	beq.n	800e546 <_strtod_l+0xce>
 800e4ac:	d839      	bhi.n	800e522 <_strtod_l+0xaa>
 800e4ae:	2a0d      	cmp	r2, #13
 800e4b0:	d832      	bhi.n	800e518 <_strtod_l+0xa0>
 800e4b2:	2a08      	cmp	r2, #8
 800e4b4:	d832      	bhi.n	800e51c <_strtod_l+0xa4>
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	d03c      	beq.n	800e534 <_strtod_l+0xbc>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e4be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e4c0:	7833      	ldrb	r3, [r6, #0]
 800e4c2:	2b30      	cmp	r3, #48	; 0x30
 800e4c4:	f040 80b4 	bne.w	800e630 <_strtod_l+0x1b8>
 800e4c8:	7873      	ldrb	r3, [r6, #1]
 800e4ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4ce:	2b58      	cmp	r3, #88	; 0x58
 800e4d0:	d16c      	bne.n	800e5ac <_strtod_l+0x134>
 800e4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4d4:	9301      	str	r3, [sp, #4]
 800e4d6:	ab1e      	add	r3, sp, #120	; 0x78
 800e4d8:	9702      	str	r7, [sp, #8]
 800e4da:	9300      	str	r3, [sp, #0]
 800e4dc:	4a8f      	ldr	r2, [pc, #572]	; (800e71c <_strtod_l+0x2a4>)
 800e4de:	ab1f      	add	r3, sp, #124	; 0x7c
 800e4e0:	a91d      	add	r1, sp, #116	; 0x74
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f001 ffc2 	bl	801046c <__gethex>
 800e4e8:	f010 0707 	ands.w	r7, r0, #7
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	d005      	beq.n	800e4fc <_strtod_l+0x84>
 800e4f0:	2f06      	cmp	r7, #6
 800e4f2:	d12a      	bne.n	800e54a <_strtod_l+0xd2>
 800e4f4:	3601      	adds	r6, #1
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	961d      	str	r6, [sp, #116]	; 0x74
 800e4fa:	930e      	str	r3, [sp, #56]	; 0x38
 800e4fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f040 8596 	bne.w	800f030 <_strtod_l+0xbb8>
 800e504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e506:	b1db      	cbz	r3, 800e540 <_strtod_l+0xc8>
 800e508:	4652      	mov	r2, sl
 800e50a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e50e:	ec43 2b10 	vmov	d0, r2, r3
 800e512:	b023      	add	sp, #140	; 0x8c
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	2a20      	cmp	r2, #32
 800e51a:	d1ce      	bne.n	800e4ba <_strtod_l+0x42>
 800e51c:	3301      	adds	r3, #1
 800e51e:	931d      	str	r3, [sp, #116]	; 0x74
 800e520:	e7c0      	b.n	800e4a4 <_strtod_l+0x2c>
 800e522:	2a2d      	cmp	r2, #45	; 0x2d
 800e524:	d1c9      	bne.n	800e4ba <_strtod_l+0x42>
 800e526:	2201      	movs	r2, #1
 800e528:	920e      	str	r2, [sp, #56]	; 0x38
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	921d      	str	r2, [sp, #116]	; 0x74
 800e52e:	785b      	ldrb	r3, [r3, #1]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1c4      	bne.n	800e4be <_strtod_l+0x46>
 800e534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e536:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 8576 	bne.w	800f02c <_strtod_l+0xbb4>
 800e540:	4652      	mov	r2, sl
 800e542:	465b      	mov	r3, fp
 800e544:	e7e3      	b.n	800e50e <_strtod_l+0x96>
 800e546:	2200      	movs	r2, #0
 800e548:	e7ee      	b.n	800e528 <_strtod_l+0xb0>
 800e54a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e54c:	b13a      	cbz	r2, 800e55e <_strtod_l+0xe6>
 800e54e:	2135      	movs	r1, #53	; 0x35
 800e550:	a820      	add	r0, sp, #128	; 0x80
 800e552:	f002 ff90 	bl	8011476 <__copybits>
 800e556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e558:	4620      	mov	r0, r4
 800e55a:	f002 fb55 	bl	8010c08 <_Bfree>
 800e55e:	3f01      	subs	r7, #1
 800e560:	2f05      	cmp	r7, #5
 800e562:	d807      	bhi.n	800e574 <_strtod_l+0xfc>
 800e564:	e8df f007 	tbb	[pc, r7]
 800e568:	1d180b0e 	.word	0x1d180b0e
 800e56c:	030e      	.short	0x030e
 800e56e:	f04f 0b00 	mov.w	fp, #0
 800e572:	46da      	mov	sl, fp
 800e574:	0728      	lsls	r0, r5, #28
 800e576:	d5c1      	bpl.n	800e4fc <_strtod_l+0x84>
 800e578:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e57c:	e7be      	b.n	800e4fc <_strtod_l+0x84>
 800e57e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e582:	e7f7      	b.n	800e574 <_strtod_l+0xfc>
 800e584:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e588:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e58a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e58e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e596:	e7ed      	b.n	800e574 <_strtod_l+0xfc>
 800e598:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e720 <_strtod_l+0x2a8>
 800e59c:	f04f 0a00 	mov.w	sl, #0
 800e5a0:	e7e8      	b.n	800e574 <_strtod_l+0xfc>
 800e5a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e5a6:	f04f 3aff 	mov.w	sl, #4294967295
 800e5aa:	e7e3      	b.n	800e574 <_strtod_l+0xfc>
 800e5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	921d      	str	r2, [sp, #116]	; 0x74
 800e5b2:	785b      	ldrb	r3, [r3, #1]
 800e5b4:	2b30      	cmp	r3, #48	; 0x30
 800e5b6:	d0f9      	beq.n	800e5ac <_strtod_l+0x134>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d09f      	beq.n	800e4fc <_strtod_l+0x84>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f04f 0900 	mov.w	r9, #0
 800e5c2:	9304      	str	r3, [sp, #16]
 800e5c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e5cc:	464f      	mov	r7, r9
 800e5ce:	220a      	movs	r2, #10
 800e5d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e5d2:	7806      	ldrb	r6, [r0, #0]
 800e5d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e5d8:	b2d9      	uxtb	r1, r3
 800e5da:	2909      	cmp	r1, #9
 800e5dc:	d92a      	bls.n	800e634 <_strtod_l+0x1bc>
 800e5de:	9907      	ldr	r1, [sp, #28]
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	f003 f9fc 	bl	80119de <strncmp>
 800e5e6:	b398      	cbz	r0, 800e650 <_strtod_l+0x1d8>
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	4633      	mov	r3, r6
 800e5ec:	463d      	mov	r5, r7
 800e5ee:	9007      	str	r0, [sp, #28]
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	2b65      	cmp	r3, #101	; 0x65
 800e5f4:	d001      	beq.n	800e5fa <_strtod_l+0x182>
 800e5f6:	2b45      	cmp	r3, #69	; 0x45
 800e5f8:	d118      	bne.n	800e62c <_strtod_l+0x1b4>
 800e5fa:	b91d      	cbnz	r5, 800e604 <_strtod_l+0x18c>
 800e5fc:	9b04      	ldr	r3, [sp, #16]
 800e5fe:	4303      	orrs	r3, r0
 800e600:	d098      	beq.n	800e534 <_strtod_l+0xbc>
 800e602:	2500      	movs	r5, #0
 800e604:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e608:	f108 0301 	add.w	r3, r8, #1
 800e60c:	931d      	str	r3, [sp, #116]	; 0x74
 800e60e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e612:	2b2b      	cmp	r3, #43	; 0x2b
 800e614:	d075      	beq.n	800e702 <_strtod_l+0x28a>
 800e616:	2b2d      	cmp	r3, #45	; 0x2d
 800e618:	d07b      	beq.n	800e712 <_strtod_l+0x29a>
 800e61a:	f04f 0c00 	mov.w	ip, #0
 800e61e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e622:	2909      	cmp	r1, #9
 800e624:	f240 8082 	bls.w	800e72c <_strtod_l+0x2b4>
 800e628:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e62c:	2600      	movs	r6, #0
 800e62e:	e09d      	b.n	800e76c <_strtod_l+0x2f4>
 800e630:	2300      	movs	r3, #0
 800e632:	e7c4      	b.n	800e5be <_strtod_l+0x146>
 800e634:	2f08      	cmp	r7, #8
 800e636:	bfd8      	it	le
 800e638:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e63a:	f100 0001 	add.w	r0, r0, #1
 800e63e:	bfda      	itte	le
 800e640:	fb02 3301 	mlale	r3, r2, r1, r3
 800e644:	9309      	strle	r3, [sp, #36]	; 0x24
 800e646:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e64a:	3701      	adds	r7, #1
 800e64c:	901d      	str	r0, [sp, #116]	; 0x74
 800e64e:	e7bf      	b.n	800e5d0 <_strtod_l+0x158>
 800e650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e652:	195a      	adds	r2, r3, r5
 800e654:	921d      	str	r2, [sp, #116]	; 0x74
 800e656:	5d5b      	ldrb	r3, [r3, r5]
 800e658:	2f00      	cmp	r7, #0
 800e65a:	d037      	beq.n	800e6cc <_strtod_l+0x254>
 800e65c:	9007      	str	r0, [sp, #28]
 800e65e:	463d      	mov	r5, r7
 800e660:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e664:	2a09      	cmp	r2, #9
 800e666:	d912      	bls.n	800e68e <_strtod_l+0x216>
 800e668:	2201      	movs	r2, #1
 800e66a:	e7c2      	b.n	800e5f2 <_strtod_l+0x17a>
 800e66c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	921d      	str	r2, [sp, #116]	; 0x74
 800e672:	785b      	ldrb	r3, [r3, #1]
 800e674:	3001      	adds	r0, #1
 800e676:	2b30      	cmp	r3, #48	; 0x30
 800e678:	d0f8      	beq.n	800e66c <_strtod_l+0x1f4>
 800e67a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e67e:	2a08      	cmp	r2, #8
 800e680:	f200 84db 	bhi.w	800f03a <_strtod_l+0xbc2>
 800e684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e686:	9007      	str	r0, [sp, #28]
 800e688:	2000      	movs	r0, #0
 800e68a:	920a      	str	r2, [sp, #40]	; 0x28
 800e68c:	4605      	mov	r5, r0
 800e68e:	3b30      	subs	r3, #48	; 0x30
 800e690:	f100 0201 	add.w	r2, r0, #1
 800e694:	d014      	beq.n	800e6c0 <_strtod_l+0x248>
 800e696:	9907      	ldr	r1, [sp, #28]
 800e698:	4411      	add	r1, r2
 800e69a:	9107      	str	r1, [sp, #28]
 800e69c:	462a      	mov	r2, r5
 800e69e:	eb00 0e05 	add.w	lr, r0, r5
 800e6a2:	210a      	movs	r1, #10
 800e6a4:	4572      	cmp	r2, lr
 800e6a6:	d113      	bne.n	800e6d0 <_strtod_l+0x258>
 800e6a8:	182a      	adds	r2, r5, r0
 800e6aa:	2a08      	cmp	r2, #8
 800e6ac:	f105 0501 	add.w	r5, r5, #1
 800e6b0:	4405      	add	r5, r0
 800e6b2:	dc1c      	bgt.n	800e6ee <_strtod_l+0x276>
 800e6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b6:	220a      	movs	r2, #10
 800e6b8:	fb02 3301 	mla	r3, r2, r1, r3
 800e6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6be:	2200      	movs	r2, #0
 800e6c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6c2:	1c59      	adds	r1, r3, #1
 800e6c4:	911d      	str	r1, [sp, #116]	; 0x74
 800e6c6:	785b      	ldrb	r3, [r3, #1]
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	e7c9      	b.n	800e660 <_strtod_l+0x1e8>
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	e7d2      	b.n	800e676 <_strtod_l+0x1fe>
 800e6d0:	2a08      	cmp	r2, #8
 800e6d2:	dc04      	bgt.n	800e6de <_strtod_l+0x266>
 800e6d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e6d6:	434e      	muls	r6, r1
 800e6d8:	9609      	str	r6, [sp, #36]	; 0x24
 800e6da:	3201      	adds	r2, #1
 800e6dc:	e7e2      	b.n	800e6a4 <_strtod_l+0x22c>
 800e6de:	f102 0c01 	add.w	ip, r2, #1
 800e6e2:	f1bc 0f10 	cmp.w	ip, #16
 800e6e6:	bfd8      	it	le
 800e6e8:	fb01 f909 	mulle.w	r9, r1, r9
 800e6ec:	e7f5      	b.n	800e6da <_strtod_l+0x262>
 800e6ee:	2d10      	cmp	r5, #16
 800e6f0:	bfdc      	itt	le
 800e6f2:	220a      	movle	r2, #10
 800e6f4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e6f8:	e7e1      	b.n	800e6be <_strtod_l+0x246>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9307      	str	r3, [sp, #28]
 800e6fe:	2201      	movs	r2, #1
 800e700:	e77c      	b.n	800e5fc <_strtod_l+0x184>
 800e702:	f04f 0c00 	mov.w	ip, #0
 800e706:	f108 0302 	add.w	r3, r8, #2
 800e70a:	931d      	str	r3, [sp, #116]	; 0x74
 800e70c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e710:	e785      	b.n	800e61e <_strtod_l+0x1a6>
 800e712:	f04f 0c01 	mov.w	ip, #1
 800e716:	e7f6      	b.n	800e706 <_strtod_l+0x28e>
 800e718:	080136d4 	.word	0x080136d4
 800e71c:	0801341c 	.word	0x0801341c
 800e720:	7ff00000 	.word	0x7ff00000
 800e724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e726:	1c59      	adds	r1, r3, #1
 800e728:	911d      	str	r1, [sp, #116]	; 0x74
 800e72a:	785b      	ldrb	r3, [r3, #1]
 800e72c:	2b30      	cmp	r3, #48	; 0x30
 800e72e:	d0f9      	beq.n	800e724 <_strtod_l+0x2ac>
 800e730:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e734:	2908      	cmp	r1, #8
 800e736:	f63f af79 	bhi.w	800e62c <_strtod_l+0x1b4>
 800e73a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e73e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e740:	9308      	str	r3, [sp, #32]
 800e742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e744:	1c59      	adds	r1, r3, #1
 800e746:	911d      	str	r1, [sp, #116]	; 0x74
 800e748:	785b      	ldrb	r3, [r3, #1]
 800e74a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e74e:	2e09      	cmp	r6, #9
 800e750:	d937      	bls.n	800e7c2 <_strtod_l+0x34a>
 800e752:	9e08      	ldr	r6, [sp, #32]
 800e754:	1b89      	subs	r1, r1, r6
 800e756:	2908      	cmp	r1, #8
 800e758:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e75c:	dc02      	bgt.n	800e764 <_strtod_l+0x2ec>
 800e75e:	4576      	cmp	r6, lr
 800e760:	bfa8      	it	ge
 800e762:	4676      	movge	r6, lr
 800e764:	f1bc 0f00 	cmp.w	ip, #0
 800e768:	d000      	beq.n	800e76c <_strtod_l+0x2f4>
 800e76a:	4276      	negs	r6, r6
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d14f      	bne.n	800e810 <_strtod_l+0x398>
 800e770:	9904      	ldr	r1, [sp, #16]
 800e772:	4301      	orrs	r1, r0
 800e774:	f47f aec2 	bne.w	800e4fc <_strtod_l+0x84>
 800e778:	2a00      	cmp	r2, #0
 800e77a:	f47f aedb 	bne.w	800e534 <_strtod_l+0xbc>
 800e77e:	2b69      	cmp	r3, #105	; 0x69
 800e780:	d027      	beq.n	800e7d2 <_strtod_l+0x35a>
 800e782:	dc24      	bgt.n	800e7ce <_strtod_l+0x356>
 800e784:	2b49      	cmp	r3, #73	; 0x49
 800e786:	d024      	beq.n	800e7d2 <_strtod_l+0x35a>
 800e788:	2b4e      	cmp	r3, #78	; 0x4e
 800e78a:	f47f aed3 	bne.w	800e534 <_strtod_l+0xbc>
 800e78e:	499e      	ldr	r1, [pc, #632]	; (800ea08 <_strtod_l+0x590>)
 800e790:	a81d      	add	r0, sp, #116	; 0x74
 800e792:	f002 f8c3 	bl	801091c <__match>
 800e796:	2800      	cmp	r0, #0
 800e798:	f43f aecc 	beq.w	800e534 <_strtod_l+0xbc>
 800e79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	2b28      	cmp	r3, #40	; 0x28
 800e7a2:	d12d      	bne.n	800e800 <_strtod_l+0x388>
 800e7a4:	4999      	ldr	r1, [pc, #612]	; (800ea0c <_strtod_l+0x594>)
 800e7a6:	aa20      	add	r2, sp, #128	; 0x80
 800e7a8:	a81d      	add	r0, sp, #116	; 0x74
 800e7aa:	f002 f8cb 	bl	8010944 <__hexnan>
 800e7ae:	2805      	cmp	r0, #5
 800e7b0:	d126      	bne.n	800e800 <_strtod_l+0x388>
 800e7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e7b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e7bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e7c0:	e69c      	b.n	800e4fc <_strtod_l+0x84>
 800e7c2:	210a      	movs	r1, #10
 800e7c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e7c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7cc:	e7b9      	b.n	800e742 <_strtod_l+0x2ca>
 800e7ce:	2b6e      	cmp	r3, #110	; 0x6e
 800e7d0:	e7db      	b.n	800e78a <_strtod_l+0x312>
 800e7d2:	498f      	ldr	r1, [pc, #572]	; (800ea10 <_strtod_l+0x598>)
 800e7d4:	a81d      	add	r0, sp, #116	; 0x74
 800e7d6:	f002 f8a1 	bl	801091c <__match>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	f43f aeaa 	beq.w	800e534 <_strtod_l+0xbc>
 800e7e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7e2:	498c      	ldr	r1, [pc, #560]	; (800ea14 <_strtod_l+0x59c>)
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	a81d      	add	r0, sp, #116	; 0x74
 800e7e8:	931d      	str	r3, [sp, #116]	; 0x74
 800e7ea:	f002 f897 	bl	801091c <__match>
 800e7ee:	b910      	cbnz	r0, 800e7f6 <_strtod_l+0x37e>
 800e7f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	931d      	str	r3, [sp, #116]	; 0x74
 800e7f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ea24 <_strtod_l+0x5ac>
 800e7fa:	f04f 0a00 	mov.w	sl, #0
 800e7fe:	e67d      	b.n	800e4fc <_strtod_l+0x84>
 800e800:	4885      	ldr	r0, [pc, #532]	; (800ea18 <_strtod_l+0x5a0>)
 800e802:	f003 f891 	bl	8011928 <nan>
 800e806:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e80a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e80e:	e675      	b.n	800e4fc <_strtod_l+0x84>
 800e810:	9b07      	ldr	r3, [sp, #28]
 800e812:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e814:	1af3      	subs	r3, r6, r3
 800e816:	2f00      	cmp	r7, #0
 800e818:	bf08      	it	eq
 800e81a:	462f      	moveq	r7, r5
 800e81c:	2d10      	cmp	r5, #16
 800e81e:	9308      	str	r3, [sp, #32]
 800e820:	46a8      	mov	r8, r5
 800e822:	bfa8      	it	ge
 800e824:	f04f 0810 	movge.w	r8, #16
 800e828:	f7f1 fe94 	bl	8000554 <__aeabi_ui2d>
 800e82c:	2d09      	cmp	r5, #9
 800e82e:	4682      	mov	sl, r0
 800e830:	468b      	mov	fp, r1
 800e832:	dd13      	ble.n	800e85c <_strtod_l+0x3e4>
 800e834:	4b79      	ldr	r3, [pc, #484]	; (800ea1c <_strtod_l+0x5a4>)
 800e836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e83a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e83e:	f7f1 ff03 	bl	8000648 <__aeabi_dmul>
 800e842:	4682      	mov	sl, r0
 800e844:	4648      	mov	r0, r9
 800e846:	468b      	mov	fp, r1
 800e848:	f7f1 fe84 	bl	8000554 <__aeabi_ui2d>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4650      	mov	r0, sl
 800e852:	4659      	mov	r1, fp
 800e854:	f7f1 fd42 	bl	80002dc <__adddf3>
 800e858:	4682      	mov	sl, r0
 800e85a:	468b      	mov	fp, r1
 800e85c:	2d0f      	cmp	r5, #15
 800e85e:	dc38      	bgt.n	800e8d2 <_strtod_l+0x45a>
 800e860:	9b08      	ldr	r3, [sp, #32]
 800e862:	2b00      	cmp	r3, #0
 800e864:	f43f ae4a 	beq.w	800e4fc <_strtod_l+0x84>
 800e868:	dd24      	ble.n	800e8b4 <_strtod_l+0x43c>
 800e86a:	2b16      	cmp	r3, #22
 800e86c:	dc0b      	bgt.n	800e886 <_strtod_l+0x40e>
 800e86e:	4d6b      	ldr	r5, [pc, #428]	; (800ea1c <_strtod_l+0x5a4>)
 800e870:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e874:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e878:	4652      	mov	r2, sl
 800e87a:	465b      	mov	r3, fp
 800e87c:	f7f1 fee4 	bl	8000648 <__aeabi_dmul>
 800e880:	4682      	mov	sl, r0
 800e882:	468b      	mov	fp, r1
 800e884:	e63a      	b.n	800e4fc <_strtod_l+0x84>
 800e886:	9a08      	ldr	r2, [sp, #32]
 800e888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e88c:	4293      	cmp	r3, r2
 800e88e:	db20      	blt.n	800e8d2 <_strtod_l+0x45a>
 800e890:	4c62      	ldr	r4, [pc, #392]	; (800ea1c <_strtod_l+0x5a4>)
 800e892:	f1c5 050f 	rsb	r5, r5, #15
 800e896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e89a:	4652      	mov	r2, sl
 800e89c:	465b      	mov	r3, fp
 800e89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a2:	f7f1 fed1 	bl	8000648 <__aeabi_dmul>
 800e8a6:	9b08      	ldr	r3, [sp, #32]
 800e8a8:	1b5d      	subs	r5, r3, r5
 800e8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8b2:	e7e3      	b.n	800e87c <_strtod_l+0x404>
 800e8b4:	9b08      	ldr	r3, [sp, #32]
 800e8b6:	3316      	adds	r3, #22
 800e8b8:	db0b      	blt.n	800e8d2 <_strtod_l+0x45a>
 800e8ba:	9b07      	ldr	r3, [sp, #28]
 800e8bc:	4a57      	ldr	r2, [pc, #348]	; (800ea1c <_strtod_l+0x5a4>)
 800e8be:	1b9e      	subs	r6, r3, r6
 800e8c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	4659      	mov	r1, fp
 800e8cc:	f7f1 ffe6 	bl	800089c <__aeabi_ddiv>
 800e8d0:	e7d6      	b.n	800e880 <_strtod_l+0x408>
 800e8d2:	9b08      	ldr	r3, [sp, #32]
 800e8d4:	eba5 0808 	sub.w	r8, r5, r8
 800e8d8:	4498      	add	r8, r3
 800e8da:	f1b8 0f00 	cmp.w	r8, #0
 800e8de:	dd71      	ble.n	800e9c4 <_strtod_l+0x54c>
 800e8e0:	f018 030f 	ands.w	r3, r8, #15
 800e8e4:	d00a      	beq.n	800e8fc <_strtod_l+0x484>
 800e8e6:	494d      	ldr	r1, [pc, #308]	; (800ea1c <_strtod_l+0x5a4>)
 800e8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8ec:	4652      	mov	r2, sl
 800e8ee:	465b      	mov	r3, fp
 800e8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8f4:	f7f1 fea8 	bl	8000648 <__aeabi_dmul>
 800e8f8:	4682      	mov	sl, r0
 800e8fa:	468b      	mov	fp, r1
 800e8fc:	f038 080f 	bics.w	r8, r8, #15
 800e900:	d04d      	beq.n	800e99e <_strtod_l+0x526>
 800e902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e906:	dd22      	ble.n	800e94e <_strtod_l+0x4d6>
 800e908:	2500      	movs	r5, #0
 800e90a:	462e      	mov	r6, r5
 800e90c:	9509      	str	r5, [sp, #36]	; 0x24
 800e90e:	9507      	str	r5, [sp, #28]
 800e910:	2322      	movs	r3, #34	; 0x22
 800e912:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ea24 <_strtod_l+0x5ac>
 800e916:	6023      	str	r3, [r4, #0]
 800e918:	f04f 0a00 	mov.w	sl, #0
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f43f adec 	beq.w	800e4fc <_strtod_l+0x84>
 800e924:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e926:	4620      	mov	r0, r4
 800e928:	f002 f96e 	bl	8010c08 <_Bfree>
 800e92c:	9907      	ldr	r1, [sp, #28]
 800e92e:	4620      	mov	r0, r4
 800e930:	f002 f96a 	bl	8010c08 <_Bfree>
 800e934:	4631      	mov	r1, r6
 800e936:	4620      	mov	r0, r4
 800e938:	f002 f966 	bl	8010c08 <_Bfree>
 800e93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e93e:	4620      	mov	r0, r4
 800e940:	f002 f962 	bl	8010c08 <_Bfree>
 800e944:	4629      	mov	r1, r5
 800e946:	4620      	mov	r0, r4
 800e948:	f002 f95e 	bl	8010c08 <_Bfree>
 800e94c:	e5d6      	b.n	800e4fc <_strtod_l+0x84>
 800e94e:	2300      	movs	r3, #0
 800e950:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e954:	4650      	mov	r0, sl
 800e956:	4659      	mov	r1, fp
 800e958:	4699      	mov	r9, r3
 800e95a:	f1b8 0f01 	cmp.w	r8, #1
 800e95e:	dc21      	bgt.n	800e9a4 <_strtod_l+0x52c>
 800e960:	b10b      	cbz	r3, 800e966 <_strtod_l+0x4ee>
 800e962:	4682      	mov	sl, r0
 800e964:	468b      	mov	fp, r1
 800e966:	4b2e      	ldr	r3, [pc, #184]	; (800ea20 <_strtod_l+0x5a8>)
 800e968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e96c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e970:	4652      	mov	r2, sl
 800e972:	465b      	mov	r3, fp
 800e974:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e978:	f7f1 fe66 	bl	8000648 <__aeabi_dmul>
 800e97c:	4b29      	ldr	r3, [pc, #164]	; (800ea24 <_strtod_l+0x5ac>)
 800e97e:	460a      	mov	r2, r1
 800e980:	400b      	ands	r3, r1
 800e982:	4929      	ldr	r1, [pc, #164]	; (800ea28 <_strtod_l+0x5b0>)
 800e984:	428b      	cmp	r3, r1
 800e986:	4682      	mov	sl, r0
 800e988:	d8be      	bhi.n	800e908 <_strtod_l+0x490>
 800e98a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e98e:	428b      	cmp	r3, r1
 800e990:	bf86      	itte	hi
 800e992:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ea2c <_strtod_l+0x5b4>
 800e996:	f04f 3aff 	movhi.w	sl, #4294967295
 800e99a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e99e:	2300      	movs	r3, #0
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	e081      	b.n	800eaa8 <_strtod_l+0x630>
 800e9a4:	f018 0f01 	tst.w	r8, #1
 800e9a8:	d007      	beq.n	800e9ba <_strtod_l+0x542>
 800e9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ea20 <_strtod_l+0x5a8>)
 800e9ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	f7f1 fe48 	bl	8000648 <__aeabi_dmul>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	f109 0901 	add.w	r9, r9, #1
 800e9be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9c2:	e7ca      	b.n	800e95a <_strtod_l+0x4e2>
 800e9c4:	d0eb      	beq.n	800e99e <_strtod_l+0x526>
 800e9c6:	f1c8 0800 	rsb	r8, r8, #0
 800e9ca:	f018 020f 	ands.w	r2, r8, #15
 800e9ce:	d00a      	beq.n	800e9e6 <_strtod_l+0x56e>
 800e9d0:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <_strtod_l+0x5a4>)
 800e9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9d6:	4650      	mov	r0, sl
 800e9d8:	4659      	mov	r1, fp
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f7f1 ff5d 	bl	800089c <__aeabi_ddiv>
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	468b      	mov	fp, r1
 800e9e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e9ea:	d0d8      	beq.n	800e99e <_strtod_l+0x526>
 800e9ec:	f1b8 0f1f 	cmp.w	r8, #31
 800e9f0:	dd1e      	ble.n	800ea30 <_strtod_l+0x5b8>
 800e9f2:	2500      	movs	r5, #0
 800e9f4:	462e      	mov	r6, r5
 800e9f6:	9509      	str	r5, [sp, #36]	; 0x24
 800e9f8:	9507      	str	r5, [sp, #28]
 800e9fa:	2322      	movs	r3, #34	; 0x22
 800e9fc:	f04f 0a00 	mov.w	sl, #0
 800ea00:	f04f 0b00 	mov.w	fp, #0
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	e789      	b.n	800e91c <_strtod_l+0x4a4>
 800ea08:	080133f5 	.word	0x080133f5
 800ea0c:	08013430 	.word	0x08013430
 800ea10:	080133ed 	.word	0x080133ed
 800ea14:	08013574 	.word	0x08013574
 800ea18:	08013890 	.word	0x08013890
 800ea1c:	08013770 	.word	0x08013770
 800ea20:	08013748 	.word	0x08013748
 800ea24:	7ff00000 	.word	0x7ff00000
 800ea28:	7ca00000 	.word	0x7ca00000
 800ea2c:	7fefffff 	.word	0x7fefffff
 800ea30:	f018 0310 	ands.w	r3, r8, #16
 800ea34:	bf18      	it	ne
 800ea36:	236a      	movne	r3, #106	; 0x6a
 800ea38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800edf0 <_strtod_l+0x978>
 800ea3c:	9304      	str	r3, [sp, #16]
 800ea3e:	4650      	mov	r0, sl
 800ea40:	4659      	mov	r1, fp
 800ea42:	2300      	movs	r3, #0
 800ea44:	f018 0f01 	tst.w	r8, #1
 800ea48:	d004      	beq.n	800ea54 <_strtod_l+0x5dc>
 800ea4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea4e:	f7f1 fdfb 	bl	8000648 <__aeabi_dmul>
 800ea52:	2301      	movs	r3, #1
 800ea54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ea58:	f109 0908 	add.w	r9, r9, #8
 800ea5c:	d1f2      	bne.n	800ea44 <_strtod_l+0x5cc>
 800ea5e:	b10b      	cbz	r3, 800ea64 <_strtod_l+0x5ec>
 800ea60:	4682      	mov	sl, r0
 800ea62:	468b      	mov	fp, r1
 800ea64:	9b04      	ldr	r3, [sp, #16]
 800ea66:	b1bb      	cbz	r3, 800ea98 <_strtod_l+0x620>
 800ea68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	4659      	mov	r1, fp
 800ea74:	dd10      	ble.n	800ea98 <_strtod_l+0x620>
 800ea76:	2b1f      	cmp	r3, #31
 800ea78:	f340 8128 	ble.w	800eccc <_strtod_l+0x854>
 800ea7c:	2b34      	cmp	r3, #52	; 0x34
 800ea7e:	bfde      	ittt	le
 800ea80:	3b20      	suble	r3, #32
 800ea82:	f04f 32ff 	movle.w	r2, #4294967295
 800ea86:	fa02 f303 	lslle.w	r3, r2, r3
 800ea8a:	f04f 0a00 	mov.w	sl, #0
 800ea8e:	bfcc      	ite	gt
 800ea90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea94:	ea03 0b01 	andle.w	fp, r3, r1
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	4650      	mov	r0, sl
 800ea9e:	4659      	mov	r1, fp
 800eaa0:	f7f2 f83a 	bl	8000b18 <__aeabi_dcmpeq>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d1a4      	bne.n	800e9f2 <_strtod_l+0x57a>
 800eaa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eaae:	462b      	mov	r3, r5
 800eab0:	463a      	mov	r2, r7
 800eab2:	4620      	mov	r0, r4
 800eab4:	f002 f914 	bl	8010ce0 <__s2b>
 800eab8:	9009      	str	r0, [sp, #36]	; 0x24
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f43f af24 	beq.w	800e908 <_strtod_l+0x490>
 800eac0:	9b07      	ldr	r3, [sp, #28]
 800eac2:	1b9e      	subs	r6, r3, r6
 800eac4:	9b08      	ldr	r3, [sp, #32]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	bfb4      	ite	lt
 800eaca:	4633      	movlt	r3, r6
 800eacc:	2300      	movge	r3, #0
 800eace:	9310      	str	r3, [sp, #64]	; 0x40
 800ead0:	9b08      	ldr	r3, [sp, #32]
 800ead2:	2500      	movs	r5, #0
 800ead4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ead8:	9318      	str	r3, [sp, #96]	; 0x60
 800eada:	462e      	mov	r6, r5
 800eadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eade:	4620      	mov	r0, r4
 800eae0:	6859      	ldr	r1, [r3, #4]
 800eae2:	f002 f851 	bl	8010b88 <_Balloc>
 800eae6:	9007      	str	r0, [sp, #28]
 800eae8:	2800      	cmp	r0, #0
 800eaea:	f43f af11 	beq.w	800e910 <_strtod_l+0x498>
 800eaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf0:	691a      	ldr	r2, [r3, #16]
 800eaf2:	3202      	adds	r2, #2
 800eaf4:	f103 010c 	add.w	r1, r3, #12
 800eaf8:	0092      	lsls	r2, r2, #2
 800eafa:	300c      	adds	r0, #12
 800eafc:	f7fe ff92 	bl	800da24 <memcpy>
 800eb00:	ec4b ab10 	vmov	d0, sl, fp
 800eb04:	aa20      	add	r2, sp, #128	; 0x80
 800eb06:	a91f      	add	r1, sp, #124	; 0x7c
 800eb08:	4620      	mov	r0, r4
 800eb0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eb0e:	f002 fc23 	bl	8011358 <__d2b>
 800eb12:	901e      	str	r0, [sp, #120]	; 0x78
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f43f aefb 	beq.w	800e910 <_strtod_l+0x498>
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f002 f979 	bl	8010e14 <__i2b>
 800eb22:	4606      	mov	r6, r0
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f43f aef3 	beq.w	800e910 <_strtod_l+0x498>
 800eb2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb2c:	9904      	ldr	r1, [sp, #16]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bfab      	itete	ge
 800eb32:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800eb34:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800eb36:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800eb38:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800eb3c:	bfac      	ite	ge
 800eb3e:	eb03 0902 	addge.w	r9, r3, r2
 800eb42:	1ad7      	sublt	r7, r2, r3
 800eb44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb46:	eba3 0801 	sub.w	r8, r3, r1
 800eb4a:	4490      	add	r8, r2
 800eb4c:	4ba3      	ldr	r3, [pc, #652]	; (800eddc <_strtod_l+0x964>)
 800eb4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb52:	4598      	cmp	r8, r3
 800eb54:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb58:	f280 80cc 	bge.w	800ecf4 <_strtod_l+0x87c>
 800eb5c:	eba3 0308 	sub.w	r3, r3, r8
 800eb60:	2b1f      	cmp	r3, #31
 800eb62:	eba2 0203 	sub.w	r2, r2, r3
 800eb66:	f04f 0101 	mov.w	r1, #1
 800eb6a:	f300 80b6 	bgt.w	800ecda <_strtod_l+0x862>
 800eb6e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb72:	9311      	str	r3, [sp, #68]	; 0x44
 800eb74:	2300      	movs	r3, #0
 800eb76:	930c      	str	r3, [sp, #48]	; 0x30
 800eb78:	eb09 0802 	add.w	r8, r9, r2
 800eb7c:	9b04      	ldr	r3, [sp, #16]
 800eb7e:	45c1      	cmp	r9, r8
 800eb80:	4417      	add	r7, r2
 800eb82:	441f      	add	r7, r3
 800eb84:	464b      	mov	r3, r9
 800eb86:	bfa8      	it	ge
 800eb88:	4643      	movge	r3, r8
 800eb8a:	42bb      	cmp	r3, r7
 800eb8c:	bfa8      	it	ge
 800eb8e:	463b      	movge	r3, r7
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bfc2      	ittt	gt
 800eb94:	eba8 0803 	subgt.w	r8, r8, r3
 800eb98:	1aff      	subgt	r7, r7, r3
 800eb9a:	eba9 0903 	subgt.w	r9, r9, r3
 800eb9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dd17      	ble.n	800ebd4 <_strtod_l+0x75c>
 800eba4:	4631      	mov	r1, r6
 800eba6:	461a      	mov	r2, r3
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f002 f9ef 	bl	8010f8c <__pow5mult>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	f43f aead 	beq.w	800e910 <_strtod_l+0x498>
 800ebb6:	4601      	mov	r1, r0
 800ebb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f002 f940 	bl	8010e40 <__multiply>
 800ebc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f43f aea4 	beq.w	800e910 <_strtod_l+0x498>
 800ebc8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f002 f81c 	bl	8010c08 <_Bfree>
 800ebd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebd2:	931e      	str	r3, [sp, #120]	; 0x78
 800ebd4:	f1b8 0f00 	cmp.w	r8, #0
 800ebd8:	f300 8091 	bgt.w	800ecfe <_strtod_l+0x886>
 800ebdc:	9b08      	ldr	r3, [sp, #32]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	dd08      	ble.n	800ebf4 <_strtod_l+0x77c>
 800ebe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ebe4:	9907      	ldr	r1, [sp, #28]
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f002 f9d0 	bl	8010f8c <__pow5mult>
 800ebec:	9007      	str	r0, [sp, #28]
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f43f ae8e 	beq.w	800e910 <_strtod_l+0x498>
 800ebf4:	2f00      	cmp	r7, #0
 800ebf6:	dd08      	ble.n	800ec0a <_strtod_l+0x792>
 800ebf8:	9907      	ldr	r1, [sp, #28]
 800ebfa:	463a      	mov	r2, r7
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f002 fa1f 	bl	8011040 <__lshift>
 800ec02:	9007      	str	r0, [sp, #28]
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f43f ae83 	beq.w	800e910 <_strtod_l+0x498>
 800ec0a:	f1b9 0f00 	cmp.w	r9, #0
 800ec0e:	dd08      	ble.n	800ec22 <_strtod_l+0x7aa>
 800ec10:	4631      	mov	r1, r6
 800ec12:	464a      	mov	r2, r9
 800ec14:	4620      	mov	r0, r4
 800ec16:	f002 fa13 	bl	8011040 <__lshift>
 800ec1a:	4606      	mov	r6, r0
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f43f ae77 	beq.w	800e910 <_strtod_l+0x498>
 800ec22:	9a07      	ldr	r2, [sp, #28]
 800ec24:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec26:	4620      	mov	r0, r4
 800ec28:	f002 fa92 	bl	8011150 <__mdiff>
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f43f ae6e 	beq.w	800e910 <_strtod_l+0x498>
 800ec34:	68c3      	ldr	r3, [r0, #12]
 800ec36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec38:	2300      	movs	r3, #0
 800ec3a:	60c3      	str	r3, [r0, #12]
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	f002 fa6b 	bl	8011118 <__mcmp>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	da65      	bge.n	800ed12 <_strtod_l+0x89a>
 800ec46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec48:	ea53 030a 	orrs.w	r3, r3, sl
 800ec4c:	f040 8087 	bne.w	800ed5e <_strtod_l+0x8e6>
 800ec50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f040 8082 	bne.w	800ed5e <_strtod_l+0x8e6>
 800ec5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec5e:	0d1b      	lsrs	r3, r3, #20
 800ec60:	051b      	lsls	r3, r3, #20
 800ec62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec66:	d97a      	bls.n	800ed5e <_strtod_l+0x8e6>
 800ec68:	696b      	ldr	r3, [r5, #20]
 800ec6a:	b913      	cbnz	r3, 800ec72 <_strtod_l+0x7fa>
 800ec6c:	692b      	ldr	r3, [r5, #16]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	dd75      	ble.n	800ed5e <_strtod_l+0x8e6>
 800ec72:	4629      	mov	r1, r5
 800ec74:	2201      	movs	r2, #1
 800ec76:	4620      	mov	r0, r4
 800ec78:	f002 f9e2 	bl	8011040 <__lshift>
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	4605      	mov	r5, r0
 800ec80:	f002 fa4a 	bl	8011118 <__mcmp>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	dd6a      	ble.n	800ed5e <_strtod_l+0x8e6>
 800ec88:	9904      	ldr	r1, [sp, #16]
 800ec8a:	4a55      	ldr	r2, [pc, #340]	; (800ede0 <_strtod_l+0x968>)
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	2900      	cmp	r1, #0
 800ec90:	f000 8085 	beq.w	800ed9e <_strtod_l+0x926>
 800ec94:	ea02 010b 	and.w	r1, r2, fp
 800ec98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ec9c:	dc7f      	bgt.n	800ed9e <_strtod_l+0x926>
 800ec9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eca2:	f77f aeaa 	ble.w	800e9fa <_strtod_l+0x582>
 800eca6:	4a4f      	ldr	r2, [pc, #316]	; (800ede4 <_strtod_l+0x96c>)
 800eca8:	2300      	movs	r3, #0
 800ecaa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ecae:	4650      	mov	r0, sl
 800ecb0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ecb4:	4659      	mov	r1, fp
 800ecb6:	f7f1 fcc7 	bl	8000648 <__aeabi_dmul>
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4303      	orrs	r3, r0
 800ecbe:	bf08      	it	eq
 800ecc0:	2322      	moveq	r3, #34	; 0x22
 800ecc2:	4682      	mov	sl, r0
 800ecc4:	468b      	mov	fp, r1
 800ecc6:	bf08      	it	eq
 800ecc8:	6023      	streq	r3, [r4, #0]
 800ecca:	e62b      	b.n	800e924 <_strtod_l+0x4ac>
 800eccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd4:	ea03 0a0a 	and.w	sl, r3, sl
 800ecd8:	e6de      	b.n	800ea98 <_strtod_l+0x620>
 800ecda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ecde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ece2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ece6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ecea:	fa01 f308 	lsl.w	r3, r1, r8
 800ecee:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf0:	9111      	str	r1, [sp, #68]	; 0x44
 800ecf2:	e741      	b.n	800eb78 <_strtod_l+0x700>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	9311      	str	r3, [sp, #68]	; 0x44
 800ecfc:	e73c      	b.n	800eb78 <_strtod_l+0x700>
 800ecfe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed00:	4642      	mov	r2, r8
 800ed02:	4620      	mov	r0, r4
 800ed04:	f002 f99c 	bl	8011040 <__lshift>
 800ed08:	901e      	str	r0, [sp, #120]	; 0x78
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	f47f af66 	bne.w	800ebdc <_strtod_l+0x764>
 800ed10:	e5fe      	b.n	800e910 <_strtod_l+0x498>
 800ed12:	465f      	mov	r7, fp
 800ed14:	d16e      	bne.n	800edf4 <_strtod_l+0x97c>
 800ed16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1c:	b342      	cbz	r2, 800ed70 <_strtod_l+0x8f8>
 800ed1e:	4a32      	ldr	r2, [pc, #200]	; (800ede8 <_strtod_l+0x970>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d128      	bne.n	800ed76 <_strtod_l+0x8fe>
 800ed24:	9b04      	ldr	r3, [sp, #16]
 800ed26:	4650      	mov	r0, sl
 800ed28:	b1eb      	cbz	r3, 800ed66 <_strtod_l+0x8ee>
 800ed2a:	4a2d      	ldr	r2, [pc, #180]	; (800ede0 <_strtod_l+0x968>)
 800ed2c:	403a      	ands	r2, r7
 800ed2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ed32:	f04f 31ff 	mov.w	r1, #4294967295
 800ed36:	d819      	bhi.n	800ed6c <_strtod_l+0x8f4>
 800ed38:	0d12      	lsrs	r2, r2, #20
 800ed3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ed3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed42:	4298      	cmp	r0, r3
 800ed44:	d117      	bne.n	800ed76 <_strtod_l+0x8fe>
 800ed46:	4b29      	ldr	r3, [pc, #164]	; (800edec <_strtod_l+0x974>)
 800ed48:	429f      	cmp	r7, r3
 800ed4a:	d102      	bne.n	800ed52 <_strtod_l+0x8da>
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	f43f addf 	beq.w	800e910 <_strtod_l+0x498>
 800ed52:	4b23      	ldr	r3, [pc, #140]	; (800ede0 <_strtod_l+0x968>)
 800ed54:	403b      	ands	r3, r7
 800ed56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed5a:	f04f 0a00 	mov.w	sl, #0
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1a0      	bne.n	800eca6 <_strtod_l+0x82e>
 800ed64:	e5de      	b.n	800e924 <_strtod_l+0x4ac>
 800ed66:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6a:	e7ea      	b.n	800ed42 <_strtod_l+0x8ca>
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	e7e8      	b.n	800ed42 <_strtod_l+0x8ca>
 800ed70:	ea53 030a 	orrs.w	r3, r3, sl
 800ed74:	d088      	beq.n	800ec88 <_strtod_l+0x810>
 800ed76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed78:	b1db      	cbz	r3, 800edb2 <_strtod_l+0x93a>
 800ed7a:	423b      	tst	r3, r7
 800ed7c:	d0ef      	beq.n	800ed5e <_strtod_l+0x8e6>
 800ed7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed80:	9a04      	ldr	r2, [sp, #16]
 800ed82:	4650      	mov	r0, sl
 800ed84:	4659      	mov	r1, fp
 800ed86:	b1c3      	cbz	r3, 800edba <_strtod_l+0x942>
 800ed88:	f7ff fb5a 	bl	800e440 <sulp>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed94:	f7f1 faa2 	bl	80002dc <__adddf3>
 800ed98:	4682      	mov	sl, r0
 800ed9a:	468b      	mov	fp, r1
 800ed9c:	e7df      	b.n	800ed5e <_strtod_l+0x8e6>
 800ed9e:	4013      	ands	r3, r2
 800eda0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eda4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eda8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800edac:	f04f 3aff 	mov.w	sl, #4294967295
 800edb0:	e7d5      	b.n	800ed5e <_strtod_l+0x8e6>
 800edb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edb4:	ea13 0f0a 	tst.w	r3, sl
 800edb8:	e7e0      	b.n	800ed7c <_strtod_l+0x904>
 800edba:	f7ff fb41 	bl	800e440 <sulp>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800edc6:	f7f1 fa87 	bl	80002d8 <__aeabi_dsub>
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	4682      	mov	sl, r0
 800edd0:	468b      	mov	fp, r1
 800edd2:	f7f1 fea1 	bl	8000b18 <__aeabi_dcmpeq>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0c1      	beq.n	800ed5e <_strtod_l+0x8e6>
 800edda:	e60e      	b.n	800e9fa <_strtod_l+0x582>
 800eddc:	fffffc02 	.word	0xfffffc02
 800ede0:	7ff00000 	.word	0x7ff00000
 800ede4:	39500000 	.word	0x39500000
 800ede8:	000fffff 	.word	0x000fffff
 800edec:	7fefffff 	.word	0x7fefffff
 800edf0:	08013448 	.word	0x08013448
 800edf4:	4631      	mov	r1, r6
 800edf6:	4628      	mov	r0, r5
 800edf8:	f002 fb0a 	bl	8011410 <__ratio>
 800edfc:	ec59 8b10 	vmov	r8, r9, d0
 800ee00:	ee10 0a10 	vmov	r0, s0
 800ee04:	2200      	movs	r2, #0
 800ee06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	f7f1 fe98 	bl	8000b40 <__aeabi_dcmple>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d07c      	beq.n	800ef0e <_strtod_l+0xa96>
 800ee14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d04c      	beq.n	800eeb4 <_strtod_l+0xa3c>
 800ee1a:	4b95      	ldr	r3, [pc, #596]	; (800f070 <_strtod_l+0xbf8>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ee22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f070 <_strtod_l+0xbf8>
 800ee26:	f04f 0800 	mov.w	r8, #0
 800ee2a:	4b92      	ldr	r3, [pc, #584]	; (800f074 <_strtod_l+0xbfc>)
 800ee2c:	403b      	ands	r3, r7
 800ee2e:	9311      	str	r3, [sp, #68]	; 0x44
 800ee30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ee32:	4b91      	ldr	r3, [pc, #580]	; (800f078 <_strtod_l+0xc00>)
 800ee34:	429a      	cmp	r2, r3
 800ee36:	f040 80b2 	bne.w	800ef9e <_strtod_l+0xb26>
 800ee3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ee46:	ec4b ab10 	vmov	d0, sl, fp
 800ee4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ee4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ee52:	f002 fa05 	bl	8011260 <__ulp>
 800ee56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee5a:	ec53 2b10 	vmov	r2, r3, d0
 800ee5e:	f7f1 fbf3 	bl	8000648 <__aeabi_dmul>
 800ee62:	4652      	mov	r2, sl
 800ee64:	465b      	mov	r3, fp
 800ee66:	f7f1 fa39 	bl	80002dc <__adddf3>
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4981      	ldr	r1, [pc, #516]	; (800f074 <_strtod_l+0xbfc>)
 800ee6e:	4a83      	ldr	r2, [pc, #524]	; (800f07c <_strtod_l+0xc04>)
 800ee70:	4019      	ands	r1, r3
 800ee72:	4291      	cmp	r1, r2
 800ee74:	4682      	mov	sl, r0
 800ee76:	d95e      	bls.n	800ef36 <_strtod_l+0xabe>
 800ee78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d103      	bne.n	800ee8a <_strtod_l+0xa12>
 800ee82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee84:	3301      	adds	r3, #1
 800ee86:	f43f ad43 	beq.w	800e910 <_strtod_l+0x498>
 800ee8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f088 <_strtod_l+0xc10>
 800ee8e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee92:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee94:	4620      	mov	r0, r4
 800ee96:	f001 feb7 	bl	8010c08 <_Bfree>
 800ee9a:	9907      	ldr	r1, [sp, #28]
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f001 feb3 	bl	8010c08 <_Bfree>
 800eea2:	4631      	mov	r1, r6
 800eea4:	4620      	mov	r0, r4
 800eea6:	f001 feaf 	bl	8010c08 <_Bfree>
 800eeaa:	4629      	mov	r1, r5
 800eeac:	4620      	mov	r0, r4
 800eeae:	f001 feab 	bl	8010c08 <_Bfree>
 800eeb2:	e613      	b.n	800eadc <_strtod_l+0x664>
 800eeb4:	f1ba 0f00 	cmp.w	sl, #0
 800eeb8:	d11b      	bne.n	800eef2 <_strtod_l+0xa7a>
 800eeba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eebe:	b9f3      	cbnz	r3, 800eefe <_strtod_l+0xa86>
 800eec0:	4b6b      	ldr	r3, [pc, #428]	; (800f070 <_strtod_l+0xbf8>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	4640      	mov	r0, r8
 800eec6:	4649      	mov	r1, r9
 800eec8:	f7f1 fe30 	bl	8000b2c <__aeabi_dcmplt>
 800eecc:	b9d0      	cbnz	r0, 800ef04 <_strtod_l+0xa8c>
 800eece:	4640      	mov	r0, r8
 800eed0:	4649      	mov	r1, r9
 800eed2:	4b6b      	ldr	r3, [pc, #428]	; (800f080 <_strtod_l+0xc08>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	f7f1 fbb7 	bl	8000648 <__aeabi_dmul>
 800eeda:	4680      	mov	r8, r0
 800eedc:	4689      	mov	r9, r1
 800eede:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eee2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800eee6:	931b      	str	r3, [sp, #108]	; 0x6c
 800eee8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800eeec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eef0:	e79b      	b.n	800ee2a <_strtod_l+0x9b2>
 800eef2:	f1ba 0f01 	cmp.w	sl, #1
 800eef6:	d102      	bne.n	800eefe <_strtod_l+0xa86>
 800eef8:	2f00      	cmp	r7, #0
 800eefa:	f43f ad7e 	beq.w	800e9fa <_strtod_l+0x582>
 800eefe:	4b61      	ldr	r3, [pc, #388]	; (800f084 <_strtod_l+0xc0c>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	e78c      	b.n	800ee1e <_strtod_l+0x9a6>
 800ef04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f080 <_strtod_l+0xc08>
 800ef08:	f04f 0800 	mov.w	r8, #0
 800ef0c:	e7e7      	b.n	800eede <_strtod_l+0xa66>
 800ef0e:	4b5c      	ldr	r3, [pc, #368]	; (800f080 <_strtod_l+0xc08>)
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	2200      	movs	r2, #0
 800ef16:	f7f1 fb97 	bl	8000648 <__aeabi_dmul>
 800ef1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef1c:	4680      	mov	r8, r0
 800ef1e:	4689      	mov	r9, r1
 800ef20:	b933      	cbnz	r3, 800ef30 <_strtod_l+0xab8>
 800ef22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef26:	9012      	str	r0, [sp, #72]	; 0x48
 800ef28:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ef2e:	e7dd      	b.n	800eeec <_strtod_l+0xa74>
 800ef30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ef34:	e7f9      	b.n	800ef2a <_strtod_l+0xab2>
 800ef36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef3a:	9b04      	ldr	r3, [sp, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1a8      	bne.n	800ee92 <_strtod_l+0xa1a>
 800ef40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef46:	0d1b      	lsrs	r3, r3, #20
 800ef48:	051b      	lsls	r3, r3, #20
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d1a1      	bne.n	800ee92 <_strtod_l+0xa1a>
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fed9 	bl	8000d08 <__aeabi_d2lz>
 800ef56:	f7f1 fb49 	bl	80005ec <__aeabi_l2d>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4640      	mov	r0, r8
 800ef60:	4649      	mov	r1, r9
 800ef62:	f7f1 f9b9 	bl	80002d8 <__aeabi_dsub>
 800ef66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef6c:	ea43 030a 	orr.w	r3, r3, sl
 800ef70:	4313      	orrs	r3, r2
 800ef72:	4680      	mov	r8, r0
 800ef74:	4689      	mov	r9, r1
 800ef76:	d053      	beq.n	800f020 <_strtod_l+0xba8>
 800ef78:	a335      	add	r3, pc, #212	; (adr r3, 800f050 <_strtod_l+0xbd8>)
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	f7f1 fdd5 	bl	8000b2c <__aeabi_dcmplt>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	f47f acce 	bne.w	800e924 <_strtod_l+0x4ac>
 800ef88:	a333      	add	r3, pc, #204	; (adr r3, 800f058 <_strtod_l+0xbe0>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	4640      	mov	r0, r8
 800ef90:	4649      	mov	r1, r9
 800ef92:	f7f1 fde9 	bl	8000b68 <__aeabi_dcmpgt>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	f43f af7b 	beq.w	800ee92 <_strtod_l+0xa1a>
 800ef9c:	e4c2      	b.n	800e924 <_strtod_l+0x4ac>
 800ef9e:	9b04      	ldr	r3, [sp, #16]
 800efa0:	b333      	cbz	r3, 800eff0 <_strtod_l+0xb78>
 800efa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800efa8:	d822      	bhi.n	800eff0 <_strtod_l+0xb78>
 800efaa:	a32d      	add	r3, pc, #180	; (adr r3, 800f060 <_strtod_l+0xbe8>)
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 fdc4 	bl	8000b40 <__aeabi_dcmple>
 800efb8:	b1a0      	cbz	r0, 800efe4 <_strtod_l+0xb6c>
 800efba:	4649      	mov	r1, r9
 800efbc:	4640      	mov	r0, r8
 800efbe:	f7f1 fe1b 	bl	8000bf8 <__aeabi_d2uiz>
 800efc2:	2801      	cmp	r0, #1
 800efc4:	bf38      	it	cc
 800efc6:	2001      	movcc	r0, #1
 800efc8:	f7f1 fac4 	bl	8000554 <__aeabi_ui2d>
 800efcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efce:	4680      	mov	r8, r0
 800efd0:	4689      	mov	r9, r1
 800efd2:	bb13      	cbnz	r3, 800f01a <_strtod_l+0xba2>
 800efd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efd8:	9014      	str	r0, [sp, #80]	; 0x50
 800efda:	9315      	str	r3, [sp, #84]	; 0x54
 800efdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800efe0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800efe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efe8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800efec:	1a9b      	subs	r3, r3, r2
 800efee:	930d      	str	r3, [sp, #52]	; 0x34
 800eff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eff4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eff8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800effc:	f002 f930 	bl	8011260 <__ulp>
 800f000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f004:	ec53 2b10 	vmov	r2, r3, d0
 800f008:	f7f1 fb1e 	bl	8000648 <__aeabi_dmul>
 800f00c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f010:	f7f1 f964 	bl	80002dc <__adddf3>
 800f014:	4682      	mov	sl, r0
 800f016:	468b      	mov	fp, r1
 800f018:	e78f      	b.n	800ef3a <_strtod_l+0xac2>
 800f01a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f01e:	e7dd      	b.n	800efdc <_strtod_l+0xb64>
 800f020:	a311      	add	r3, pc, #68	; (adr r3, 800f068 <_strtod_l+0xbf0>)
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	f7f1 fd81 	bl	8000b2c <__aeabi_dcmplt>
 800f02a:	e7b4      	b.n	800ef96 <_strtod_l+0xb1e>
 800f02c:	2300      	movs	r3, #0
 800f02e:	930e      	str	r3, [sp, #56]	; 0x38
 800f030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	f7ff ba65 	b.w	800e504 <_strtod_l+0x8c>
 800f03a:	2b65      	cmp	r3, #101	; 0x65
 800f03c:	f43f ab5d 	beq.w	800e6fa <_strtod_l+0x282>
 800f040:	2b45      	cmp	r3, #69	; 0x45
 800f042:	f43f ab5a 	beq.w	800e6fa <_strtod_l+0x282>
 800f046:	2201      	movs	r2, #1
 800f048:	f7ff bb92 	b.w	800e770 <_strtod_l+0x2f8>
 800f04c:	f3af 8000 	nop.w
 800f050:	94a03595 	.word	0x94a03595
 800f054:	3fdfffff 	.word	0x3fdfffff
 800f058:	35afe535 	.word	0x35afe535
 800f05c:	3fe00000 	.word	0x3fe00000
 800f060:	ffc00000 	.word	0xffc00000
 800f064:	41dfffff 	.word	0x41dfffff
 800f068:	94a03595 	.word	0x94a03595
 800f06c:	3fcfffff 	.word	0x3fcfffff
 800f070:	3ff00000 	.word	0x3ff00000
 800f074:	7ff00000 	.word	0x7ff00000
 800f078:	7fe00000 	.word	0x7fe00000
 800f07c:	7c9fffff 	.word	0x7c9fffff
 800f080:	3fe00000 	.word	0x3fe00000
 800f084:	bff00000 	.word	0xbff00000
 800f088:	7fefffff 	.word	0x7fefffff

0800f08c <strtod>:
 800f08c:	460a      	mov	r2, r1
 800f08e:	4601      	mov	r1, r0
 800f090:	4802      	ldr	r0, [pc, #8]	; (800f09c <strtod+0x10>)
 800f092:	4b03      	ldr	r3, [pc, #12]	; (800f0a0 <strtod+0x14>)
 800f094:	6800      	ldr	r0, [r0, #0]
 800f096:	f7ff b9ef 	b.w	800e478 <_strtod_l>
 800f09a:	bf00      	nop
 800f09c:	20000030 	.word	0x20000030
 800f0a0:	20000098 	.word	0x20000098

0800f0a4 <_strtol_l.isra.0>:
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0aa:	d001      	beq.n	800f0b0 <_strtol_l.isra.0+0xc>
 800f0ac:	2b24      	cmp	r3, #36	; 0x24
 800f0ae:	d906      	bls.n	800f0be <_strtol_l.isra.0+0x1a>
 800f0b0:	f7fe fc8e 	bl	800d9d0 <__errno>
 800f0b4:	2316      	movs	r3, #22
 800f0b6:	6003      	str	r3, [r0, #0]
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0be:	4f3a      	ldr	r7, [pc, #232]	; (800f1a8 <_strtol_l.isra.0+0x104>)
 800f0c0:	468e      	mov	lr, r1
 800f0c2:	4676      	mov	r6, lr
 800f0c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f0c8:	5de5      	ldrb	r5, [r4, r7]
 800f0ca:	f015 0508 	ands.w	r5, r5, #8
 800f0ce:	d1f8      	bne.n	800f0c2 <_strtol_l.isra.0+0x1e>
 800f0d0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0d2:	d134      	bne.n	800f13e <_strtol_l.isra.0+0x9a>
 800f0d4:	f89e 4000 	ldrb.w	r4, [lr]
 800f0d8:	f04f 0801 	mov.w	r8, #1
 800f0dc:	f106 0e02 	add.w	lr, r6, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d05c      	beq.n	800f19e <_strtol_l.isra.0+0xfa>
 800f0e4:	2b10      	cmp	r3, #16
 800f0e6:	d10c      	bne.n	800f102 <_strtol_l.isra.0+0x5e>
 800f0e8:	2c30      	cmp	r4, #48	; 0x30
 800f0ea:	d10a      	bne.n	800f102 <_strtol_l.isra.0+0x5e>
 800f0ec:	f89e 4000 	ldrb.w	r4, [lr]
 800f0f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0f4:	2c58      	cmp	r4, #88	; 0x58
 800f0f6:	d14d      	bne.n	800f194 <_strtol_l.isra.0+0xf0>
 800f0f8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f0fc:	2310      	movs	r3, #16
 800f0fe:	f10e 0e02 	add.w	lr, lr, #2
 800f102:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f106:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f10a:	2600      	movs	r6, #0
 800f10c:	fbbc f9f3 	udiv	r9, ip, r3
 800f110:	4635      	mov	r5, r6
 800f112:	fb03 ca19 	mls	sl, r3, r9, ip
 800f116:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f11a:	2f09      	cmp	r7, #9
 800f11c:	d818      	bhi.n	800f150 <_strtol_l.isra.0+0xac>
 800f11e:	463c      	mov	r4, r7
 800f120:	42a3      	cmp	r3, r4
 800f122:	dd24      	ble.n	800f16e <_strtol_l.isra.0+0xca>
 800f124:	2e00      	cmp	r6, #0
 800f126:	db1f      	blt.n	800f168 <_strtol_l.isra.0+0xc4>
 800f128:	45a9      	cmp	r9, r5
 800f12a:	d31d      	bcc.n	800f168 <_strtol_l.isra.0+0xc4>
 800f12c:	d101      	bne.n	800f132 <_strtol_l.isra.0+0x8e>
 800f12e:	45a2      	cmp	sl, r4
 800f130:	db1a      	blt.n	800f168 <_strtol_l.isra.0+0xc4>
 800f132:	fb05 4503 	mla	r5, r5, r3, r4
 800f136:	2601      	movs	r6, #1
 800f138:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f13c:	e7eb      	b.n	800f116 <_strtol_l.isra.0+0x72>
 800f13e:	2c2b      	cmp	r4, #43	; 0x2b
 800f140:	bf08      	it	eq
 800f142:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f146:	46a8      	mov	r8, r5
 800f148:	bf08      	it	eq
 800f14a:	f106 0e02 	addeq.w	lr, r6, #2
 800f14e:	e7c7      	b.n	800f0e0 <_strtol_l.isra.0+0x3c>
 800f150:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f154:	2f19      	cmp	r7, #25
 800f156:	d801      	bhi.n	800f15c <_strtol_l.isra.0+0xb8>
 800f158:	3c37      	subs	r4, #55	; 0x37
 800f15a:	e7e1      	b.n	800f120 <_strtol_l.isra.0+0x7c>
 800f15c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f160:	2f19      	cmp	r7, #25
 800f162:	d804      	bhi.n	800f16e <_strtol_l.isra.0+0xca>
 800f164:	3c57      	subs	r4, #87	; 0x57
 800f166:	e7db      	b.n	800f120 <_strtol_l.isra.0+0x7c>
 800f168:	f04f 36ff 	mov.w	r6, #4294967295
 800f16c:	e7e4      	b.n	800f138 <_strtol_l.isra.0+0x94>
 800f16e:	2e00      	cmp	r6, #0
 800f170:	da05      	bge.n	800f17e <_strtol_l.isra.0+0xda>
 800f172:	2322      	movs	r3, #34	; 0x22
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	4665      	mov	r5, ip
 800f178:	b942      	cbnz	r2, 800f18c <_strtol_l.isra.0+0xe8>
 800f17a:	4628      	mov	r0, r5
 800f17c:	e79d      	b.n	800f0ba <_strtol_l.isra.0+0x16>
 800f17e:	f1b8 0f00 	cmp.w	r8, #0
 800f182:	d000      	beq.n	800f186 <_strtol_l.isra.0+0xe2>
 800f184:	426d      	negs	r5, r5
 800f186:	2a00      	cmp	r2, #0
 800f188:	d0f7      	beq.n	800f17a <_strtol_l.isra.0+0xd6>
 800f18a:	b10e      	cbz	r6, 800f190 <_strtol_l.isra.0+0xec>
 800f18c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	e7f2      	b.n	800f17a <_strtol_l.isra.0+0xd6>
 800f194:	2430      	movs	r4, #48	; 0x30
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1b3      	bne.n	800f102 <_strtol_l.isra.0+0x5e>
 800f19a:	2308      	movs	r3, #8
 800f19c:	e7b1      	b.n	800f102 <_strtol_l.isra.0+0x5e>
 800f19e:	2c30      	cmp	r4, #48	; 0x30
 800f1a0:	d0a4      	beq.n	800f0ec <_strtol_l.isra.0+0x48>
 800f1a2:	230a      	movs	r3, #10
 800f1a4:	e7ad      	b.n	800f102 <_strtol_l.isra.0+0x5e>
 800f1a6:	bf00      	nop
 800f1a8:	08013471 	.word	0x08013471

0800f1ac <strtol>:
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	460a      	mov	r2, r1
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4802      	ldr	r0, [pc, #8]	; (800f1bc <strtol+0x10>)
 800f1b4:	6800      	ldr	r0, [r0, #0]
 800f1b6:	f7ff bf75 	b.w	800f0a4 <_strtol_l.isra.0>
 800f1ba:	bf00      	nop
 800f1bc:	20000030 	.word	0x20000030

0800f1c0 <__swbuf_r>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	460e      	mov	r6, r1
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	b118      	cbz	r0, 800f1d2 <__swbuf_r+0x12>
 800f1ca:	6983      	ldr	r3, [r0, #24]
 800f1cc:	b90b      	cbnz	r3, 800f1d2 <__swbuf_r+0x12>
 800f1ce:	f001 f849 	bl	8010264 <__sinit>
 800f1d2:	4b21      	ldr	r3, [pc, #132]	; (800f258 <__swbuf_r+0x98>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d12b      	bne.n	800f230 <__swbuf_r+0x70>
 800f1d8:	686c      	ldr	r4, [r5, #4]
 800f1da:	69a3      	ldr	r3, [r4, #24]
 800f1dc:	60a3      	str	r3, [r4, #8]
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	071a      	lsls	r2, r3, #28
 800f1e2:	d52f      	bpl.n	800f244 <__swbuf_r+0x84>
 800f1e4:	6923      	ldr	r3, [r4, #16]
 800f1e6:	b36b      	cbz	r3, 800f244 <__swbuf_r+0x84>
 800f1e8:	6923      	ldr	r3, [r4, #16]
 800f1ea:	6820      	ldr	r0, [r4, #0]
 800f1ec:	1ac0      	subs	r0, r0, r3
 800f1ee:	6963      	ldr	r3, [r4, #20]
 800f1f0:	b2f6      	uxtb	r6, r6
 800f1f2:	4283      	cmp	r3, r0
 800f1f4:	4637      	mov	r7, r6
 800f1f6:	dc04      	bgt.n	800f202 <__swbuf_r+0x42>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f000 ff9e 	bl	801013c <_fflush_r>
 800f200:	bb30      	cbnz	r0, 800f250 <__swbuf_r+0x90>
 800f202:	68a3      	ldr	r3, [r4, #8]
 800f204:	3b01      	subs	r3, #1
 800f206:	60a3      	str	r3, [r4, #8]
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	6022      	str	r2, [r4, #0]
 800f20e:	701e      	strb	r6, [r3, #0]
 800f210:	6963      	ldr	r3, [r4, #20]
 800f212:	3001      	adds	r0, #1
 800f214:	4283      	cmp	r3, r0
 800f216:	d004      	beq.n	800f222 <__swbuf_r+0x62>
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	07db      	lsls	r3, r3, #31
 800f21c:	d506      	bpl.n	800f22c <__swbuf_r+0x6c>
 800f21e:	2e0a      	cmp	r6, #10
 800f220:	d104      	bne.n	800f22c <__swbuf_r+0x6c>
 800f222:	4621      	mov	r1, r4
 800f224:	4628      	mov	r0, r5
 800f226:	f000 ff89 	bl	801013c <_fflush_r>
 800f22a:	b988      	cbnz	r0, 800f250 <__swbuf_r+0x90>
 800f22c:	4638      	mov	r0, r7
 800f22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f230:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <__swbuf_r+0x9c>)
 800f232:	429c      	cmp	r4, r3
 800f234:	d101      	bne.n	800f23a <__swbuf_r+0x7a>
 800f236:	68ac      	ldr	r4, [r5, #8]
 800f238:	e7cf      	b.n	800f1da <__swbuf_r+0x1a>
 800f23a:	4b09      	ldr	r3, [pc, #36]	; (800f260 <__swbuf_r+0xa0>)
 800f23c:	429c      	cmp	r4, r3
 800f23e:	bf08      	it	eq
 800f240:	68ec      	ldreq	r4, [r5, #12]
 800f242:	e7ca      	b.n	800f1da <__swbuf_r+0x1a>
 800f244:	4621      	mov	r1, r4
 800f246:	4628      	mov	r0, r5
 800f248:	f000 f80c 	bl	800f264 <__swsetup_r>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d0cb      	beq.n	800f1e8 <__swbuf_r+0x28>
 800f250:	f04f 37ff 	mov.w	r7, #4294967295
 800f254:	e7ea      	b.n	800f22c <__swbuf_r+0x6c>
 800f256:	bf00      	nop
 800f258:	08013628 	.word	0x08013628
 800f25c:	08013648 	.word	0x08013648
 800f260:	08013608 	.word	0x08013608

0800f264 <__swsetup_r>:
 800f264:	4b32      	ldr	r3, [pc, #200]	; (800f330 <__swsetup_r+0xcc>)
 800f266:	b570      	push	{r4, r5, r6, lr}
 800f268:	681d      	ldr	r5, [r3, #0]
 800f26a:	4606      	mov	r6, r0
 800f26c:	460c      	mov	r4, r1
 800f26e:	b125      	cbz	r5, 800f27a <__swsetup_r+0x16>
 800f270:	69ab      	ldr	r3, [r5, #24]
 800f272:	b913      	cbnz	r3, 800f27a <__swsetup_r+0x16>
 800f274:	4628      	mov	r0, r5
 800f276:	f000 fff5 	bl	8010264 <__sinit>
 800f27a:	4b2e      	ldr	r3, [pc, #184]	; (800f334 <__swsetup_r+0xd0>)
 800f27c:	429c      	cmp	r4, r3
 800f27e:	d10f      	bne.n	800f2a0 <__swsetup_r+0x3c>
 800f280:	686c      	ldr	r4, [r5, #4]
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f288:	0719      	lsls	r1, r3, #28
 800f28a:	d42c      	bmi.n	800f2e6 <__swsetup_r+0x82>
 800f28c:	06dd      	lsls	r5, r3, #27
 800f28e:	d411      	bmi.n	800f2b4 <__swsetup_r+0x50>
 800f290:	2309      	movs	r3, #9
 800f292:	6033      	str	r3, [r6, #0]
 800f294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	f04f 30ff 	mov.w	r0, #4294967295
 800f29e:	e03e      	b.n	800f31e <__swsetup_r+0xba>
 800f2a0:	4b25      	ldr	r3, [pc, #148]	; (800f338 <__swsetup_r+0xd4>)
 800f2a2:	429c      	cmp	r4, r3
 800f2a4:	d101      	bne.n	800f2aa <__swsetup_r+0x46>
 800f2a6:	68ac      	ldr	r4, [r5, #8]
 800f2a8:	e7eb      	b.n	800f282 <__swsetup_r+0x1e>
 800f2aa:	4b24      	ldr	r3, [pc, #144]	; (800f33c <__swsetup_r+0xd8>)
 800f2ac:	429c      	cmp	r4, r3
 800f2ae:	bf08      	it	eq
 800f2b0:	68ec      	ldreq	r4, [r5, #12]
 800f2b2:	e7e6      	b.n	800f282 <__swsetup_r+0x1e>
 800f2b4:	0758      	lsls	r0, r3, #29
 800f2b6:	d512      	bpl.n	800f2de <__swsetup_r+0x7a>
 800f2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2ba:	b141      	cbz	r1, 800f2ce <__swsetup_r+0x6a>
 800f2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2c0:	4299      	cmp	r1, r3
 800f2c2:	d002      	beq.n	800f2ca <__swsetup_r+0x66>
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f002 f929 	bl	801151c <_free_r>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f2ce:	89a3      	ldrh	r3, [r4, #12]
 800f2d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2d4:	81a3      	strh	r3, [r4, #12]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	6063      	str	r3, [r4, #4]
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	6023      	str	r3, [r4, #0]
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	f043 0308 	orr.w	r3, r3, #8
 800f2e4:	81a3      	strh	r3, [r4, #12]
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	b94b      	cbnz	r3, 800f2fe <__swsetup_r+0x9a>
 800f2ea:	89a3      	ldrh	r3, [r4, #12]
 800f2ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2f4:	d003      	beq.n	800f2fe <__swsetup_r+0x9a>
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f001 fbeb 	bl	8010ad4 <__smakebuf_r>
 800f2fe:	89a0      	ldrh	r0, [r4, #12]
 800f300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f304:	f010 0301 	ands.w	r3, r0, #1
 800f308:	d00a      	beq.n	800f320 <__swsetup_r+0xbc>
 800f30a:	2300      	movs	r3, #0
 800f30c:	60a3      	str	r3, [r4, #8]
 800f30e:	6963      	ldr	r3, [r4, #20]
 800f310:	425b      	negs	r3, r3
 800f312:	61a3      	str	r3, [r4, #24]
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	b943      	cbnz	r3, 800f32a <__swsetup_r+0xc6>
 800f318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f31c:	d1ba      	bne.n	800f294 <__swsetup_r+0x30>
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	0781      	lsls	r1, r0, #30
 800f322:	bf58      	it	pl
 800f324:	6963      	ldrpl	r3, [r4, #20]
 800f326:	60a3      	str	r3, [r4, #8]
 800f328:	e7f4      	b.n	800f314 <__swsetup_r+0xb0>
 800f32a:	2000      	movs	r0, #0
 800f32c:	e7f7      	b.n	800f31e <__swsetup_r+0xba>
 800f32e:	bf00      	nop
 800f330:	20000030 	.word	0x20000030
 800f334:	08013628 	.word	0x08013628
 800f338:	08013648 	.word	0x08013648
 800f33c:	08013608 	.word	0x08013608

0800f340 <quorem>:
 800f340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	6903      	ldr	r3, [r0, #16]
 800f346:	690c      	ldr	r4, [r1, #16]
 800f348:	42a3      	cmp	r3, r4
 800f34a:	4607      	mov	r7, r0
 800f34c:	f2c0 8081 	blt.w	800f452 <quorem+0x112>
 800f350:	3c01      	subs	r4, #1
 800f352:	f101 0814 	add.w	r8, r1, #20
 800f356:	f100 0514 	add.w	r5, r0, #20
 800f35a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f35e:	9301      	str	r3, [sp, #4]
 800f360:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f368:	3301      	adds	r3, #1
 800f36a:	429a      	cmp	r2, r3
 800f36c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f370:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f374:	fbb2 f6f3 	udiv	r6, r2, r3
 800f378:	d331      	bcc.n	800f3de <quorem+0x9e>
 800f37a:	f04f 0e00 	mov.w	lr, #0
 800f37e:	4640      	mov	r0, r8
 800f380:	46ac      	mov	ip, r5
 800f382:	46f2      	mov	sl, lr
 800f384:	f850 2b04 	ldr.w	r2, [r0], #4
 800f388:	b293      	uxth	r3, r2
 800f38a:	fb06 e303 	mla	r3, r6, r3, lr
 800f38e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f392:	b29b      	uxth	r3, r3
 800f394:	ebaa 0303 	sub.w	r3, sl, r3
 800f398:	0c12      	lsrs	r2, r2, #16
 800f39a:	f8dc a000 	ldr.w	sl, [ip]
 800f39e:	fb06 e202 	mla	r2, r6, r2, lr
 800f3a2:	fa13 f38a 	uxtah	r3, r3, sl
 800f3a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f3aa:	fa1f fa82 	uxth.w	sl, r2
 800f3ae:	f8dc 2000 	ldr.w	r2, [ip]
 800f3b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f3b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3c0:	4581      	cmp	r9, r0
 800f3c2:	f84c 3b04 	str.w	r3, [ip], #4
 800f3c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3ca:	d2db      	bcs.n	800f384 <quorem+0x44>
 800f3cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3d0:	b92b      	cbnz	r3, 800f3de <quorem+0x9e>
 800f3d2:	9b01      	ldr	r3, [sp, #4]
 800f3d4:	3b04      	subs	r3, #4
 800f3d6:	429d      	cmp	r5, r3
 800f3d8:	461a      	mov	r2, r3
 800f3da:	d32e      	bcc.n	800f43a <quorem+0xfa>
 800f3dc:	613c      	str	r4, [r7, #16]
 800f3de:	4638      	mov	r0, r7
 800f3e0:	f001 fe9a 	bl	8011118 <__mcmp>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	db24      	blt.n	800f432 <quorem+0xf2>
 800f3e8:	3601      	adds	r6, #1
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f04f 0c00 	mov.w	ip, #0
 800f3f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3f4:	f8d0 e000 	ldr.w	lr, [r0]
 800f3f8:	b293      	uxth	r3, r2
 800f3fa:	ebac 0303 	sub.w	r3, ip, r3
 800f3fe:	0c12      	lsrs	r2, r2, #16
 800f400:	fa13 f38e 	uxtah	r3, r3, lr
 800f404:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f412:	45c1      	cmp	r9, r8
 800f414:	f840 3b04 	str.w	r3, [r0], #4
 800f418:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f41c:	d2e8      	bcs.n	800f3f0 <quorem+0xb0>
 800f41e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f426:	b922      	cbnz	r2, 800f432 <quorem+0xf2>
 800f428:	3b04      	subs	r3, #4
 800f42a:	429d      	cmp	r5, r3
 800f42c:	461a      	mov	r2, r3
 800f42e:	d30a      	bcc.n	800f446 <quorem+0x106>
 800f430:	613c      	str	r4, [r7, #16]
 800f432:	4630      	mov	r0, r6
 800f434:	b003      	add	sp, #12
 800f436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43a:	6812      	ldr	r2, [r2, #0]
 800f43c:	3b04      	subs	r3, #4
 800f43e:	2a00      	cmp	r2, #0
 800f440:	d1cc      	bne.n	800f3dc <quorem+0x9c>
 800f442:	3c01      	subs	r4, #1
 800f444:	e7c7      	b.n	800f3d6 <quorem+0x96>
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	3b04      	subs	r3, #4
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	d1f0      	bne.n	800f430 <quorem+0xf0>
 800f44e:	3c01      	subs	r4, #1
 800f450:	e7eb      	b.n	800f42a <quorem+0xea>
 800f452:	2000      	movs	r0, #0
 800f454:	e7ee      	b.n	800f434 <quorem+0xf4>
	...

0800f458 <_dtoa_r>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	ed2d 8b02 	vpush	{d8}
 800f460:	ec57 6b10 	vmov	r6, r7, d0
 800f464:	b095      	sub	sp, #84	; 0x54
 800f466:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f468:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f46c:	9105      	str	r1, [sp, #20]
 800f46e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f472:	4604      	mov	r4, r0
 800f474:	9209      	str	r2, [sp, #36]	; 0x24
 800f476:	930f      	str	r3, [sp, #60]	; 0x3c
 800f478:	b975      	cbnz	r5, 800f498 <_dtoa_r+0x40>
 800f47a:	2010      	movs	r0, #16
 800f47c:	f001 fb6a 	bl	8010b54 <malloc>
 800f480:	4602      	mov	r2, r0
 800f482:	6260      	str	r0, [r4, #36]	; 0x24
 800f484:	b920      	cbnz	r0, 800f490 <_dtoa_r+0x38>
 800f486:	4bb2      	ldr	r3, [pc, #712]	; (800f750 <_dtoa_r+0x2f8>)
 800f488:	21ea      	movs	r1, #234	; 0xea
 800f48a:	48b2      	ldr	r0, [pc, #712]	; (800f754 <_dtoa_r+0x2fc>)
 800f48c:	f002 fad8 	bl	8011a40 <__assert_func>
 800f490:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f494:	6005      	str	r5, [r0, #0]
 800f496:	60c5      	str	r5, [r0, #12]
 800f498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f49a:	6819      	ldr	r1, [r3, #0]
 800f49c:	b151      	cbz	r1, 800f4b4 <_dtoa_r+0x5c>
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	604a      	str	r2, [r1, #4]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4093      	lsls	r3, r2
 800f4a6:	608b      	str	r3, [r1, #8]
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f001 fbad 	bl	8010c08 <_Bfree>
 800f4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	1e3b      	subs	r3, r7, #0
 800f4b6:	bfb9      	ittee	lt
 800f4b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4bc:	9303      	strlt	r3, [sp, #12]
 800f4be:	2300      	movge	r3, #0
 800f4c0:	f8c8 3000 	strge.w	r3, [r8]
 800f4c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f4c8:	4ba3      	ldr	r3, [pc, #652]	; (800f758 <_dtoa_r+0x300>)
 800f4ca:	bfbc      	itt	lt
 800f4cc:	2201      	movlt	r2, #1
 800f4ce:	f8c8 2000 	strlt.w	r2, [r8]
 800f4d2:	ea33 0309 	bics.w	r3, r3, r9
 800f4d6:	d11b      	bne.n	800f510 <_dtoa_r+0xb8>
 800f4d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4da:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4de:	6013      	str	r3, [r2, #0]
 800f4e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4e4:	4333      	orrs	r3, r6
 800f4e6:	f000 857a 	beq.w	800ffde <_dtoa_r+0xb86>
 800f4ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4ec:	b963      	cbnz	r3, 800f508 <_dtoa_r+0xb0>
 800f4ee:	4b9b      	ldr	r3, [pc, #620]	; (800f75c <_dtoa_r+0x304>)
 800f4f0:	e024      	b.n	800f53c <_dtoa_r+0xe4>
 800f4f2:	4b9b      	ldr	r3, [pc, #620]	; (800f760 <_dtoa_r+0x308>)
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4fa:	6013      	str	r3, [r2, #0]
 800f4fc:	9800      	ldr	r0, [sp, #0]
 800f4fe:	b015      	add	sp, #84	; 0x54
 800f500:	ecbd 8b02 	vpop	{d8}
 800f504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f508:	4b94      	ldr	r3, [pc, #592]	; (800f75c <_dtoa_r+0x304>)
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	3303      	adds	r3, #3
 800f50e:	e7f3      	b.n	800f4f8 <_dtoa_r+0xa0>
 800f510:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f514:	2200      	movs	r2, #0
 800f516:	ec51 0b17 	vmov	r0, r1, d7
 800f51a:	2300      	movs	r3, #0
 800f51c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f520:	f7f1 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 800f524:	4680      	mov	r8, r0
 800f526:	b158      	cbz	r0, 800f540 <_dtoa_r+0xe8>
 800f528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f52a:	2301      	movs	r3, #1
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f530:	2b00      	cmp	r3, #0
 800f532:	f000 8551 	beq.w	800ffd8 <_dtoa_r+0xb80>
 800f536:	488b      	ldr	r0, [pc, #556]	; (800f764 <_dtoa_r+0x30c>)
 800f538:	6018      	str	r0, [r3, #0]
 800f53a:	1e43      	subs	r3, r0, #1
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	e7dd      	b.n	800f4fc <_dtoa_r+0xa4>
 800f540:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f544:	aa12      	add	r2, sp, #72	; 0x48
 800f546:	a913      	add	r1, sp, #76	; 0x4c
 800f548:	4620      	mov	r0, r4
 800f54a:	f001 ff05 	bl	8011358 <__d2b>
 800f54e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f552:	4683      	mov	fp, r0
 800f554:	2d00      	cmp	r5, #0
 800f556:	d07c      	beq.n	800f652 <_dtoa_r+0x1fa>
 800f558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f55a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f55e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f562:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f566:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f56a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f56e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f572:	4b7d      	ldr	r3, [pc, #500]	; (800f768 <_dtoa_r+0x310>)
 800f574:	2200      	movs	r2, #0
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7f0 fead 	bl	80002d8 <__aeabi_dsub>
 800f57e:	a36e      	add	r3, pc, #440	; (adr r3, 800f738 <_dtoa_r+0x2e0>)
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f7f1 f860 	bl	8000648 <__aeabi_dmul>
 800f588:	a36d      	add	r3, pc, #436	; (adr r3, 800f740 <_dtoa_r+0x2e8>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fea5 	bl	80002dc <__adddf3>
 800f592:	4606      	mov	r6, r0
 800f594:	4628      	mov	r0, r5
 800f596:	460f      	mov	r7, r1
 800f598:	f7f0 ffec 	bl	8000574 <__aeabi_i2d>
 800f59c:	a36a      	add	r3, pc, #424	; (adr r3, 800f748 <_dtoa_r+0x2f0>)
 800f59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a2:	f7f1 f851 	bl	8000648 <__aeabi_dmul>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f0 fe95 	bl	80002dc <__adddf3>
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	f7f1 faf7 	bl	8000ba8 <__aeabi_d2iz>
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	4682      	mov	sl, r0
 800f5be:	2300      	movs	r3, #0
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f1 fab2 	bl	8000b2c <__aeabi_dcmplt>
 800f5c8:	b148      	cbz	r0, 800f5de <_dtoa_r+0x186>
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	f7f0 ffd2 	bl	8000574 <__aeabi_i2d>
 800f5d0:	4632      	mov	r2, r6
 800f5d2:	463b      	mov	r3, r7
 800f5d4:	f7f1 faa0 	bl	8000b18 <__aeabi_dcmpeq>
 800f5d8:	b908      	cbnz	r0, 800f5de <_dtoa_r+0x186>
 800f5da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5de:	f1ba 0f16 	cmp.w	sl, #22
 800f5e2:	d854      	bhi.n	800f68e <_dtoa_r+0x236>
 800f5e4:	4b61      	ldr	r3, [pc, #388]	; (800f76c <_dtoa_r+0x314>)
 800f5e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5f2:	f7f1 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d04b      	beq.n	800f692 <_dtoa_r+0x23a>
 800f5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5fe:	2300      	movs	r3, #0
 800f600:	930e      	str	r3, [sp, #56]	; 0x38
 800f602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f604:	1b5d      	subs	r5, r3, r5
 800f606:	1e6b      	subs	r3, r5, #1
 800f608:	9304      	str	r3, [sp, #16]
 800f60a:	bf43      	ittte	mi
 800f60c:	2300      	movmi	r3, #0
 800f60e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f612:	9304      	strmi	r3, [sp, #16]
 800f614:	f04f 0800 	movpl.w	r8, #0
 800f618:	f1ba 0f00 	cmp.w	sl, #0
 800f61c:	db3b      	blt.n	800f696 <_dtoa_r+0x23e>
 800f61e:	9b04      	ldr	r3, [sp, #16]
 800f620:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f624:	4453      	add	r3, sl
 800f626:	9304      	str	r3, [sp, #16]
 800f628:	2300      	movs	r3, #0
 800f62a:	9306      	str	r3, [sp, #24]
 800f62c:	9b05      	ldr	r3, [sp, #20]
 800f62e:	2b09      	cmp	r3, #9
 800f630:	d869      	bhi.n	800f706 <_dtoa_r+0x2ae>
 800f632:	2b05      	cmp	r3, #5
 800f634:	bfc4      	itt	gt
 800f636:	3b04      	subgt	r3, #4
 800f638:	9305      	strgt	r3, [sp, #20]
 800f63a:	9b05      	ldr	r3, [sp, #20]
 800f63c:	f1a3 0302 	sub.w	r3, r3, #2
 800f640:	bfcc      	ite	gt
 800f642:	2500      	movgt	r5, #0
 800f644:	2501      	movle	r5, #1
 800f646:	2b03      	cmp	r3, #3
 800f648:	d869      	bhi.n	800f71e <_dtoa_r+0x2c6>
 800f64a:	e8df f003 	tbb	[pc, r3]
 800f64e:	4e2c      	.short	0x4e2c
 800f650:	5a4c      	.short	0x5a4c
 800f652:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f656:	441d      	add	r5, r3
 800f658:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	bfc1      	itttt	gt
 800f660:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f664:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f668:	fa09 f303 	lslgt.w	r3, r9, r3
 800f66c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f670:	bfda      	itte	le
 800f672:	f1c3 0320 	rsble	r3, r3, #32
 800f676:	fa06 f003 	lslle.w	r0, r6, r3
 800f67a:	4318      	orrgt	r0, r3
 800f67c:	f7f0 ff6a 	bl	8000554 <__aeabi_ui2d>
 800f680:	2301      	movs	r3, #1
 800f682:	4606      	mov	r6, r0
 800f684:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f688:	3d01      	subs	r5, #1
 800f68a:	9310      	str	r3, [sp, #64]	; 0x40
 800f68c:	e771      	b.n	800f572 <_dtoa_r+0x11a>
 800f68e:	2301      	movs	r3, #1
 800f690:	e7b6      	b.n	800f600 <_dtoa_r+0x1a8>
 800f692:	900e      	str	r0, [sp, #56]	; 0x38
 800f694:	e7b5      	b.n	800f602 <_dtoa_r+0x1aa>
 800f696:	f1ca 0300 	rsb	r3, sl, #0
 800f69a:	9306      	str	r3, [sp, #24]
 800f69c:	2300      	movs	r3, #0
 800f69e:	eba8 080a 	sub.w	r8, r8, sl
 800f6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f6a4:	e7c2      	b.n	800f62c <_dtoa_r+0x1d4>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9308      	str	r3, [sp, #32]
 800f6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dc39      	bgt.n	800f724 <_dtoa_r+0x2cc>
 800f6b0:	f04f 0901 	mov.w	r9, #1
 800f6b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6b8:	464b      	mov	r3, r9
 800f6ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f6be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	6042      	str	r2, [r0, #4]
 800f6c4:	2204      	movs	r2, #4
 800f6c6:	f102 0614 	add.w	r6, r2, #20
 800f6ca:	429e      	cmp	r6, r3
 800f6cc:	6841      	ldr	r1, [r0, #4]
 800f6ce:	d92f      	bls.n	800f730 <_dtoa_r+0x2d8>
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f001 fa59 	bl	8010b88 <_Balloc>
 800f6d6:	9000      	str	r0, [sp, #0]
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d14b      	bne.n	800f774 <_dtoa_r+0x31c>
 800f6dc:	4b24      	ldr	r3, [pc, #144]	; (800f770 <_dtoa_r+0x318>)
 800f6de:	4602      	mov	r2, r0
 800f6e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6e4:	e6d1      	b.n	800f48a <_dtoa_r+0x32>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e7de      	b.n	800f6a8 <_dtoa_r+0x250>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9308      	str	r3, [sp, #32]
 800f6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f0:	eb0a 0903 	add.w	r9, sl, r3
 800f6f4:	f109 0301 	add.w	r3, r9, #1
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	bfb8      	it	lt
 800f6fe:	2301      	movlt	r3, #1
 800f700:	e7dd      	b.n	800f6be <_dtoa_r+0x266>
 800f702:	2301      	movs	r3, #1
 800f704:	e7f2      	b.n	800f6ec <_dtoa_r+0x294>
 800f706:	2501      	movs	r5, #1
 800f708:	2300      	movs	r3, #0
 800f70a:	9305      	str	r3, [sp, #20]
 800f70c:	9508      	str	r5, [sp, #32]
 800f70e:	f04f 39ff 	mov.w	r9, #4294967295
 800f712:	2200      	movs	r2, #0
 800f714:	f8cd 9004 	str.w	r9, [sp, #4]
 800f718:	2312      	movs	r3, #18
 800f71a:	9209      	str	r2, [sp, #36]	; 0x24
 800f71c:	e7cf      	b.n	800f6be <_dtoa_r+0x266>
 800f71e:	2301      	movs	r3, #1
 800f720:	9308      	str	r3, [sp, #32]
 800f722:	e7f4      	b.n	800f70e <_dtoa_r+0x2b6>
 800f724:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f728:	f8cd 9004 	str.w	r9, [sp, #4]
 800f72c:	464b      	mov	r3, r9
 800f72e:	e7c6      	b.n	800f6be <_dtoa_r+0x266>
 800f730:	3101      	adds	r1, #1
 800f732:	6041      	str	r1, [r0, #4]
 800f734:	0052      	lsls	r2, r2, #1
 800f736:	e7c6      	b.n	800f6c6 <_dtoa_r+0x26e>
 800f738:	636f4361 	.word	0x636f4361
 800f73c:	3fd287a7 	.word	0x3fd287a7
 800f740:	8b60c8b3 	.word	0x8b60c8b3
 800f744:	3fc68a28 	.word	0x3fc68a28
 800f748:	509f79fb 	.word	0x509f79fb
 800f74c:	3fd34413 	.word	0x3fd34413
 800f750:	0801357e 	.word	0x0801357e
 800f754:	08013595 	.word	0x08013595
 800f758:	7ff00000 	.word	0x7ff00000
 800f75c:	0801357a 	.word	0x0801357a
 800f760:	08013571 	.word	0x08013571
 800f764:	080133f9 	.word	0x080133f9
 800f768:	3ff80000 	.word	0x3ff80000
 800f76c:	08013770 	.word	0x08013770
 800f770:	080135f4 	.word	0x080135f4
 800f774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f776:	9a00      	ldr	r2, [sp, #0]
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	9b01      	ldr	r3, [sp, #4]
 800f77c:	2b0e      	cmp	r3, #14
 800f77e:	f200 80ad 	bhi.w	800f8dc <_dtoa_r+0x484>
 800f782:	2d00      	cmp	r5, #0
 800f784:	f000 80aa 	beq.w	800f8dc <_dtoa_r+0x484>
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	dd36      	ble.n	800f7fc <_dtoa_r+0x3a4>
 800f78e:	4ac3      	ldr	r2, [pc, #780]	; (800fa9c <_dtoa_r+0x644>)
 800f790:	f00a 030f 	and.w	r3, sl, #15
 800f794:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f798:	ed93 7b00 	vldr	d7, [r3]
 800f79c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f7a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f7a4:	eeb0 8a47 	vmov.f32	s16, s14
 800f7a8:	eef0 8a67 	vmov.f32	s17, s15
 800f7ac:	d016      	beq.n	800f7dc <_dtoa_r+0x384>
 800f7ae:	4bbc      	ldr	r3, [pc, #752]	; (800faa0 <_dtoa_r+0x648>)
 800f7b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7b8:	f7f1 f870 	bl	800089c <__aeabi_ddiv>
 800f7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c0:	f007 070f 	and.w	r7, r7, #15
 800f7c4:	2503      	movs	r5, #3
 800f7c6:	4eb6      	ldr	r6, [pc, #728]	; (800faa0 <_dtoa_r+0x648>)
 800f7c8:	b957      	cbnz	r7, 800f7e0 <_dtoa_r+0x388>
 800f7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7ce:	ec53 2b18 	vmov	r2, r3, d8
 800f7d2:	f7f1 f863 	bl	800089c <__aeabi_ddiv>
 800f7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7da:	e029      	b.n	800f830 <_dtoa_r+0x3d8>
 800f7dc:	2502      	movs	r5, #2
 800f7de:	e7f2      	b.n	800f7c6 <_dtoa_r+0x36e>
 800f7e0:	07f9      	lsls	r1, r7, #31
 800f7e2:	d508      	bpl.n	800f7f6 <_dtoa_r+0x39e>
 800f7e4:	ec51 0b18 	vmov	r0, r1, d8
 800f7e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7ec:	f7f0 ff2c 	bl	8000648 <__aeabi_dmul>
 800f7f0:	ec41 0b18 	vmov	d8, r0, r1
 800f7f4:	3501      	adds	r5, #1
 800f7f6:	107f      	asrs	r7, r7, #1
 800f7f8:	3608      	adds	r6, #8
 800f7fa:	e7e5      	b.n	800f7c8 <_dtoa_r+0x370>
 800f7fc:	f000 80a6 	beq.w	800f94c <_dtoa_r+0x4f4>
 800f800:	f1ca 0600 	rsb	r6, sl, #0
 800f804:	4ba5      	ldr	r3, [pc, #660]	; (800fa9c <_dtoa_r+0x644>)
 800f806:	4fa6      	ldr	r7, [pc, #664]	; (800faa0 <_dtoa_r+0x648>)
 800f808:	f006 020f 	and.w	r2, r6, #15
 800f80c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f818:	f7f0 ff16 	bl	8000648 <__aeabi_dmul>
 800f81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f820:	1136      	asrs	r6, r6, #4
 800f822:	2300      	movs	r3, #0
 800f824:	2502      	movs	r5, #2
 800f826:	2e00      	cmp	r6, #0
 800f828:	f040 8085 	bne.w	800f936 <_dtoa_r+0x4de>
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1d2      	bne.n	800f7d6 <_dtoa_r+0x37e>
 800f830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f832:	2b00      	cmp	r3, #0
 800f834:	f000 808c 	beq.w	800f950 <_dtoa_r+0x4f8>
 800f838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f83c:	4b99      	ldr	r3, [pc, #612]	; (800faa4 <_dtoa_r+0x64c>)
 800f83e:	2200      	movs	r2, #0
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f1 f972 	bl	8000b2c <__aeabi_dcmplt>
 800f848:	2800      	cmp	r0, #0
 800f84a:	f000 8081 	beq.w	800f950 <_dtoa_r+0x4f8>
 800f84e:	9b01      	ldr	r3, [sp, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d07d      	beq.n	800f950 <_dtoa_r+0x4f8>
 800f854:	f1b9 0f00 	cmp.w	r9, #0
 800f858:	dd3c      	ble.n	800f8d4 <_dtoa_r+0x47c>
 800f85a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f85e:	9307      	str	r3, [sp, #28]
 800f860:	2200      	movs	r2, #0
 800f862:	4b91      	ldr	r3, [pc, #580]	; (800faa8 <_dtoa_r+0x650>)
 800f864:	4630      	mov	r0, r6
 800f866:	4639      	mov	r1, r7
 800f868:	f7f0 feee 	bl	8000648 <__aeabi_dmul>
 800f86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f870:	3501      	adds	r5, #1
 800f872:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f876:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f87a:	4628      	mov	r0, r5
 800f87c:	f7f0 fe7a 	bl	8000574 <__aeabi_i2d>
 800f880:	4632      	mov	r2, r6
 800f882:	463b      	mov	r3, r7
 800f884:	f7f0 fee0 	bl	8000648 <__aeabi_dmul>
 800f888:	4b88      	ldr	r3, [pc, #544]	; (800faac <_dtoa_r+0x654>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	f7f0 fd26 	bl	80002dc <__adddf3>
 800f890:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f898:	9303      	str	r3, [sp, #12]
 800f89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d15c      	bne.n	800f95a <_dtoa_r+0x502>
 800f8a0:	4b83      	ldr	r3, [pc, #524]	; (800fab0 <_dtoa_r+0x658>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7f0 fd16 	bl	80002d8 <__aeabi_dsub>
 800f8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	f7f1 f958 	bl	8000b68 <__aeabi_dcmpgt>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	f040 8296 	bne.w	800fdea <_dtoa_r+0x992>
 800f8be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f1 f92f 	bl	8000b2c <__aeabi_dcmplt>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f040 8288 	bne.w	800fde4 <_dtoa_r+0x98c>
 800f8d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f2c0 8158 	blt.w	800fb94 <_dtoa_r+0x73c>
 800f8e4:	f1ba 0f0e 	cmp.w	sl, #14
 800f8e8:	f300 8154 	bgt.w	800fb94 <_dtoa_r+0x73c>
 800f8ec:	4b6b      	ldr	r3, [pc, #428]	; (800fa9c <_dtoa_r+0x644>)
 800f8ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f280 80e3 	bge.w	800fac4 <_dtoa_r+0x66c>
 800f8fe:	9b01      	ldr	r3, [sp, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	f300 80df 	bgt.w	800fac4 <_dtoa_r+0x66c>
 800f906:	f040 826d 	bne.w	800fde4 <_dtoa_r+0x98c>
 800f90a:	4b69      	ldr	r3, [pc, #420]	; (800fab0 <_dtoa_r+0x658>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	4640      	mov	r0, r8
 800f910:	4649      	mov	r1, r9
 800f912:	f7f0 fe99 	bl	8000648 <__aeabi_dmul>
 800f916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f91a:	f7f1 f91b 	bl	8000b54 <__aeabi_dcmpge>
 800f91e:	9e01      	ldr	r6, [sp, #4]
 800f920:	4637      	mov	r7, r6
 800f922:	2800      	cmp	r0, #0
 800f924:	f040 8243 	bne.w	800fdae <_dtoa_r+0x956>
 800f928:	9d00      	ldr	r5, [sp, #0]
 800f92a:	2331      	movs	r3, #49	; 0x31
 800f92c:	f805 3b01 	strb.w	r3, [r5], #1
 800f930:	f10a 0a01 	add.w	sl, sl, #1
 800f934:	e23f      	b.n	800fdb6 <_dtoa_r+0x95e>
 800f936:	07f2      	lsls	r2, r6, #31
 800f938:	d505      	bpl.n	800f946 <_dtoa_r+0x4ee>
 800f93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93e:	f7f0 fe83 	bl	8000648 <__aeabi_dmul>
 800f942:	3501      	adds	r5, #1
 800f944:	2301      	movs	r3, #1
 800f946:	1076      	asrs	r6, r6, #1
 800f948:	3708      	adds	r7, #8
 800f94a:	e76c      	b.n	800f826 <_dtoa_r+0x3ce>
 800f94c:	2502      	movs	r5, #2
 800f94e:	e76f      	b.n	800f830 <_dtoa_r+0x3d8>
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	f8cd a01c 	str.w	sl, [sp, #28]
 800f956:	930c      	str	r3, [sp, #48]	; 0x30
 800f958:	e78d      	b.n	800f876 <_dtoa_r+0x41e>
 800f95a:	9900      	ldr	r1, [sp, #0]
 800f95c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f960:	4b4e      	ldr	r3, [pc, #312]	; (800fa9c <_dtoa_r+0x644>)
 800f962:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f966:	4401      	add	r1, r0
 800f968:	9102      	str	r1, [sp, #8]
 800f96a:	9908      	ldr	r1, [sp, #32]
 800f96c:	eeb0 8a47 	vmov.f32	s16, s14
 800f970:	eef0 8a67 	vmov.f32	s17, s15
 800f974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f97c:	2900      	cmp	r1, #0
 800f97e:	d045      	beq.n	800fa0c <_dtoa_r+0x5b4>
 800f980:	494c      	ldr	r1, [pc, #304]	; (800fab4 <_dtoa_r+0x65c>)
 800f982:	2000      	movs	r0, #0
 800f984:	f7f0 ff8a 	bl	800089c <__aeabi_ddiv>
 800f988:	ec53 2b18 	vmov	r2, r3, d8
 800f98c:	f7f0 fca4 	bl	80002d8 <__aeabi_dsub>
 800f990:	9d00      	ldr	r5, [sp, #0]
 800f992:	ec41 0b18 	vmov	d8, r0, r1
 800f996:	4639      	mov	r1, r7
 800f998:	4630      	mov	r0, r6
 800f99a:	f7f1 f905 	bl	8000ba8 <__aeabi_d2iz>
 800f99e:	900c      	str	r0, [sp, #48]	; 0x30
 800f9a0:	f7f0 fde8 	bl	8000574 <__aeabi_i2d>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f0 fc94 	bl	80002d8 <__aeabi_dsub>
 800f9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9b2:	3330      	adds	r3, #48	; 0x30
 800f9b4:	f805 3b01 	strb.w	r3, [r5], #1
 800f9b8:	ec53 2b18 	vmov	r2, r3, d8
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	f7f1 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d165      	bne.n	800fa94 <_dtoa_r+0x63c>
 800f9c8:	4632      	mov	r2, r6
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4935      	ldr	r1, [pc, #212]	; (800faa4 <_dtoa_r+0x64c>)
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	f7f0 fc82 	bl	80002d8 <__aeabi_dsub>
 800f9d4:	ec53 2b18 	vmov	r2, r3, d8
 800f9d8:	f7f1 f8a8 	bl	8000b2c <__aeabi_dcmplt>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f040 80b9 	bne.w	800fb54 <_dtoa_r+0x6fc>
 800f9e2:	9b02      	ldr	r3, [sp, #8]
 800f9e4:	429d      	cmp	r5, r3
 800f9e6:	f43f af75 	beq.w	800f8d4 <_dtoa_r+0x47c>
 800f9ea:	4b2f      	ldr	r3, [pc, #188]	; (800faa8 <_dtoa_r+0x650>)
 800f9ec:	ec51 0b18 	vmov	r0, r1, d8
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f7f0 fe29 	bl	8000648 <__aeabi_dmul>
 800f9f6:	4b2c      	ldr	r3, [pc, #176]	; (800faa8 <_dtoa_r+0x650>)
 800f9f8:	ec41 0b18 	vmov	d8, r0, r1
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	4630      	mov	r0, r6
 800fa00:	4639      	mov	r1, r7
 800fa02:	f7f0 fe21 	bl	8000648 <__aeabi_dmul>
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	e7c4      	b.n	800f996 <_dtoa_r+0x53e>
 800fa0c:	ec51 0b17 	vmov	r0, r1, d7
 800fa10:	f7f0 fe1a 	bl	8000648 <__aeabi_dmul>
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	9d00      	ldr	r5, [sp, #0]
 800fa18:	930c      	str	r3, [sp, #48]	; 0x30
 800fa1a:	ec41 0b18 	vmov	d8, r0, r1
 800fa1e:	4639      	mov	r1, r7
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7f1 f8c1 	bl	8000ba8 <__aeabi_d2iz>
 800fa26:	9011      	str	r0, [sp, #68]	; 0x44
 800fa28:	f7f0 fda4 	bl	8000574 <__aeabi_i2d>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4630      	mov	r0, r6
 800fa32:	4639      	mov	r1, r7
 800fa34:	f7f0 fc50 	bl	80002d8 <__aeabi_dsub>
 800fa38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa3a:	3330      	adds	r3, #48	; 0x30
 800fa3c:	f805 3b01 	strb.w	r3, [r5], #1
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	429d      	cmp	r5, r3
 800fa44:	4606      	mov	r6, r0
 800fa46:	460f      	mov	r7, r1
 800fa48:	f04f 0200 	mov.w	r2, #0
 800fa4c:	d134      	bne.n	800fab8 <_dtoa_r+0x660>
 800fa4e:	4b19      	ldr	r3, [pc, #100]	; (800fab4 <_dtoa_r+0x65c>)
 800fa50:	ec51 0b18 	vmov	r0, r1, d8
 800fa54:	f7f0 fc42 	bl	80002dc <__adddf3>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f7f1 f882 	bl	8000b68 <__aeabi_dcmpgt>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d175      	bne.n	800fb54 <_dtoa_r+0x6fc>
 800fa68:	ec53 2b18 	vmov	r2, r3, d8
 800fa6c:	4911      	ldr	r1, [pc, #68]	; (800fab4 <_dtoa_r+0x65c>)
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f7f0 fc32 	bl	80002d8 <__aeabi_dsub>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4630      	mov	r0, r6
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	f7f1 f856 	bl	8000b2c <__aeabi_dcmplt>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	f43f af27 	beq.w	800f8d4 <_dtoa_r+0x47c>
 800fa86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa88:	1e6b      	subs	r3, r5, #1
 800fa8a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa90:	2b30      	cmp	r3, #48	; 0x30
 800fa92:	d0f8      	beq.n	800fa86 <_dtoa_r+0x62e>
 800fa94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa98:	e04a      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fa9a:	bf00      	nop
 800fa9c:	08013770 	.word	0x08013770
 800faa0:	08013748 	.word	0x08013748
 800faa4:	3ff00000 	.word	0x3ff00000
 800faa8:	40240000 	.word	0x40240000
 800faac:	401c0000 	.word	0x401c0000
 800fab0:	40140000 	.word	0x40140000
 800fab4:	3fe00000 	.word	0x3fe00000
 800fab8:	4baf      	ldr	r3, [pc, #700]	; (800fd78 <_dtoa_r+0x920>)
 800faba:	f7f0 fdc5 	bl	8000648 <__aeabi_dmul>
 800fabe:	4606      	mov	r6, r0
 800fac0:	460f      	mov	r7, r1
 800fac2:	e7ac      	b.n	800fa1e <_dtoa_r+0x5c6>
 800fac4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fac8:	9d00      	ldr	r5, [sp, #0]
 800faca:	4642      	mov	r2, r8
 800facc:	464b      	mov	r3, r9
 800face:	4630      	mov	r0, r6
 800fad0:	4639      	mov	r1, r7
 800fad2:	f7f0 fee3 	bl	800089c <__aeabi_ddiv>
 800fad6:	f7f1 f867 	bl	8000ba8 <__aeabi_d2iz>
 800fada:	9002      	str	r0, [sp, #8]
 800fadc:	f7f0 fd4a 	bl	8000574 <__aeabi_i2d>
 800fae0:	4642      	mov	r2, r8
 800fae2:	464b      	mov	r3, r9
 800fae4:	f7f0 fdb0 	bl	8000648 <__aeabi_dmul>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	4630      	mov	r0, r6
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f0 fbf2 	bl	80002d8 <__aeabi_dsub>
 800faf4:	9e02      	ldr	r6, [sp, #8]
 800faf6:	9f01      	ldr	r7, [sp, #4]
 800faf8:	3630      	adds	r6, #48	; 0x30
 800fafa:	f805 6b01 	strb.w	r6, [r5], #1
 800fafe:	9e00      	ldr	r6, [sp, #0]
 800fb00:	1bae      	subs	r6, r5, r6
 800fb02:	42b7      	cmp	r7, r6
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	d137      	bne.n	800fb7a <_dtoa_r+0x722>
 800fb0a:	f7f0 fbe7 	bl	80002dc <__adddf3>
 800fb0e:	4642      	mov	r2, r8
 800fb10:	464b      	mov	r3, r9
 800fb12:	4606      	mov	r6, r0
 800fb14:	460f      	mov	r7, r1
 800fb16:	f7f1 f827 	bl	8000b68 <__aeabi_dcmpgt>
 800fb1a:	b9c8      	cbnz	r0, 800fb50 <_dtoa_r+0x6f8>
 800fb1c:	4642      	mov	r2, r8
 800fb1e:	464b      	mov	r3, r9
 800fb20:	4630      	mov	r0, r6
 800fb22:	4639      	mov	r1, r7
 800fb24:	f7f0 fff8 	bl	8000b18 <__aeabi_dcmpeq>
 800fb28:	b110      	cbz	r0, 800fb30 <_dtoa_r+0x6d8>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	07d9      	lsls	r1, r3, #31
 800fb2e:	d40f      	bmi.n	800fb50 <_dtoa_r+0x6f8>
 800fb30:	4620      	mov	r0, r4
 800fb32:	4659      	mov	r1, fp
 800fb34:	f001 f868 	bl	8010c08 <_Bfree>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	702b      	strb	r3, [r5, #0]
 800fb3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb3e:	f10a 0001 	add.w	r0, sl, #1
 800fb42:	6018      	str	r0, [r3, #0]
 800fb44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f43f acd8 	beq.w	800f4fc <_dtoa_r+0xa4>
 800fb4c:	601d      	str	r5, [r3, #0]
 800fb4e:	e4d5      	b.n	800f4fc <_dtoa_r+0xa4>
 800fb50:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb54:	462b      	mov	r3, r5
 800fb56:	461d      	mov	r5, r3
 800fb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb5c:	2a39      	cmp	r2, #57	; 0x39
 800fb5e:	d108      	bne.n	800fb72 <_dtoa_r+0x71a>
 800fb60:	9a00      	ldr	r2, [sp, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d1f7      	bne.n	800fb56 <_dtoa_r+0x6fe>
 800fb66:	9a07      	ldr	r2, [sp, #28]
 800fb68:	9900      	ldr	r1, [sp, #0]
 800fb6a:	3201      	adds	r2, #1
 800fb6c:	9207      	str	r2, [sp, #28]
 800fb6e:	2230      	movs	r2, #48	; 0x30
 800fb70:	700a      	strb	r2, [r1, #0]
 800fb72:	781a      	ldrb	r2, [r3, #0]
 800fb74:	3201      	adds	r2, #1
 800fb76:	701a      	strb	r2, [r3, #0]
 800fb78:	e78c      	b.n	800fa94 <_dtoa_r+0x63c>
 800fb7a:	4b7f      	ldr	r3, [pc, #508]	; (800fd78 <_dtoa_r+0x920>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f7f0 fd63 	bl	8000648 <__aeabi_dmul>
 800fb82:	2200      	movs	r2, #0
 800fb84:	2300      	movs	r3, #0
 800fb86:	4606      	mov	r6, r0
 800fb88:	460f      	mov	r7, r1
 800fb8a:	f7f0 ffc5 	bl	8000b18 <__aeabi_dcmpeq>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d09b      	beq.n	800faca <_dtoa_r+0x672>
 800fb92:	e7cd      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fb94:	9a08      	ldr	r2, [sp, #32]
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	f000 80c4 	beq.w	800fd24 <_dtoa_r+0x8cc>
 800fb9c:	9a05      	ldr	r2, [sp, #20]
 800fb9e:	2a01      	cmp	r2, #1
 800fba0:	f300 80a8 	bgt.w	800fcf4 <_dtoa_r+0x89c>
 800fba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	f000 80a0 	beq.w	800fcec <_dtoa_r+0x894>
 800fbac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fbb0:	9e06      	ldr	r6, [sp, #24]
 800fbb2:	4645      	mov	r5, r8
 800fbb4:	9a04      	ldr	r2, [sp, #16]
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	441a      	add	r2, r3
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4498      	add	r8, r3
 800fbbe:	9204      	str	r2, [sp, #16]
 800fbc0:	f001 f928 	bl	8010e14 <__i2b>
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	2d00      	cmp	r5, #0
 800fbc8:	dd0b      	ble.n	800fbe2 <_dtoa_r+0x78a>
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dd08      	ble.n	800fbe2 <_dtoa_r+0x78a>
 800fbd0:	42ab      	cmp	r3, r5
 800fbd2:	9a04      	ldr	r2, [sp, #16]
 800fbd4:	bfa8      	it	ge
 800fbd6:	462b      	movge	r3, r5
 800fbd8:	eba8 0803 	sub.w	r8, r8, r3
 800fbdc:	1aed      	subs	r5, r5, r3
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	9304      	str	r3, [sp, #16]
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	b1fb      	cbz	r3, 800fc26 <_dtoa_r+0x7ce>
 800fbe6:	9b08      	ldr	r3, [sp, #32]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 809f 	beq.w	800fd2c <_dtoa_r+0x8d4>
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	dd11      	ble.n	800fc16 <_dtoa_r+0x7be>
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	4632      	mov	r2, r6
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f001 f9c8 	bl	8010f8c <__pow5mult>
 800fbfc:	465a      	mov	r2, fp
 800fbfe:	4601      	mov	r1, r0
 800fc00:	4607      	mov	r7, r0
 800fc02:	4620      	mov	r0, r4
 800fc04:	f001 f91c 	bl	8010e40 <__multiply>
 800fc08:	4659      	mov	r1, fp
 800fc0a:	9007      	str	r0, [sp, #28]
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f000 fffb 	bl	8010c08 <_Bfree>
 800fc12:	9b07      	ldr	r3, [sp, #28]
 800fc14:	469b      	mov	fp, r3
 800fc16:	9b06      	ldr	r3, [sp, #24]
 800fc18:	1b9a      	subs	r2, r3, r6
 800fc1a:	d004      	beq.n	800fc26 <_dtoa_r+0x7ce>
 800fc1c:	4659      	mov	r1, fp
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f001 f9b4 	bl	8010f8c <__pow5mult>
 800fc24:	4683      	mov	fp, r0
 800fc26:	2101      	movs	r1, #1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f001 f8f3 	bl	8010e14 <__i2b>
 800fc2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	4606      	mov	r6, r0
 800fc34:	dd7c      	ble.n	800fd30 <_dtoa_r+0x8d8>
 800fc36:	461a      	mov	r2, r3
 800fc38:	4601      	mov	r1, r0
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f001 f9a6 	bl	8010f8c <__pow5mult>
 800fc40:	9b05      	ldr	r3, [sp, #20]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	4606      	mov	r6, r0
 800fc46:	dd76      	ble.n	800fd36 <_dtoa_r+0x8de>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	9306      	str	r3, [sp, #24]
 800fc4c:	6933      	ldr	r3, [r6, #16]
 800fc4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc52:	6918      	ldr	r0, [r3, #16]
 800fc54:	f001 f88e 	bl	8010d74 <__hi0bits>
 800fc58:	f1c0 0020 	rsb	r0, r0, #32
 800fc5c:	9b04      	ldr	r3, [sp, #16]
 800fc5e:	4418      	add	r0, r3
 800fc60:	f010 001f 	ands.w	r0, r0, #31
 800fc64:	f000 8086 	beq.w	800fd74 <_dtoa_r+0x91c>
 800fc68:	f1c0 0320 	rsb	r3, r0, #32
 800fc6c:	2b04      	cmp	r3, #4
 800fc6e:	dd7f      	ble.n	800fd70 <_dtoa_r+0x918>
 800fc70:	f1c0 001c 	rsb	r0, r0, #28
 800fc74:	9b04      	ldr	r3, [sp, #16]
 800fc76:	4403      	add	r3, r0
 800fc78:	4480      	add	r8, r0
 800fc7a:	4405      	add	r5, r0
 800fc7c:	9304      	str	r3, [sp, #16]
 800fc7e:	f1b8 0f00 	cmp.w	r8, #0
 800fc82:	dd05      	ble.n	800fc90 <_dtoa_r+0x838>
 800fc84:	4659      	mov	r1, fp
 800fc86:	4642      	mov	r2, r8
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f001 f9d9 	bl	8011040 <__lshift>
 800fc8e:	4683      	mov	fp, r0
 800fc90:	9b04      	ldr	r3, [sp, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd05      	ble.n	800fca2 <_dtoa_r+0x84a>
 800fc96:	4631      	mov	r1, r6
 800fc98:	461a      	mov	r2, r3
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f001 f9d0 	bl	8011040 <__lshift>
 800fca0:	4606      	mov	r6, r0
 800fca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d069      	beq.n	800fd7c <_dtoa_r+0x924>
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4658      	mov	r0, fp
 800fcac:	f001 fa34 	bl	8011118 <__mcmp>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	da63      	bge.n	800fd7c <_dtoa_r+0x924>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4659      	mov	r1, fp
 800fcb8:	220a      	movs	r2, #10
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f000 ffc6 	bl	8010c4c <__multadd>
 800fcc0:	9b08      	ldr	r3, [sp, #32]
 800fcc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcc6:	4683      	mov	fp, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	f000 818f 	beq.w	800ffec <_dtoa_r+0xb94>
 800fcce:	4639      	mov	r1, r7
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	220a      	movs	r2, #10
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f000 ffb9 	bl	8010c4c <__multadd>
 800fcda:	f1b9 0f00 	cmp.w	r9, #0
 800fcde:	4607      	mov	r7, r0
 800fce0:	f300 808e 	bgt.w	800fe00 <_dtoa_r+0x9a8>
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	dc50      	bgt.n	800fd8c <_dtoa_r+0x934>
 800fcea:	e089      	b.n	800fe00 <_dtoa_r+0x9a8>
 800fcec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcf2:	e75d      	b.n	800fbb0 <_dtoa_r+0x758>
 800fcf4:	9b01      	ldr	r3, [sp, #4]
 800fcf6:	1e5e      	subs	r6, r3, #1
 800fcf8:	9b06      	ldr	r3, [sp, #24]
 800fcfa:	42b3      	cmp	r3, r6
 800fcfc:	bfbf      	itttt	lt
 800fcfe:	9b06      	ldrlt	r3, [sp, #24]
 800fd00:	9606      	strlt	r6, [sp, #24]
 800fd02:	1af2      	sublt	r2, r6, r3
 800fd04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fd06:	bfb6      	itet	lt
 800fd08:	189b      	addlt	r3, r3, r2
 800fd0a:	1b9e      	subge	r6, r3, r6
 800fd0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	bfb8      	it	lt
 800fd12:	2600      	movlt	r6, #0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	bfb5      	itete	lt
 800fd18:	eba8 0503 	sublt.w	r5, r8, r3
 800fd1c:	9b01      	ldrge	r3, [sp, #4]
 800fd1e:	2300      	movlt	r3, #0
 800fd20:	4645      	movge	r5, r8
 800fd22:	e747      	b.n	800fbb4 <_dtoa_r+0x75c>
 800fd24:	9e06      	ldr	r6, [sp, #24]
 800fd26:	9f08      	ldr	r7, [sp, #32]
 800fd28:	4645      	mov	r5, r8
 800fd2a:	e74c      	b.n	800fbc6 <_dtoa_r+0x76e>
 800fd2c:	9a06      	ldr	r2, [sp, #24]
 800fd2e:	e775      	b.n	800fc1c <_dtoa_r+0x7c4>
 800fd30:	9b05      	ldr	r3, [sp, #20]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	dc18      	bgt.n	800fd68 <_dtoa_r+0x910>
 800fd36:	9b02      	ldr	r3, [sp, #8]
 800fd38:	b9b3      	cbnz	r3, 800fd68 <_dtoa_r+0x910>
 800fd3a:	9b03      	ldr	r3, [sp, #12]
 800fd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd40:	b9a3      	cbnz	r3, 800fd6c <_dtoa_r+0x914>
 800fd42:	9b03      	ldr	r3, [sp, #12]
 800fd44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd48:	0d1b      	lsrs	r3, r3, #20
 800fd4a:	051b      	lsls	r3, r3, #20
 800fd4c:	b12b      	cbz	r3, 800fd5a <_dtoa_r+0x902>
 800fd4e:	9b04      	ldr	r3, [sp, #16]
 800fd50:	3301      	adds	r3, #1
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	f108 0801 	add.w	r8, r8, #1
 800fd58:	2301      	movs	r3, #1
 800fd5a:	9306      	str	r3, [sp, #24]
 800fd5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f47f af74 	bne.w	800fc4c <_dtoa_r+0x7f4>
 800fd64:	2001      	movs	r0, #1
 800fd66:	e779      	b.n	800fc5c <_dtoa_r+0x804>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	e7f6      	b.n	800fd5a <_dtoa_r+0x902>
 800fd6c:	9b02      	ldr	r3, [sp, #8]
 800fd6e:	e7f4      	b.n	800fd5a <_dtoa_r+0x902>
 800fd70:	d085      	beq.n	800fc7e <_dtoa_r+0x826>
 800fd72:	4618      	mov	r0, r3
 800fd74:	301c      	adds	r0, #28
 800fd76:	e77d      	b.n	800fc74 <_dtoa_r+0x81c>
 800fd78:	40240000 	.word	0x40240000
 800fd7c:	9b01      	ldr	r3, [sp, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dc38      	bgt.n	800fdf4 <_dtoa_r+0x99c>
 800fd82:	9b05      	ldr	r3, [sp, #20]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	dd35      	ble.n	800fdf4 <_dtoa_r+0x99c>
 800fd88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d10d      	bne.n	800fdae <_dtoa_r+0x956>
 800fd92:	4631      	mov	r1, r6
 800fd94:	464b      	mov	r3, r9
 800fd96:	2205      	movs	r2, #5
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 ff57 	bl	8010c4c <__multadd>
 800fd9e:	4601      	mov	r1, r0
 800fda0:	4606      	mov	r6, r0
 800fda2:	4658      	mov	r0, fp
 800fda4:	f001 f9b8 	bl	8011118 <__mcmp>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	f73f adbd 	bgt.w	800f928 <_dtoa_r+0x4d0>
 800fdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb0:	9d00      	ldr	r5, [sp, #0]
 800fdb2:	ea6f 0a03 	mvn.w	sl, r3
 800fdb6:	f04f 0800 	mov.w	r8, #0
 800fdba:	4631      	mov	r1, r6
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 ff23 	bl	8010c08 <_Bfree>
 800fdc2:	2f00      	cmp	r7, #0
 800fdc4:	f43f aeb4 	beq.w	800fb30 <_dtoa_r+0x6d8>
 800fdc8:	f1b8 0f00 	cmp.w	r8, #0
 800fdcc:	d005      	beq.n	800fdda <_dtoa_r+0x982>
 800fdce:	45b8      	cmp	r8, r7
 800fdd0:	d003      	beq.n	800fdda <_dtoa_r+0x982>
 800fdd2:	4641      	mov	r1, r8
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 ff17 	bl	8010c08 <_Bfree>
 800fdda:	4639      	mov	r1, r7
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 ff13 	bl	8010c08 <_Bfree>
 800fde2:	e6a5      	b.n	800fb30 <_dtoa_r+0x6d8>
 800fde4:	2600      	movs	r6, #0
 800fde6:	4637      	mov	r7, r6
 800fde8:	e7e1      	b.n	800fdae <_dtoa_r+0x956>
 800fdea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fdec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fdf0:	4637      	mov	r7, r6
 800fdf2:	e599      	b.n	800f928 <_dtoa_r+0x4d0>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f000 80fd 	beq.w	800fffa <_dtoa_r+0xba2>
 800fe00:	2d00      	cmp	r5, #0
 800fe02:	dd05      	ble.n	800fe10 <_dtoa_r+0x9b8>
 800fe04:	4639      	mov	r1, r7
 800fe06:	462a      	mov	r2, r5
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f001 f919 	bl	8011040 <__lshift>
 800fe0e:	4607      	mov	r7, r0
 800fe10:	9b06      	ldr	r3, [sp, #24]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d05c      	beq.n	800fed0 <_dtoa_r+0xa78>
 800fe16:	6879      	ldr	r1, [r7, #4]
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 feb5 	bl	8010b88 <_Balloc>
 800fe1e:	4605      	mov	r5, r0
 800fe20:	b928      	cbnz	r0, 800fe2e <_dtoa_r+0x9d6>
 800fe22:	4b80      	ldr	r3, [pc, #512]	; (8010024 <_dtoa_r+0xbcc>)
 800fe24:	4602      	mov	r2, r0
 800fe26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fe2a:	f7ff bb2e 	b.w	800f48a <_dtoa_r+0x32>
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	3202      	adds	r2, #2
 800fe32:	0092      	lsls	r2, r2, #2
 800fe34:	f107 010c 	add.w	r1, r7, #12
 800fe38:	300c      	adds	r0, #12
 800fe3a:	f7fd fdf3 	bl	800da24 <memcpy>
 800fe3e:	2201      	movs	r2, #1
 800fe40:	4629      	mov	r1, r5
 800fe42:	4620      	mov	r0, r4
 800fe44:	f001 f8fc 	bl	8011040 <__lshift>
 800fe48:	9b00      	ldr	r3, [sp, #0]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	444b      	add	r3, r9
 800fe52:	9307      	str	r3, [sp, #28]
 800fe54:	9b02      	ldr	r3, [sp, #8]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	46b8      	mov	r8, r7
 800fe5c:	9306      	str	r3, [sp, #24]
 800fe5e:	4607      	mov	r7, r0
 800fe60:	9b01      	ldr	r3, [sp, #4]
 800fe62:	4631      	mov	r1, r6
 800fe64:	3b01      	subs	r3, #1
 800fe66:	4658      	mov	r0, fp
 800fe68:	9302      	str	r3, [sp, #8]
 800fe6a:	f7ff fa69 	bl	800f340 <quorem>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	3330      	adds	r3, #48	; 0x30
 800fe72:	9004      	str	r0, [sp, #16]
 800fe74:	4641      	mov	r1, r8
 800fe76:	4658      	mov	r0, fp
 800fe78:	9308      	str	r3, [sp, #32]
 800fe7a:	f001 f94d 	bl	8011118 <__mcmp>
 800fe7e:	463a      	mov	r2, r7
 800fe80:	4681      	mov	r9, r0
 800fe82:	4631      	mov	r1, r6
 800fe84:	4620      	mov	r0, r4
 800fe86:	f001 f963 	bl	8011150 <__mdiff>
 800fe8a:	68c2      	ldr	r2, [r0, #12]
 800fe8c:	9b08      	ldr	r3, [sp, #32]
 800fe8e:	4605      	mov	r5, r0
 800fe90:	bb02      	cbnz	r2, 800fed4 <_dtoa_r+0xa7c>
 800fe92:	4601      	mov	r1, r0
 800fe94:	4658      	mov	r0, fp
 800fe96:	f001 f93f 	bl	8011118 <__mcmp>
 800fe9a:	9b08      	ldr	r3, [sp, #32]
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	4629      	mov	r1, r5
 800fea0:	4620      	mov	r0, r4
 800fea2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fea6:	f000 feaf 	bl	8010c08 <_Bfree>
 800feaa:	9b05      	ldr	r3, [sp, #20]
 800feac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feae:	9d01      	ldr	r5, [sp, #4]
 800feb0:	ea43 0102 	orr.w	r1, r3, r2
 800feb4:	9b06      	ldr	r3, [sp, #24]
 800feb6:	430b      	orrs	r3, r1
 800feb8:	9b08      	ldr	r3, [sp, #32]
 800feba:	d10d      	bne.n	800fed8 <_dtoa_r+0xa80>
 800febc:	2b39      	cmp	r3, #57	; 0x39
 800febe:	d029      	beq.n	800ff14 <_dtoa_r+0xabc>
 800fec0:	f1b9 0f00 	cmp.w	r9, #0
 800fec4:	dd01      	ble.n	800feca <_dtoa_r+0xa72>
 800fec6:	9b04      	ldr	r3, [sp, #16]
 800fec8:	3331      	adds	r3, #49	; 0x31
 800feca:	9a02      	ldr	r2, [sp, #8]
 800fecc:	7013      	strb	r3, [r2, #0]
 800fece:	e774      	b.n	800fdba <_dtoa_r+0x962>
 800fed0:	4638      	mov	r0, r7
 800fed2:	e7b9      	b.n	800fe48 <_dtoa_r+0x9f0>
 800fed4:	2201      	movs	r2, #1
 800fed6:	e7e2      	b.n	800fe9e <_dtoa_r+0xa46>
 800fed8:	f1b9 0f00 	cmp.w	r9, #0
 800fedc:	db06      	blt.n	800feec <_dtoa_r+0xa94>
 800fede:	9905      	ldr	r1, [sp, #20]
 800fee0:	ea41 0909 	orr.w	r9, r1, r9
 800fee4:	9906      	ldr	r1, [sp, #24]
 800fee6:	ea59 0101 	orrs.w	r1, r9, r1
 800feea:	d120      	bne.n	800ff2e <_dtoa_r+0xad6>
 800feec:	2a00      	cmp	r2, #0
 800feee:	ddec      	ble.n	800feca <_dtoa_r+0xa72>
 800fef0:	4659      	mov	r1, fp
 800fef2:	2201      	movs	r2, #1
 800fef4:	4620      	mov	r0, r4
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	f001 f8a2 	bl	8011040 <__lshift>
 800fefc:	4631      	mov	r1, r6
 800fefe:	4683      	mov	fp, r0
 800ff00:	f001 f90a 	bl	8011118 <__mcmp>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	dc02      	bgt.n	800ff10 <_dtoa_r+0xab8>
 800ff0a:	d1de      	bne.n	800feca <_dtoa_r+0xa72>
 800ff0c:	07da      	lsls	r2, r3, #31
 800ff0e:	d5dc      	bpl.n	800feca <_dtoa_r+0xa72>
 800ff10:	2b39      	cmp	r3, #57	; 0x39
 800ff12:	d1d8      	bne.n	800fec6 <_dtoa_r+0xa6e>
 800ff14:	9a02      	ldr	r2, [sp, #8]
 800ff16:	2339      	movs	r3, #57	; 0x39
 800ff18:	7013      	strb	r3, [r2, #0]
 800ff1a:	462b      	mov	r3, r5
 800ff1c:	461d      	mov	r5, r3
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff24:	2a39      	cmp	r2, #57	; 0x39
 800ff26:	d050      	beq.n	800ffca <_dtoa_r+0xb72>
 800ff28:	3201      	adds	r2, #1
 800ff2a:	701a      	strb	r2, [r3, #0]
 800ff2c:	e745      	b.n	800fdba <_dtoa_r+0x962>
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	dd03      	ble.n	800ff3a <_dtoa_r+0xae2>
 800ff32:	2b39      	cmp	r3, #57	; 0x39
 800ff34:	d0ee      	beq.n	800ff14 <_dtoa_r+0xabc>
 800ff36:	3301      	adds	r3, #1
 800ff38:	e7c7      	b.n	800feca <_dtoa_r+0xa72>
 800ff3a:	9a01      	ldr	r2, [sp, #4]
 800ff3c:	9907      	ldr	r1, [sp, #28]
 800ff3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff42:	428a      	cmp	r2, r1
 800ff44:	d02a      	beq.n	800ff9c <_dtoa_r+0xb44>
 800ff46:	4659      	mov	r1, fp
 800ff48:	2300      	movs	r3, #0
 800ff4a:	220a      	movs	r2, #10
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f000 fe7d 	bl	8010c4c <__multadd>
 800ff52:	45b8      	cmp	r8, r7
 800ff54:	4683      	mov	fp, r0
 800ff56:	f04f 0300 	mov.w	r3, #0
 800ff5a:	f04f 020a 	mov.w	r2, #10
 800ff5e:	4641      	mov	r1, r8
 800ff60:	4620      	mov	r0, r4
 800ff62:	d107      	bne.n	800ff74 <_dtoa_r+0xb1c>
 800ff64:	f000 fe72 	bl	8010c4c <__multadd>
 800ff68:	4680      	mov	r8, r0
 800ff6a:	4607      	mov	r7, r0
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	e775      	b.n	800fe60 <_dtoa_r+0xa08>
 800ff74:	f000 fe6a 	bl	8010c4c <__multadd>
 800ff78:	4639      	mov	r1, r7
 800ff7a:	4680      	mov	r8, r0
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	220a      	movs	r2, #10
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 fe63 	bl	8010c4c <__multadd>
 800ff86:	4607      	mov	r7, r0
 800ff88:	e7f0      	b.n	800ff6c <_dtoa_r+0xb14>
 800ff8a:	f1b9 0f00 	cmp.w	r9, #0
 800ff8e:	9a00      	ldr	r2, [sp, #0]
 800ff90:	bfcc      	ite	gt
 800ff92:	464d      	movgt	r5, r9
 800ff94:	2501      	movle	r5, #1
 800ff96:	4415      	add	r5, r2
 800ff98:	f04f 0800 	mov.w	r8, #0
 800ff9c:	4659      	mov	r1, fp
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	9301      	str	r3, [sp, #4]
 800ffa4:	f001 f84c 	bl	8011040 <__lshift>
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4683      	mov	fp, r0
 800ffac:	f001 f8b4 	bl	8011118 <__mcmp>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	dcb2      	bgt.n	800ff1a <_dtoa_r+0xac2>
 800ffb4:	d102      	bne.n	800ffbc <_dtoa_r+0xb64>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	07db      	lsls	r3, r3, #31
 800ffba:	d4ae      	bmi.n	800ff1a <_dtoa_r+0xac2>
 800ffbc:	462b      	mov	r3, r5
 800ffbe:	461d      	mov	r5, r3
 800ffc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffc4:	2a30      	cmp	r2, #48	; 0x30
 800ffc6:	d0fa      	beq.n	800ffbe <_dtoa_r+0xb66>
 800ffc8:	e6f7      	b.n	800fdba <_dtoa_r+0x962>
 800ffca:	9a00      	ldr	r2, [sp, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d1a5      	bne.n	800ff1c <_dtoa_r+0xac4>
 800ffd0:	f10a 0a01 	add.w	sl, sl, #1
 800ffd4:	2331      	movs	r3, #49	; 0x31
 800ffd6:	e779      	b.n	800fecc <_dtoa_r+0xa74>
 800ffd8:	4b13      	ldr	r3, [pc, #76]	; (8010028 <_dtoa_r+0xbd0>)
 800ffda:	f7ff baaf 	b.w	800f53c <_dtoa_r+0xe4>
 800ffde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f47f aa86 	bne.w	800f4f2 <_dtoa_r+0x9a>
 800ffe6:	4b11      	ldr	r3, [pc, #68]	; (801002c <_dtoa_r+0xbd4>)
 800ffe8:	f7ff baa8 	b.w	800f53c <_dtoa_r+0xe4>
 800ffec:	f1b9 0f00 	cmp.w	r9, #0
 800fff0:	dc03      	bgt.n	800fffa <_dtoa_r+0xba2>
 800fff2:	9b05      	ldr	r3, [sp, #20]
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	f73f aec9 	bgt.w	800fd8c <_dtoa_r+0x934>
 800fffa:	9d00      	ldr	r5, [sp, #0]
 800fffc:	4631      	mov	r1, r6
 800fffe:	4658      	mov	r0, fp
 8010000:	f7ff f99e 	bl	800f340 <quorem>
 8010004:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010008:	f805 3b01 	strb.w	r3, [r5], #1
 801000c:	9a00      	ldr	r2, [sp, #0]
 801000e:	1aaa      	subs	r2, r5, r2
 8010010:	4591      	cmp	r9, r2
 8010012:	ddba      	ble.n	800ff8a <_dtoa_r+0xb32>
 8010014:	4659      	mov	r1, fp
 8010016:	2300      	movs	r3, #0
 8010018:	220a      	movs	r2, #10
 801001a:	4620      	mov	r0, r4
 801001c:	f000 fe16 	bl	8010c4c <__multadd>
 8010020:	4683      	mov	fp, r0
 8010022:	e7eb      	b.n	800fffc <_dtoa_r+0xba4>
 8010024:	080135f4 	.word	0x080135f4
 8010028:	080133f8 	.word	0x080133f8
 801002c:	08013571 	.word	0x08013571

08010030 <__sflush_r>:
 8010030:	898a      	ldrh	r2, [r1, #12]
 8010032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010036:	4605      	mov	r5, r0
 8010038:	0710      	lsls	r0, r2, #28
 801003a:	460c      	mov	r4, r1
 801003c:	d458      	bmi.n	80100f0 <__sflush_r+0xc0>
 801003e:	684b      	ldr	r3, [r1, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc05      	bgt.n	8010050 <__sflush_r+0x20>
 8010044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010046:	2b00      	cmp	r3, #0
 8010048:	dc02      	bgt.n	8010050 <__sflush_r+0x20>
 801004a:	2000      	movs	r0, #0
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010052:	2e00      	cmp	r6, #0
 8010054:	d0f9      	beq.n	801004a <__sflush_r+0x1a>
 8010056:	2300      	movs	r3, #0
 8010058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801005c:	682f      	ldr	r7, [r5, #0]
 801005e:	602b      	str	r3, [r5, #0]
 8010060:	d032      	beq.n	80100c8 <__sflush_r+0x98>
 8010062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	075a      	lsls	r2, r3, #29
 8010068:	d505      	bpl.n	8010076 <__sflush_r+0x46>
 801006a:	6863      	ldr	r3, [r4, #4]
 801006c:	1ac0      	subs	r0, r0, r3
 801006e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010070:	b10b      	cbz	r3, 8010076 <__sflush_r+0x46>
 8010072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010074:	1ac0      	subs	r0, r0, r3
 8010076:	2300      	movs	r3, #0
 8010078:	4602      	mov	r2, r0
 801007a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801007c:	6a21      	ldr	r1, [r4, #32]
 801007e:	4628      	mov	r0, r5
 8010080:	47b0      	blx	r6
 8010082:	1c43      	adds	r3, r0, #1
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	d106      	bne.n	8010096 <__sflush_r+0x66>
 8010088:	6829      	ldr	r1, [r5, #0]
 801008a:	291d      	cmp	r1, #29
 801008c:	d82c      	bhi.n	80100e8 <__sflush_r+0xb8>
 801008e:	4a2a      	ldr	r2, [pc, #168]	; (8010138 <__sflush_r+0x108>)
 8010090:	40ca      	lsrs	r2, r1
 8010092:	07d6      	lsls	r6, r2, #31
 8010094:	d528      	bpl.n	80100e8 <__sflush_r+0xb8>
 8010096:	2200      	movs	r2, #0
 8010098:	6062      	str	r2, [r4, #4]
 801009a:	04d9      	lsls	r1, r3, #19
 801009c:	6922      	ldr	r2, [r4, #16]
 801009e:	6022      	str	r2, [r4, #0]
 80100a0:	d504      	bpl.n	80100ac <__sflush_r+0x7c>
 80100a2:	1c42      	adds	r2, r0, #1
 80100a4:	d101      	bne.n	80100aa <__sflush_r+0x7a>
 80100a6:	682b      	ldr	r3, [r5, #0]
 80100a8:	b903      	cbnz	r3, 80100ac <__sflush_r+0x7c>
 80100aa:	6560      	str	r0, [r4, #84]	; 0x54
 80100ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ae:	602f      	str	r7, [r5, #0]
 80100b0:	2900      	cmp	r1, #0
 80100b2:	d0ca      	beq.n	801004a <__sflush_r+0x1a>
 80100b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100b8:	4299      	cmp	r1, r3
 80100ba:	d002      	beq.n	80100c2 <__sflush_r+0x92>
 80100bc:	4628      	mov	r0, r5
 80100be:	f001 fa2d 	bl	801151c <_free_r>
 80100c2:	2000      	movs	r0, #0
 80100c4:	6360      	str	r0, [r4, #52]	; 0x34
 80100c6:	e7c1      	b.n	801004c <__sflush_r+0x1c>
 80100c8:	6a21      	ldr	r1, [r4, #32]
 80100ca:	2301      	movs	r3, #1
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b0      	blx	r6
 80100d0:	1c41      	adds	r1, r0, #1
 80100d2:	d1c7      	bne.n	8010064 <__sflush_r+0x34>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d0c4      	beq.n	8010064 <__sflush_r+0x34>
 80100da:	2b1d      	cmp	r3, #29
 80100dc:	d001      	beq.n	80100e2 <__sflush_r+0xb2>
 80100de:	2b16      	cmp	r3, #22
 80100e0:	d101      	bne.n	80100e6 <__sflush_r+0xb6>
 80100e2:	602f      	str	r7, [r5, #0]
 80100e4:	e7b1      	b.n	801004a <__sflush_r+0x1a>
 80100e6:	89a3      	ldrh	r3, [r4, #12]
 80100e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100ec:	81a3      	strh	r3, [r4, #12]
 80100ee:	e7ad      	b.n	801004c <__sflush_r+0x1c>
 80100f0:	690f      	ldr	r7, [r1, #16]
 80100f2:	2f00      	cmp	r7, #0
 80100f4:	d0a9      	beq.n	801004a <__sflush_r+0x1a>
 80100f6:	0793      	lsls	r3, r2, #30
 80100f8:	680e      	ldr	r6, [r1, #0]
 80100fa:	bf08      	it	eq
 80100fc:	694b      	ldreq	r3, [r1, #20]
 80100fe:	600f      	str	r7, [r1, #0]
 8010100:	bf18      	it	ne
 8010102:	2300      	movne	r3, #0
 8010104:	eba6 0807 	sub.w	r8, r6, r7
 8010108:	608b      	str	r3, [r1, #8]
 801010a:	f1b8 0f00 	cmp.w	r8, #0
 801010e:	dd9c      	ble.n	801004a <__sflush_r+0x1a>
 8010110:	6a21      	ldr	r1, [r4, #32]
 8010112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010114:	4643      	mov	r3, r8
 8010116:	463a      	mov	r2, r7
 8010118:	4628      	mov	r0, r5
 801011a:	47b0      	blx	r6
 801011c:	2800      	cmp	r0, #0
 801011e:	dc06      	bgt.n	801012e <__sflush_r+0xfe>
 8010120:	89a3      	ldrh	r3, [r4, #12]
 8010122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010126:	81a3      	strh	r3, [r4, #12]
 8010128:	f04f 30ff 	mov.w	r0, #4294967295
 801012c:	e78e      	b.n	801004c <__sflush_r+0x1c>
 801012e:	4407      	add	r7, r0
 8010130:	eba8 0800 	sub.w	r8, r8, r0
 8010134:	e7e9      	b.n	801010a <__sflush_r+0xda>
 8010136:	bf00      	nop
 8010138:	20400001 	.word	0x20400001

0801013c <_fflush_r>:
 801013c:	b538      	push	{r3, r4, r5, lr}
 801013e:	690b      	ldr	r3, [r1, #16]
 8010140:	4605      	mov	r5, r0
 8010142:	460c      	mov	r4, r1
 8010144:	b913      	cbnz	r3, 801014c <_fflush_r+0x10>
 8010146:	2500      	movs	r5, #0
 8010148:	4628      	mov	r0, r5
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	b118      	cbz	r0, 8010156 <_fflush_r+0x1a>
 801014e:	6983      	ldr	r3, [r0, #24]
 8010150:	b90b      	cbnz	r3, 8010156 <_fflush_r+0x1a>
 8010152:	f000 f887 	bl	8010264 <__sinit>
 8010156:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <_fflush_r+0x6c>)
 8010158:	429c      	cmp	r4, r3
 801015a:	d11b      	bne.n	8010194 <_fflush_r+0x58>
 801015c:	686c      	ldr	r4, [r5, #4]
 801015e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d0ef      	beq.n	8010146 <_fflush_r+0xa>
 8010166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010168:	07d0      	lsls	r0, r2, #31
 801016a:	d404      	bmi.n	8010176 <_fflush_r+0x3a>
 801016c:	0599      	lsls	r1, r3, #22
 801016e:	d402      	bmi.n	8010176 <_fflush_r+0x3a>
 8010170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010172:	f000 fc88 	bl	8010a86 <__retarget_lock_acquire_recursive>
 8010176:	4628      	mov	r0, r5
 8010178:	4621      	mov	r1, r4
 801017a:	f7ff ff59 	bl	8010030 <__sflush_r>
 801017e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010180:	07da      	lsls	r2, r3, #31
 8010182:	4605      	mov	r5, r0
 8010184:	d4e0      	bmi.n	8010148 <_fflush_r+0xc>
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	059b      	lsls	r3, r3, #22
 801018a:	d4dd      	bmi.n	8010148 <_fflush_r+0xc>
 801018c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801018e:	f000 fc7b 	bl	8010a88 <__retarget_lock_release_recursive>
 8010192:	e7d9      	b.n	8010148 <_fflush_r+0xc>
 8010194:	4b05      	ldr	r3, [pc, #20]	; (80101ac <_fflush_r+0x70>)
 8010196:	429c      	cmp	r4, r3
 8010198:	d101      	bne.n	801019e <_fflush_r+0x62>
 801019a:	68ac      	ldr	r4, [r5, #8]
 801019c:	e7df      	b.n	801015e <_fflush_r+0x22>
 801019e:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <_fflush_r+0x74>)
 80101a0:	429c      	cmp	r4, r3
 80101a2:	bf08      	it	eq
 80101a4:	68ec      	ldreq	r4, [r5, #12]
 80101a6:	e7da      	b.n	801015e <_fflush_r+0x22>
 80101a8:	08013628 	.word	0x08013628
 80101ac:	08013648 	.word	0x08013648
 80101b0:	08013608 	.word	0x08013608

080101b4 <std>:
 80101b4:	2300      	movs	r3, #0
 80101b6:	b510      	push	{r4, lr}
 80101b8:	4604      	mov	r4, r0
 80101ba:	e9c0 3300 	strd	r3, r3, [r0]
 80101be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101c2:	6083      	str	r3, [r0, #8]
 80101c4:	8181      	strh	r1, [r0, #12]
 80101c6:	6643      	str	r3, [r0, #100]	; 0x64
 80101c8:	81c2      	strh	r2, [r0, #14]
 80101ca:	6183      	str	r3, [r0, #24]
 80101cc:	4619      	mov	r1, r3
 80101ce:	2208      	movs	r2, #8
 80101d0:	305c      	adds	r0, #92	; 0x5c
 80101d2:	f7fd fc35 	bl	800da40 <memset>
 80101d6:	4b05      	ldr	r3, [pc, #20]	; (80101ec <std+0x38>)
 80101d8:	6263      	str	r3, [r4, #36]	; 0x24
 80101da:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <std+0x3c>)
 80101dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80101de:	4b05      	ldr	r3, [pc, #20]	; (80101f4 <std+0x40>)
 80101e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101e2:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <std+0x44>)
 80101e4:	6224      	str	r4, [r4, #32]
 80101e6:	6323      	str	r3, [r4, #48]	; 0x30
 80101e8:	bd10      	pop	{r4, pc}
 80101ea:	bf00      	nop
 80101ec:	08011959 	.word	0x08011959
 80101f0:	0801197b 	.word	0x0801197b
 80101f4:	080119b3 	.word	0x080119b3
 80101f8:	080119d7 	.word	0x080119d7

080101fc <_cleanup_r>:
 80101fc:	4901      	ldr	r1, [pc, #4]	; (8010204 <_cleanup_r+0x8>)
 80101fe:	f000 b8af 	b.w	8010360 <_fwalk_reent>
 8010202:	bf00      	nop
 8010204:	0801013d 	.word	0x0801013d

08010208 <__sfmoreglue>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	1e4a      	subs	r2, r1, #1
 801020c:	2568      	movs	r5, #104	; 0x68
 801020e:	4355      	muls	r5, r2
 8010210:	460e      	mov	r6, r1
 8010212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010216:	f001 f9d1 	bl	80115bc <_malloc_r>
 801021a:	4604      	mov	r4, r0
 801021c:	b140      	cbz	r0, 8010230 <__sfmoreglue+0x28>
 801021e:	2100      	movs	r1, #0
 8010220:	e9c0 1600 	strd	r1, r6, [r0]
 8010224:	300c      	adds	r0, #12
 8010226:	60a0      	str	r0, [r4, #8]
 8010228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801022c:	f7fd fc08 	bl	800da40 <memset>
 8010230:	4620      	mov	r0, r4
 8010232:	bd70      	pop	{r4, r5, r6, pc}

08010234 <__sfp_lock_acquire>:
 8010234:	4801      	ldr	r0, [pc, #4]	; (801023c <__sfp_lock_acquire+0x8>)
 8010236:	f000 bc26 	b.w	8010a86 <__retarget_lock_acquire_recursive>
 801023a:	bf00      	nop
 801023c:	20009590 	.word	0x20009590

08010240 <__sfp_lock_release>:
 8010240:	4801      	ldr	r0, [pc, #4]	; (8010248 <__sfp_lock_release+0x8>)
 8010242:	f000 bc21 	b.w	8010a88 <__retarget_lock_release_recursive>
 8010246:	bf00      	nop
 8010248:	20009590 	.word	0x20009590

0801024c <__sinit_lock_acquire>:
 801024c:	4801      	ldr	r0, [pc, #4]	; (8010254 <__sinit_lock_acquire+0x8>)
 801024e:	f000 bc1a 	b.w	8010a86 <__retarget_lock_acquire_recursive>
 8010252:	bf00      	nop
 8010254:	2000958b 	.word	0x2000958b

08010258 <__sinit_lock_release>:
 8010258:	4801      	ldr	r0, [pc, #4]	; (8010260 <__sinit_lock_release+0x8>)
 801025a:	f000 bc15 	b.w	8010a88 <__retarget_lock_release_recursive>
 801025e:	bf00      	nop
 8010260:	2000958b 	.word	0x2000958b

08010264 <__sinit>:
 8010264:	b510      	push	{r4, lr}
 8010266:	4604      	mov	r4, r0
 8010268:	f7ff fff0 	bl	801024c <__sinit_lock_acquire>
 801026c:	69a3      	ldr	r3, [r4, #24]
 801026e:	b11b      	cbz	r3, 8010278 <__sinit+0x14>
 8010270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010274:	f7ff bff0 	b.w	8010258 <__sinit_lock_release>
 8010278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801027c:	6523      	str	r3, [r4, #80]	; 0x50
 801027e:	4b13      	ldr	r3, [pc, #76]	; (80102cc <__sinit+0x68>)
 8010280:	4a13      	ldr	r2, [pc, #76]	; (80102d0 <__sinit+0x6c>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	62a2      	str	r2, [r4, #40]	; 0x28
 8010286:	42a3      	cmp	r3, r4
 8010288:	bf04      	itt	eq
 801028a:	2301      	moveq	r3, #1
 801028c:	61a3      	streq	r3, [r4, #24]
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f820 	bl	80102d4 <__sfp>
 8010294:	6060      	str	r0, [r4, #4]
 8010296:	4620      	mov	r0, r4
 8010298:	f000 f81c 	bl	80102d4 <__sfp>
 801029c:	60a0      	str	r0, [r4, #8]
 801029e:	4620      	mov	r0, r4
 80102a0:	f000 f818 	bl	80102d4 <__sfp>
 80102a4:	2200      	movs	r2, #0
 80102a6:	60e0      	str	r0, [r4, #12]
 80102a8:	2104      	movs	r1, #4
 80102aa:	6860      	ldr	r0, [r4, #4]
 80102ac:	f7ff ff82 	bl	80101b4 <std>
 80102b0:	68a0      	ldr	r0, [r4, #8]
 80102b2:	2201      	movs	r2, #1
 80102b4:	2109      	movs	r1, #9
 80102b6:	f7ff ff7d 	bl	80101b4 <std>
 80102ba:	68e0      	ldr	r0, [r4, #12]
 80102bc:	2202      	movs	r2, #2
 80102be:	2112      	movs	r1, #18
 80102c0:	f7ff ff78 	bl	80101b4 <std>
 80102c4:	2301      	movs	r3, #1
 80102c6:	61a3      	str	r3, [r4, #24]
 80102c8:	e7d2      	b.n	8010270 <__sinit+0xc>
 80102ca:	bf00      	nop
 80102cc:	080133e4 	.word	0x080133e4
 80102d0:	080101fd 	.word	0x080101fd

080102d4 <__sfp>:
 80102d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d6:	4607      	mov	r7, r0
 80102d8:	f7ff ffac 	bl	8010234 <__sfp_lock_acquire>
 80102dc:	4b1e      	ldr	r3, [pc, #120]	; (8010358 <__sfp+0x84>)
 80102de:	681e      	ldr	r6, [r3, #0]
 80102e0:	69b3      	ldr	r3, [r6, #24]
 80102e2:	b913      	cbnz	r3, 80102ea <__sfp+0x16>
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7ff ffbd 	bl	8010264 <__sinit>
 80102ea:	3648      	adds	r6, #72	; 0x48
 80102ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102f0:	3b01      	subs	r3, #1
 80102f2:	d503      	bpl.n	80102fc <__sfp+0x28>
 80102f4:	6833      	ldr	r3, [r6, #0]
 80102f6:	b30b      	cbz	r3, 801033c <__sfp+0x68>
 80102f8:	6836      	ldr	r6, [r6, #0]
 80102fa:	e7f7      	b.n	80102ec <__sfp+0x18>
 80102fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010300:	b9d5      	cbnz	r5, 8010338 <__sfp+0x64>
 8010302:	4b16      	ldr	r3, [pc, #88]	; (801035c <__sfp+0x88>)
 8010304:	60e3      	str	r3, [r4, #12]
 8010306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801030a:	6665      	str	r5, [r4, #100]	; 0x64
 801030c:	f000 fbba 	bl	8010a84 <__retarget_lock_init_recursive>
 8010310:	f7ff ff96 	bl	8010240 <__sfp_lock_release>
 8010314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801031c:	6025      	str	r5, [r4, #0]
 801031e:	61a5      	str	r5, [r4, #24]
 8010320:	2208      	movs	r2, #8
 8010322:	4629      	mov	r1, r5
 8010324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010328:	f7fd fb8a 	bl	800da40 <memset>
 801032c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010334:	4620      	mov	r0, r4
 8010336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010338:	3468      	adds	r4, #104	; 0x68
 801033a:	e7d9      	b.n	80102f0 <__sfp+0x1c>
 801033c:	2104      	movs	r1, #4
 801033e:	4638      	mov	r0, r7
 8010340:	f7ff ff62 	bl	8010208 <__sfmoreglue>
 8010344:	4604      	mov	r4, r0
 8010346:	6030      	str	r0, [r6, #0]
 8010348:	2800      	cmp	r0, #0
 801034a:	d1d5      	bne.n	80102f8 <__sfp+0x24>
 801034c:	f7ff ff78 	bl	8010240 <__sfp_lock_release>
 8010350:	230c      	movs	r3, #12
 8010352:	603b      	str	r3, [r7, #0]
 8010354:	e7ee      	b.n	8010334 <__sfp+0x60>
 8010356:	bf00      	nop
 8010358:	080133e4 	.word	0x080133e4
 801035c:	ffff0001 	.word	0xffff0001

08010360 <_fwalk_reent>:
 8010360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010364:	4606      	mov	r6, r0
 8010366:	4688      	mov	r8, r1
 8010368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801036c:	2700      	movs	r7, #0
 801036e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010372:	f1b9 0901 	subs.w	r9, r9, #1
 8010376:	d505      	bpl.n	8010384 <_fwalk_reent+0x24>
 8010378:	6824      	ldr	r4, [r4, #0]
 801037a:	2c00      	cmp	r4, #0
 801037c:	d1f7      	bne.n	801036e <_fwalk_reent+0xe>
 801037e:	4638      	mov	r0, r7
 8010380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010384:	89ab      	ldrh	r3, [r5, #12]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d907      	bls.n	801039a <_fwalk_reent+0x3a>
 801038a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801038e:	3301      	adds	r3, #1
 8010390:	d003      	beq.n	801039a <_fwalk_reent+0x3a>
 8010392:	4629      	mov	r1, r5
 8010394:	4630      	mov	r0, r6
 8010396:	47c0      	blx	r8
 8010398:	4307      	orrs	r7, r0
 801039a:	3568      	adds	r5, #104	; 0x68
 801039c:	e7e9      	b.n	8010372 <_fwalk_reent+0x12>

0801039e <rshift>:
 801039e:	6903      	ldr	r3, [r0, #16]
 80103a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80103a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80103ac:	f100 0414 	add.w	r4, r0, #20
 80103b0:	dd45      	ble.n	801043e <rshift+0xa0>
 80103b2:	f011 011f 	ands.w	r1, r1, #31
 80103b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103be:	d10c      	bne.n	80103da <rshift+0x3c>
 80103c0:	f100 0710 	add.w	r7, r0, #16
 80103c4:	4629      	mov	r1, r5
 80103c6:	42b1      	cmp	r1, r6
 80103c8:	d334      	bcc.n	8010434 <rshift+0x96>
 80103ca:	1a9b      	subs	r3, r3, r2
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	1eea      	subs	r2, r5, #3
 80103d0:	4296      	cmp	r6, r2
 80103d2:	bf38      	it	cc
 80103d4:	2300      	movcc	r3, #0
 80103d6:	4423      	add	r3, r4
 80103d8:	e015      	b.n	8010406 <rshift+0x68>
 80103da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103de:	f1c1 0820 	rsb	r8, r1, #32
 80103e2:	40cf      	lsrs	r7, r1
 80103e4:	f105 0e04 	add.w	lr, r5, #4
 80103e8:	46a1      	mov	r9, r4
 80103ea:	4576      	cmp	r6, lr
 80103ec:	46f4      	mov	ip, lr
 80103ee:	d815      	bhi.n	801041c <rshift+0x7e>
 80103f0:	1a9b      	subs	r3, r3, r2
 80103f2:	009a      	lsls	r2, r3, #2
 80103f4:	3a04      	subs	r2, #4
 80103f6:	3501      	adds	r5, #1
 80103f8:	42ae      	cmp	r6, r5
 80103fa:	bf38      	it	cc
 80103fc:	2200      	movcc	r2, #0
 80103fe:	18a3      	adds	r3, r4, r2
 8010400:	50a7      	str	r7, [r4, r2]
 8010402:	b107      	cbz	r7, 8010406 <rshift+0x68>
 8010404:	3304      	adds	r3, #4
 8010406:	1b1a      	subs	r2, r3, r4
 8010408:	42a3      	cmp	r3, r4
 801040a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801040e:	bf08      	it	eq
 8010410:	2300      	moveq	r3, #0
 8010412:	6102      	str	r2, [r0, #16]
 8010414:	bf08      	it	eq
 8010416:	6143      	streq	r3, [r0, #20]
 8010418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801041c:	f8dc c000 	ldr.w	ip, [ip]
 8010420:	fa0c fc08 	lsl.w	ip, ip, r8
 8010424:	ea4c 0707 	orr.w	r7, ip, r7
 8010428:	f849 7b04 	str.w	r7, [r9], #4
 801042c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010430:	40cf      	lsrs	r7, r1
 8010432:	e7da      	b.n	80103ea <rshift+0x4c>
 8010434:	f851 cb04 	ldr.w	ip, [r1], #4
 8010438:	f847 cf04 	str.w	ip, [r7, #4]!
 801043c:	e7c3      	b.n	80103c6 <rshift+0x28>
 801043e:	4623      	mov	r3, r4
 8010440:	e7e1      	b.n	8010406 <rshift+0x68>

08010442 <__hexdig_fun>:
 8010442:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010446:	2b09      	cmp	r3, #9
 8010448:	d802      	bhi.n	8010450 <__hexdig_fun+0xe>
 801044a:	3820      	subs	r0, #32
 801044c:	b2c0      	uxtb	r0, r0
 801044e:	4770      	bx	lr
 8010450:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010454:	2b05      	cmp	r3, #5
 8010456:	d801      	bhi.n	801045c <__hexdig_fun+0x1a>
 8010458:	3847      	subs	r0, #71	; 0x47
 801045a:	e7f7      	b.n	801044c <__hexdig_fun+0xa>
 801045c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010460:	2b05      	cmp	r3, #5
 8010462:	d801      	bhi.n	8010468 <__hexdig_fun+0x26>
 8010464:	3827      	subs	r0, #39	; 0x27
 8010466:	e7f1      	b.n	801044c <__hexdig_fun+0xa>
 8010468:	2000      	movs	r0, #0
 801046a:	4770      	bx	lr

0801046c <__gethex>:
 801046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010470:	ed2d 8b02 	vpush	{d8}
 8010474:	b089      	sub	sp, #36	; 0x24
 8010476:	ee08 0a10 	vmov	s16, r0
 801047a:	9304      	str	r3, [sp, #16]
 801047c:	4bbc      	ldr	r3, [pc, #752]	; (8010770 <__gethex+0x304>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	9301      	str	r3, [sp, #4]
 8010482:	4618      	mov	r0, r3
 8010484:	468b      	mov	fp, r1
 8010486:	4690      	mov	r8, r2
 8010488:	f7ef feca 	bl	8000220 <strlen>
 801048c:	9b01      	ldr	r3, [sp, #4]
 801048e:	f8db 2000 	ldr.w	r2, [fp]
 8010492:	4403      	add	r3, r0
 8010494:	4682      	mov	sl, r0
 8010496:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	1c93      	adds	r3, r2, #2
 801049e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80104a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80104a6:	32fe      	adds	r2, #254	; 0xfe
 80104a8:	18d1      	adds	r1, r2, r3
 80104aa:	461f      	mov	r7, r3
 80104ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80104b0:	9100      	str	r1, [sp, #0]
 80104b2:	2830      	cmp	r0, #48	; 0x30
 80104b4:	d0f8      	beq.n	80104a8 <__gethex+0x3c>
 80104b6:	f7ff ffc4 	bl	8010442 <__hexdig_fun>
 80104ba:	4604      	mov	r4, r0
 80104bc:	2800      	cmp	r0, #0
 80104be:	d13a      	bne.n	8010536 <__gethex+0xca>
 80104c0:	9901      	ldr	r1, [sp, #4]
 80104c2:	4652      	mov	r2, sl
 80104c4:	4638      	mov	r0, r7
 80104c6:	f001 fa8a 	bl	80119de <strncmp>
 80104ca:	4605      	mov	r5, r0
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d168      	bne.n	80105a2 <__gethex+0x136>
 80104d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80104d4:	eb07 060a 	add.w	r6, r7, sl
 80104d8:	f7ff ffb3 	bl	8010442 <__hexdig_fun>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d062      	beq.n	80105a6 <__gethex+0x13a>
 80104e0:	4633      	mov	r3, r6
 80104e2:	7818      	ldrb	r0, [r3, #0]
 80104e4:	2830      	cmp	r0, #48	; 0x30
 80104e6:	461f      	mov	r7, r3
 80104e8:	f103 0301 	add.w	r3, r3, #1
 80104ec:	d0f9      	beq.n	80104e2 <__gethex+0x76>
 80104ee:	f7ff ffa8 	bl	8010442 <__hexdig_fun>
 80104f2:	2301      	movs	r3, #1
 80104f4:	fab0 f480 	clz	r4, r0
 80104f8:	0964      	lsrs	r4, r4, #5
 80104fa:	4635      	mov	r5, r6
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	463a      	mov	r2, r7
 8010500:	4616      	mov	r6, r2
 8010502:	3201      	adds	r2, #1
 8010504:	7830      	ldrb	r0, [r6, #0]
 8010506:	f7ff ff9c 	bl	8010442 <__hexdig_fun>
 801050a:	2800      	cmp	r0, #0
 801050c:	d1f8      	bne.n	8010500 <__gethex+0x94>
 801050e:	9901      	ldr	r1, [sp, #4]
 8010510:	4652      	mov	r2, sl
 8010512:	4630      	mov	r0, r6
 8010514:	f001 fa63 	bl	80119de <strncmp>
 8010518:	b980      	cbnz	r0, 801053c <__gethex+0xd0>
 801051a:	b94d      	cbnz	r5, 8010530 <__gethex+0xc4>
 801051c:	eb06 050a 	add.w	r5, r6, sl
 8010520:	462a      	mov	r2, r5
 8010522:	4616      	mov	r6, r2
 8010524:	3201      	adds	r2, #1
 8010526:	7830      	ldrb	r0, [r6, #0]
 8010528:	f7ff ff8b 	bl	8010442 <__hexdig_fun>
 801052c:	2800      	cmp	r0, #0
 801052e:	d1f8      	bne.n	8010522 <__gethex+0xb6>
 8010530:	1bad      	subs	r5, r5, r6
 8010532:	00ad      	lsls	r5, r5, #2
 8010534:	e004      	b.n	8010540 <__gethex+0xd4>
 8010536:	2400      	movs	r4, #0
 8010538:	4625      	mov	r5, r4
 801053a:	e7e0      	b.n	80104fe <__gethex+0x92>
 801053c:	2d00      	cmp	r5, #0
 801053e:	d1f7      	bne.n	8010530 <__gethex+0xc4>
 8010540:	7833      	ldrb	r3, [r6, #0]
 8010542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010546:	2b50      	cmp	r3, #80	; 0x50
 8010548:	d13b      	bne.n	80105c2 <__gethex+0x156>
 801054a:	7873      	ldrb	r3, [r6, #1]
 801054c:	2b2b      	cmp	r3, #43	; 0x2b
 801054e:	d02c      	beq.n	80105aa <__gethex+0x13e>
 8010550:	2b2d      	cmp	r3, #45	; 0x2d
 8010552:	d02e      	beq.n	80105b2 <__gethex+0x146>
 8010554:	1c71      	adds	r1, r6, #1
 8010556:	f04f 0900 	mov.w	r9, #0
 801055a:	7808      	ldrb	r0, [r1, #0]
 801055c:	f7ff ff71 	bl	8010442 <__hexdig_fun>
 8010560:	1e43      	subs	r3, r0, #1
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b18      	cmp	r3, #24
 8010566:	d82c      	bhi.n	80105c2 <__gethex+0x156>
 8010568:	f1a0 0210 	sub.w	r2, r0, #16
 801056c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010570:	f7ff ff67 	bl	8010442 <__hexdig_fun>
 8010574:	1e43      	subs	r3, r0, #1
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b18      	cmp	r3, #24
 801057a:	d91d      	bls.n	80105b8 <__gethex+0x14c>
 801057c:	f1b9 0f00 	cmp.w	r9, #0
 8010580:	d000      	beq.n	8010584 <__gethex+0x118>
 8010582:	4252      	negs	r2, r2
 8010584:	4415      	add	r5, r2
 8010586:	f8cb 1000 	str.w	r1, [fp]
 801058a:	b1e4      	cbz	r4, 80105c6 <__gethex+0x15a>
 801058c:	9b00      	ldr	r3, [sp, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	bf14      	ite	ne
 8010592:	2700      	movne	r7, #0
 8010594:	2706      	moveq	r7, #6
 8010596:	4638      	mov	r0, r7
 8010598:	b009      	add	sp, #36	; 0x24
 801059a:	ecbd 8b02 	vpop	{d8}
 801059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a2:	463e      	mov	r6, r7
 80105a4:	4625      	mov	r5, r4
 80105a6:	2401      	movs	r4, #1
 80105a8:	e7ca      	b.n	8010540 <__gethex+0xd4>
 80105aa:	f04f 0900 	mov.w	r9, #0
 80105ae:	1cb1      	adds	r1, r6, #2
 80105b0:	e7d3      	b.n	801055a <__gethex+0xee>
 80105b2:	f04f 0901 	mov.w	r9, #1
 80105b6:	e7fa      	b.n	80105ae <__gethex+0x142>
 80105b8:	230a      	movs	r3, #10
 80105ba:	fb03 0202 	mla	r2, r3, r2, r0
 80105be:	3a10      	subs	r2, #16
 80105c0:	e7d4      	b.n	801056c <__gethex+0x100>
 80105c2:	4631      	mov	r1, r6
 80105c4:	e7df      	b.n	8010586 <__gethex+0x11a>
 80105c6:	1bf3      	subs	r3, r6, r7
 80105c8:	3b01      	subs	r3, #1
 80105ca:	4621      	mov	r1, r4
 80105cc:	2b07      	cmp	r3, #7
 80105ce:	dc0b      	bgt.n	80105e8 <__gethex+0x17c>
 80105d0:	ee18 0a10 	vmov	r0, s16
 80105d4:	f000 fad8 	bl	8010b88 <_Balloc>
 80105d8:	4604      	mov	r4, r0
 80105da:	b940      	cbnz	r0, 80105ee <__gethex+0x182>
 80105dc:	4b65      	ldr	r3, [pc, #404]	; (8010774 <__gethex+0x308>)
 80105de:	4602      	mov	r2, r0
 80105e0:	21de      	movs	r1, #222	; 0xde
 80105e2:	4865      	ldr	r0, [pc, #404]	; (8010778 <__gethex+0x30c>)
 80105e4:	f001 fa2c 	bl	8011a40 <__assert_func>
 80105e8:	3101      	adds	r1, #1
 80105ea:	105b      	asrs	r3, r3, #1
 80105ec:	e7ee      	b.n	80105cc <__gethex+0x160>
 80105ee:	f100 0914 	add.w	r9, r0, #20
 80105f2:	f04f 0b00 	mov.w	fp, #0
 80105f6:	f1ca 0301 	rsb	r3, sl, #1
 80105fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80105fe:	f8cd b000 	str.w	fp, [sp]
 8010602:	9306      	str	r3, [sp, #24]
 8010604:	42b7      	cmp	r7, r6
 8010606:	d340      	bcc.n	801068a <__gethex+0x21e>
 8010608:	9802      	ldr	r0, [sp, #8]
 801060a:	9b00      	ldr	r3, [sp, #0]
 801060c:	f840 3b04 	str.w	r3, [r0], #4
 8010610:	eba0 0009 	sub.w	r0, r0, r9
 8010614:	1080      	asrs	r0, r0, #2
 8010616:	0146      	lsls	r6, r0, #5
 8010618:	6120      	str	r0, [r4, #16]
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fbaa 	bl	8010d74 <__hi0bits>
 8010620:	1a30      	subs	r0, r6, r0
 8010622:	f8d8 6000 	ldr.w	r6, [r8]
 8010626:	42b0      	cmp	r0, r6
 8010628:	dd63      	ble.n	80106f2 <__gethex+0x286>
 801062a:	1b87      	subs	r7, r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	4620      	mov	r0, r4
 8010630:	f000 ff44 	bl	80114bc <__any_on>
 8010634:	4682      	mov	sl, r0
 8010636:	b1a8      	cbz	r0, 8010664 <__gethex+0x1f8>
 8010638:	1e7b      	subs	r3, r7, #1
 801063a:	1159      	asrs	r1, r3, #5
 801063c:	f003 021f 	and.w	r2, r3, #31
 8010640:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010644:	f04f 0a01 	mov.w	sl, #1
 8010648:	fa0a f202 	lsl.w	r2, sl, r2
 801064c:	420a      	tst	r2, r1
 801064e:	d009      	beq.n	8010664 <__gethex+0x1f8>
 8010650:	4553      	cmp	r3, sl
 8010652:	dd05      	ble.n	8010660 <__gethex+0x1f4>
 8010654:	1eb9      	subs	r1, r7, #2
 8010656:	4620      	mov	r0, r4
 8010658:	f000 ff30 	bl	80114bc <__any_on>
 801065c:	2800      	cmp	r0, #0
 801065e:	d145      	bne.n	80106ec <__gethex+0x280>
 8010660:	f04f 0a02 	mov.w	sl, #2
 8010664:	4639      	mov	r1, r7
 8010666:	4620      	mov	r0, r4
 8010668:	f7ff fe99 	bl	801039e <rshift>
 801066c:	443d      	add	r5, r7
 801066e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010672:	42ab      	cmp	r3, r5
 8010674:	da4c      	bge.n	8010710 <__gethex+0x2a4>
 8010676:	ee18 0a10 	vmov	r0, s16
 801067a:	4621      	mov	r1, r4
 801067c:	f000 fac4 	bl	8010c08 <_Bfree>
 8010680:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010682:	2300      	movs	r3, #0
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	27a3      	movs	r7, #163	; 0xa3
 8010688:	e785      	b.n	8010596 <__gethex+0x12a>
 801068a:	1e73      	subs	r3, r6, #1
 801068c:	9a05      	ldr	r2, [sp, #20]
 801068e:	9303      	str	r3, [sp, #12]
 8010690:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010694:	4293      	cmp	r3, r2
 8010696:	d019      	beq.n	80106cc <__gethex+0x260>
 8010698:	f1bb 0f20 	cmp.w	fp, #32
 801069c:	d107      	bne.n	80106ae <__gethex+0x242>
 801069e:	9b02      	ldr	r3, [sp, #8]
 80106a0:	9a00      	ldr	r2, [sp, #0]
 80106a2:	f843 2b04 	str.w	r2, [r3], #4
 80106a6:	9302      	str	r3, [sp, #8]
 80106a8:	2300      	movs	r3, #0
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	469b      	mov	fp, r3
 80106ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80106b2:	f7ff fec6 	bl	8010442 <__hexdig_fun>
 80106b6:	9b00      	ldr	r3, [sp, #0]
 80106b8:	f000 000f 	and.w	r0, r0, #15
 80106bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80106c0:	4303      	orrs	r3, r0
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	f10b 0b04 	add.w	fp, fp, #4
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	e00d      	b.n	80106e8 <__gethex+0x27c>
 80106cc:	9b03      	ldr	r3, [sp, #12]
 80106ce:	9a06      	ldr	r2, [sp, #24]
 80106d0:	4413      	add	r3, r2
 80106d2:	42bb      	cmp	r3, r7
 80106d4:	d3e0      	bcc.n	8010698 <__gethex+0x22c>
 80106d6:	4618      	mov	r0, r3
 80106d8:	9901      	ldr	r1, [sp, #4]
 80106da:	9307      	str	r3, [sp, #28]
 80106dc:	4652      	mov	r2, sl
 80106de:	f001 f97e 	bl	80119de <strncmp>
 80106e2:	9b07      	ldr	r3, [sp, #28]
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d1d7      	bne.n	8010698 <__gethex+0x22c>
 80106e8:	461e      	mov	r6, r3
 80106ea:	e78b      	b.n	8010604 <__gethex+0x198>
 80106ec:	f04f 0a03 	mov.w	sl, #3
 80106f0:	e7b8      	b.n	8010664 <__gethex+0x1f8>
 80106f2:	da0a      	bge.n	801070a <__gethex+0x29e>
 80106f4:	1a37      	subs	r7, r6, r0
 80106f6:	4621      	mov	r1, r4
 80106f8:	ee18 0a10 	vmov	r0, s16
 80106fc:	463a      	mov	r2, r7
 80106fe:	f000 fc9f 	bl	8011040 <__lshift>
 8010702:	1bed      	subs	r5, r5, r7
 8010704:	4604      	mov	r4, r0
 8010706:	f100 0914 	add.w	r9, r0, #20
 801070a:	f04f 0a00 	mov.w	sl, #0
 801070e:	e7ae      	b.n	801066e <__gethex+0x202>
 8010710:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010714:	42a8      	cmp	r0, r5
 8010716:	dd72      	ble.n	80107fe <__gethex+0x392>
 8010718:	1b45      	subs	r5, r0, r5
 801071a:	42ae      	cmp	r6, r5
 801071c:	dc36      	bgt.n	801078c <__gethex+0x320>
 801071e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010722:	2b02      	cmp	r3, #2
 8010724:	d02a      	beq.n	801077c <__gethex+0x310>
 8010726:	2b03      	cmp	r3, #3
 8010728:	d02c      	beq.n	8010784 <__gethex+0x318>
 801072a:	2b01      	cmp	r3, #1
 801072c:	d115      	bne.n	801075a <__gethex+0x2ee>
 801072e:	42ae      	cmp	r6, r5
 8010730:	d113      	bne.n	801075a <__gethex+0x2ee>
 8010732:	2e01      	cmp	r6, #1
 8010734:	d10b      	bne.n	801074e <__gethex+0x2e2>
 8010736:	9a04      	ldr	r2, [sp, #16]
 8010738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801073c:	6013      	str	r3, [r2, #0]
 801073e:	2301      	movs	r3, #1
 8010740:	6123      	str	r3, [r4, #16]
 8010742:	f8c9 3000 	str.w	r3, [r9]
 8010746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010748:	2762      	movs	r7, #98	; 0x62
 801074a:	601c      	str	r4, [r3, #0]
 801074c:	e723      	b.n	8010596 <__gethex+0x12a>
 801074e:	1e71      	subs	r1, r6, #1
 8010750:	4620      	mov	r0, r4
 8010752:	f000 feb3 	bl	80114bc <__any_on>
 8010756:	2800      	cmp	r0, #0
 8010758:	d1ed      	bne.n	8010736 <__gethex+0x2ca>
 801075a:	ee18 0a10 	vmov	r0, s16
 801075e:	4621      	mov	r1, r4
 8010760:	f000 fa52 	bl	8010c08 <_Bfree>
 8010764:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010766:	2300      	movs	r3, #0
 8010768:	6013      	str	r3, [r2, #0]
 801076a:	2750      	movs	r7, #80	; 0x50
 801076c:	e713      	b.n	8010596 <__gethex+0x12a>
 801076e:	bf00      	nop
 8010770:	080136d4 	.word	0x080136d4
 8010774:	080135f4 	.word	0x080135f4
 8010778:	08013668 	.word	0x08013668
 801077c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1eb      	bne.n	801075a <__gethex+0x2ee>
 8010782:	e7d8      	b.n	8010736 <__gethex+0x2ca>
 8010784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1d5      	bne.n	8010736 <__gethex+0x2ca>
 801078a:	e7e6      	b.n	801075a <__gethex+0x2ee>
 801078c:	1e6f      	subs	r7, r5, #1
 801078e:	f1ba 0f00 	cmp.w	sl, #0
 8010792:	d131      	bne.n	80107f8 <__gethex+0x38c>
 8010794:	b127      	cbz	r7, 80107a0 <__gethex+0x334>
 8010796:	4639      	mov	r1, r7
 8010798:	4620      	mov	r0, r4
 801079a:	f000 fe8f 	bl	80114bc <__any_on>
 801079e:	4682      	mov	sl, r0
 80107a0:	117b      	asrs	r3, r7, #5
 80107a2:	2101      	movs	r1, #1
 80107a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80107a8:	f007 071f 	and.w	r7, r7, #31
 80107ac:	fa01 f707 	lsl.w	r7, r1, r7
 80107b0:	421f      	tst	r7, r3
 80107b2:	4629      	mov	r1, r5
 80107b4:	4620      	mov	r0, r4
 80107b6:	bf18      	it	ne
 80107b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80107bc:	1b76      	subs	r6, r6, r5
 80107be:	f7ff fdee 	bl	801039e <rshift>
 80107c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107c6:	2702      	movs	r7, #2
 80107c8:	f1ba 0f00 	cmp.w	sl, #0
 80107cc:	d048      	beq.n	8010860 <__gethex+0x3f4>
 80107ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d015      	beq.n	8010802 <__gethex+0x396>
 80107d6:	2b03      	cmp	r3, #3
 80107d8:	d017      	beq.n	801080a <__gethex+0x39e>
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d109      	bne.n	80107f2 <__gethex+0x386>
 80107de:	f01a 0f02 	tst.w	sl, #2
 80107e2:	d006      	beq.n	80107f2 <__gethex+0x386>
 80107e4:	f8d9 0000 	ldr.w	r0, [r9]
 80107e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80107ec:	f01a 0f01 	tst.w	sl, #1
 80107f0:	d10e      	bne.n	8010810 <__gethex+0x3a4>
 80107f2:	f047 0710 	orr.w	r7, r7, #16
 80107f6:	e033      	b.n	8010860 <__gethex+0x3f4>
 80107f8:	f04f 0a01 	mov.w	sl, #1
 80107fc:	e7d0      	b.n	80107a0 <__gethex+0x334>
 80107fe:	2701      	movs	r7, #1
 8010800:	e7e2      	b.n	80107c8 <__gethex+0x35c>
 8010802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010804:	f1c3 0301 	rsb	r3, r3, #1
 8010808:	9315      	str	r3, [sp, #84]	; 0x54
 801080a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801080c:	2b00      	cmp	r3, #0
 801080e:	d0f0      	beq.n	80107f2 <__gethex+0x386>
 8010810:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010814:	f104 0314 	add.w	r3, r4, #20
 8010818:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801081c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010820:	f04f 0c00 	mov.w	ip, #0
 8010824:	4618      	mov	r0, r3
 8010826:	f853 2b04 	ldr.w	r2, [r3], #4
 801082a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801082e:	d01c      	beq.n	801086a <__gethex+0x3fe>
 8010830:	3201      	adds	r2, #1
 8010832:	6002      	str	r2, [r0, #0]
 8010834:	2f02      	cmp	r7, #2
 8010836:	f104 0314 	add.w	r3, r4, #20
 801083a:	d13f      	bne.n	80108bc <__gethex+0x450>
 801083c:	f8d8 2000 	ldr.w	r2, [r8]
 8010840:	3a01      	subs	r2, #1
 8010842:	42b2      	cmp	r2, r6
 8010844:	d10a      	bne.n	801085c <__gethex+0x3f0>
 8010846:	1171      	asrs	r1, r6, #5
 8010848:	2201      	movs	r2, #1
 801084a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801084e:	f006 061f 	and.w	r6, r6, #31
 8010852:	fa02 f606 	lsl.w	r6, r2, r6
 8010856:	421e      	tst	r6, r3
 8010858:	bf18      	it	ne
 801085a:	4617      	movne	r7, r2
 801085c:	f047 0720 	orr.w	r7, r7, #32
 8010860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010862:	601c      	str	r4, [r3, #0]
 8010864:	9b04      	ldr	r3, [sp, #16]
 8010866:	601d      	str	r5, [r3, #0]
 8010868:	e695      	b.n	8010596 <__gethex+0x12a>
 801086a:	4299      	cmp	r1, r3
 801086c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010870:	d8d8      	bhi.n	8010824 <__gethex+0x3b8>
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	459b      	cmp	fp, r3
 8010876:	db19      	blt.n	80108ac <__gethex+0x440>
 8010878:	6861      	ldr	r1, [r4, #4]
 801087a:	ee18 0a10 	vmov	r0, s16
 801087e:	3101      	adds	r1, #1
 8010880:	f000 f982 	bl	8010b88 <_Balloc>
 8010884:	4681      	mov	r9, r0
 8010886:	b918      	cbnz	r0, 8010890 <__gethex+0x424>
 8010888:	4b1a      	ldr	r3, [pc, #104]	; (80108f4 <__gethex+0x488>)
 801088a:	4602      	mov	r2, r0
 801088c:	2184      	movs	r1, #132	; 0x84
 801088e:	e6a8      	b.n	80105e2 <__gethex+0x176>
 8010890:	6922      	ldr	r2, [r4, #16]
 8010892:	3202      	adds	r2, #2
 8010894:	f104 010c 	add.w	r1, r4, #12
 8010898:	0092      	lsls	r2, r2, #2
 801089a:	300c      	adds	r0, #12
 801089c:	f7fd f8c2 	bl	800da24 <memcpy>
 80108a0:	4621      	mov	r1, r4
 80108a2:	ee18 0a10 	vmov	r0, s16
 80108a6:	f000 f9af 	bl	8010c08 <_Bfree>
 80108aa:	464c      	mov	r4, r9
 80108ac:	6923      	ldr	r3, [r4, #16]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108b4:	6122      	str	r2, [r4, #16]
 80108b6:	2201      	movs	r2, #1
 80108b8:	615a      	str	r2, [r3, #20]
 80108ba:	e7bb      	b.n	8010834 <__gethex+0x3c8>
 80108bc:	6922      	ldr	r2, [r4, #16]
 80108be:	455a      	cmp	r2, fp
 80108c0:	dd0b      	ble.n	80108da <__gethex+0x46e>
 80108c2:	2101      	movs	r1, #1
 80108c4:	4620      	mov	r0, r4
 80108c6:	f7ff fd6a 	bl	801039e <rshift>
 80108ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108ce:	3501      	adds	r5, #1
 80108d0:	42ab      	cmp	r3, r5
 80108d2:	f6ff aed0 	blt.w	8010676 <__gethex+0x20a>
 80108d6:	2701      	movs	r7, #1
 80108d8:	e7c0      	b.n	801085c <__gethex+0x3f0>
 80108da:	f016 061f 	ands.w	r6, r6, #31
 80108de:	d0fa      	beq.n	80108d6 <__gethex+0x46a>
 80108e0:	449a      	add	sl, r3
 80108e2:	f1c6 0620 	rsb	r6, r6, #32
 80108e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80108ea:	f000 fa43 	bl	8010d74 <__hi0bits>
 80108ee:	42b0      	cmp	r0, r6
 80108f0:	dbe7      	blt.n	80108c2 <__gethex+0x456>
 80108f2:	e7f0      	b.n	80108d6 <__gethex+0x46a>
 80108f4:	080135f4 	.word	0x080135f4

080108f8 <L_shift>:
 80108f8:	f1c2 0208 	rsb	r2, r2, #8
 80108fc:	0092      	lsls	r2, r2, #2
 80108fe:	b570      	push	{r4, r5, r6, lr}
 8010900:	f1c2 0620 	rsb	r6, r2, #32
 8010904:	6843      	ldr	r3, [r0, #4]
 8010906:	6804      	ldr	r4, [r0, #0]
 8010908:	fa03 f506 	lsl.w	r5, r3, r6
 801090c:	432c      	orrs	r4, r5
 801090e:	40d3      	lsrs	r3, r2
 8010910:	6004      	str	r4, [r0, #0]
 8010912:	f840 3f04 	str.w	r3, [r0, #4]!
 8010916:	4288      	cmp	r0, r1
 8010918:	d3f4      	bcc.n	8010904 <L_shift+0xc>
 801091a:	bd70      	pop	{r4, r5, r6, pc}

0801091c <__match>:
 801091c:	b530      	push	{r4, r5, lr}
 801091e:	6803      	ldr	r3, [r0, #0]
 8010920:	3301      	adds	r3, #1
 8010922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010926:	b914      	cbnz	r4, 801092e <__match+0x12>
 8010928:	6003      	str	r3, [r0, #0]
 801092a:	2001      	movs	r0, #1
 801092c:	bd30      	pop	{r4, r5, pc}
 801092e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010932:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010936:	2d19      	cmp	r5, #25
 8010938:	bf98      	it	ls
 801093a:	3220      	addls	r2, #32
 801093c:	42a2      	cmp	r2, r4
 801093e:	d0f0      	beq.n	8010922 <__match+0x6>
 8010940:	2000      	movs	r0, #0
 8010942:	e7f3      	b.n	801092c <__match+0x10>

08010944 <__hexnan>:
 8010944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	680b      	ldr	r3, [r1, #0]
 801094a:	6801      	ldr	r1, [r0, #0]
 801094c:	115e      	asrs	r6, r3, #5
 801094e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010952:	f013 031f 	ands.w	r3, r3, #31
 8010956:	b087      	sub	sp, #28
 8010958:	bf18      	it	ne
 801095a:	3604      	addne	r6, #4
 801095c:	2500      	movs	r5, #0
 801095e:	1f37      	subs	r7, r6, #4
 8010960:	4682      	mov	sl, r0
 8010962:	4690      	mov	r8, r2
 8010964:	9301      	str	r3, [sp, #4]
 8010966:	f846 5c04 	str.w	r5, [r6, #-4]
 801096a:	46b9      	mov	r9, r7
 801096c:	463c      	mov	r4, r7
 801096e:	9502      	str	r5, [sp, #8]
 8010970:	46ab      	mov	fp, r5
 8010972:	784a      	ldrb	r2, [r1, #1]
 8010974:	1c4b      	adds	r3, r1, #1
 8010976:	9303      	str	r3, [sp, #12]
 8010978:	b342      	cbz	r2, 80109cc <__hexnan+0x88>
 801097a:	4610      	mov	r0, r2
 801097c:	9105      	str	r1, [sp, #20]
 801097e:	9204      	str	r2, [sp, #16]
 8010980:	f7ff fd5f 	bl	8010442 <__hexdig_fun>
 8010984:	2800      	cmp	r0, #0
 8010986:	d14f      	bne.n	8010a28 <__hexnan+0xe4>
 8010988:	9a04      	ldr	r2, [sp, #16]
 801098a:	9905      	ldr	r1, [sp, #20]
 801098c:	2a20      	cmp	r2, #32
 801098e:	d818      	bhi.n	80109c2 <__hexnan+0x7e>
 8010990:	9b02      	ldr	r3, [sp, #8]
 8010992:	459b      	cmp	fp, r3
 8010994:	dd13      	ble.n	80109be <__hexnan+0x7a>
 8010996:	454c      	cmp	r4, r9
 8010998:	d206      	bcs.n	80109a8 <__hexnan+0x64>
 801099a:	2d07      	cmp	r5, #7
 801099c:	dc04      	bgt.n	80109a8 <__hexnan+0x64>
 801099e:	462a      	mov	r2, r5
 80109a0:	4649      	mov	r1, r9
 80109a2:	4620      	mov	r0, r4
 80109a4:	f7ff ffa8 	bl	80108f8 <L_shift>
 80109a8:	4544      	cmp	r4, r8
 80109aa:	d950      	bls.n	8010a4e <__hexnan+0x10a>
 80109ac:	2300      	movs	r3, #0
 80109ae:	f1a4 0904 	sub.w	r9, r4, #4
 80109b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80109b6:	f8cd b008 	str.w	fp, [sp, #8]
 80109ba:	464c      	mov	r4, r9
 80109bc:	461d      	mov	r5, r3
 80109be:	9903      	ldr	r1, [sp, #12]
 80109c0:	e7d7      	b.n	8010972 <__hexnan+0x2e>
 80109c2:	2a29      	cmp	r2, #41	; 0x29
 80109c4:	d156      	bne.n	8010a74 <__hexnan+0x130>
 80109c6:	3102      	adds	r1, #2
 80109c8:	f8ca 1000 	str.w	r1, [sl]
 80109cc:	f1bb 0f00 	cmp.w	fp, #0
 80109d0:	d050      	beq.n	8010a74 <__hexnan+0x130>
 80109d2:	454c      	cmp	r4, r9
 80109d4:	d206      	bcs.n	80109e4 <__hexnan+0xa0>
 80109d6:	2d07      	cmp	r5, #7
 80109d8:	dc04      	bgt.n	80109e4 <__hexnan+0xa0>
 80109da:	462a      	mov	r2, r5
 80109dc:	4649      	mov	r1, r9
 80109de:	4620      	mov	r0, r4
 80109e0:	f7ff ff8a 	bl	80108f8 <L_shift>
 80109e4:	4544      	cmp	r4, r8
 80109e6:	d934      	bls.n	8010a52 <__hexnan+0x10e>
 80109e8:	f1a8 0204 	sub.w	r2, r8, #4
 80109ec:	4623      	mov	r3, r4
 80109ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80109f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80109f6:	429f      	cmp	r7, r3
 80109f8:	d2f9      	bcs.n	80109ee <__hexnan+0xaa>
 80109fa:	1b3b      	subs	r3, r7, r4
 80109fc:	f023 0303 	bic.w	r3, r3, #3
 8010a00:	3304      	adds	r3, #4
 8010a02:	3401      	adds	r4, #1
 8010a04:	3e03      	subs	r6, #3
 8010a06:	42b4      	cmp	r4, r6
 8010a08:	bf88      	it	hi
 8010a0a:	2304      	movhi	r3, #4
 8010a0c:	4443      	add	r3, r8
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f843 2b04 	str.w	r2, [r3], #4
 8010a14:	429f      	cmp	r7, r3
 8010a16:	d2fb      	bcs.n	8010a10 <__hexnan+0xcc>
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	b91b      	cbnz	r3, 8010a24 <__hexnan+0xe0>
 8010a1c:	4547      	cmp	r7, r8
 8010a1e:	d127      	bne.n	8010a70 <__hexnan+0x12c>
 8010a20:	2301      	movs	r3, #1
 8010a22:	603b      	str	r3, [r7, #0]
 8010a24:	2005      	movs	r0, #5
 8010a26:	e026      	b.n	8010a76 <__hexnan+0x132>
 8010a28:	3501      	adds	r5, #1
 8010a2a:	2d08      	cmp	r5, #8
 8010a2c:	f10b 0b01 	add.w	fp, fp, #1
 8010a30:	dd06      	ble.n	8010a40 <__hexnan+0xfc>
 8010a32:	4544      	cmp	r4, r8
 8010a34:	d9c3      	bls.n	80109be <__hexnan+0x7a>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a3c:	2501      	movs	r5, #1
 8010a3e:	3c04      	subs	r4, #4
 8010a40:	6822      	ldr	r2, [r4, #0]
 8010a42:	f000 000f 	and.w	r0, r0, #15
 8010a46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010a4a:	6022      	str	r2, [r4, #0]
 8010a4c:	e7b7      	b.n	80109be <__hexnan+0x7a>
 8010a4e:	2508      	movs	r5, #8
 8010a50:	e7b5      	b.n	80109be <__hexnan+0x7a>
 8010a52:	9b01      	ldr	r3, [sp, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d0df      	beq.n	8010a18 <__hexnan+0xd4>
 8010a58:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5c:	f1c3 0320 	rsb	r3, r3, #32
 8010a60:	fa22 f303 	lsr.w	r3, r2, r3
 8010a64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010a68:	401a      	ands	r2, r3
 8010a6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010a6e:	e7d3      	b.n	8010a18 <__hexnan+0xd4>
 8010a70:	3f04      	subs	r7, #4
 8010a72:	e7d1      	b.n	8010a18 <__hexnan+0xd4>
 8010a74:	2004      	movs	r0, #4
 8010a76:	b007      	add	sp, #28
 8010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a7c <_localeconv_r>:
 8010a7c:	4800      	ldr	r0, [pc, #0]	; (8010a80 <_localeconv_r+0x4>)
 8010a7e:	4770      	bx	lr
 8010a80:	20000188 	.word	0x20000188

08010a84 <__retarget_lock_init_recursive>:
 8010a84:	4770      	bx	lr

08010a86 <__retarget_lock_acquire_recursive>:
 8010a86:	4770      	bx	lr

08010a88 <__retarget_lock_release_recursive>:
 8010a88:	4770      	bx	lr

08010a8a <__swhatbuf_r>:
 8010a8a:	b570      	push	{r4, r5, r6, lr}
 8010a8c:	460e      	mov	r6, r1
 8010a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a92:	2900      	cmp	r1, #0
 8010a94:	b096      	sub	sp, #88	; 0x58
 8010a96:	4614      	mov	r4, r2
 8010a98:	461d      	mov	r5, r3
 8010a9a:	da07      	bge.n	8010aac <__swhatbuf_r+0x22>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	89b3      	ldrh	r3, [r6, #12]
 8010aa2:	061a      	lsls	r2, r3, #24
 8010aa4:	d410      	bmi.n	8010ac8 <__swhatbuf_r+0x3e>
 8010aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aaa:	e00e      	b.n	8010aca <__swhatbuf_r+0x40>
 8010aac:	466a      	mov	r2, sp
 8010aae:	f001 f807 	bl	8011ac0 <_fstat_r>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	dbf2      	blt.n	8010a9c <__swhatbuf_r+0x12>
 8010ab6:	9a01      	ldr	r2, [sp, #4]
 8010ab8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010abc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ac0:	425a      	negs	r2, r3
 8010ac2:	415a      	adcs	r2, r3
 8010ac4:	602a      	str	r2, [r5, #0]
 8010ac6:	e7ee      	b.n	8010aa6 <__swhatbuf_r+0x1c>
 8010ac8:	2340      	movs	r3, #64	; 0x40
 8010aca:	2000      	movs	r0, #0
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	b016      	add	sp, #88	; 0x58
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ad4 <__smakebuf_r>:
 8010ad4:	898b      	ldrh	r3, [r1, #12]
 8010ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ad8:	079d      	lsls	r5, r3, #30
 8010ada:	4606      	mov	r6, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	d507      	bpl.n	8010af0 <__smakebuf_r+0x1c>
 8010ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	6123      	str	r3, [r4, #16]
 8010ae8:	2301      	movs	r3, #1
 8010aea:	6163      	str	r3, [r4, #20]
 8010aec:	b002      	add	sp, #8
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	ab01      	add	r3, sp, #4
 8010af2:	466a      	mov	r2, sp
 8010af4:	f7ff ffc9 	bl	8010a8a <__swhatbuf_r>
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	4605      	mov	r5, r0
 8010afc:	4630      	mov	r0, r6
 8010afe:	f000 fd5d 	bl	80115bc <_malloc_r>
 8010b02:	b948      	cbnz	r0, 8010b18 <__smakebuf_r+0x44>
 8010b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b08:	059a      	lsls	r2, r3, #22
 8010b0a:	d4ef      	bmi.n	8010aec <__smakebuf_r+0x18>
 8010b0c:	f023 0303 	bic.w	r3, r3, #3
 8010b10:	f043 0302 	orr.w	r3, r3, #2
 8010b14:	81a3      	strh	r3, [r4, #12]
 8010b16:	e7e3      	b.n	8010ae0 <__smakebuf_r+0xc>
 8010b18:	4b0d      	ldr	r3, [pc, #52]	; (8010b50 <__smakebuf_r+0x7c>)
 8010b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	6020      	str	r0, [r4, #0]
 8010b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	9b00      	ldr	r3, [sp, #0]
 8010b28:	6163      	str	r3, [r4, #20]
 8010b2a:	9b01      	ldr	r3, [sp, #4]
 8010b2c:	6120      	str	r0, [r4, #16]
 8010b2e:	b15b      	cbz	r3, 8010b48 <__smakebuf_r+0x74>
 8010b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b34:	4630      	mov	r0, r6
 8010b36:	f000 ffd5 	bl	8011ae4 <_isatty_r>
 8010b3a:	b128      	cbz	r0, 8010b48 <__smakebuf_r+0x74>
 8010b3c:	89a3      	ldrh	r3, [r4, #12]
 8010b3e:	f023 0303 	bic.w	r3, r3, #3
 8010b42:	f043 0301 	orr.w	r3, r3, #1
 8010b46:	81a3      	strh	r3, [r4, #12]
 8010b48:	89a0      	ldrh	r0, [r4, #12]
 8010b4a:	4305      	orrs	r5, r0
 8010b4c:	81a5      	strh	r5, [r4, #12]
 8010b4e:	e7cd      	b.n	8010aec <__smakebuf_r+0x18>
 8010b50:	080101fd 	.word	0x080101fd

08010b54 <malloc>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <malloc+0xc>)
 8010b56:	4601      	mov	r1, r0
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f000 bd2f 	b.w	80115bc <_malloc_r>
 8010b5e:	bf00      	nop
 8010b60:	20000030 	.word	0x20000030

08010b64 <__ascii_mbtowc>:
 8010b64:	b082      	sub	sp, #8
 8010b66:	b901      	cbnz	r1, 8010b6a <__ascii_mbtowc+0x6>
 8010b68:	a901      	add	r1, sp, #4
 8010b6a:	b142      	cbz	r2, 8010b7e <__ascii_mbtowc+0x1a>
 8010b6c:	b14b      	cbz	r3, 8010b82 <__ascii_mbtowc+0x1e>
 8010b6e:	7813      	ldrb	r3, [r2, #0]
 8010b70:	600b      	str	r3, [r1, #0]
 8010b72:	7812      	ldrb	r2, [r2, #0]
 8010b74:	1e10      	subs	r0, r2, #0
 8010b76:	bf18      	it	ne
 8010b78:	2001      	movne	r0, #1
 8010b7a:	b002      	add	sp, #8
 8010b7c:	4770      	bx	lr
 8010b7e:	4610      	mov	r0, r2
 8010b80:	e7fb      	b.n	8010b7a <__ascii_mbtowc+0x16>
 8010b82:	f06f 0001 	mvn.w	r0, #1
 8010b86:	e7f8      	b.n	8010b7a <__ascii_mbtowc+0x16>

08010b88 <_Balloc>:
 8010b88:	b570      	push	{r4, r5, r6, lr}
 8010b8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	460d      	mov	r5, r1
 8010b90:	b976      	cbnz	r6, 8010bb0 <_Balloc+0x28>
 8010b92:	2010      	movs	r0, #16
 8010b94:	f7ff ffde 	bl	8010b54 <malloc>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	6260      	str	r0, [r4, #36]	; 0x24
 8010b9c:	b920      	cbnz	r0, 8010ba8 <_Balloc+0x20>
 8010b9e:	4b18      	ldr	r3, [pc, #96]	; (8010c00 <_Balloc+0x78>)
 8010ba0:	4818      	ldr	r0, [pc, #96]	; (8010c04 <_Balloc+0x7c>)
 8010ba2:	2166      	movs	r1, #102	; 0x66
 8010ba4:	f000 ff4c 	bl	8011a40 <__assert_func>
 8010ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bac:	6006      	str	r6, [r0, #0]
 8010bae:	60c6      	str	r6, [r0, #12]
 8010bb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010bb2:	68f3      	ldr	r3, [r6, #12]
 8010bb4:	b183      	cbz	r3, 8010bd8 <_Balloc+0x50>
 8010bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bbe:	b9b8      	cbnz	r0, 8010bf0 <_Balloc+0x68>
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	fa01 f605 	lsl.w	r6, r1, r5
 8010bc6:	1d72      	adds	r2, r6, #5
 8010bc8:	0092      	lsls	r2, r2, #2
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f000 fc97 	bl	80114fe <_calloc_r>
 8010bd0:	b160      	cbz	r0, 8010bec <_Balloc+0x64>
 8010bd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bd6:	e00e      	b.n	8010bf6 <_Balloc+0x6e>
 8010bd8:	2221      	movs	r2, #33	; 0x21
 8010bda:	2104      	movs	r1, #4
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 fc8e 	bl	80114fe <_calloc_r>
 8010be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010be4:	60f0      	str	r0, [r6, #12]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1e4      	bne.n	8010bb6 <_Balloc+0x2e>
 8010bec:	2000      	movs	r0, #0
 8010bee:	bd70      	pop	{r4, r5, r6, pc}
 8010bf0:	6802      	ldr	r2, [r0, #0]
 8010bf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bfc:	e7f7      	b.n	8010bee <_Balloc+0x66>
 8010bfe:	bf00      	nop
 8010c00:	0801357e 	.word	0x0801357e
 8010c04:	080136e8 	.word	0x080136e8

08010c08 <_Bfree>:
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	460c      	mov	r4, r1
 8010c10:	b976      	cbnz	r6, 8010c30 <_Bfree+0x28>
 8010c12:	2010      	movs	r0, #16
 8010c14:	f7ff ff9e 	bl	8010b54 <malloc>
 8010c18:	4602      	mov	r2, r0
 8010c1a:	6268      	str	r0, [r5, #36]	; 0x24
 8010c1c:	b920      	cbnz	r0, 8010c28 <_Bfree+0x20>
 8010c1e:	4b09      	ldr	r3, [pc, #36]	; (8010c44 <_Bfree+0x3c>)
 8010c20:	4809      	ldr	r0, [pc, #36]	; (8010c48 <_Bfree+0x40>)
 8010c22:	218a      	movs	r1, #138	; 0x8a
 8010c24:	f000 ff0c 	bl	8011a40 <__assert_func>
 8010c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c2c:	6006      	str	r6, [r0, #0]
 8010c2e:	60c6      	str	r6, [r0, #12]
 8010c30:	b13c      	cbz	r4, 8010c42 <_Bfree+0x3a>
 8010c32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c34:	6862      	ldr	r2, [r4, #4]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c3c:	6021      	str	r1, [r4, #0]
 8010c3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	0801357e 	.word	0x0801357e
 8010c48:	080136e8 	.word	0x080136e8

08010c4c <__multadd>:
 8010c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c50:	690e      	ldr	r6, [r1, #16]
 8010c52:	4607      	mov	r7, r0
 8010c54:	4698      	mov	r8, r3
 8010c56:	460c      	mov	r4, r1
 8010c58:	f101 0014 	add.w	r0, r1, #20
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	6805      	ldr	r5, [r0, #0]
 8010c60:	b2a9      	uxth	r1, r5
 8010c62:	fb02 8101 	mla	r1, r2, r1, r8
 8010c66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010c6a:	0c2d      	lsrs	r5, r5, #16
 8010c6c:	fb02 c505 	mla	r5, r2, r5, ip
 8010c70:	b289      	uxth	r1, r1
 8010c72:	3301      	adds	r3, #1
 8010c74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010c78:	429e      	cmp	r6, r3
 8010c7a:	f840 1b04 	str.w	r1, [r0], #4
 8010c7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010c82:	dcec      	bgt.n	8010c5e <__multadd+0x12>
 8010c84:	f1b8 0f00 	cmp.w	r8, #0
 8010c88:	d022      	beq.n	8010cd0 <__multadd+0x84>
 8010c8a:	68a3      	ldr	r3, [r4, #8]
 8010c8c:	42b3      	cmp	r3, r6
 8010c8e:	dc19      	bgt.n	8010cc4 <__multadd+0x78>
 8010c90:	6861      	ldr	r1, [r4, #4]
 8010c92:	4638      	mov	r0, r7
 8010c94:	3101      	adds	r1, #1
 8010c96:	f7ff ff77 	bl	8010b88 <_Balloc>
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	b928      	cbnz	r0, 8010caa <__multadd+0x5e>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	4b0d      	ldr	r3, [pc, #52]	; (8010cd8 <__multadd+0x8c>)
 8010ca2:	480e      	ldr	r0, [pc, #56]	; (8010cdc <__multadd+0x90>)
 8010ca4:	21b5      	movs	r1, #181	; 0xb5
 8010ca6:	f000 fecb 	bl	8011a40 <__assert_func>
 8010caa:	6922      	ldr	r2, [r4, #16]
 8010cac:	3202      	adds	r2, #2
 8010cae:	f104 010c 	add.w	r1, r4, #12
 8010cb2:	0092      	lsls	r2, r2, #2
 8010cb4:	300c      	adds	r0, #12
 8010cb6:	f7fc feb5 	bl	800da24 <memcpy>
 8010cba:	4621      	mov	r1, r4
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f7ff ffa3 	bl	8010c08 <_Bfree>
 8010cc2:	462c      	mov	r4, r5
 8010cc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010cc8:	3601      	adds	r6, #1
 8010cca:	f8c3 8014 	str.w	r8, [r3, #20]
 8010cce:	6126      	str	r6, [r4, #16]
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd6:	bf00      	nop
 8010cd8:	080135f4 	.word	0x080135f4
 8010cdc:	080136e8 	.word	0x080136e8

08010ce0 <__s2b>:
 8010ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	4615      	mov	r5, r2
 8010ce8:	461f      	mov	r7, r3
 8010cea:	2209      	movs	r2, #9
 8010cec:	3308      	adds	r3, #8
 8010cee:	4606      	mov	r6, r0
 8010cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cf4:	2100      	movs	r1, #0
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	db09      	blt.n	8010d10 <__s2b+0x30>
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f7ff ff43 	bl	8010b88 <_Balloc>
 8010d02:	b940      	cbnz	r0, 8010d16 <__s2b+0x36>
 8010d04:	4602      	mov	r2, r0
 8010d06:	4b19      	ldr	r3, [pc, #100]	; (8010d6c <__s2b+0x8c>)
 8010d08:	4819      	ldr	r0, [pc, #100]	; (8010d70 <__s2b+0x90>)
 8010d0a:	21ce      	movs	r1, #206	; 0xce
 8010d0c:	f000 fe98 	bl	8011a40 <__assert_func>
 8010d10:	0052      	lsls	r2, r2, #1
 8010d12:	3101      	adds	r1, #1
 8010d14:	e7f0      	b.n	8010cf8 <__s2b+0x18>
 8010d16:	9b08      	ldr	r3, [sp, #32]
 8010d18:	6143      	str	r3, [r0, #20]
 8010d1a:	2d09      	cmp	r5, #9
 8010d1c:	f04f 0301 	mov.w	r3, #1
 8010d20:	6103      	str	r3, [r0, #16]
 8010d22:	dd16      	ble.n	8010d52 <__s2b+0x72>
 8010d24:	f104 0909 	add.w	r9, r4, #9
 8010d28:	46c8      	mov	r8, r9
 8010d2a:	442c      	add	r4, r5
 8010d2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d30:	4601      	mov	r1, r0
 8010d32:	3b30      	subs	r3, #48	; 0x30
 8010d34:	220a      	movs	r2, #10
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7ff ff88 	bl	8010c4c <__multadd>
 8010d3c:	45a0      	cmp	r8, r4
 8010d3e:	d1f5      	bne.n	8010d2c <__s2b+0x4c>
 8010d40:	f1a5 0408 	sub.w	r4, r5, #8
 8010d44:	444c      	add	r4, r9
 8010d46:	1b2d      	subs	r5, r5, r4
 8010d48:	1963      	adds	r3, r4, r5
 8010d4a:	42bb      	cmp	r3, r7
 8010d4c:	db04      	blt.n	8010d58 <__s2b+0x78>
 8010d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d52:	340a      	adds	r4, #10
 8010d54:	2509      	movs	r5, #9
 8010d56:	e7f6      	b.n	8010d46 <__s2b+0x66>
 8010d58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	3b30      	subs	r3, #48	; 0x30
 8010d60:	220a      	movs	r2, #10
 8010d62:	4630      	mov	r0, r6
 8010d64:	f7ff ff72 	bl	8010c4c <__multadd>
 8010d68:	e7ee      	b.n	8010d48 <__s2b+0x68>
 8010d6a:	bf00      	nop
 8010d6c:	080135f4 	.word	0x080135f4
 8010d70:	080136e8 	.word	0x080136e8

08010d74 <__hi0bits>:
 8010d74:	0c03      	lsrs	r3, r0, #16
 8010d76:	041b      	lsls	r3, r3, #16
 8010d78:	b9d3      	cbnz	r3, 8010db0 <__hi0bits+0x3c>
 8010d7a:	0400      	lsls	r0, r0, #16
 8010d7c:	2310      	movs	r3, #16
 8010d7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010d82:	bf04      	itt	eq
 8010d84:	0200      	lsleq	r0, r0, #8
 8010d86:	3308      	addeq	r3, #8
 8010d88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010d8c:	bf04      	itt	eq
 8010d8e:	0100      	lsleq	r0, r0, #4
 8010d90:	3304      	addeq	r3, #4
 8010d92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010d96:	bf04      	itt	eq
 8010d98:	0080      	lsleq	r0, r0, #2
 8010d9a:	3302      	addeq	r3, #2
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	db05      	blt.n	8010dac <__hi0bits+0x38>
 8010da0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010da4:	f103 0301 	add.w	r3, r3, #1
 8010da8:	bf08      	it	eq
 8010daa:	2320      	moveq	r3, #32
 8010dac:	4618      	mov	r0, r3
 8010dae:	4770      	bx	lr
 8010db0:	2300      	movs	r3, #0
 8010db2:	e7e4      	b.n	8010d7e <__hi0bits+0xa>

08010db4 <__lo0bits>:
 8010db4:	6803      	ldr	r3, [r0, #0]
 8010db6:	f013 0207 	ands.w	r2, r3, #7
 8010dba:	4601      	mov	r1, r0
 8010dbc:	d00b      	beq.n	8010dd6 <__lo0bits+0x22>
 8010dbe:	07da      	lsls	r2, r3, #31
 8010dc0:	d424      	bmi.n	8010e0c <__lo0bits+0x58>
 8010dc2:	0798      	lsls	r0, r3, #30
 8010dc4:	bf49      	itett	mi
 8010dc6:	085b      	lsrmi	r3, r3, #1
 8010dc8:	089b      	lsrpl	r3, r3, #2
 8010dca:	2001      	movmi	r0, #1
 8010dcc:	600b      	strmi	r3, [r1, #0]
 8010dce:	bf5c      	itt	pl
 8010dd0:	600b      	strpl	r3, [r1, #0]
 8010dd2:	2002      	movpl	r0, #2
 8010dd4:	4770      	bx	lr
 8010dd6:	b298      	uxth	r0, r3
 8010dd8:	b9b0      	cbnz	r0, 8010e08 <__lo0bits+0x54>
 8010dda:	0c1b      	lsrs	r3, r3, #16
 8010ddc:	2010      	movs	r0, #16
 8010dde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010de2:	bf04      	itt	eq
 8010de4:	0a1b      	lsreq	r3, r3, #8
 8010de6:	3008      	addeq	r0, #8
 8010de8:	071a      	lsls	r2, r3, #28
 8010dea:	bf04      	itt	eq
 8010dec:	091b      	lsreq	r3, r3, #4
 8010dee:	3004      	addeq	r0, #4
 8010df0:	079a      	lsls	r2, r3, #30
 8010df2:	bf04      	itt	eq
 8010df4:	089b      	lsreq	r3, r3, #2
 8010df6:	3002      	addeq	r0, #2
 8010df8:	07da      	lsls	r2, r3, #31
 8010dfa:	d403      	bmi.n	8010e04 <__lo0bits+0x50>
 8010dfc:	085b      	lsrs	r3, r3, #1
 8010dfe:	f100 0001 	add.w	r0, r0, #1
 8010e02:	d005      	beq.n	8010e10 <__lo0bits+0x5c>
 8010e04:	600b      	str	r3, [r1, #0]
 8010e06:	4770      	bx	lr
 8010e08:	4610      	mov	r0, r2
 8010e0a:	e7e8      	b.n	8010dde <__lo0bits+0x2a>
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	4770      	bx	lr
 8010e10:	2020      	movs	r0, #32
 8010e12:	4770      	bx	lr

08010e14 <__i2b>:
 8010e14:	b510      	push	{r4, lr}
 8010e16:	460c      	mov	r4, r1
 8010e18:	2101      	movs	r1, #1
 8010e1a:	f7ff feb5 	bl	8010b88 <_Balloc>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	b928      	cbnz	r0, 8010e2e <__i2b+0x1a>
 8010e22:	4b05      	ldr	r3, [pc, #20]	; (8010e38 <__i2b+0x24>)
 8010e24:	4805      	ldr	r0, [pc, #20]	; (8010e3c <__i2b+0x28>)
 8010e26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010e2a:	f000 fe09 	bl	8011a40 <__assert_func>
 8010e2e:	2301      	movs	r3, #1
 8010e30:	6144      	str	r4, [r0, #20]
 8010e32:	6103      	str	r3, [r0, #16]
 8010e34:	bd10      	pop	{r4, pc}
 8010e36:	bf00      	nop
 8010e38:	080135f4 	.word	0x080135f4
 8010e3c:	080136e8 	.word	0x080136e8

08010e40 <__multiply>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	4614      	mov	r4, r2
 8010e46:	690a      	ldr	r2, [r1, #16]
 8010e48:	6923      	ldr	r3, [r4, #16]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	bfb8      	it	lt
 8010e4e:	460b      	movlt	r3, r1
 8010e50:	460d      	mov	r5, r1
 8010e52:	bfbc      	itt	lt
 8010e54:	4625      	movlt	r5, r4
 8010e56:	461c      	movlt	r4, r3
 8010e58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010e5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010e60:	68ab      	ldr	r3, [r5, #8]
 8010e62:	6869      	ldr	r1, [r5, #4]
 8010e64:	eb0a 0709 	add.w	r7, sl, r9
 8010e68:	42bb      	cmp	r3, r7
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	bfb8      	it	lt
 8010e6e:	3101      	addlt	r1, #1
 8010e70:	f7ff fe8a 	bl	8010b88 <_Balloc>
 8010e74:	b930      	cbnz	r0, 8010e84 <__multiply+0x44>
 8010e76:	4602      	mov	r2, r0
 8010e78:	4b42      	ldr	r3, [pc, #264]	; (8010f84 <__multiply+0x144>)
 8010e7a:	4843      	ldr	r0, [pc, #268]	; (8010f88 <__multiply+0x148>)
 8010e7c:	f240 115d 	movw	r1, #349	; 0x15d
 8010e80:	f000 fdde 	bl	8011a40 <__assert_func>
 8010e84:	f100 0614 	add.w	r6, r0, #20
 8010e88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010e8c:	4633      	mov	r3, r6
 8010e8e:	2200      	movs	r2, #0
 8010e90:	4543      	cmp	r3, r8
 8010e92:	d31e      	bcc.n	8010ed2 <__multiply+0x92>
 8010e94:	f105 0c14 	add.w	ip, r5, #20
 8010e98:	f104 0314 	add.w	r3, r4, #20
 8010e9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010ea0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010ea4:	9202      	str	r2, [sp, #8]
 8010ea6:	ebac 0205 	sub.w	r2, ip, r5
 8010eaa:	3a15      	subs	r2, #21
 8010eac:	f022 0203 	bic.w	r2, r2, #3
 8010eb0:	3204      	adds	r2, #4
 8010eb2:	f105 0115 	add.w	r1, r5, #21
 8010eb6:	458c      	cmp	ip, r1
 8010eb8:	bf38      	it	cc
 8010eba:	2204      	movcc	r2, #4
 8010ebc:	9201      	str	r2, [sp, #4]
 8010ebe:	9a02      	ldr	r2, [sp, #8]
 8010ec0:	9303      	str	r3, [sp, #12]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d808      	bhi.n	8010ed8 <__multiply+0x98>
 8010ec6:	2f00      	cmp	r7, #0
 8010ec8:	dc55      	bgt.n	8010f76 <__multiply+0x136>
 8010eca:	6107      	str	r7, [r0, #16]
 8010ecc:	b005      	add	sp, #20
 8010ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed2:	f843 2b04 	str.w	r2, [r3], #4
 8010ed6:	e7db      	b.n	8010e90 <__multiply+0x50>
 8010ed8:	f8b3 a000 	ldrh.w	sl, [r3]
 8010edc:	f1ba 0f00 	cmp.w	sl, #0
 8010ee0:	d020      	beq.n	8010f24 <__multiply+0xe4>
 8010ee2:	f105 0e14 	add.w	lr, r5, #20
 8010ee6:	46b1      	mov	r9, r6
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010eee:	f8d9 b000 	ldr.w	fp, [r9]
 8010ef2:	b2a1      	uxth	r1, r4
 8010ef4:	fa1f fb8b 	uxth.w	fp, fp
 8010ef8:	fb0a b101 	mla	r1, sl, r1, fp
 8010efc:	4411      	add	r1, r2
 8010efe:	f8d9 2000 	ldr.w	r2, [r9]
 8010f02:	0c24      	lsrs	r4, r4, #16
 8010f04:	0c12      	lsrs	r2, r2, #16
 8010f06:	fb0a 2404 	mla	r4, sl, r4, r2
 8010f0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010f0e:	b289      	uxth	r1, r1
 8010f10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010f14:	45f4      	cmp	ip, lr
 8010f16:	f849 1b04 	str.w	r1, [r9], #4
 8010f1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010f1e:	d8e4      	bhi.n	8010eea <__multiply+0xaa>
 8010f20:	9901      	ldr	r1, [sp, #4]
 8010f22:	5072      	str	r2, [r6, r1]
 8010f24:	9a03      	ldr	r2, [sp, #12]
 8010f26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	f1b9 0f00 	cmp.w	r9, #0
 8010f30:	d01f      	beq.n	8010f72 <__multiply+0x132>
 8010f32:	6834      	ldr	r4, [r6, #0]
 8010f34:	f105 0114 	add.w	r1, r5, #20
 8010f38:	46b6      	mov	lr, r6
 8010f3a:	f04f 0a00 	mov.w	sl, #0
 8010f3e:	880a      	ldrh	r2, [r1, #0]
 8010f40:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010f44:	fb09 b202 	mla	r2, r9, r2, fp
 8010f48:	4492      	add	sl, r2
 8010f4a:	b2a4      	uxth	r4, r4
 8010f4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010f50:	f84e 4b04 	str.w	r4, [lr], #4
 8010f54:	f851 4b04 	ldr.w	r4, [r1], #4
 8010f58:	f8be 2000 	ldrh.w	r2, [lr]
 8010f5c:	0c24      	lsrs	r4, r4, #16
 8010f5e:	fb09 2404 	mla	r4, r9, r4, r2
 8010f62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010f66:	458c      	cmp	ip, r1
 8010f68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f6c:	d8e7      	bhi.n	8010f3e <__multiply+0xfe>
 8010f6e:	9a01      	ldr	r2, [sp, #4]
 8010f70:	50b4      	str	r4, [r6, r2]
 8010f72:	3604      	adds	r6, #4
 8010f74:	e7a3      	b.n	8010ebe <__multiply+0x7e>
 8010f76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d1a5      	bne.n	8010eca <__multiply+0x8a>
 8010f7e:	3f01      	subs	r7, #1
 8010f80:	e7a1      	b.n	8010ec6 <__multiply+0x86>
 8010f82:	bf00      	nop
 8010f84:	080135f4 	.word	0x080135f4
 8010f88:	080136e8 	.word	0x080136e8

08010f8c <__pow5mult>:
 8010f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f90:	4615      	mov	r5, r2
 8010f92:	f012 0203 	ands.w	r2, r2, #3
 8010f96:	4606      	mov	r6, r0
 8010f98:	460f      	mov	r7, r1
 8010f9a:	d007      	beq.n	8010fac <__pow5mult+0x20>
 8010f9c:	4c25      	ldr	r4, [pc, #148]	; (8011034 <__pow5mult+0xa8>)
 8010f9e:	3a01      	subs	r2, #1
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fa6:	f7ff fe51 	bl	8010c4c <__multadd>
 8010faa:	4607      	mov	r7, r0
 8010fac:	10ad      	asrs	r5, r5, #2
 8010fae:	d03d      	beq.n	801102c <__pow5mult+0xa0>
 8010fb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010fb2:	b97c      	cbnz	r4, 8010fd4 <__pow5mult+0x48>
 8010fb4:	2010      	movs	r0, #16
 8010fb6:	f7ff fdcd 	bl	8010b54 <malloc>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	6270      	str	r0, [r6, #36]	; 0x24
 8010fbe:	b928      	cbnz	r0, 8010fcc <__pow5mult+0x40>
 8010fc0:	4b1d      	ldr	r3, [pc, #116]	; (8011038 <__pow5mult+0xac>)
 8010fc2:	481e      	ldr	r0, [pc, #120]	; (801103c <__pow5mult+0xb0>)
 8010fc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010fc8:	f000 fd3a 	bl	8011a40 <__assert_func>
 8010fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fd0:	6004      	str	r4, [r0, #0]
 8010fd2:	60c4      	str	r4, [r0, #12]
 8010fd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fdc:	b94c      	cbnz	r4, 8010ff2 <__pow5mult+0x66>
 8010fde:	f240 2171 	movw	r1, #625	; 0x271
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f7ff ff16 	bl	8010e14 <__i2b>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fee:	4604      	mov	r4, r0
 8010ff0:	6003      	str	r3, [r0, #0]
 8010ff2:	f04f 0900 	mov.w	r9, #0
 8010ff6:	07eb      	lsls	r3, r5, #31
 8010ff8:	d50a      	bpl.n	8011010 <__pow5mult+0x84>
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	4630      	mov	r0, r6
 8011000:	f7ff ff1e 	bl	8010e40 <__multiply>
 8011004:	4639      	mov	r1, r7
 8011006:	4680      	mov	r8, r0
 8011008:	4630      	mov	r0, r6
 801100a:	f7ff fdfd 	bl	8010c08 <_Bfree>
 801100e:	4647      	mov	r7, r8
 8011010:	106d      	asrs	r5, r5, #1
 8011012:	d00b      	beq.n	801102c <__pow5mult+0xa0>
 8011014:	6820      	ldr	r0, [r4, #0]
 8011016:	b938      	cbnz	r0, 8011028 <__pow5mult+0x9c>
 8011018:	4622      	mov	r2, r4
 801101a:	4621      	mov	r1, r4
 801101c:	4630      	mov	r0, r6
 801101e:	f7ff ff0f 	bl	8010e40 <__multiply>
 8011022:	6020      	str	r0, [r4, #0]
 8011024:	f8c0 9000 	str.w	r9, [r0]
 8011028:	4604      	mov	r4, r0
 801102a:	e7e4      	b.n	8010ff6 <__pow5mult+0x6a>
 801102c:	4638      	mov	r0, r7
 801102e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011032:	bf00      	nop
 8011034:	08013838 	.word	0x08013838
 8011038:	0801357e 	.word	0x0801357e
 801103c:	080136e8 	.word	0x080136e8

08011040 <__lshift>:
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	460c      	mov	r4, r1
 8011046:	6849      	ldr	r1, [r1, #4]
 8011048:	6923      	ldr	r3, [r4, #16]
 801104a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	4607      	mov	r7, r0
 8011052:	4691      	mov	r9, r2
 8011054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011058:	f108 0601 	add.w	r6, r8, #1
 801105c:	42b3      	cmp	r3, r6
 801105e:	db0b      	blt.n	8011078 <__lshift+0x38>
 8011060:	4638      	mov	r0, r7
 8011062:	f7ff fd91 	bl	8010b88 <_Balloc>
 8011066:	4605      	mov	r5, r0
 8011068:	b948      	cbnz	r0, 801107e <__lshift+0x3e>
 801106a:	4602      	mov	r2, r0
 801106c:	4b28      	ldr	r3, [pc, #160]	; (8011110 <__lshift+0xd0>)
 801106e:	4829      	ldr	r0, [pc, #164]	; (8011114 <__lshift+0xd4>)
 8011070:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011074:	f000 fce4 	bl	8011a40 <__assert_func>
 8011078:	3101      	adds	r1, #1
 801107a:	005b      	lsls	r3, r3, #1
 801107c:	e7ee      	b.n	801105c <__lshift+0x1c>
 801107e:	2300      	movs	r3, #0
 8011080:	f100 0114 	add.w	r1, r0, #20
 8011084:	f100 0210 	add.w	r2, r0, #16
 8011088:	4618      	mov	r0, r3
 801108a:	4553      	cmp	r3, sl
 801108c:	db33      	blt.n	80110f6 <__lshift+0xb6>
 801108e:	6920      	ldr	r0, [r4, #16]
 8011090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011094:	f104 0314 	add.w	r3, r4, #20
 8011098:	f019 091f 	ands.w	r9, r9, #31
 801109c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110a4:	d02b      	beq.n	80110fe <__lshift+0xbe>
 80110a6:	f1c9 0e20 	rsb	lr, r9, #32
 80110aa:	468a      	mov	sl, r1
 80110ac:	2200      	movs	r2, #0
 80110ae:	6818      	ldr	r0, [r3, #0]
 80110b0:	fa00 f009 	lsl.w	r0, r0, r9
 80110b4:	4302      	orrs	r2, r0
 80110b6:	f84a 2b04 	str.w	r2, [sl], #4
 80110ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80110be:	459c      	cmp	ip, r3
 80110c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80110c4:	d8f3      	bhi.n	80110ae <__lshift+0x6e>
 80110c6:	ebac 0304 	sub.w	r3, ip, r4
 80110ca:	3b15      	subs	r3, #21
 80110cc:	f023 0303 	bic.w	r3, r3, #3
 80110d0:	3304      	adds	r3, #4
 80110d2:	f104 0015 	add.w	r0, r4, #21
 80110d6:	4584      	cmp	ip, r0
 80110d8:	bf38      	it	cc
 80110da:	2304      	movcc	r3, #4
 80110dc:	50ca      	str	r2, [r1, r3]
 80110de:	b10a      	cbz	r2, 80110e4 <__lshift+0xa4>
 80110e0:	f108 0602 	add.w	r6, r8, #2
 80110e4:	3e01      	subs	r6, #1
 80110e6:	4638      	mov	r0, r7
 80110e8:	612e      	str	r6, [r5, #16]
 80110ea:	4621      	mov	r1, r4
 80110ec:	f7ff fd8c 	bl	8010c08 <_Bfree>
 80110f0:	4628      	mov	r0, r5
 80110f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80110fa:	3301      	adds	r3, #1
 80110fc:	e7c5      	b.n	801108a <__lshift+0x4a>
 80110fe:	3904      	subs	r1, #4
 8011100:	f853 2b04 	ldr.w	r2, [r3], #4
 8011104:	f841 2f04 	str.w	r2, [r1, #4]!
 8011108:	459c      	cmp	ip, r3
 801110a:	d8f9      	bhi.n	8011100 <__lshift+0xc0>
 801110c:	e7ea      	b.n	80110e4 <__lshift+0xa4>
 801110e:	bf00      	nop
 8011110:	080135f4 	.word	0x080135f4
 8011114:	080136e8 	.word	0x080136e8

08011118 <__mcmp>:
 8011118:	b530      	push	{r4, r5, lr}
 801111a:	6902      	ldr	r2, [r0, #16]
 801111c:	690c      	ldr	r4, [r1, #16]
 801111e:	1b12      	subs	r2, r2, r4
 8011120:	d10e      	bne.n	8011140 <__mcmp+0x28>
 8011122:	f100 0314 	add.w	r3, r0, #20
 8011126:	3114      	adds	r1, #20
 8011128:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801112c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011130:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011134:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011138:	42a5      	cmp	r5, r4
 801113a:	d003      	beq.n	8011144 <__mcmp+0x2c>
 801113c:	d305      	bcc.n	801114a <__mcmp+0x32>
 801113e:	2201      	movs	r2, #1
 8011140:	4610      	mov	r0, r2
 8011142:	bd30      	pop	{r4, r5, pc}
 8011144:	4283      	cmp	r3, r0
 8011146:	d3f3      	bcc.n	8011130 <__mcmp+0x18>
 8011148:	e7fa      	b.n	8011140 <__mcmp+0x28>
 801114a:	f04f 32ff 	mov.w	r2, #4294967295
 801114e:	e7f7      	b.n	8011140 <__mcmp+0x28>

08011150 <__mdiff>:
 8011150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	460c      	mov	r4, r1
 8011156:	4606      	mov	r6, r0
 8011158:	4611      	mov	r1, r2
 801115a:	4620      	mov	r0, r4
 801115c:	4617      	mov	r7, r2
 801115e:	f7ff ffdb 	bl	8011118 <__mcmp>
 8011162:	1e05      	subs	r5, r0, #0
 8011164:	d110      	bne.n	8011188 <__mdiff+0x38>
 8011166:	4629      	mov	r1, r5
 8011168:	4630      	mov	r0, r6
 801116a:	f7ff fd0d 	bl	8010b88 <_Balloc>
 801116e:	b930      	cbnz	r0, 801117e <__mdiff+0x2e>
 8011170:	4b39      	ldr	r3, [pc, #228]	; (8011258 <__mdiff+0x108>)
 8011172:	4602      	mov	r2, r0
 8011174:	f240 2132 	movw	r1, #562	; 0x232
 8011178:	4838      	ldr	r0, [pc, #224]	; (801125c <__mdiff+0x10c>)
 801117a:	f000 fc61 	bl	8011a40 <__assert_func>
 801117e:	2301      	movs	r3, #1
 8011180:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011188:	bfa4      	itt	ge
 801118a:	463b      	movge	r3, r7
 801118c:	4627      	movge	r7, r4
 801118e:	4630      	mov	r0, r6
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	bfa6      	itte	ge
 8011194:	461c      	movge	r4, r3
 8011196:	2500      	movge	r5, #0
 8011198:	2501      	movlt	r5, #1
 801119a:	f7ff fcf5 	bl	8010b88 <_Balloc>
 801119e:	b920      	cbnz	r0, 80111aa <__mdiff+0x5a>
 80111a0:	4b2d      	ldr	r3, [pc, #180]	; (8011258 <__mdiff+0x108>)
 80111a2:	4602      	mov	r2, r0
 80111a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80111a8:	e7e6      	b.n	8011178 <__mdiff+0x28>
 80111aa:	693e      	ldr	r6, [r7, #16]
 80111ac:	60c5      	str	r5, [r0, #12]
 80111ae:	6925      	ldr	r5, [r4, #16]
 80111b0:	f107 0114 	add.w	r1, r7, #20
 80111b4:	f104 0914 	add.w	r9, r4, #20
 80111b8:	f100 0e14 	add.w	lr, r0, #20
 80111bc:	f107 0210 	add.w	r2, r7, #16
 80111c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80111c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80111c8:	46f2      	mov	sl, lr
 80111ca:	2700      	movs	r7, #0
 80111cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80111d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80111d4:	fa1f f883 	uxth.w	r8, r3
 80111d8:	fa17 f78b 	uxtah	r7, r7, fp
 80111dc:	0c1b      	lsrs	r3, r3, #16
 80111de:	eba7 0808 	sub.w	r8, r7, r8
 80111e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80111e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80111ea:	fa1f f888 	uxth.w	r8, r8
 80111ee:	141f      	asrs	r7, r3, #16
 80111f0:	454d      	cmp	r5, r9
 80111f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80111f6:	f84a 3b04 	str.w	r3, [sl], #4
 80111fa:	d8e7      	bhi.n	80111cc <__mdiff+0x7c>
 80111fc:	1b2b      	subs	r3, r5, r4
 80111fe:	3b15      	subs	r3, #21
 8011200:	f023 0303 	bic.w	r3, r3, #3
 8011204:	3304      	adds	r3, #4
 8011206:	3415      	adds	r4, #21
 8011208:	42a5      	cmp	r5, r4
 801120a:	bf38      	it	cc
 801120c:	2304      	movcc	r3, #4
 801120e:	4419      	add	r1, r3
 8011210:	4473      	add	r3, lr
 8011212:	469e      	mov	lr, r3
 8011214:	460d      	mov	r5, r1
 8011216:	4565      	cmp	r5, ip
 8011218:	d30e      	bcc.n	8011238 <__mdiff+0xe8>
 801121a:	f10c 0203 	add.w	r2, ip, #3
 801121e:	1a52      	subs	r2, r2, r1
 8011220:	f022 0203 	bic.w	r2, r2, #3
 8011224:	3903      	subs	r1, #3
 8011226:	458c      	cmp	ip, r1
 8011228:	bf38      	it	cc
 801122a:	2200      	movcc	r2, #0
 801122c:	441a      	add	r2, r3
 801122e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011232:	b17b      	cbz	r3, 8011254 <__mdiff+0x104>
 8011234:	6106      	str	r6, [r0, #16]
 8011236:	e7a5      	b.n	8011184 <__mdiff+0x34>
 8011238:	f855 8b04 	ldr.w	r8, [r5], #4
 801123c:	fa17 f488 	uxtah	r4, r7, r8
 8011240:	1422      	asrs	r2, r4, #16
 8011242:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011246:	b2a4      	uxth	r4, r4
 8011248:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801124c:	f84e 4b04 	str.w	r4, [lr], #4
 8011250:	1417      	asrs	r7, r2, #16
 8011252:	e7e0      	b.n	8011216 <__mdiff+0xc6>
 8011254:	3e01      	subs	r6, #1
 8011256:	e7ea      	b.n	801122e <__mdiff+0xde>
 8011258:	080135f4 	.word	0x080135f4
 801125c:	080136e8 	.word	0x080136e8

08011260 <__ulp>:
 8011260:	b082      	sub	sp, #8
 8011262:	ed8d 0b00 	vstr	d0, [sp]
 8011266:	9b01      	ldr	r3, [sp, #4]
 8011268:	4912      	ldr	r1, [pc, #72]	; (80112b4 <__ulp+0x54>)
 801126a:	4019      	ands	r1, r3
 801126c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011270:	2900      	cmp	r1, #0
 8011272:	dd05      	ble.n	8011280 <__ulp+0x20>
 8011274:	2200      	movs	r2, #0
 8011276:	460b      	mov	r3, r1
 8011278:	ec43 2b10 	vmov	d0, r2, r3
 801127c:	b002      	add	sp, #8
 801127e:	4770      	bx	lr
 8011280:	4249      	negs	r1, r1
 8011282:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011286:	ea4f 5021 	mov.w	r0, r1, asr #20
 801128a:	f04f 0200 	mov.w	r2, #0
 801128e:	f04f 0300 	mov.w	r3, #0
 8011292:	da04      	bge.n	801129e <__ulp+0x3e>
 8011294:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011298:	fa41 f300 	asr.w	r3, r1, r0
 801129c:	e7ec      	b.n	8011278 <__ulp+0x18>
 801129e:	f1a0 0114 	sub.w	r1, r0, #20
 80112a2:	291e      	cmp	r1, #30
 80112a4:	bfda      	itte	le
 80112a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80112aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80112ae:	2101      	movgt	r1, #1
 80112b0:	460a      	mov	r2, r1
 80112b2:	e7e1      	b.n	8011278 <__ulp+0x18>
 80112b4:	7ff00000 	.word	0x7ff00000

080112b8 <__b2d>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	6905      	ldr	r5, [r0, #16]
 80112bc:	f100 0714 	add.w	r7, r0, #20
 80112c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80112c4:	1f2e      	subs	r6, r5, #4
 80112c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7ff fd52 	bl	8010d74 <__hi0bits>
 80112d0:	f1c0 0320 	rsb	r3, r0, #32
 80112d4:	280a      	cmp	r0, #10
 80112d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011354 <__b2d+0x9c>
 80112da:	600b      	str	r3, [r1, #0]
 80112dc:	dc14      	bgt.n	8011308 <__b2d+0x50>
 80112de:	f1c0 0e0b 	rsb	lr, r0, #11
 80112e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80112e6:	42b7      	cmp	r7, r6
 80112e8:	ea41 030c 	orr.w	r3, r1, ip
 80112ec:	bf34      	ite	cc
 80112ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112f2:	2100      	movcs	r1, #0
 80112f4:	3015      	adds	r0, #21
 80112f6:	fa04 f000 	lsl.w	r0, r4, r0
 80112fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80112fe:	ea40 0201 	orr.w	r2, r0, r1
 8011302:	ec43 2b10 	vmov	d0, r2, r3
 8011306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011308:	42b7      	cmp	r7, r6
 801130a:	bf3a      	itte	cc
 801130c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011310:	f1a5 0608 	subcc.w	r6, r5, #8
 8011314:	2100      	movcs	r1, #0
 8011316:	380b      	subs	r0, #11
 8011318:	d017      	beq.n	801134a <__b2d+0x92>
 801131a:	f1c0 0c20 	rsb	ip, r0, #32
 801131e:	fa04 f500 	lsl.w	r5, r4, r0
 8011322:	42be      	cmp	r6, r7
 8011324:	fa21 f40c 	lsr.w	r4, r1, ip
 8011328:	ea45 0504 	orr.w	r5, r5, r4
 801132c:	bf8c      	ite	hi
 801132e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011332:	2400      	movls	r4, #0
 8011334:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011338:	fa01 f000 	lsl.w	r0, r1, r0
 801133c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011340:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011344:	ea40 0204 	orr.w	r2, r0, r4
 8011348:	e7db      	b.n	8011302 <__b2d+0x4a>
 801134a:	ea44 030c 	orr.w	r3, r4, ip
 801134e:	460a      	mov	r2, r1
 8011350:	e7d7      	b.n	8011302 <__b2d+0x4a>
 8011352:	bf00      	nop
 8011354:	3ff00000 	.word	0x3ff00000

08011358 <__d2b>:
 8011358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801135c:	4689      	mov	r9, r1
 801135e:	2101      	movs	r1, #1
 8011360:	ec57 6b10 	vmov	r6, r7, d0
 8011364:	4690      	mov	r8, r2
 8011366:	f7ff fc0f 	bl	8010b88 <_Balloc>
 801136a:	4604      	mov	r4, r0
 801136c:	b930      	cbnz	r0, 801137c <__d2b+0x24>
 801136e:	4602      	mov	r2, r0
 8011370:	4b25      	ldr	r3, [pc, #148]	; (8011408 <__d2b+0xb0>)
 8011372:	4826      	ldr	r0, [pc, #152]	; (801140c <__d2b+0xb4>)
 8011374:	f240 310a 	movw	r1, #778	; 0x30a
 8011378:	f000 fb62 	bl	8011a40 <__assert_func>
 801137c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011384:	bb35      	cbnz	r5, 80113d4 <__d2b+0x7c>
 8011386:	2e00      	cmp	r6, #0
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	d028      	beq.n	80113de <__d2b+0x86>
 801138c:	4668      	mov	r0, sp
 801138e:	9600      	str	r6, [sp, #0]
 8011390:	f7ff fd10 	bl	8010db4 <__lo0bits>
 8011394:	9900      	ldr	r1, [sp, #0]
 8011396:	b300      	cbz	r0, 80113da <__d2b+0x82>
 8011398:	9a01      	ldr	r2, [sp, #4]
 801139a:	f1c0 0320 	rsb	r3, r0, #32
 801139e:	fa02 f303 	lsl.w	r3, r2, r3
 80113a2:	430b      	orrs	r3, r1
 80113a4:	40c2      	lsrs	r2, r0
 80113a6:	6163      	str	r3, [r4, #20]
 80113a8:	9201      	str	r2, [sp, #4]
 80113aa:	9b01      	ldr	r3, [sp, #4]
 80113ac:	61a3      	str	r3, [r4, #24]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	bf14      	ite	ne
 80113b2:	2202      	movne	r2, #2
 80113b4:	2201      	moveq	r2, #1
 80113b6:	6122      	str	r2, [r4, #16]
 80113b8:	b1d5      	cbz	r5, 80113f0 <__d2b+0x98>
 80113ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113be:	4405      	add	r5, r0
 80113c0:	f8c9 5000 	str.w	r5, [r9]
 80113c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80113c8:	f8c8 0000 	str.w	r0, [r8]
 80113cc:	4620      	mov	r0, r4
 80113ce:	b003      	add	sp, #12
 80113d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113d8:	e7d5      	b.n	8011386 <__d2b+0x2e>
 80113da:	6161      	str	r1, [r4, #20]
 80113dc:	e7e5      	b.n	80113aa <__d2b+0x52>
 80113de:	a801      	add	r0, sp, #4
 80113e0:	f7ff fce8 	bl	8010db4 <__lo0bits>
 80113e4:	9b01      	ldr	r3, [sp, #4]
 80113e6:	6163      	str	r3, [r4, #20]
 80113e8:	2201      	movs	r2, #1
 80113ea:	6122      	str	r2, [r4, #16]
 80113ec:	3020      	adds	r0, #32
 80113ee:	e7e3      	b.n	80113b8 <__d2b+0x60>
 80113f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113f8:	f8c9 0000 	str.w	r0, [r9]
 80113fc:	6918      	ldr	r0, [r3, #16]
 80113fe:	f7ff fcb9 	bl	8010d74 <__hi0bits>
 8011402:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011406:	e7df      	b.n	80113c8 <__d2b+0x70>
 8011408:	080135f4 	.word	0x080135f4
 801140c:	080136e8 	.word	0x080136e8

08011410 <__ratio>:
 8011410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011414:	4688      	mov	r8, r1
 8011416:	4669      	mov	r1, sp
 8011418:	4681      	mov	r9, r0
 801141a:	f7ff ff4d 	bl	80112b8 <__b2d>
 801141e:	a901      	add	r1, sp, #4
 8011420:	4640      	mov	r0, r8
 8011422:	ec55 4b10 	vmov	r4, r5, d0
 8011426:	f7ff ff47 	bl	80112b8 <__b2d>
 801142a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801142e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011432:	eba3 0c02 	sub.w	ip, r3, r2
 8011436:	e9dd 3200 	ldrd	r3, r2, [sp]
 801143a:	1a9b      	subs	r3, r3, r2
 801143c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011440:	ec51 0b10 	vmov	r0, r1, d0
 8011444:	2b00      	cmp	r3, #0
 8011446:	bfd6      	itet	le
 8011448:	460a      	movle	r2, r1
 801144a:	462a      	movgt	r2, r5
 801144c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011450:	468b      	mov	fp, r1
 8011452:	462f      	mov	r7, r5
 8011454:	bfd4      	ite	le
 8011456:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801145a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801145e:	4620      	mov	r0, r4
 8011460:	ee10 2a10 	vmov	r2, s0
 8011464:	465b      	mov	r3, fp
 8011466:	4639      	mov	r1, r7
 8011468:	f7ef fa18 	bl	800089c <__aeabi_ddiv>
 801146c:	ec41 0b10 	vmov	d0, r0, r1
 8011470:	b003      	add	sp, #12
 8011472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011476 <__copybits>:
 8011476:	3901      	subs	r1, #1
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	1149      	asrs	r1, r1, #5
 801147c:	6914      	ldr	r4, [r2, #16]
 801147e:	3101      	adds	r1, #1
 8011480:	f102 0314 	add.w	r3, r2, #20
 8011484:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011488:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801148c:	1f05      	subs	r5, r0, #4
 801148e:	42a3      	cmp	r3, r4
 8011490:	d30c      	bcc.n	80114ac <__copybits+0x36>
 8011492:	1aa3      	subs	r3, r4, r2
 8011494:	3b11      	subs	r3, #17
 8011496:	f023 0303 	bic.w	r3, r3, #3
 801149a:	3211      	adds	r2, #17
 801149c:	42a2      	cmp	r2, r4
 801149e:	bf88      	it	hi
 80114a0:	2300      	movhi	r3, #0
 80114a2:	4418      	add	r0, r3
 80114a4:	2300      	movs	r3, #0
 80114a6:	4288      	cmp	r0, r1
 80114a8:	d305      	bcc.n	80114b6 <__copybits+0x40>
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80114b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80114b4:	e7eb      	b.n	801148e <__copybits+0x18>
 80114b6:	f840 3b04 	str.w	r3, [r0], #4
 80114ba:	e7f4      	b.n	80114a6 <__copybits+0x30>

080114bc <__any_on>:
 80114bc:	f100 0214 	add.w	r2, r0, #20
 80114c0:	6900      	ldr	r0, [r0, #16]
 80114c2:	114b      	asrs	r3, r1, #5
 80114c4:	4298      	cmp	r0, r3
 80114c6:	b510      	push	{r4, lr}
 80114c8:	db11      	blt.n	80114ee <__any_on+0x32>
 80114ca:	dd0a      	ble.n	80114e2 <__any_on+0x26>
 80114cc:	f011 011f 	ands.w	r1, r1, #31
 80114d0:	d007      	beq.n	80114e2 <__any_on+0x26>
 80114d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80114d6:	fa24 f001 	lsr.w	r0, r4, r1
 80114da:	fa00 f101 	lsl.w	r1, r0, r1
 80114de:	428c      	cmp	r4, r1
 80114e0:	d10b      	bne.n	80114fa <__any_on+0x3e>
 80114e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d803      	bhi.n	80114f2 <__any_on+0x36>
 80114ea:	2000      	movs	r0, #0
 80114ec:	bd10      	pop	{r4, pc}
 80114ee:	4603      	mov	r3, r0
 80114f0:	e7f7      	b.n	80114e2 <__any_on+0x26>
 80114f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114f6:	2900      	cmp	r1, #0
 80114f8:	d0f5      	beq.n	80114e6 <__any_on+0x2a>
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7f6      	b.n	80114ec <__any_on+0x30>

080114fe <_calloc_r>:
 80114fe:	b513      	push	{r0, r1, r4, lr}
 8011500:	434a      	muls	r2, r1
 8011502:	4611      	mov	r1, r2
 8011504:	9201      	str	r2, [sp, #4]
 8011506:	f000 f859 	bl	80115bc <_malloc_r>
 801150a:	4604      	mov	r4, r0
 801150c:	b118      	cbz	r0, 8011516 <_calloc_r+0x18>
 801150e:	9a01      	ldr	r2, [sp, #4]
 8011510:	2100      	movs	r1, #0
 8011512:	f7fc fa95 	bl	800da40 <memset>
 8011516:	4620      	mov	r0, r4
 8011518:	b002      	add	sp, #8
 801151a:	bd10      	pop	{r4, pc}

0801151c <_free_r>:
 801151c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801151e:	2900      	cmp	r1, #0
 8011520:	d048      	beq.n	80115b4 <_free_r+0x98>
 8011522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011526:	9001      	str	r0, [sp, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	f1a1 0404 	sub.w	r4, r1, #4
 801152e:	bfb8      	it	lt
 8011530:	18e4      	addlt	r4, r4, r3
 8011532:	f000 faf9 	bl	8011b28 <__malloc_lock>
 8011536:	4a20      	ldr	r2, [pc, #128]	; (80115b8 <_free_r+0x9c>)
 8011538:	9801      	ldr	r0, [sp, #4]
 801153a:	6813      	ldr	r3, [r2, #0]
 801153c:	4615      	mov	r5, r2
 801153e:	b933      	cbnz	r3, 801154e <_free_r+0x32>
 8011540:	6063      	str	r3, [r4, #4]
 8011542:	6014      	str	r4, [r2, #0]
 8011544:	b003      	add	sp, #12
 8011546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801154a:	f000 baf3 	b.w	8011b34 <__malloc_unlock>
 801154e:	42a3      	cmp	r3, r4
 8011550:	d90b      	bls.n	801156a <_free_r+0x4e>
 8011552:	6821      	ldr	r1, [r4, #0]
 8011554:	1862      	adds	r2, r4, r1
 8011556:	4293      	cmp	r3, r2
 8011558:	bf04      	itt	eq
 801155a:	681a      	ldreq	r2, [r3, #0]
 801155c:	685b      	ldreq	r3, [r3, #4]
 801155e:	6063      	str	r3, [r4, #4]
 8011560:	bf04      	itt	eq
 8011562:	1852      	addeq	r2, r2, r1
 8011564:	6022      	streq	r2, [r4, #0]
 8011566:	602c      	str	r4, [r5, #0]
 8011568:	e7ec      	b.n	8011544 <_free_r+0x28>
 801156a:	461a      	mov	r2, r3
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	b10b      	cbz	r3, 8011574 <_free_r+0x58>
 8011570:	42a3      	cmp	r3, r4
 8011572:	d9fa      	bls.n	801156a <_free_r+0x4e>
 8011574:	6811      	ldr	r1, [r2, #0]
 8011576:	1855      	adds	r5, r2, r1
 8011578:	42a5      	cmp	r5, r4
 801157a:	d10b      	bne.n	8011594 <_free_r+0x78>
 801157c:	6824      	ldr	r4, [r4, #0]
 801157e:	4421      	add	r1, r4
 8011580:	1854      	adds	r4, r2, r1
 8011582:	42a3      	cmp	r3, r4
 8011584:	6011      	str	r1, [r2, #0]
 8011586:	d1dd      	bne.n	8011544 <_free_r+0x28>
 8011588:	681c      	ldr	r4, [r3, #0]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	6053      	str	r3, [r2, #4]
 801158e:	4421      	add	r1, r4
 8011590:	6011      	str	r1, [r2, #0]
 8011592:	e7d7      	b.n	8011544 <_free_r+0x28>
 8011594:	d902      	bls.n	801159c <_free_r+0x80>
 8011596:	230c      	movs	r3, #12
 8011598:	6003      	str	r3, [r0, #0]
 801159a:	e7d3      	b.n	8011544 <_free_r+0x28>
 801159c:	6825      	ldr	r5, [r4, #0]
 801159e:	1961      	adds	r1, r4, r5
 80115a0:	428b      	cmp	r3, r1
 80115a2:	bf04      	itt	eq
 80115a4:	6819      	ldreq	r1, [r3, #0]
 80115a6:	685b      	ldreq	r3, [r3, #4]
 80115a8:	6063      	str	r3, [r4, #4]
 80115aa:	bf04      	itt	eq
 80115ac:	1949      	addeq	r1, r1, r5
 80115ae:	6021      	streq	r1, [r4, #0]
 80115b0:	6054      	str	r4, [r2, #4]
 80115b2:	e7c7      	b.n	8011544 <_free_r+0x28>
 80115b4:	b003      	add	sp, #12
 80115b6:	bd30      	pop	{r4, r5, pc}
 80115b8:	20000230 	.word	0x20000230

080115bc <_malloc_r>:
 80115bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115be:	1ccd      	adds	r5, r1, #3
 80115c0:	f025 0503 	bic.w	r5, r5, #3
 80115c4:	3508      	adds	r5, #8
 80115c6:	2d0c      	cmp	r5, #12
 80115c8:	bf38      	it	cc
 80115ca:	250c      	movcc	r5, #12
 80115cc:	2d00      	cmp	r5, #0
 80115ce:	4606      	mov	r6, r0
 80115d0:	db01      	blt.n	80115d6 <_malloc_r+0x1a>
 80115d2:	42a9      	cmp	r1, r5
 80115d4:	d903      	bls.n	80115de <_malloc_r+0x22>
 80115d6:	230c      	movs	r3, #12
 80115d8:	6033      	str	r3, [r6, #0]
 80115da:	2000      	movs	r0, #0
 80115dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115de:	f000 faa3 	bl	8011b28 <__malloc_lock>
 80115e2:	4921      	ldr	r1, [pc, #132]	; (8011668 <_malloc_r+0xac>)
 80115e4:	680a      	ldr	r2, [r1, #0]
 80115e6:	4614      	mov	r4, r2
 80115e8:	b99c      	cbnz	r4, 8011612 <_malloc_r+0x56>
 80115ea:	4f20      	ldr	r7, [pc, #128]	; (801166c <_malloc_r+0xb0>)
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	b923      	cbnz	r3, 80115fa <_malloc_r+0x3e>
 80115f0:	4621      	mov	r1, r4
 80115f2:	4630      	mov	r0, r6
 80115f4:	f000 f9a0 	bl	8011938 <_sbrk_r>
 80115f8:	6038      	str	r0, [r7, #0]
 80115fa:	4629      	mov	r1, r5
 80115fc:	4630      	mov	r0, r6
 80115fe:	f000 f99b 	bl	8011938 <_sbrk_r>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	d123      	bne.n	801164e <_malloc_r+0x92>
 8011606:	230c      	movs	r3, #12
 8011608:	6033      	str	r3, [r6, #0]
 801160a:	4630      	mov	r0, r6
 801160c:	f000 fa92 	bl	8011b34 <__malloc_unlock>
 8011610:	e7e3      	b.n	80115da <_malloc_r+0x1e>
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	1b5b      	subs	r3, r3, r5
 8011616:	d417      	bmi.n	8011648 <_malloc_r+0x8c>
 8011618:	2b0b      	cmp	r3, #11
 801161a:	d903      	bls.n	8011624 <_malloc_r+0x68>
 801161c:	6023      	str	r3, [r4, #0]
 801161e:	441c      	add	r4, r3
 8011620:	6025      	str	r5, [r4, #0]
 8011622:	e004      	b.n	801162e <_malloc_r+0x72>
 8011624:	6863      	ldr	r3, [r4, #4]
 8011626:	42a2      	cmp	r2, r4
 8011628:	bf0c      	ite	eq
 801162a:	600b      	streq	r3, [r1, #0]
 801162c:	6053      	strne	r3, [r2, #4]
 801162e:	4630      	mov	r0, r6
 8011630:	f000 fa80 	bl	8011b34 <__malloc_unlock>
 8011634:	f104 000b 	add.w	r0, r4, #11
 8011638:	1d23      	adds	r3, r4, #4
 801163a:	f020 0007 	bic.w	r0, r0, #7
 801163e:	1ac2      	subs	r2, r0, r3
 8011640:	d0cc      	beq.n	80115dc <_malloc_r+0x20>
 8011642:	1a1b      	subs	r3, r3, r0
 8011644:	50a3      	str	r3, [r4, r2]
 8011646:	e7c9      	b.n	80115dc <_malloc_r+0x20>
 8011648:	4622      	mov	r2, r4
 801164a:	6864      	ldr	r4, [r4, #4]
 801164c:	e7cc      	b.n	80115e8 <_malloc_r+0x2c>
 801164e:	1cc4      	adds	r4, r0, #3
 8011650:	f024 0403 	bic.w	r4, r4, #3
 8011654:	42a0      	cmp	r0, r4
 8011656:	d0e3      	beq.n	8011620 <_malloc_r+0x64>
 8011658:	1a21      	subs	r1, r4, r0
 801165a:	4630      	mov	r0, r6
 801165c:	f000 f96c 	bl	8011938 <_sbrk_r>
 8011660:	3001      	adds	r0, #1
 8011662:	d1dd      	bne.n	8011620 <_malloc_r+0x64>
 8011664:	e7cf      	b.n	8011606 <_malloc_r+0x4a>
 8011666:	bf00      	nop
 8011668:	20000230 	.word	0x20000230
 801166c:	20000234 	.word	0x20000234

08011670 <__sfputc_r>:
 8011670:	6893      	ldr	r3, [r2, #8]
 8011672:	3b01      	subs	r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	b410      	push	{r4}
 8011678:	6093      	str	r3, [r2, #8]
 801167a:	da08      	bge.n	801168e <__sfputc_r+0x1e>
 801167c:	6994      	ldr	r4, [r2, #24]
 801167e:	42a3      	cmp	r3, r4
 8011680:	db01      	blt.n	8011686 <__sfputc_r+0x16>
 8011682:	290a      	cmp	r1, #10
 8011684:	d103      	bne.n	801168e <__sfputc_r+0x1e>
 8011686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801168a:	f7fd bd99 	b.w	800f1c0 <__swbuf_r>
 801168e:	6813      	ldr	r3, [r2, #0]
 8011690:	1c58      	adds	r0, r3, #1
 8011692:	6010      	str	r0, [r2, #0]
 8011694:	7019      	strb	r1, [r3, #0]
 8011696:	4608      	mov	r0, r1
 8011698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801169c:	4770      	bx	lr

0801169e <__sfputs_r>:
 801169e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a0:	4606      	mov	r6, r0
 80116a2:	460f      	mov	r7, r1
 80116a4:	4614      	mov	r4, r2
 80116a6:	18d5      	adds	r5, r2, r3
 80116a8:	42ac      	cmp	r4, r5
 80116aa:	d101      	bne.n	80116b0 <__sfputs_r+0x12>
 80116ac:	2000      	movs	r0, #0
 80116ae:	e007      	b.n	80116c0 <__sfputs_r+0x22>
 80116b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b4:	463a      	mov	r2, r7
 80116b6:	4630      	mov	r0, r6
 80116b8:	f7ff ffda 	bl	8011670 <__sfputc_r>
 80116bc:	1c43      	adds	r3, r0, #1
 80116be:	d1f3      	bne.n	80116a8 <__sfputs_r+0xa>
 80116c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116c4 <_vfiprintf_r>:
 80116c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c8:	460d      	mov	r5, r1
 80116ca:	b09d      	sub	sp, #116	; 0x74
 80116cc:	4614      	mov	r4, r2
 80116ce:	4698      	mov	r8, r3
 80116d0:	4606      	mov	r6, r0
 80116d2:	b118      	cbz	r0, 80116dc <_vfiprintf_r+0x18>
 80116d4:	6983      	ldr	r3, [r0, #24]
 80116d6:	b90b      	cbnz	r3, 80116dc <_vfiprintf_r+0x18>
 80116d8:	f7fe fdc4 	bl	8010264 <__sinit>
 80116dc:	4b89      	ldr	r3, [pc, #548]	; (8011904 <_vfiprintf_r+0x240>)
 80116de:	429d      	cmp	r5, r3
 80116e0:	d11b      	bne.n	801171a <_vfiprintf_r+0x56>
 80116e2:	6875      	ldr	r5, [r6, #4]
 80116e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116e6:	07d9      	lsls	r1, r3, #31
 80116e8:	d405      	bmi.n	80116f6 <_vfiprintf_r+0x32>
 80116ea:	89ab      	ldrh	r3, [r5, #12]
 80116ec:	059a      	lsls	r2, r3, #22
 80116ee:	d402      	bmi.n	80116f6 <_vfiprintf_r+0x32>
 80116f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116f2:	f7ff f9c8 	bl	8010a86 <__retarget_lock_acquire_recursive>
 80116f6:	89ab      	ldrh	r3, [r5, #12]
 80116f8:	071b      	lsls	r3, r3, #28
 80116fa:	d501      	bpl.n	8011700 <_vfiprintf_r+0x3c>
 80116fc:	692b      	ldr	r3, [r5, #16]
 80116fe:	b9eb      	cbnz	r3, 801173c <_vfiprintf_r+0x78>
 8011700:	4629      	mov	r1, r5
 8011702:	4630      	mov	r0, r6
 8011704:	f7fd fdae 	bl	800f264 <__swsetup_r>
 8011708:	b1c0      	cbz	r0, 801173c <_vfiprintf_r+0x78>
 801170a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801170c:	07dc      	lsls	r4, r3, #31
 801170e:	d50e      	bpl.n	801172e <_vfiprintf_r+0x6a>
 8011710:	f04f 30ff 	mov.w	r0, #4294967295
 8011714:	b01d      	add	sp, #116	; 0x74
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	4b7b      	ldr	r3, [pc, #492]	; (8011908 <_vfiprintf_r+0x244>)
 801171c:	429d      	cmp	r5, r3
 801171e:	d101      	bne.n	8011724 <_vfiprintf_r+0x60>
 8011720:	68b5      	ldr	r5, [r6, #8]
 8011722:	e7df      	b.n	80116e4 <_vfiprintf_r+0x20>
 8011724:	4b79      	ldr	r3, [pc, #484]	; (801190c <_vfiprintf_r+0x248>)
 8011726:	429d      	cmp	r5, r3
 8011728:	bf08      	it	eq
 801172a:	68f5      	ldreq	r5, [r6, #12]
 801172c:	e7da      	b.n	80116e4 <_vfiprintf_r+0x20>
 801172e:	89ab      	ldrh	r3, [r5, #12]
 8011730:	0598      	lsls	r0, r3, #22
 8011732:	d4ed      	bmi.n	8011710 <_vfiprintf_r+0x4c>
 8011734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011736:	f7ff f9a7 	bl	8010a88 <__retarget_lock_release_recursive>
 801173a:	e7e9      	b.n	8011710 <_vfiprintf_r+0x4c>
 801173c:	2300      	movs	r3, #0
 801173e:	9309      	str	r3, [sp, #36]	; 0x24
 8011740:	2320      	movs	r3, #32
 8011742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011746:	f8cd 800c 	str.w	r8, [sp, #12]
 801174a:	2330      	movs	r3, #48	; 0x30
 801174c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011910 <_vfiprintf_r+0x24c>
 8011750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011754:	f04f 0901 	mov.w	r9, #1
 8011758:	4623      	mov	r3, r4
 801175a:	469a      	mov	sl, r3
 801175c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011760:	b10a      	cbz	r2, 8011766 <_vfiprintf_r+0xa2>
 8011762:	2a25      	cmp	r2, #37	; 0x25
 8011764:	d1f9      	bne.n	801175a <_vfiprintf_r+0x96>
 8011766:	ebba 0b04 	subs.w	fp, sl, r4
 801176a:	d00b      	beq.n	8011784 <_vfiprintf_r+0xc0>
 801176c:	465b      	mov	r3, fp
 801176e:	4622      	mov	r2, r4
 8011770:	4629      	mov	r1, r5
 8011772:	4630      	mov	r0, r6
 8011774:	f7ff ff93 	bl	801169e <__sfputs_r>
 8011778:	3001      	adds	r0, #1
 801177a:	f000 80aa 	beq.w	80118d2 <_vfiprintf_r+0x20e>
 801177e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011780:	445a      	add	r2, fp
 8011782:	9209      	str	r2, [sp, #36]	; 0x24
 8011784:	f89a 3000 	ldrb.w	r3, [sl]
 8011788:	2b00      	cmp	r3, #0
 801178a:	f000 80a2 	beq.w	80118d2 <_vfiprintf_r+0x20e>
 801178e:	2300      	movs	r3, #0
 8011790:	f04f 32ff 	mov.w	r2, #4294967295
 8011794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011798:	f10a 0a01 	add.w	sl, sl, #1
 801179c:	9304      	str	r3, [sp, #16]
 801179e:	9307      	str	r3, [sp, #28]
 80117a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117a4:	931a      	str	r3, [sp, #104]	; 0x68
 80117a6:	4654      	mov	r4, sl
 80117a8:	2205      	movs	r2, #5
 80117aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ae:	4858      	ldr	r0, [pc, #352]	; (8011910 <_vfiprintf_r+0x24c>)
 80117b0:	f7ee fd3e 	bl	8000230 <memchr>
 80117b4:	9a04      	ldr	r2, [sp, #16]
 80117b6:	b9d8      	cbnz	r0, 80117f0 <_vfiprintf_r+0x12c>
 80117b8:	06d1      	lsls	r1, r2, #27
 80117ba:	bf44      	itt	mi
 80117bc:	2320      	movmi	r3, #32
 80117be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117c2:	0713      	lsls	r3, r2, #28
 80117c4:	bf44      	itt	mi
 80117c6:	232b      	movmi	r3, #43	; 0x2b
 80117c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117cc:	f89a 3000 	ldrb.w	r3, [sl]
 80117d0:	2b2a      	cmp	r3, #42	; 0x2a
 80117d2:	d015      	beq.n	8011800 <_vfiprintf_r+0x13c>
 80117d4:	9a07      	ldr	r2, [sp, #28]
 80117d6:	4654      	mov	r4, sl
 80117d8:	2000      	movs	r0, #0
 80117da:	f04f 0c0a 	mov.w	ip, #10
 80117de:	4621      	mov	r1, r4
 80117e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117e4:	3b30      	subs	r3, #48	; 0x30
 80117e6:	2b09      	cmp	r3, #9
 80117e8:	d94e      	bls.n	8011888 <_vfiprintf_r+0x1c4>
 80117ea:	b1b0      	cbz	r0, 801181a <_vfiprintf_r+0x156>
 80117ec:	9207      	str	r2, [sp, #28]
 80117ee:	e014      	b.n	801181a <_vfiprintf_r+0x156>
 80117f0:	eba0 0308 	sub.w	r3, r0, r8
 80117f4:	fa09 f303 	lsl.w	r3, r9, r3
 80117f8:	4313      	orrs	r3, r2
 80117fa:	9304      	str	r3, [sp, #16]
 80117fc:	46a2      	mov	sl, r4
 80117fe:	e7d2      	b.n	80117a6 <_vfiprintf_r+0xe2>
 8011800:	9b03      	ldr	r3, [sp, #12]
 8011802:	1d19      	adds	r1, r3, #4
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	9103      	str	r1, [sp, #12]
 8011808:	2b00      	cmp	r3, #0
 801180a:	bfbb      	ittet	lt
 801180c:	425b      	neglt	r3, r3
 801180e:	f042 0202 	orrlt.w	r2, r2, #2
 8011812:	9307      	strge	r3, [sp, #28]
 8011814:	9307      	strlt	r3, [sp, #28]
 8011816:	bfb8      	it	lt
 8011818:	9204      	strlt	r2, [sp, #16]
 801181a:	7823      	ldrb	r3, [r4, #0]
 801181c:	2b2e      	cmp	r3, #46	; 0x2e
 801181e:	d10c      	bne.n	801183a <_vfiprintf_r+0x176>
 8011820:	7863      	ldrb	r3, [r4, #1]
 8011822:	2b2a      	cmp	r3, #42	; 0x2a
 8011824:	d135      	bne.n	8011892 <_vfiprintf_r+0x1ce>
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	1d1a      	adds	r2, r3, #4
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	9203      	str	r2, [sp, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	bfb8      	it	lt
 8011832:	f04f 33ff 	movlt.w	r3, #4294967295
 8011836:	3402      	adds	r4, #2
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011920 <_vfiprintf_r+0x25c>
 801183e:	7821      	ldrb	r1, [r4, #0]
 8011840:	2203      	movs	r2, #3
 8011842:	4650      	mov	r0, sl
 8011844:	f7ee fcf4 	bl	8000230 <memchr>
 8011848:	b140      	cbz	r0, 801185c <_vfiprintf_r+0x198>
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	eba0 000a 	sub.w	r0, r0, sl
 8011850:	fa03 f000 	lsl.w	r0, r3, r0
 8011854:	9b04      	ldr	r3, [sp, #16]
 8011856:	4303      	orrs	r3, r0
 8011858:	3401      	adds	r4, #1
 801185a:	9304      	str	r3, [sp, #16]
 801185c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011860:	482c      	ldr	r0, [pc, #176]	; (8011914 <_vfiprintf_r+0x250>)
 8011862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011866:	2206      	movs	r2, #6
 8011868:	f7ee fce2 	bl	8000230 <memchr>
 801186c:	2800      	cmp	r0, #0
 801186e:	d03f      	beq.n	80118f0 <_vfiprintf_r+0x22c>
 8011870:	4b29      	ldr	r3, [pc, #164]	; (8011918 <_vfiprintf_r+0x254>)
 8011872:	bb1b      	cbnz	r3, 80118bc <_vfiprintf_r+0x1f8>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	3307      	adds	r3, #7
 8011878:	f023 0307 	bic.w	r3, r3, #7
 801187c:	3308      	adds	r3, #8
 801187e:	9303      	str	r3, [sp, #12]
 8011880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011882:	443b      	add	r3, r7
 8011884:	9309      	str	r3, [sp, #36]	; 0x24
 8011886:	e767      	b.n	8011758 <_vfiprintf_r+0x94>
 8011888:	fb0c 3202 	mla	r2, ip, r2, r3
 801188c:	460c      	mov	r4, r1
 801188e:	2001      	movs	r0, #1
 8011890:	e7a5      	b.n	80117de <_vfiprintf_r+0x11a>
 8011892:	2300      	movs	r3, #0
 8011894:	3401      	adds	r4, #1
 8011896:	9305      	str	r3, [sp, #20]
 8011898:	4619      	mov	r1, r3
 801189a:	f04f 0c0a 	mov.w	ip, #10
 801189e:	4620      	mov	r0, r4
 80118a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118a4:	3a30      	subs	r2, #48	; 0x30
 80118a6:	2a09      	cmp	r2, #9
 80118a8:	d903      	bls.n	80118b2 <_vfiprintf_r+0x1ee>
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d0c5      	beq.n	801183a <_vfiprintf_r+0x176>
 80118ae:	9105      	str	r1, [sp, #20]
 80118b0:	e7c3      	b.n	801183a <_vfiprintf_r+0x176>
 80118b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80118b6:	4604      	mov	r4, r0
 80118b8:	2301      	movs	r3, #1
 80118ba:	e7f0      	b.n	801189e <_vfiprintf_r+0x1da>
 80118bc:	ab03      	add	r3, sp, #12
 80118be:	9300      	str	r3, [sp, #0]
 80118c0:	462a      	mov	r2, r5
 80118c2:	4b16      	ldr	r3, [pc, #88]	; (801191c <_vfiprintf_r+0x258>)
 80118c4:	a904      	add	r1, sp, #16
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7fc f962 	bl	800db90 <_printf_float>
 80118cc:	4607      	mov	r7, r0
 80118ce:	1c78      	adds	r0, r7, #1
 80118d0:	d1d6      	bne.n	8011880 <_vfiprintf_r+0x1bc>
 80118d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118d4:	07d9      	lsls	r1, r3, #31
 80118d6:	d405      	bmi.n	80118e4 <_vfiprintf_r+0x220>
 80118d8:	89ab      	ldrh	r3, [r5, #12]
 80118da:	059a      	lsls	r2, r3, #22
 80118dc:	d402      	bmi.n	80118e4 <_vfiprintf_r+0x220>
 80118de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118e0:	f7ff f8d2 	bl	8010a88 <__retarget_lock_release_recursive>
 80118e4:	89ab      	ldrh	r3, [r5, #12]
 80118e6:	065b      	lsls	r3, r3, #25
 80118e8:	f53f af12 	bmi.w	8011710 <_vfiprintf_r+0x4c>
 80118ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ee:	e711      	b.n	8011714 <_vfiprintf_r+0x50>
 80118f0:	ab03      	add	r3, sp, #12
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	462a      	mov	r2, r5
 80118f6:	4b09      	ldr	r3, [pc, #36]	; (801191c <_vfiprintf_r+0x258>)
 80118f8:	a904      	add	r1, sp, #16
 80118fa:	4630      	mov	r0, r6
 80118fc:	f7fc fbec 	bl	800e0d8 <_printf_i>
 8011900:	e7e4      	b.n	80118cc <_vfiprintf_r+0x208>
 8011902:	bf00      	nop
 8011904:	08013628 	.word	0x08013628
 8011908:	08013648 	.word	0x08013648
 801190c:	08013608 	.word	0x08013608
 8011910:	08013844 	.word	0x08013844
 8011914:	0801384e 	.word	0x0801384e
 8011918:	0800db91 	.word	0x0800db91
 801191c:	0801169f 	.word	0x0801169f
 8011920:	0801384a 	.word	0x0801384a
 8011924:	00000000 	.word	0x00000000

08011928 <nan>:
 8011928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011930 <nan+0x8>
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	00000000 	.word	0x00000000
 8011934:	7ff80000 	.word	0x7ff80000

08011938 <_sbrk_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d06      	ldr	r5, [pc, #24]	; (8011954 <_sbrk_r+0x1c>)
 801193c:	2300      	movs	r3, #0
 801193e:	4604      	mov	r4, r0
 8011940:	4608      	mov	r0, r1
 8011942:	602b      	str	r3, [r5, #0]
 8011944:	f7f4 f808 	bl	8005958 <_sbrk>
 8011948:	1c43      	adds	r3, r0, #1
 801194a:	d102      	bne.n	8011952 <_sbrk_r+0x1a>
 801194c:	682b      	ldr	r3, [r5, #0]
 801194e:	b103      	cbz	r3, 8011952 <_sbrk_r+0x1a>
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	bd38      	pop	{r3, r4, r5, pc}
 8011954:	20009594 	.word	0x20009594

08011958 <__sread>:
 8011958:	b510      	push	{r4, lr}
 801195a:	460c      	mov	r4, r1
 801195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011960:	f000 f8ee 	bl	8011b40 <_read_r>
 8011964:	2800      	cmp	r0, #0
 8011966:	bfab      	itete	ge
 8011968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801196a:	89a3      	ldrhlt	r3, [r4, #12]
 801196c:	181b      	addge	r3, r3, r0
 801196e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011972:	bfac      	ite	ge
 8011974:	6563      	strge	r3, [r4, #84]	; 0x54
 8011976:	81a3      	strhlt	r3, [r4, #12]
 8011978:	bd10      	pop	{r4, pc}

0801197a <__swrite>:
 801197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801197e:	461f      	mov	r7, r3
 8011980:	898b      	ldrh	r3, [r1, #12]
 8011982:	05db      	lsls	r3, r3, #23
 8011984:	4605      	mov	r5, r0
 8011986:	460c      	mov	r4, r1
 8011988:	4616      	mov	r6, r2
 801198a:	d505      	bpl.n	8011998 <__swrite+0x1e>
 801198c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011990:	2302      	movs	r3, #2
 8011992:	2200      	movs	r2, #0
 8011994:	f000 f8b6 	bl	8011b04 <_lseek_r>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801199e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119a2:	81a3      	strh	r3, [r4, #12]
 80119a4:	4632      	mov	r2, r6
 80119a6:	463b      	mov	r3, r7
 80119a8:	4628      	mov	r0, r5
 80119aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ae:	f000 b835 	b.w	8011a1c <_write_r>

080119b2 <__sseek>:
 80119b2:	b510      	push	{r4, lr}
 80119b4:	460c      	mov	r4, r1
 80119b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ba:	f000 f8a3 	bl	8011b04 <_lseek_r>
 80119be:	1c43      	adds	r3, r0, #1
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	bf15      	itete	ne
 80119c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119ce:	81a3      	strheq	r3, [r4, #12]
 80119d0:	bf18      	it	ne
 80119d2:	81a3      	strhne	r3, [r4, #12]
 80119d4:	bd10      	pop	{r4, pc}

080119d6 <__sclose>:
 80119d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119da:	f000 b84f 	b.w	8011a7c <_close_r>

080119de <strncmp>:
 80119de:	b510      	push	{r4, lr}
 80119e0:	b16a      	cbz	r2, 80119fe <strncmp+0x20>
 80119e2:	3901      	subs	r1, #1
 80119e4:	1884      	adds	r4, r0, r2
 80119e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80119ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d103      	bne.n	80119fa <strncmp+0x1c>
 80119f2:	42a0      	cmp	r0, r4
 80119f4:	d001      	beq.n	80119fa <strncmp+0x1c>
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d1f5      	bne.n	80119e6 <strncmp+0x8>
 80119fa:	1a98      	subs	r0, r3, r2
 80119fc:	bd10      	pop	{r4, pc}
 80119fe:	4610      	mov	r0, r2
 8011a00:	e7fc      	b.n	80119fc <strncmp+0x1e>

08011a02 <__ascii_wctomb>:
 8011a02:	b149      	cbz	r1, 8011a18 <__ascii_wctomb+0x16>
 8011a04:	2aff      	cmp	r2, #255	; 0xff
 8011a06:	bf85      	ittet	hi
 8011a08:	238a      	movhi	r3, #138	; 0x8a
 8011a0a:	6003      	strhi	r3, [r0, #0]
 8011a0c:	700a      	strbls	r2, [r1, #0]
 8011a0e:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a12:	bf98      	it	ls
 8011a14:	2001      	movls	r0, #1
 8011a16:	4770      	bx	lr
 8011a18:	4608      	mov	r0, r1
 8011a1a:	4770      	bx	lr

08011a1c <_write_r>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	4d07      	ldr	r5, [pc, #28]	; (8011a3c <_write_r+0x20>)
 8011a20:	4604      	mov	r4, r0
 8011a22:	4608      	mov	r0, r1
 8011a24:	4611      	mov	r1, r2
 8011a26:	2200      	movs	r2, #0
 8011a28:	602a      	str	r2, [r5, #0]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	f7f3 ff43 	bl	80058b6 <_write>
 8011a30:	1c43      	adds	r3, r0, #1
 8011a32:	d102      	bne.n	8011a3a <_write_r+0x1e>
 8011a34:	682b      	ldr	r3, [r5, #0]
 8011a36:	b103      	cbz	r3, 8011a3a <_write_r+0x1e>
 8011a38:	6023      	str	r3, [r4, #0]
 8011a3a:	bd38      	pop	{r3, r4, r5, pc}
 8011a3c:	20009594 	.word	0x20009594

08011a40 <__assert_func>:
 8011a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a42:	4614      	mov	r4, r2
 8011a44:	461a      	mov	r2, r3
 8011a46:	4b09      	ldr	r3, [pc, #36]	; (8011a6c <__assert_func+0x2c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	68d8      	ldr	r0, [r3, #12]
 8011a4e:	b14c      	cbz	r4, 8011a64 <__assert_func+0x24>
 8011a50:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <__assert_func+0x30>)
 8011a52:	9100      	str	r1, [sp, #0]
 8011a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a58:	4906      	ldr	r1, [pc, #24]	; (8011a74 <__assert_func+0x34>)
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	f000 f81e 	bl	8011a9c <fiprintf>
 8011a60:	f000 f880 	bl	8011b64 <abort>
 8011a64:	4b04      	ldr	r3, [pc, #16]	; (8011a78 <__assert_func+0x38>)
 8011a66:	461c      	mov	r4, r3
 8011a68:	e7f3      	b.n	8011a52 <__assert_func+0x12>
 8011a6a:	bf00      	nop
 8011a6c:	20000030 	.word	0x20000030
 8011a70:	08013855 	.word	0x08013855
 8011a74:	08013862 	.word	0x08013862
 8011a78:	08013890 	.word	0x08013890

08011a7c <_close_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d06      	ldr	r5, [pc, #24]	; (8011a98 <_close_r+0x1c>)
 8011a80:	2300      	movs	r3, #0
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	602b      	str	r3, [r5, #0]
 8011a88:	f7f3 ff31 	bl	80058ee <_close>
 8011a8c:	1c43      	adds	r3, r0, #1
 8011a8e:	d102      	bne.n	8011a96 <_close_r+0x1a>
 8011a90:	682b      	ldr	r3, [r5, #0]
 8011a92:	b103      	cbz	r3, 8011a96 <_close_r+0x1a>
 8011a94:	6023      	str	r3, [r4, #0]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}
 8011a98:	20009594 	.word	0x20009594

08011a9c <fiprintf>:
 8011a9c:	b40e      	push	{r1, r2, r3}
 8011a9e:	b503      	push	{r0, r1, lr}
 8011aa0:	4601      	mov	r1, r0
 8011aa2:	ab03      	add	r3, sp, #12
 8011aa4:	4805      	ldr	r0, [pc, #20]	; (8011abc <fiprintf+0x20>)
 8011aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aaa:	6800      	ldr	r0, [r0, #0]
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	f7ff fe09 	bl	80116c4 <_vfiprintf_r>
 8011ab2:	b002      	add	sp, #8
 8011ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ab8:	b003      	add	sp, #12
 8011aba:	4770      	bx	lr
 8011abc:	20000030 	.word	0x20000030

08011ac0 <_fstat_r>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	4d07      	ldr	r5, [pc, #28]	; (8011ae0 <_fstat_r+0x20>)
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	4608      	mov	r0, r1
 8011aca:	4611      	mov	r1, r2
 8011acc:	602b      	str	r3, [r5, #0]
 8011ace:	f7f3 ff1a 	bl	8005906 <_fstat>
 8011ad2:	1c43      	adds	r3, r0, #1
 8011ad4:	d102      	bne.n	8011adc <_fstat_r+0x1c>
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	b103      	cbz	r3, 8011adc <_fstat_r+0x1c>
 8011ada:	6023      	str	r3, [r4, #0]
 8011adc:	bd38      	pop	{r3, r4, r5, pc}
 8011ade:	bf00      	nop
 8011ae0:	20009594 	.word	0x20009594

08011ae4 <_isatty_r>:
 8011ae4:	b538      	push	{r3, r4, r5, lr}
 8011ae6:	4d06      	ldr	r5, [pc, #24]	; (8011b00 <_isatty_r+0x1c>)
 8011ae8:	2300      	movs	r3, #0
 8011aea:	4604      	mov	r4, r0
 8011aec:	4608      	mov	r0, r1
 8011aee:	602b      	str	r3, [r5, #0]
 8011af0:	f7f3 ff19 	bl	8005926 <_isatty>
 8011af4:	1c43      	adds	r3, r0, #1
 8011af6:	d102      	bne.n	8011afe <_isatty_r+0x1a>
 8011af8:	682b      	ldr	r3, [r5, #0]
 8011afa:	b103      	cbz	r3, 8011afe <_isatty_r+0x1a>
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	bd38      	pop	{r3, r4, r5, pc}
 8011b00:	20009594 	.word	0x20009594

08011b04 <_lseek_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4d07      	ldr	r5, [pc, #28]	; (8011b24 <_lseek_r+0x20>)
 8011b08:	4604      	mov	r4, r0
 8011b0a:	4608      	mov	r0, r1
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	2200      	movs	r2, #0
 8011b10:	602a      	str	r2, [r5, #0]
 8011b12:	461a      	mov	r2, r3
 8011b14:	f7f3 ff12 	bl	800593c <_lseek>
 8011b18:	1c43      	adds	r3, r0, #1
 8011b1a:	d102      	bne.n	8011b22 <_lseek_r+0x1e>
 8011b1c:	682b      	ldr	r3, [r5, #0]
 8011b1e:	b103      	cbz	r3, 8011b22 <_lseek_r+0x1e>
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	bd38      	pop	{r3, r4, r5, pc}
 8011b24:	20009594 	.word	0x20009594

08011b28 <__malloc_lock>:
 8011b28:	4801      	ldr	r0, [pc, #4]	; (8011b30 <__malloc_lock+0x8>)
 8011b2a:	f7fe bfac 	b.w	8010a86 <__retarget_lock_acquire_recursive>
 8011b2e:	bf00      	nop
 8011b30:	2000958c 	.word	0x2000958c

08011b34 <__malloc_unlock>:
 8011b34:	4801      	ldr	r0, [pc, #4]	; (8011b3c <__malloc_unlock+0x8>)
 8011b36:	f7fe bfa7 	b.w	8010a88 <__retarget_lock_release_recursive>
 8011b3a:	bf00      	nop
 8011b3c:	2000958c 	.word	0x2000958c

08011b40 <_read_r>:
 8011b40:	b538      	push	{r3, r4, r5, lr}
 8011b42:	4d07      	ldr	r5, [pc, #28]	; (8011b60 <_read_r+0x20>)
 8011b44:	4604      	mov	r4, r0
 8011b46:	4608      	mov	r0, r1
 8011b48:	4611      	mov	r1, r2
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	602a      	str	r2, [r5, #0]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	f7f3 fe94 	bl	800587c <_read>
 8011b54:	1c43      	adds	r3, r0, #1
 8011b56:	d102      	bne.n	8011b5e <_read_r+0x1e>
 8011b58:	682b      	ldr	r3, [r5, #0]
 8011b5a:	b103      	cbz	r3, 8011b5e <_read_r+0x1e>
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	20009594 	.word	0x20009594

08011b64 <abort>:
 8011b64:	b508      	push	{r3, lr}
 8011b66:	2006      	movs	r0, #6
 8011b68:	f000 f82c 	bl	8011bc4 <raise>
 8011b6c:	2001      	movs	r0, #1
 8011b6e:	f7f3 fe7b 	bl	8005868 <_exit>

08011b72 <_raise_r>:
 8011b72:	291f      	cmp	r1, #31
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4604      	mov	r4, r0
 8011b78:	460d      	mov	r5, r1
 8011b7a:	d904      	bls.n	8011b86 <_raise_r+0x14>
 8011b7c:	2316      	movs	r3, #22
 8011b7e:	6003      	str	r3, [r0, #0]
 8011b80:	f04f 30ff 	mov.w	r0, #4294967295
 8011b84:	bd38      	pop	{r3, r4, r5, pc}
 8011b86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b88:	b112      	cbz	r2, 8011b90 <_raise_r+0x1e>
 8011b8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b8e:	b94b      	cbnz	r3, 8011ba4 <_raise_r+0x32>
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 f831 	bl	8011bf8 <_getpid_r>
 8011b96:	462a      	mov	r2, r5
 8011b98:	4601      	mov	r1, r0
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ba0:	f000 b818 	b.w	8011bd4 <_kill_r>
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d00a      	beq.n	8011bbe <_raise_r+0x4c>
 8011ba8:	1c59      	adds	r1, r3, #1
 8011baa:	d103      	bne.n	8011bb4 <_raise_r+0x42>
 8011bac:	2316      	movs	r3, #22
 8011bae:	6003      	str	r3, [r0, #0]
 8011bb0:	2001      	movs	r0, #1
 8011bb2:	e7e7      	b.n	8011b84 <_raise_r+0x12>
 8011bb4:	2400      	movs	r4, #0
 8011bb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bba:	4628      	mov	r0, r5
 8011bbc:	4798      	blx	r3
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	e7e0      	b.n	8011b84 <_raise_r+0x12>
	...

08011bc4 <raise>:
 8011bc4:	4b02      	ldr	r3, [pc, #8]	; (8011bd0 <raise+0xc>)
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	6818      	ldr	r0, [r3, #0]
 8011bca:	f7ff bfd2 	b.w	8011b72 <_raise_r>
 8011bce:	bf00      	nop
 8011bd0:	20000030 	.word	0x20000030

08011bd4 <_kill_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4d07      	ldr	r5, [pc, #28]	; (8011bf4 <_kill_r+0x20>)
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4604      	mov	r4, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	4611      	mov	r1, r2
 8011be0:	602b      	str	r3, [r5, #0]
 8011be2:	f7f3 fe31 	bl	8005848 <_kill>
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	d102      	bne.n	8011bf0 <_kill_r+0x1c>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	b103      	cbz	r3, 8011bf0 <_kill_r+0x1c>
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	bf00      	nop
 8011bf4:	20009594 	.word	0x20009594

08011bf8 <_getpid_r>:
 8011bf8:	f7f3 be1e 	b.w	8005838 <_getpid>

08011bfc <round>:
 8011bfc:	ec51 0b10 	vmov	r0, r1, d0
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011c06:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011c0a:	2c13      	cmp	r4, #19
 8011c0c:	ee10 2a10 	vmov	r2, s0
 8011c10:	460b      	mov	r3, r1
 8011c12:	dc19      	bgt.n	8011c48 <round+0x4c>
 8011c14:	2c00      	cmp	r4, #0
 8011c16:	da09      	bge.n	8011c2c <round+0x30>
 8011c18:	3401      	adds	r4, #1
 8011c1a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011c1e:	d103      	bne.n	8011c28 <round+0x2c>
 8011c20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011c24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011c28:	2100      	movs	r1, #0
 8011c2a:	e028      	b.n	8011c7e <round+0x82>
 8011c2c:	4d15      	ldr	r5, [pc, #84]	; (8011c84 <round+0x88>)
 8011c2e:	4125      	asrs	r5, r4
 8011c30:	ea01 0605 	and.w	r6, r1, r5
 8011c34:	4332      	orrs	r2, r6
 8011c36:	d00e      	beq.n	8011c56 <round+0x5a>
 8011c38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011c3c:	fa42 f404 	asr.w	r4, r2, r4
 8011c40:	4423      	add	r3, r4
 8011c42:	ea23 0305 	bic.w	r3, r3, r5
 8011c46:	e7ef      	b.n	8011c28 <round+0x2c>
 8011c48:	2c33      	cmp	r4, #51	; 0x33
 8011c4a:	dd07      	ble.n	8011c5c <round+0x60>
 8011c4c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011c50:	d101      	bne.n	8011c56 <round+0x5a>
 8011c52:	f7ee fb43 	bl	80002dc <__adddf3>
 8011c56:	ec41 0b10 	vmov	d0, r0, r1
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
 8011c5c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011c60:	f04f 35ff 	mov.w	r5, #4294967295
 8011c64:	40f5      	lsrs	r5, r6
 8011c66:	4228      	tst	r0, r5
 8011c68:	d0f5      	beq.n	8011c56 <round+0x5a>
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011c70:	fa01 f404 	lsl.w	r4, r1, r4
 8011c74:	1912      	adds	r2, r2, r4
 8011c76:	bf28      	it	cs
 8011c78:	185b      	addcs	r3, r3, r1
 8011c7a:	ea22 0105 	bic.w	r1, r2, r5
 8011c7e:	4608      	mov	r0, r1
 8011c80:	4619      	mov	r1, r3
 8011c82:	e7e8      	b.n	8011c56 <round+0x5a>
 8011c84:	000fffff 	.word	0x000fffff

08011c88 <fmaxf>:
 8011c88:	b508      	push	{r3, lr}
 8011c8a:	ed2d 8b02 	vpush	{d8}
 8011c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8011c92:	eef0 8a60 	vmov.f32	s17, s1
 8011c96:	f000 f82d 	bl	8011cf4 <__fpclassifyf>
 8011c9a:	b148      	cbz	r0, 8011cb0 <fmaxf+0x28>
 8011c9c:	eeb0 0a68 	vmov.f32	s0, s17
 8011ca0:	f000 f828 	bl	8011cf4 <__fpclassifyf>
 8011ca4:	b130      	cbz	r0, 8011cb4 <fmaxf+0x2c>
 8011ca6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	dc01      	bgt.n	8011cb4 <fmaxf+0x2c>
 8011cb0:	eeb0 8a68 	vmov.f32	s16, s17
 8011cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8011cb8:	ecbd 8b02 	vpop	{d8}
 8011cbc:	bd08      	pop	{r3, pc}

08011cbe <fminf>:
 8011cbe:	b508      	push	{r3, lr}
 8011cc0:	ed2d 8b02 	vpush	{d8}
 8011cc4:	eeb0 8a40 	vmov.f32	s16, s0
 8011cc8:	eef0 8a60 	vmov.f32	s17, s1
 8011ccc:	f000 f812 	bl	8011cf4 <__fpclassifyf>
 8011cd0:	b148      	cbz	r0, 8011ce6 <fminf+0x28>
 8011cd2:	eeb0 0a68 	vmov.f32	s0, s17
 8011cd6:	f000 f80d 	bl	8011cf4 <__fpclassifyf>
 8011cda:	b130      	cbz	r0, 8011cea <fminf+0x2c>
 8011cdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	d401      	bmi.n	8011cea <fminf+0x2c>
 8011ce6:	eeb0 8a68 	vmov.f32	s16, s17
 8011cea:	eeb0 0a48 	vmov.f32	s0, s16
 8011cee:	ecbd 8b02 	vpop	{d8}
 8011cf2:	bd08      	pop	{r3, pc}

08011cf4 <__fpclassifyf>:
 8011cf4:	ee10 3a10 	vmov	r3, s0
 8011cf8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011cfc:	d00d      	beq.n	8011d1a <__fpclassifyf+0x26>
 8011cfe:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011d02:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011d06:	d30a      	bcc.n	8011d1e <__fpclassifyf+0x2a>
 8011d08:	4b07      	ldr	r3, [pc, #28]	; (8011d28 <__fpclassifyf+0x34>)
 8011d0a:	1e42      	subs	r2, r0, #1
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d908      	bls.n	8011d22 <__fpclassifyf+0x2e>
 8011d10:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011d14:	4258      	negs	r0, r3
 8011d16:	4158      	adcs	r0, r3
 8011d18:	4770      	bx	lr
 8011d1a:	2002      	movs	r0, #2
 8011d1c:	4770      	bx	lr
 8011d1e:	2004      	movs	r0, #4
 8011d20:	4770      	bx	lr
 8011d22:	2003      	movs	r0, #3
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	007ffffe 	.word	0x007ffffe
 8011d2c:	00000000 	.word	0x00000000

08011d30 <exp>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	ed2d 8b02 	vpush	{d8}
 8011d36:	ec55 4b10 	vmov	r4, r5, d0
 8011d3a:	f000 f899 	bl	8011e70 <__ieee754_exp>
 8011d3e:	4b22      	ldr	r3, [pc, #136]	; (8011dc8 <exp+0x98>)
 8011d40:	eeb0 8a40 	vmov.f32	s16, s0
 8011d44:	eef0 8a60 	vmov.f32	s17, s1
 8011d48:	f993 3000 	ldrsb.w	r3, [r3]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	d012      	beq.n	8011d76 <exp+0x46>
 8011d50:	ec45 4b10 	vmov	d0, r4, r5
 8011d54:	f000 fa8b 	bl	801226e <finite>
 8011d58:	b168      	cbz	r0, 8011d76 <exp+0x46>
 8011d5a:	a313      	add	r3, pc, #76	; (adr r3, 8011da8 <exp+0x78>)
 8011d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d60:	4620      	mov	r0, r4
 8011d62:	4629      	mov	r1, r5
 8011d64:	f7ee ff00 	bl	8000b68 <__aeabi_dcmpgt>
 8011d68:	b160      	cbz	r0, 8011d84 <exp+0x54>
 8011d6a:	f7fb fe31 	bl	800d9d0 <__errno>
 8011d6e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011db0 <exp+0x80>
 8011d72:	2322      	movs	r3, #34	; 0x22
 8011d74:	6003      	str	r3, [r0, #0]
 8011d76:	eeb0 0a48 	vmov.f32	s0, s16
 8011d7a:	eef0 0a68 	vmov.f32	s1, s17
 8011d7e:	ecbd 8b02 	vpop	{d8}
 8011d82:	bd38      	pop	{r3, r4, r5, pc}
 8011d84:	a30c      	add	r3, pc, #48	; (adr r3, 8011db8 <exp+0x88>)
 8011d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	f7ee fecd 	bl	8000b2c <__aeabi_dcmplt>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d0ef      	beq.n	8011d76 <exp+0x46>
 8011d96:	f7fb fe1b 	bl	800d9d0 <__errno>
 8011d9a:	2322      	movs	r3, #34	; 0x22
 8011d9c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011dc0 <exp+0x90>
 8011da0:	6003      	str	r3, [r0, #0]
 8011da2:	e7e8      	b.n	8011d76 <exp+0x46>
 8011da4:	f3af 8000 	nop.w
 8011da8:	fefa39ef 	.word	0xfefa39ef
 8011dac:	40862e42 	.word	0x40862e42
 8011db0:	00000000 	.word	0x00000000
 8011db4:	7ff00000 	.word	0x7ff00000
 8011db8:	d52d3051 	.word	0xd52d3051
 8011dbc:	c0874910 	.word	0xc0874910
	...
 8011dc8:	20000204 	.word	0x20000204

08011dcc <fmodf>:
 8011dcc:	b508      	push	{r3, lr}
 8011dce:	ed2d 8b02 	vpush	{d8}
 8011dd2:	eef0 8a40 	vmov.f32	s17, s0
 8011dd6:	eeb0 8a60 	vmov.f32	s16, s1
 8011dda:	f000 f9c3 	bl	8012164 <__ieee754_fmodf>
 8011dde:	4b0f      	ldr	r3, [pc, #60]	; (8011e1c <fmodf+0x50>)
 8011de0:	f993 3000 	ldrsb.w	r3, [r3]
 8011de4:	3301      	adds	r3, #1
 8011de6:	d016      	beq.n	8011e16 <fmodf+0x4a>
 8011de8:	eeb4 8a48 	vcmp.f32	s16, s16
 8011dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df0:	d611      	bvs.n	8011e16 <fmodf+0x4a>
 8011df2:	eef4 8a68 	vcmp.f32	s17, s17
 8011df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfa:	d60c      	bvs.n	8011e16 <fmodf+0x4a>
 8011dfc:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011e20 <fmodf+0x54>
 8011e00:	eeb4 8a68 	vcmp.f32	s16, s17
 8011e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e08:	d105      	bne.n	8011e16 <fmodf+0x4a>
 8011e0a:	f7fb fde1 	bl	800d9d0 <__errno>
 8011e0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e12:	2321      	movs	r3, #33	; 0x21
 8011e14:	6003      	str	r3, [r0, #0]
 8011e16:	ecbd 8b02 	vpop	{d8}
 8011e1a:	bd08      	pop	{r3, pc}
 8011e1c:	20000204 	.word	0x20000204
 8011e20:	00000000 	.word	0x00000000

08011e24 <sqrtf>:
 8011e24:	b508      	push	{r3, lr}
 8011e26:	ed2d 8b02 	vpush	{d8}
 8011e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8011e2e:	f000 fa1b 	bl	8012268 <__ieee754_sqrtf>
 8011e32:	4b0d      	ldr	r3, [pc, #52]	; (8011e68 <sqrtf+0x44>)
 8011e34:	f993 3000 	ldrsb.w	r3, [r3]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	d011      	beq.n	8011e60 <sqrtf+0x3c>
 8011e3c:	eeb4 8a48 	vcmp.f32	s16, s16
 8011e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e44:	d60c      	bvs.n	8011e60 <sqrtf+0x3c>
 8011e46:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011e6c <sqrtf+0x48>
 8011e4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e52:	d505      	bpl.n	8011e60 <sqrtf+0x3c>
 8011e54:	f7fb fdbc 	bl	800d9d0 <__errno>
 8011e58:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e5c:	2321      	movs	r3, #33	; 0x21
 8011e5e:	6003      	str	r3, [r0, #0]
 8011e60:	ecbd 8b02 	vpop	{d8}
 8011e64:	bd08      	pop	{r3, pc}
 8011e66:	bf00      	nop
 8011e68:	20000204 	.word	0x20000204
 8011e6c:	00000000 	.word	0x00000000

08011e70 <__ieee754_exp>:
 8011e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e74:	ec55 4b10 	vmov	r4, r5, d0
 8011e78:	49b1      	ldr	r1, [pc, #708]	; (8012140 <__ieee754_exp+0x2d0>)
 8011e7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e7e:	428b      	cmp	r3, r1
 8011e80:	ed2d 8b04 	vpush	{d8-d9}
 8011e84:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011e88:	d937      	bls.n	8011efa <__ieee754_exp+0x8a>
 8011e8a:	49ae      	ldr	r1, [pc, #696]	; (8012144 <__ieee754_exp+0x2d4>)
 8011e8c:	428b      	cmp	r3, r1
 8011e8e:	d916      	bls.n	8011ebe <__ieee754_exp+0x4e>
 8011e90:	ee10 3a10 	vmov	r3, s0
 8011e94:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	d009      	beq.n	8011eb0 <__ieee754_exp+0x40>
 8011e9c:	ee10 2a10 	vmov	r2, s0
 8011ea0:	462b      	mov	r3, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee fa19 	bl	80002dc <__adddf3>
 8011eaa:	4604      	mov	r4, r0
 8011eac:	460d      	mov	r5, r1
 8011eae:	e000      	b.n	8011eb2 <__ieee754_exp+0x42>
 8011eb0:	bb06      	cbnz	r6, 8011ef4 <__ieee754_exp+0x84>
 8011eb2:	ecbd 8b04 	vpop	{d8-d9}
 8011eb6:	ec45 4b10 	vmov	d0, r4, r5
 8011eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ebe:	a38a      	add	r3, pc, #552	; (adr r3, 80120e8 <__ieee754_exp+0x278>)
 8011ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec4:	ee10 0a10 	vmov	r0, s0
 8011ec8:	4629      	mov	r1, r5
 8011eca:	f7ee fe4d 	bl	8000b68 <__aeabi_dcmpgt>
 8011ece:	b138      	cbz	r0, 8011ee0 <__ieee754_exp+0x70>
 8011ed0:	a387      	add	r3, pc, #540	; (adr r3, 80120f0 <__ieee754_exp+0x280>)
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	4610      	mov	r0, r2
 8011ed8:	4619      	mov	r1, r3
 8011eda:	f7ee fbb5 	bl	8000648 <__aeabi_dmul>
 8011ede:	e7e4      	b.n	8011eaa <__ieee754_exp+0x3a>
 8011ee0:	a385      	add	r3, pc, #532	; (adr r3, 80120f8 <__ieee754_exp+0x288>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	4629      	mov	r1, r5
 8011eea:	f7ee fe1f 	bl	8000b2c <__aeabi_dcmplt>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	f000 8087 	beq.w	8012002 <__ieee754_exp+0x192>
 8011ef4:	2400      	movs	r4, #0
 8011ef6:	2500      	movs	r5, #0
 8011ef8:	e7db      	b.n	8011eb2 <__ieee754_exp+0x42>
 8011efa:	4a93      	ldr	r2, [pc, #588]	; (8012148 <__ieee754_exp+0x2d8>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	f240 80ac 	bls.w	801205a <__ieee754_exp+0x1ea>
 8011f02:	4a92      	ldr	r2, [pc, #584]	; (801214c <__ieee754_exp+0x2dc>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	d87c      	bhi.n	8012002 <__ieee754_exp+0x192>
 8011f08:	4b91      	ldr	r3, [pc, #580]	; (8012150 <__ieee754_exp+0x2e0>)
 8011f0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	ee10 0a10 	vmov	r0, s0
 8011f16:	4629      	mov	r1, r5
 8011f18:	f7ee f9de 	bl	80002d8 <__aeabi_dsub>
 8011f1c:	4b8d      	ldr	r3, [pc, #564]	; (8012154 <__ieee754_exp+0x2e4>)
 8011f1e:	00f7      	lsls	r7, r6, #3
 8011f20:	443b      	add	r3, r7
 8011f22:	ed93 7b00 	vldr	d7, [r3]
 8011f26:	f1c6 0a01 	rsb	sl, r6, #1
 8011f2a:	4680      	mov	r8, r0
 8011f2c:	4689      	mov	r9, r1
 8011f2e:	ebaa 0a06 	sub.w	sl, sl, r6
 8011f32:	eeb0 8a47 	vmov.f32	s16, s14
 8011f36:	eef0 8a67 	vmov.f32	s17, s15
 8011f3a:	ec53 2b18 	vmov	r2, r3, d8
 8011f3e:	4640      	mov	r0, r8
 8011f40:	4649      	mov	r1, r9
 8011f42:	f7ee f9c9 	bl	80002d8 <__aeabi_dsub>
 8011f46:	4604      	mov	r4, r0
 8011f48:	460d      	mov	r5, r1
 8011f4a:	4622      	mov	r2, r4
 8011f4c:	462b      	mov	r3, r5
 8011f4e:	4620      	mov	r0, r4
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7ee fb79 	bl	8000648 <__aeabi_dmul>
 8011f56:	a36a      	add	r3, pc, #424	; (adr r3, 8012100 <__ieee754_exp+0x290>)
 8011f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	460f      	mov	r7, r1
 8011f60:	f7ee fb72 	bl	8000648 <__aeabi_dmul>
 8011f64:	a368      	add	r3, pc, #416	; (adr r3, 8012108 <__ieee754_exp+0x298>)
 8011f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6a:	f7ee f9b5 	bl	80002d8 <__aeabi_dsub>
 8011f6e:	4632      	mov	r2, r6
 8011f70:	463b      	mov	r3, r7
 8011f72:	f7ee fb69 	bl	8000648 <__aeabi_dmul>
 8011f76:	a366      	add	r3, pc, #408	; (adr r3, 8012110 <__ieee754_exp+0x2a0>)
 8011f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7c:	f7ee f9ae 	bl	80002dc <__adddf3>
 8011f80:	4632      	mov	r2, r6
 8011f82:	463b      	mov	r3, r7
 8011f84:	f7ee fb60 	bl	8000648 <__aeabi_dmul>
 8011f88:	a363      	add	r3, pc, #396	; (adr r3, 8012118 <__ieee754_exp+0x2a8>)
 8011f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8e:	f7ee f9a3 	bl	80002d8 <__aeabi_dsub>
 8011f92:	4632      	mov	r2, r6
 8011f94:	463b      	mov	r3, r7
 8011f96:	f7ee fb57 	bl	8000648 <__aeabi_dmul>
 8011f9a:	a361      	add	r3, pc, #388	; (adr r3, 8012120 <__ieee754_exp+0x2b0>)
 8011f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa0:	f7ee f99c 	bl	80002dc <__adddf3>
 8011fa4:	4632      	mov	r2, r6
 8011fa6:	463b      	mov	r3, r7
 8011fa8:	f7ee fb4e 	bl	8000648 <__aeabi_dmul>
 8011fac:	4602      	mov	r2, r0
 8011fae:	460b      	mov	r3, r1
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	f7ee f990 	bl	80002d8 <__aeabi_dsub>
 8011fb8:	4602      	mov	r2, r0
 8011fba:	460b      	mov	r3, r1
 8011fbc:	4606      	mov	r6, r0
 8011fbe:	460f      	mov	r7, r1
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	f7ee fb40 	bl	8000648 <__aeabi_dmul>
 8011fc8:	ec41 0b19 	vmov	d9, r0, r1
 8011fcc:	f1ba 0f00 	cmp.w	sl, #0
 8011fd0:	d15d      	bne.n	801208e <__ieee754_exp+0x21e>
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fd8:	4630      	mov	r0, r6
 8011fda:	4639      	mov	r1, r7
 8011fdc:	f7ee f97c 	bl	80002d8 <__aeabi_dsub>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	ec51 0b19 	vmov	r0, r1, d9
 8011fe8:	f7ee fc58 	bl	800089c <__aeabi_ddiv>
 8011fec:	4622      	mov	r2, r4
 8011fee:	462b      	mov	r3, r5
 8011ff0:	f7ee f972 	bl	80002d8 <__aeabi_dsub>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	4957      	ldr	r1, [pc, #348]	; (8012158 <__ieee754_exp+0x2e8>)
 8011ffc:	f7ee f96c 	bl	80002d8 <__aeabi_dsub>
 8012000:	e753      	b.n	8011eaa <__ieee754_exp+0x3a>
 8012002:	4856      	ldr	r0, [pc, #344]	; (801215c <__ieee754_exp+0x2ec>)
 8012004:	a348      	add	r3, pc, #288	; (adr r3, 8012128 <__ieee754_exp+0x2b8>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801200e:	4629      	mov	r1, r5
 8012010:	4620      	mov	r0, r4
 8012012:	f7ee fb19 	bl	8000648 <__aeabi_dmul>
 8012016:	e9d6 2300 	ldrd	r2, r3, [r6]
 801201a:	f7ee f95f 	bl	80002dc <__adddf3>
 801201e:	f7ee fdc3 	bl	8000ba8 <__aeabi_d2iz>
 8012022:	4682      	mov	sl, r0
 8012024:	f7ee faa6 	bl	8000574 <__aeabi_i2d>
 8012028:	a341      	add	r3, pc, #260	; (adr r3, 8012130 <__ieee754_exp+0x2c0>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	4606      	mov	r6, r0
 8012030:	460f      	mov	r7, r1
 8012032:	f7ee fb09 	bl	8000648 <__aeabi_dmul>
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4620      	mov	r0, r4
 801203c:	4629      	mov	r1, r5
 801203e:	f7ee f94b 	bl	80002d8 <__aeabi_dsub>
 8012042:	a33d      	add	r3, pc, #244	; (adr r3, 8012138 <__ieee754_exp+0x2c8>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	4680      	mov	r8, r0
 801204a:	4689      	mov	r9, r1
 801204c:	4630      	mov	r0, r6
 801204e:	4639      	mov	r1, r7
 8012050:	f7ee fafa 	bl	8000648 <__aeabi_dmul>
 8012054:	ec41 0b18 	vmov	d8, r0, r1
 8012058:	e76f      	b.n	8011f3a <__ieee754_exp+0xca>
 801205a:	4a41      	ldr	r2, [pc, #260]	; (8012160 <__ieee754_exp+0x2f0>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d811      	bhi.n	8012084 <__ieee754_exp+0x214>
 8012060:	a323      	add	r3, pc, #140	; (adr r3, 80120f0 <__ieee754_exp+0x280>)
 8012062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012066:	ee10 0a10 	vmov	r0, s0
 801206a:	4629      	mov	r1, r5
 801206c:	f7ee f936 	bl	80002dc <__adddf3>
 8012070:	4b39      	ldr	r3, [pc, #228]	; (8012158 <__ieee754_exp+0x2e8>)
 8012072:	2200      	movs	r2, #0
 8012074:	f7ee fd78 	bl	8000b68 <__aeabi_dcmpgt>
 8012078:	b138      	cbz	r0, 801208a <__ieee754_exp+0x21a>
 801207a:	4b37      	ldr	r3, [pc, #220]	; (8012158 <__ieee754_exp+0x2e8>)
 801207c:	2200      	movs	r2, #0
 801207e:	4620      	mov	r0, r4
 8012080:	4629      	mov	r1, r5
 8012082:	e710      	b.n	8011ea6 <__ieee754_exp+0x36>
 8012084:	f04f 0a00 	mov.w	sl, #0
 8012088:	e75f      	b.n	8011f4a <__ieee754_exp+0xda>
 801208a:	4682      	mov	sl, r0
 801208c:	e75d      	b.n	8011f4a <__ieee754_exp+0xda>
 801208e:	4632      	mov	r2, r6
 8012090:	463b      	mov	r3, r7
 8012092:	2000      	movs	r0, #0
 8012094:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012098:	f7ee f91e 	bl	80002d8 <__aeabi_dsub>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	ec51 0b19 	vmov	r0, r1, d9
 80120a4:	f7ee fbfa 	bl	800089c <__aeabi_ddiv>
 80120a8:	4602      	mov	r2, r0
 80120aa:	460b      	mov	r3, r1
 80120ac:	ec51 0b18 	vmov	r0, r1, d8
 80120b0:	f7ee f912 	bl	80002d8 <__aeabi_dsub>
 80120b4:	4642      	mov	r2, r8
 80120b6:	464b      	mov	r3, r9
 80120b8:	f7ee f90e 	bl	80002d8 <__aeabi_dsub>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	2000      	movs	r0, #0
 80120c2:	4925      	ldr	r1, [pc, #148]	; (8012158 <__ieee754_exp+0x2e8>)
 80120c4:	f7ee f908 	bl	80002d8 <__aeabi_dsub>
 80120c8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80120cc:	4592      	cmp	sl, r2
 80120ce:	db02      	blt.n	80120d6 <__ieee754_exp+0x266>
 80120d0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80120d4:	e6e9      	b.n	8011eaa <__ieee754_exp+0x3a>
 80120d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80120da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80120de:	2200      	movs	r2, #0
 80120e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80120e4:	e6f9      	b.n	8011eda <__ieee754_exp+0x6a>
 80120e6:	bf00      	nop
 80120e8:	fefa39ef 	.word	0xfefa39ef
 80120ec:	40862e42 	.word	0x40862e42
 80120f0:	8800759c 	.word	0x8800759c
 80120f4:	7e37e43c 	.word	0x7e37e43c
 80120f8:	d52d3051 	.word	0xd52d3051
 80120fc:	c0874910 	.word	0xc0874910
 8012100:	72bea4d0 	.word	0x72bea4d0
 8012104:	3e663769 	.word	0x3e663769
 8012108:	c5d26bf1 	.word	0xc5d26bf1
 801210c:	3ebbbd41 	.word	0x3ebbbd41
 8012110:	af25de2c 	.word	0xaf25de2c
 8012114:	3f11566a 	.word	0x3f11566a
 8012118:	16bebd93 	.word	0x16bebd93
 801211c:	3f66c16c 	.word	0x3f66c16c
 8012120:	5555553e 	.word	0x5555553e
 8012124:	3fc55555 	.word	0x3fc55555
 8012128:	652b82fe 	.word	0x652b82fe
 801212c:	3ff71547 	.word	0x3ff71547
 8012130:	fee00000 	.word	0xfee00000
 8012134:	3fe62e42 	.word	0x3fe62e42
 8012138:	35793c76 	.word	0x35793c76
 801213c:	3dea39ef 	.word	0x3dea39ef
 8012140:	40862e41 	.word	0x40862e41
 8012144:	7fefffff 	.word	0x7fefffff
 8012148:	3fd62e42 	.word	0x3fd62e42
 801214c:	3ff0a2b1 	.word	0x3ff0a2b1
 8012150:	080138a8 	.word	0x080138a8
 8012154:	080138b8 	.word	0x080138b8
 8012158:	3ff00000 	.word	0x3ff00000
 801215c:	08013898 	.word	0x08013898
 8012160:	3e2fffff 	.word	0x3e2fffff

08012164 <__ieee754_fmodf>:
 8012164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012166:	ee10 6a90 	vmov	r6, s1
 801216a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801216e:	d009      	beq.n	8012184 <__ieee754_fmodf+0x20>
 8012170:	ee10 2a10 	vmov	r2, s0
 8012174:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012178:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801217c:	da02      	bge.n	8012184 <__ieee754_fmodf+0x20>
 801217e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012182:	dd04      	ble.n	801218e <__ieee754_fmodf+0x2a>
 8012184:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012188:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801218e:	42ab      	cmp	r3, r5
 8012190:	dbfc      	blt.n	801218c <__ieee754_fmodf+0x28>
 8012192:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8012196:	d106      	bne.n	80121a6 <__ieee754_fmodf+0x42>
 8012198:	4a32      	ldr	r2, [pc, #200]	; (8012264 <__ieee754_fmodf+0x100>)
 801219a:	0fe3      	lsrs	r3, r4, #31
 801219c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121a0:	ed93 0a00 	vldr	s0, [r3]
 80121a4:	e7f2      	b.n	801218c <__ieee754_fmodf+0x28>
 80121a6:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80121aa:	d13f      	bne.n	801222c <__ieee754_fmodf+0xc8>
 80121ac:	0219      	lsls	r1, r3, #8
 80121ae:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80121b2:	2900      	cmp	r1, #0
 80121b4:	dc37      	bgt.n	8012226 <__ieee754_fmodf+0xc2>
 80121b6:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80121ba:	d13d      	bne.n	8012238 <__ieee754_fmodf+0xd4>
 80121bc:	022f      	lsls	r7, r5, #8
 80121be:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80121c2:	2f00      	cmp	r7, #0
 80121c4:	da35      	bge.n	8012232 <__ieee754_fmodf+0xce>
 80121c6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80121ca:	bfbb      	ittet	lt
 80121cc:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80121d0:	1a12      	sublt	r2, r2, r0
 80121d2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80121d6:	4093      	lsllt	r3, r2
 80121d8:	bfa8      	it	ge
 80121da:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80121de:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80121e2:	bfb5      	itete	lt
 80121e4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80121e8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80121ec:	1a52      	sublt	r2, r2, r1
 80121ee:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80121f2:	bfb8      	it	lt
 80121f4:	4095      	lsllt	r5, r2
 80121f6:	1a40      	subs	r0, r0, r1
 80121f8:	1b5a      	subs	r2, r3, r5
 80121fa:	bb00      	cbnz	r0, 801223e <__ieee754_fmodf+0xda>
 80121fc:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8012200:	bf38      	it	cc
 8012202:	4613      	movcc	r3, r2
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0c7      	beq.n	8012198 <__ieee754_fmodf+0x34>
 8012208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801220c:	db1f      	blt.n	801224e <__ieee754_fmodf+0xea>
 801220e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012212:	db1f      	blt.n	8012254 <__ieee754_fmodf+0xf0>
 8012214:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012218:	317f      	adds	r1, #127	; 0x7f
 801221a:	4323      	orrs	r3, r4
 801221c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012220:	ee00 3a10 	vmov	s0, r3
 8012224:	e7b2      	b.n	801218c <__ieee754_fmodf+0x28>
 8012226:	3801      	subs	r0, #1
 8012228:	0049      	lsls	r1, r1, #1
 801222a:	e7c2      	b.n	80121b2 <__ieee754_fmodf+0x4e>
 801222c:	15d8      	asrs	r0, r3, #23
 801222e:	387f      	subs	r0, #127	; 0x7f
 8012230:	e7c1      	b.n	80121b6 <__ieee754_fmodf+0x52>
 8012232:	3901      	subs	r1, #1
 8012234:	007f      	lsls	r7, r7, #1
 8012236:	e7c4      	b.n	80121c2 <__ieee754_fmodf+0x5e>
 8012238:	15e9      	asrs	r1, r5, #23
 801223a:	397f      	subs	r1, #127	; 0x7f
 801223c:	e7c3      	b.n	80121c6 <__ieee754_fmodf+0x62>
 801223e:	2a00      	cmp	r2, #0
 8012240:	da02      	bge.n	8012248 <__ieee754_fmodf+0xe4>
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	3801      	subs	r0, #1
 8012246:	e7d7      	b.n	80121f8 <__ieee754_fmodf+0x94>
 8012248:	d0a6      	beq.n	8012198 <__ieee754_fmodf+0x34>
 801224a:	0053      	lsls	r3, r2, #1
 801224c:	e7fa      	b.n	8012244 <__ieee754_fmodf+0xe0>
 801224e:	005b      	lsls	r3, r3, #1
 8012250:	3901      	subs	r1, #1
 8012252:	e7d9      	b.n	8012208 <__ieee754_fmodf+0xa4>
 8012254:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012258:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801225c:	3182      	adds	r1, #130	; 0x82
 801225e:	410b      	asrs	r3, r1
 8012260:	4323      	orrs	r3, r4
 8012262:	e7dd      	b.n	8012220 <__ieee754_fmodf+0xbc>
 8012264:	080138c8 	.word	0x080138c8

08012268 <__ieee754_sqrtf>:
 8012268:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801226c:	4770      	bx	lr

0801226e <finite>:
 801226e:	b082      	sub	sp, #8
 8012270:	ed8d 0b00 	vstr	d0, [sp]
 8012274:	9801      	ldr	r0, [sp, #4]
 8012276:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801227a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801227e:	0fc0      	lsrs	r0, r0, #31
 8012280:	b002      	add	sp, #8
 8012282:	4770      	bx	lr

08012284 <_init>:
 8012284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012286:	bf00      	nop
 8012288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801228a:	bc08      	pop	{r3}
 801228c:	469e      	mov	lr, r3
 801228e:	4770      	bx	lr

08012290 <_fini>:
 8012290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012292:	bf00      	nop
 8012294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012296:	bc08      	pop	{r3}
 8012298:	469e      	mov	lr, r3
 801229a:	4770      	bx	lr
