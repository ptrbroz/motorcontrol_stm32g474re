
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001938  0800e298  0800e298  0001e298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbd0  0800fbd0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbd8  0800fbd8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbd8  0800fbd8  0001fbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbdc  0800fbdc  0001fbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800fbe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c288  20000208  0800fde4  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000c490  0800fde4  0002c490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fc97  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d17  00000000  00000000  0005fecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000206cb  00000000  00000000  00066be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  000872b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003f48  00000000  00000000  000889a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de2a  00000000  00000000  0008c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031a9b  00000000  00000000  000ba71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011b426  00000000  00000000  000ec1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002075db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006620  00000000  00000000  00207630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e280 	.word	0x0800e280

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800e280 	.word	0x0800e280

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	2400      	movs	r4, #0
{
 8001040:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	4621      	mov	r1, r4
 8001044:	2220      	movs	r2, #32
 8001046:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001048:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800104c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	f008 fd6f 	bl	8009b30 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001054:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001058:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	2204      	movs	r2, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800105e:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001060:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001066:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	e9c0 5100 	strd	r5, r1, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800107c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	6182      	str	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	f003 fd70 	bl	8004b68 <HAL_ADC_Init>
 8001088:	b9c8      	cbnz	r0, 80010be <MX_ADC1_Init+0x82>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	a901      	add	r1, sp, #4
 8001092:	f004 fcaf 	bl	80059f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_6;
 800109c:	2306      	movs	r3, #6
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010a2:	2400      	movs	r4, #0
 80010a4:	257f      	movs	r5, #127	; 0x7f
 80010a6:	2204      	movs	r2, #4
 80010a8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_6;
 80010ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80010b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	f004 f882 	bl	80051bc <HAL_ADC_ConfigChannel>
 80010b8:	b920      	cbnz	r0, 80010c4 <MX_ADC1_Init+0x88>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	b00d      	add	sp, #52	; 0x34
 80010bc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010be:	f002 ff33 	bl	8003f28 <Error_Handler>
 80010c2:	e7e2      	b.n	800108a <MX_ADC1_Init+0x4e>
    Error_Handler();
 80010c4:	f002 ff30 	bl	8003f28 <Error_Handler>
}
 80010c8:	b00d      	add	sp, #52	; 0x34
 80010ca:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010cc:	f002 ff2c 	bl	8003f28 <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x5c>
 80010d2:	bf00      	nop
 80010d4:	20003190 	.word	0x20003190
 80010d8:	19200040 	.word	0x19200040
 80010dc:	00000000 	.word	0x00000000

080010e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4668      	mov	r0, sp
 80010ea:	f008 fd21 	bl	8009b30 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC2_Init+0x88>)
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC2_Init+0x8c>)
 80010f2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010f8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	2104      	movs	r1, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 80010fe:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001100:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	6181      	str	r1, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001120:	f003 fd22 	bl	8004b68 <HAL_ADC_Init>
 8001124:	b998      	cbnz	r0, 800114e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001126:	a30e      	add	r3, pc, #56	; (adr r3, 8001160 <MX_ADC2_Init+0x80>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	2400      	movs	r4, #0
 800112e:	e9cd 2300 	strd	r2, r3, [sp]
 8001132:	257f      	movs	r5, #127	; 0x7f
 8001134:	2204      	movs	r2, #4
 8001136:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC2_Init+0x88>)
 800113a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_7;
 800113c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001140:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	f004 f83a 	bl	80051bc <HAL_ADC_ConfigChannel>
 8001148:	b920      	cbnz	r0, 8001154 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	b009      	add	sp, #36	; 0x24
 800114c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800114e:	f002 feeb 	bl	8003f28 <Error_Handler>
 8001152:	e7e8      	b.n	8001126 <MX_ADC2_Init+0x46>
    Error_Handler();
 8001154:	f002 fee8 	bl	8003f28 <Error_Handler>
}
 8001158:	b009      	add	sp, #36	; 0x24
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	1d500080 	.word	0x1d500080
 8001164:	00000006 	.word	0x00000006
 8001168:	20003124 	.word	0x20003124
 800116c:	50000100 	.word	0x50000100

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	2400      	movs	r4, #0
{
 8001174:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	4621      	mov	r1, r4
 8001178:	2220      	movs	r2, #32
 800117a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800117c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001180:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	f008 fcd5 	bl	8009b30 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <MX_ADC3_Init+0xa0>)
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC3_Init+0xa4>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 8001190:	2118      	movs	r1, #24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.GainCompensation = 0;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8001194:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001196:	8384      	strh	r4, [r0, #28]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 80011a0:	e9c0 5101 	strd	r5, r1, [r0, #4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011aa:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ae:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	6182      	str	r2, [r0, #24]
  hadc3.Init.NbrOfConversion = 1;
 80011b6:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f003 fcd6 	bl	8004b68 <HAL_ADC_Init>
 80011bc:	b9d0      	cbnz	r0, 80011f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_ADC3_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c4:	a901      	add	r1, sp, #4
 80011c6:	f004 fc15 	bl	80059f4 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9d0      	cbnz	r0, 8001202 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011cc:	a30e      	add	r3, pc, #56	; (adr r3, 8001208 <MX_ADC3_Init+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	2407      	movs	r4, #7
 80011d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011d8:	257f      	movs	r5, #127	; 0x7f
 80011da:	2204      	movs	r2, #4
 80011dc:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ADC3_Init+0xa0>)
 80011e0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_12;
 80011e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80011e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ea:	f003 ffe7 	bl	80051bc <HAL_ADC_ConfigChannel>
 80011ee:	b920      	cbnz	r0, 80011fa <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f0:	b00d      	add	sp, #52	; 0x34
 80011f2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011f4:	f002 fe98 	bl	8003f28 <Error_Handler>
 80011f8:	e7e1      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011fa:	f002 fe95 	bl	8003f28 <Error_Handler>
}
 80011fe:	b00d      	add	sp, #52	; 0x34
 8001200:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001202:	f002 fe91 	bl	8003f28 <Error_Handler>
 8001206:	e7e1      	b.n	80011cc <MX_ADC3_Init+0x5c>
 8001208:	32601000 	.word	0x32601000
 800120c:	00000006 	.word	0x00000006
 8001210:	200031fc 	.word	0x200031fc
 8001214:	50000400 	.word	0x50000400

08001218 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001218:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800121a:	6803      	ldr	r3, [r0, #0]
{
 800121c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001228:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800122c:	940a      	str	r4, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 800122e:	d023      	beq.n	8001278 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001230:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_ADC_MspInit+0x110>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d004      	beq.n	8001240 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001236:	4a3d      	ldr	r2, [pc, #244]	; (800132c <HAL_ADC_MspInit+0x114>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d04f      	beq.n	80012dc <HAL_ADC_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800123c:	b00d      	add	sp, #52	; 0x34
 800123e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <HAL_ADC_MspInit+0x118>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001246:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	d03c      	beq.n	80012c6 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	483a      	ldr	r0, [pc, #232]	; (8001338 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001252:	f042 0204 	orr.w	r2, r2, #4
 8001256:	64da      	str	r2, [r3, #76]	; 0x4c
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001260:	2202      	movs	r2, #2
 8001262:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f005 fb0a 	bl	8006888 <HAL_GPIO_Init>
}
 8001274:	b00d      	add	sp, #52	; 0x34
 8001276:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_ADC_MspInit+0x118>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001280:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001282:	d015      	beq.n	80012b0 <HAL_ADC_MspInit+0x98>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	482c      	ldr	r0, [pc, #176]	; (8001338 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128a:	f042 0204 	orr.w	r2, r2, #4
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2201      	movs	r2, #1
 800129a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f005 faee 	bl	8006888 <HAL_GPIO_Init>
}
 80012ac:	b00d      	add	sp, #52	; 0x34
 80012ae:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_ADC_MspInit+0x11c>)
 80012b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	e7de      	b.n	8001284 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0x11c>)
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	e7b7      	b.n	800124c <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ee:	9204      	str	r2, [sp, #16]
 80012f0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f4:	f042 0202 	orr.w	r2, r2, #2
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001306:	2303      	movs	r3, #3
 8001308:	2201      	movs	r2, #1
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	9d05      	ldr	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f005 faba 	bl	8006888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8001314:	4622      	mov	r2, r4
 8001316:	2101      	movs	r1, #1
 8001318:	202f      	movs	r0, #47	; 0x2f
 800131a:	f004 fc31 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800131e:	202f      	movs	r0, #47	; 0x2f
 8001320:	f004 fc66 	bl	8005bf0 <HAL_NVIC_EnableIRQ>
}
 8001324:	e78a      	b.n	800123c <HAL_ADC_MspInit+0x24>
 8001326:	bf00      	nop
 8001328:	50000100 	.word	0x50000100
 800132c:	50000400 	.word	0x50000400
 8001330:	20000224 	.word	0x20000224
 8001334:	40021000 	.word	0x40021000
 8001338:	48000800 	.word	0x48000800
 800133c:	48000400 	.word	0x48000400

08001340 <order_phases>:
#include "math_ops.h"

#include "structs.h"
#include "drv8353.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001344:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800154c <order_phases+0x20c>
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001348:	ed2d 8b02 	vpush	{d8}
	PHASE_ORDER = 0;
 800134c:	f04f 0900 	mov.w	r9, #0
 8001350:	f8c8 9000 	str.w	r9, [r8]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001354:	4614      	mov	r4, r2

	static int pf1, pf2, pf3, pf4, pf5;



	if(!cal->started){
 8001356:	7c12      	ldrb	r2, [r2, #16]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001358:	b085      	sub	sp, #20
 800135a:	4607      	mov	r7, r0
 800135c:	460e      	mov	r6, r1
 800135e:	461d      	mov	r5, r3
	if(!cal->started){
 8001360:	2a00      	cmp	r2, #0
 8001362:	f000 8091 	beq.w	8001488 <order_phases+0x148>
		printf("Checking phase sign, pole pairs\r\n");
		cal->started = 1;
		cal->start_count = loop_count;
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001514 <order_phases+0x1d4>
		return;
		//debug sine end
		}


    if(cal->time < T1){
 800136c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001518 <order_phases+0x1d8>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001370:	1aed      	subs	r5, r5, r3
 8001372:	ee07 5a90 	vmov	s15, r5
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 800137e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001386:	ed84 7a05 	vstr	s14, [r4, #20]
    if(cal->time < T1){
 800138a:	f100 80bb 	bmi.w	8001504 <order_phases+0x1c4>
        controller->i_q_des = 0.0f;
        commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
    	return;
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800138e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800151c <order_phases+0x1dc>
 8001392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	d452      	bmi.n	8001442 <order_phases+0x102>
    	cal->cal_position.elec_angle = cal->theta_ref;
		commutate(controller, &cal->cal_position);
    	return;
    }

	reset_foc(controller);
 800139c:	4608      	mov	r0, r1
 800139e:	f001 f8fb 	bl	8002598 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80013a2:	ed97 8a03 	vldr	s16, [r7, #12]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013a6:	edd4 8a06 	vldr	s17, [r4, #24]
 80013aa:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001520 <order_phases+0x1e0>
 80013ae:	ee78 7a68 	vsub.f32	s15, s16, s17
 80013b2:	eef0 7ae7 	vabs.f32	s15, s15
 80013b6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80013ba:	ee17 0a90 	vmov	r0, s15
 80013be:	f7ff f8eb 	bl	8000598 <__aeabi_f2d>
 80013c2:	ec41 0b10 	vmov	d0, r0, r1
 80013c6:	f00c fc91 	bl	800dcec <round>
 80013ca:	ec51 0b10 	vmov	r0, r1, d0
 80013ce:	f7ff fc13 	bl	8000bf8 <__aeabi_d2uiz>

	if(cal->theta_start < theta_end){
 80013d2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013da:	7020      	strb	r0, [r4, #0]
	if(cal->theta_start < theta_end){
 80013dc:	f140 8085 	bpl.w	80014ea <order_phases+0x1aa>
		cal->phase_order = 0;
		printf("Phase order correct\r\n");
 80013e0:	4850      	ldr	r0, [pc, #320]	; (8001524 <order_phases+0x1e4>)
		cal->phase_order = 0;
 80013e2:	f884 9020 	strb.w	r9, [r4, #32]
		printf("Phase order correct\r\n");
 80013e6:	f009 f89b 	bl	800a520 <puts>
	}
	else{
		cal->phase_order = 1;
		printf("Swapping phase sign\r\n");
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80013ea:	7821      	ldrb	r1, [r4, #0]
 80013ec:	484e      	ldr	r0, [pc, #312]	; (8001528 <order_phases+0x1e8>)
 80013ee:	f009 f811 	bl	800a414 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80013f2:	69a0      	ldr	r0, [r4, #24]
 80013f4:	f7ff f8d0 	bl	8000598 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	ee18 0a10 	vmov	r0, s16
 8001400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800140c:	e9cd 0100 	strd	r0, r1, [sp]
 8001410:	4846      	ldr	r0, [pc, #280]	; (800152c <order_phases+0x1ec>)
 8001412:	f008 ffff 	bl	800a414 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001416:	f894 3020 	ldrb.w	r3, [r4, #32]
 800141a:	f8c8 3000 	str.w	r3, [r8]
    PPAIRS = (float)cal->ppairs;
 800141e:	7823      	ldrb	r3, [r4, #0]
 8001420:	4943      	ldr	r1, [pc, #268]	; (8001530 <order_phases+0x1f0>)
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cal->started = 0;
 800142a:	2200      	movs	r2, #0
    cal->done_ordering = 1;	// Finished checking phase order
 800142c:	2301      	movs	r3, #1
    PPAIRS = (float)cal->ppairs;
 800142e:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
    cal->started = 0;
 8001432:	7422      	strb	r2, [r4, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001434:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8001438:	b005      	add	sp, #20
 800143a:	ecbd 8b02 	vpop	{d8}
 800143e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	drv_disable_gd(drv); //TODO remove
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <order_phases+0x1f4>)
    	if(pf2){
 8001444:	4d3c      	ldr	r5, [pc, #240]	; (8001538 <order_phases+0x1f8>)
    	drv_disable_gd(drv); //TODO remove
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	8899      	ldrh	r1, [r3, #4]
 800144a:	f000 fb5d 	bl	8001b08 <drv_disable_gd>
    	if(pf2){
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d151      	bne.n	80014f8 <order_phases+0x1b8>
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001454:	edd4 7a05 	vldr	s15, [r4, #20]
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001460:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001464:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
		commutate(controller, &cal->cal_position);
 800146c:	4619      	mov	r1, r3
 800146e:	4630      	mov	r0, r6
 8001470:	312c      	adds	r1, #44	; 0x2c
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001472:	edc4 7a02 	vstr	s15, [r4, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001476:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
}
 800147a:	b005      	add	sp, #20
 800147c:	ecbd 8b02 	vpop	{d8}
 8001480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		commutate(controller, &cal->cal_position);
 8001484:	f001 b8fe 	b.w	8002684 <commutate>
		printf("Checking phase sign, pole pairs\r\n");
 8001488:	482c      	ldr	r0, [pc, #176]	; (800153c <order_phases+0x1fc>)
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 800148a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001550 <order_phases+0x210>
		printf("Checking phase sign, pole pairs\r\n");
 800148e:	f009 f847 	bl	800a520 <puts>
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <order_phases+0x1f8>)
		cal->start_count = loop_count;
 8001494:	60e5      	str	r5, [r4, #12]
		cal->started = 1;
 8001496:	2301      	movs	r3, #1
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001498:	6013      	str	r3, [r2, #0]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800149a:	2200      	movs	r2, #0
		cal->started = 1;
 800149c:	7423      	strb	r3, [r4, #16]
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 800149e:	f8c8 3000 	str.w	r3, [r8]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80014a2:	6162      	str	r2, [r4, #20]
    		printf("p1\n\r");
 80014a4:	4826      	ldr	r0, [pc, #152]	; (8001540 <order_phases+0x200>)
 80014a6:	f008 ffb5 	bl	800a414 <iprintf>
    		pf1 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c8 3000 	str.w	r3, [r8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014b0:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
    	cal->theta_ref = 0;//W_CAL*cal->time;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        cal->cal_position.elec_velocity = 0;
 80014bc:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        controller->i_d_des = I_CAL;
 80014c0:	491b      	ldr	r1, [pc, #108]	; (8001530 <order_phases+0x1f0>)
        cal->cal_position.elec_velocity = 0;
 80014c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        controller->i_d_des = I_CAL;
 80014c6:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80014c8:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
        commutate(controller, &cal->cal_position);
 80014cc:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 80014d0:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 80014d4:	4630      	mov	r0, r6
 80014d6:	312c      	adds	r1, #44	; 0x2c
 80014d8:	f001 f8d4 	bl	8002684 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	61a3      	str	r3, [r4, #24]
}
 80014e0:	b005      	add	sp, #20
 80014e2:	ecbd 8b02 	vpop	{d8}
 80014e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cal->phase_order = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f884 3020 	strb.w	r3, [r4, #32]
		printf("Swapping phase sign\r\n");
 80014f0:	4814      	ldr	r0, [pc, #80]	; (8001544 <order_phases+0x204>)
 80014f2:	f009 f815 	bl	800a520 <puts>
 80014f6:	e778      	b.n	80013ea <order_phases+0xaa>
    	    printf("p2\n\r");
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <order_phases+0x208>)
 80014fa:	f008 ff8b 	bl	800a414 <iprintf>
    	    pf2 = 0;
 80014fe:	f8c5 9000 	str.w	r9, [r5]
 8001502:	e7a7      	b.n	8001454 <order_phases+0x114>
    	if(pf1){
 8001504:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001550 <order_phases+0x210>
 8001508:	f8d8 3000 	ldr.w	r3, [r8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0cf      	beq.n	80014b0 <order_phases+0x170>
 8001510:	e7c8      	b.n	80014a4 <order_phases+0x164>
 8001512:	bf00      	nop
 8001514:	3812ccf7 	.word	0x3812ccf7
 8001518:	46df36db 	.word	0x46df36db
 800151c:	4735bb63 	.word	0x4735bb63
 8001520:	40c90fdb 	.word	0x40c90fdb
 8001524:	0800e2cc 	.word	0x0800e2cc
 8001528:	0800e2fc 	.word	0x0800e2fc
 800152c:	0800e310 	.word	0x0800e310
 8001530:	20003574 	.word	0x20003574
 8001534:	2000c25c 	.word	0x2000c25c
 8001538:	2000022c 	.word	0x2000022c
 800153c:	0800e298 	.word	0x0800e298
 8001540:	0800e2bc 	.word	0x0800e2bc
 8001544:	0800e2e4 	.word	0x0800e2e4
 8001548:	0800e2c4 	.word	0x0800e2c4
 800154c:	2000be30 	.word	0x2000be30
 8001550:	20000228 	.word	0x20000228

08001554 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001558:	ed2d 8b02 	vpush	{d8}
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800155c:	7c17      	ldrb	r7, [r2, #16]
void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 800155e:	b082      	sub	sp, #8
 8001560:	4614      	mov	r4, r2
 8001562:	4680      	mov	r8, r0
 8001564:	460d      	mov	r5, r1
 8001566:	461e      	mov	r6, r3
	if(!cal->started){
 8001568:	2f00      	cmp	r7, #0
 800156a:	f000 80cf 	beq.w	800170c <calibrate_encoder+0x1b8>
			cal->start_count = loop_count;
			cal->next_sample_time = T1;
			cal->sample_count = 0;
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800156e:	68d3      	ldr	r3, [r2, #12]
 8001570:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 80018d4 <calibrate_encoder+0x380>

    if(cal->time < T1){
 8001574:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80018d8 <calibrate_encoder+0x384>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001578:	1af6      	subs	r6, r6, r3
 800157a:	ee07 6a90 	vmov	s15, r6
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 8001586:	eef4 7ae6 	vcmpe.f32	s15, s13
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800158e:	ed82 7a05 	vstr	s14, [r2, #20]
    if(cal->time < T1){
 8001592:	f100 80c7 	bmi.w	8001724 <calibrate_encoder+0x1d0>

    	cal->theta_start = encoder->angle_multiturn[0];
    	cal->next_sample_time = cal->time;
    	return;
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001596:	4ed1      	ldr	r6, [pc, #836]	; (80018dc <calibrate_encoder+0x388>)
 8001598:	ed9f 6ad1 	vldr	s12, [pc, #836]	; 80018e0 <calibrate_encoder+0x38c>
 800159c:	edd6 6a0a 	vldr	s13, [r6, #40]	; 0x28
 80015a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80015a4:	eef0 5a67 	vmov.f32	s11, s15
 80015a8:	eee6 5a86 	vfma.f32	s11, s13, s12
 80015ac:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	f100 80d2 	bmi.w	800175c <calibrate_encoder+0x208>
			cal->sample_count++;

		}
		return;
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80015b8:	ed9f 6aca 	vldr	s12, [pc, #808]	; 80018e4 <calibrate_encoder+0x390>
 80015bc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80015c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	f100 8126 	bmi.w	8001818 <calibrate_encoder+0x2c4>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
    }

    reset_foc(controller);
 80015cc:	4608      	mov	r0, r1
 80015ce:	f000 ffe3 	bl	8002598 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015d2:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80015d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80015da:	ee17 3a10 	vmov	r3, s14
 80015de:	01da      	lsls	r2, r3, #7
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	f340 8173 	ble.w	80018cc <calibrate_encoder+0x378>
 80015e6:	eb04 2343 	add.w	r3, r4, r3, lsl #9
 80015ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80015ee:	f104 0128 	add.w	r1, r4, #40	; 0x28
    int ezero_mean = 0;
 80015f2:	2300      	movs	r3, #0
		ezero_mean += cal->error_arr[i];
 80015f4:	f851 0f04 	ldr.w	r0, [r1, #4]!
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015f8:	4291      	cmp	r1, r2
		ezero_mean += cal->error_arr[i];
 80015fa:	4403      	add	r3, r0
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015fc:	d1fa      	bne.n	80015f4 <calibrate_encoder+0xa0>
 80015fe:	ee07 3a10 	vmov	s14, r3
 8001602:	eeba 7aec 	vcvt.f32.s32	s14, s14, #7
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001606:	eec7 6a27 	vdiv.f32	s13, s14, s15

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800160a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
			}
			moving_avg = moving_avg/window;
			int lut_index = lut_offset + i;
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 800160c:	4fb6      	ldr	r7, [pc, #728]	; (80018e8 <calibrate_encoder+0x394>)
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800160e:	f5d5 3580 	rsbs	r5, r5, #65536	; 0x10000
 8001612:	bf48      	it	mi
 8001614:	f205 15ff 	addwmi	r5, r5, #511	; 0x1ff
 8001618:	126d      	asrs	r5, r5, #9
	for(int i = 0; i<N_LUT; i++){
 800161a:	f04f 0800 	mov.w	r8, #0
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800161e:	eddf 8ab3 	vldr	s17, [pc, #716]	; 80018ec <calibrate_encoder+0x398>
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001622:	eebd 7ae6 	vcvt.s32.f32	s14, s13
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001626:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 800162a:	ee17 2a10 	vmov	r2, s14
 800162e:	ed84 7a07 	vstr	s14, [r4, #28]
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001632:	ee07 8a10 	vmov	s14, r8
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001636:	ee27 6aa8 	vmul.f32	s12, s15, s17
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800163a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800163e:	ee36 5a48 	vsub.f32	s10, s12, s16
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001642:	ee65 5aa7 	vmul.f32	s11, s11, s15
			for(int j = (-window)/2; j<(window)/2; j++){
 8001646:	f06f 013f 	mvn.w	r1, #63	; 0x3f
			int moving_avg = 0;
 800164a:	2000      	movs	r0, #0
 800164c:	e011      	b.n	8001672 <calibrate_encoder+0x11e>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800164e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001652:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	bf48      	it	mi
 800165c:	eefd 7ae6 	vcvtmi.s32.f32	s15, s13
				moving_avg += cal->error_arr[index];
 8001660:	ee17 3a90 	vmov	r3, s15
 8001664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			for(int j = (-window)/2; j<(window)/2; j++){
 8001668:	3101      	adds	r1, #1
				moving_avg += cal->error_arr[index];
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			for(int j = (-window)/2; j<(window)/2; j++){
 800166c:	2940      	cmp	r1, #64	; 0x40
				moving_avg += cal->error_arr[index];
 800166e:	4418      	add	r0, r3
			for(int j = (-window)/2; j<(window)/2; j++){
 8001670:	d012      	beq.n	8001698 <calibrate_encoder+0x144>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001672:	ee07 1a90 	vmov	s15, r1
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800167e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001682:	ee17 3a90 	vmov	r3, s15
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001686:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 800168a:	2b00      	cmp	r3, #0
 800168c:	ee36 7a86 	vadd.f32	s14, s13, s12
 8001690:	dadd      	bge.n	800164e <calibrate_encoder+0xfa>
 8001692:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001696:	e7e3      	b.n	8001660 <calibrate_encoder+0x10c>
			moving_avg = moving_avg/window;
 8001698:	2800      	cmp	r0, #0
 800169a:	bfb8      	it	lt
 800169c:	307f      	addlt	r0, #127	; 0x7f
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 800169e:	2d7f      	cmp	r5, #127	; 0x7f
			moving_avg = moving_avg/window;
 80016a0:	ea4f 10e0 	mov.w	r0, r0, asr #7
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 80016a4:	dd16      	ble.n	80016d4 <calibrate_encoder+0x180>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016a6:	f505 53fc 	add.w	r3, r5, #8064	; 0x1f80
 80016aa:	330a      	adds	r3, #10
 80016ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016b0:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016b2:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
	for(int i = 0; i<N_LUT; i++){
 80016b6:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016ba:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016bc:	4638      	mov	r0, r7
 80016be:	f008 fea9 	bl	800a414 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016c2:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016c6:	f105 0501 	add.w	r5, r5, #1
 80016ca:	d015      	beq.n	80016f8 <calibrate_encoder+0x1a4>
 80016cc:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80016d0:	69e2      	ldr	r2, [r4, #28]
 80016d2:	e7ae      	b.n	8001632 <calibrate_encoder+0xde>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016d4:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 80016d8:	330a      	adds	r3, #10
 80016da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016de:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016e0:	4629      	mov	r1, r5
	for(int i = 0; i<N_LUT; i++){
 80016e2:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016e6:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016e8:	4638      	mov	r0, r7
 80016ea:	f008 fe93 	bl	800a414 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016ee:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016f2:	f105 0501 	add.w	r5, r5, #1
 80016f6:	d1e9      	bne.n	80016cc <calibrate_encoder+0x178>

		}

	cal->started = 0;
 80016f8:	2200      	movs	r2, #0
	cal->done_cal = 1;
 80016fa:	2301      	movs	r3, #1
	cal->started = 0;
 80016fc:	7422      	strb	r2, [r4, #16]
	cal->done_cal = 1;
 80016fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8001702:	b002      	add	sp, #8
 8001704:	ecbd 8b02 	vpop	{d8}
 8001708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Starting offset cal and linearization\r\n");
 800170c:	4878      	ldr	r0, [pc, #480]	; (80018f0 <calibrate_encoder+0x39c>)
 800170e:	f008 ff07 	bl	800a520 <puts>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001712:	2100      	movs	r1, #0
			cal->started = 1;
 8001714:	2201      	movs	r2, #1
			cal->next_sample_time = T1;
 8001716:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
			cal->start_count = loop_count;
 800171a:	60e6      	str	r6, [r4, #12]
			cal->sample_count = 0;
 800171c:	84a7      	strh	r7, [r4, #36]	; 0x24
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800171e:	6161      	str	r1, [r4, #20]
			cal->started = 1;
 8001720:	7422      	strb	r2, [r4, #16]
			cal->next_sample_time = T1;
 8001722:	62a3      	str	r3, [r4, #40]	; 0x28
        cal->cal_position.elec_angle = cal->theta_ref;
 8001724:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001728:	2300      	movs	r3, #0
        controller->i_d_des = I_CAL;
 800172a:	496c      	ldr	r1, [pc, #432]	; (80018dc <calibrate_encoder+0x388>)
        cal->theta_ref = 0;//W_CAL*cal->time;
 800172c:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800172e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        controller->i_d_des = I_CAL;
 8001732:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8001734:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
        commutate(controller, &cal->cal_position);
 8001738:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 800173c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 8001740:	4628      	mov	r0, r5
 8001742:	312c      	adds	r1, #44	; 0x2c
 8001744:	f000 ff9e 	bl	8002684 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001748:	f8d8 200c 	ldr.w	r2, [r8, #12]
    	cal->next_sample_time = cal->time;
 800174c:	6963      	ldr	r3, [r4, #20]
    	cal->theta_start = encoder->angle_multiturn[0];
 800174e:	61a2      	str	r2, [r4, #24]
    	cal->next_sample_time = cal->time;
 8001750:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001752:	b002      	add	sp, #8
 8001754:	ecbd 8b02 	vpop	{d8}
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800175c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001760:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80018f4 <calibrate_encoder+0x3a0>
		cal->cal_position.elec_angle = cal->theta_ref;
 8001764:	f502 4302 	add.w	r3, r2, #33280	; 0x8200
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001768:	ee77 7a87 	vadd.f32	s15, s15, s14
		commutate(controller, &cal->cal_position);
 800176c:	4619      	mov	r1, r3
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800176e:	edc2 7a02 	vstr	s15, [r2, #8]
		commutate(controller, &cal->cal_position);
 8001772:	4628      	mov	r0, r5
		cal->cal_position.elec_angle = cal->theta_ref;
 8001774:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 8001778:	312c      	adds	r1, #44	; 0x2c
 800177a:	f000 ff83 	bl	8002684 <commutate>
		if(cal->time > cal->next_sample_time){
 800177e:	ed94 7a05 	vldr	s14, [r4, #20]
 8001782:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	ddb8      	ble.n	8001702 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001790:	ed94 7a02 	vldr	s14, [r4, #8]
 8001794:	eddf 7a58 	vldr	s15, [pc, #352]	; 80018f8 <calibrate_encoder+0x3a4>
 8001798:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;//- encoder->raw;
 800179c:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017a0:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017a8:	eb04 0288 	add.w	r2, r4, r8, lsl #2
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017ac:	eec7 6a86 	vdiv.f32	s13, s15, s12
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017b0:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017b4:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80017b8:	ee17 7a90 	vmov	r7, s15
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017bc:	1bdb      	subs	r3, r3, r7
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017be:	13dd      	asrs	r5, r3, #15
 80017c0:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 80017c4:	441d      	add	r5, r3
 80017c6:	62d5      	str	r5, [r2, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017c8:	f7fe fee6 	bl	8000598 <__aeabi_f2d>
 80017cc:	462b      	mov	r3, r5
 80017ce:	e9cd 0100 	strd	r0, r1, [sp]
 80017d2:	463a      	mov	r2, r7
 80017d4:	4849      	ldr	r0, [pc, #292]	; (80018fc <calibrate_encoder+0x3a8>)
 80017d6:	4641      	mov	r1, r8
 80017d8:	f008 fe1c 	bl	800a414 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017dc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80017e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001900 <calibrate_encoder+0x3ac>
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017e4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80018ec <calibrate_encoder+0x398>
 80017e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017ea:	ee37 7a27 	vadd.f32	s14, s14, s15
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017ee:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017f2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017f6:	ed96 7a0a 	vldr	s14, [r6, #40]	; 0x28
 80017fa:	eee7 7a26 	vfma.f32	s15, s14, s13
 80017fe:	ee07 3a10 	vmov	s14, r3
 8001802:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001806:	eeb4 7a67 	vcmp.f32	s14, s15
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	f43f af78 	beq.w	8001702 <calibrate_encoder+0x1ae>
			cal->sample_count++;
 8001812:	3301      	adds	r3, #1
 8001814:	84a3      	strh	r3, [r4, #36]	; 0x24
 8001816:	e774      	b.n	8001702 <calibrate_encoder+0x1ae>
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001818:	edd2 7a02 	vldr	s15, [r2, #8]
 800181c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80018f4 <calibrate_encoder+0x3a0>
 8001820:	ee77 7ac7 	vsub.f32	s15, s15, s14
		controller->i_q_des = 0.0f;
 8001824:	2300      	movs	r3, #0
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001826:	edc2 7a02 	vstr	s15, [r2, #8]
		controller->i_d_des = I_CAL;
 800182a:	6cb2      	ldr	r2, [r6, #72]	; 0x48
		controller->i_q_des = 0.0f;
 800182c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 8001830:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
		controller->i_d_des = I_CAL;
 8001834:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
		commutate(controller, &cal->cal_position);
 8001838:	4619      	mov	r1, r3
		cal->cal_position.elec_angle = cal->theta_ref;
 800183a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 800183e:	4628      	mov	r0, r5
 8001840:	312c      	adds	r1, #44	; 0x2c
 8001842:	f000 ff1f 	bl	8002684 <commutate>
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001846:	ed94 7a05 	vldr	s14, [r4, #20]
 800184a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800184e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	f77f af54 	ble.w	8001702 <calibrate_encoder+0x1ae>
 800185a:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 800185c:	2f00      	cmp	r7, #0
 800185e:	f43f af50 	beq.w	8001702 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001862:	ed94 7a02 	vldr	s14, [r4, #8]
 8001866:	eddf 7a24 	vldr	s15, [pc, #144]	; 80018f8 <calibrate_encoder+0x3a4>
 800186a:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;// - encoder->raw;
 800186e:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 800187a:	eec7 6a86 	vdiv.f32	s13, s15, s12
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800187e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001880:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001884:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001888:	ee17 6a90 	vmov	r6, s15
			int error = encoder->raw - count_ref;// - encoder->raw;
 800188c:	1b9b      	subs	r3, r3, r6
			error = error + ENC_CPR*(error<0);
 800188e:	13dd      	asrs	r5, r3, #15
 8001890:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8001894:	441d      	add	r5, r3
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001896:	4415      	add	r5, r2
 8001898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800189c:	106d      	asrs	r5, r5, #1
 800189e:	62cd      	str	r5, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018a0:	f7fe fe7a 	bl	8000598 <__aeabi_f2d>
 80018a4:	462b      	mov	r3, r5
 80018a6:	e9cd 0100 	strd	r0, r1, [sp]
 80018aa:	4632      	mov	r2, r6
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <calibrate_encoder+0x3a8>)
 80018ae:	4639      	mov	r1, r7
 80018b0:	f008 fdb0 	bl	800a414 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018b4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80018b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001900 <calibrate_encoder+0x3ac>
			cal->sample_count--;
 80018bc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018be:	ee77 7a87 	vadd.f32	s15, s15, s14
			cal->sample_count--;
 80018c2:	3b01      	subs	r3, #1
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018c4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
			cal->sample_count--;
 80018c8:	84a3      	strh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018ca:	e71a      	b.n	8001702 <calibrate_encoder+0x1ae>
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018cc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001904 <calibrate_encoder+0x3b0>
 80018d0:	e699      	b.n	8001606 <calibrate_encoder+0xb2>
 80018d2:	bf00      	nop
 80018d4:	3812ccf7 	.word	0x3812ccf7
 80018d8:	46df36db 	.word	0x46df36db
 80018dc:	20003574 	.word	0x20003574
 80018e0:	3f20d97c 	.word	0x3f20d97c
 80018e4:	3fa0d97c 	.word	0x3fa0d97c
 80018e8:	0800e364 	.word	0x0800e364
 80018ec:	43000000 	.word	0x43000000
 80018f0:	0800e32c 	.word	0x0800e32c
 80018f4:	39b78035 	.word	0x39b78035
 80018f8:	4622f983 	.word	0x4622f983
 80018fc:	0800e354 	.word	0x0800e354
 8001900:	3ba0d97c 	.word	0x3ba0d97c
 8001904:	00000000 	.word	0x00000000

08001908 <drv_write_DCR>:
}
void drv_write_register(DRVStruct drv, int reg, int val){
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
}
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001908:	b530      	push	{r4, r5, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001910:	ea44 2242 	orr.w	r2, r4, r2, lsl #9
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001914:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001916:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800191a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800191c:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001922:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001926:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001928:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800192c:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800192e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 8001932:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001936:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800193a:	ac02      	add	r4, sp, #8
 800193c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001944:	2200      	movs	r2, #0
 8001946:	2110      	movs	r1, #16
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 800194c:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001950:	f005 f88e 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001954:	2364      	movs	r3, #100	; 0x64
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <drv_write_DCR+0x78>)
 800195a:	2301      	movs	r3, #1
 800195c:	4621      	mov	r1, r4
 800195e:	f10d 020a 	add.w	r2, sp, #10
 8001962:	f005 ffdd 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <drv_write_DCR+0x78>)
 8001968:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800196c:	2a02      	cmp	r2, #2
 800196e:	d0fb      	beq.n	8001968 <drv_write_DCR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001970:	2201      	movs	r2, #1
 8001972:	2110      	movs	r1, #16
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f005 f87a 	bl	8006a70 <HAL_GPIO_WritePin>
	uint16_t mask = 0x07FF;
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
	//printf("loop retval = %d\n\r", (retval&mask));
}
 800197c:	b005      	add	sp, #20
 800197e:	bd30      	pop	{r4, r5, pc}
 8001980:	2000c33c 	.word	0x2000c33c

08001984 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 800198c:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001990:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001992:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001996:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 800199a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800199e:	ac02      	add	r4, sp, #8
 80019a0:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80019a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80019a8:	2200      	movs	r2, #0
 80019aa:	2110      	movs	r1, #16
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 80019b0:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80019b4:	f005 f85c 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <drv_write_OCPCR+0x60>)
 80019be:	2301      	movs	r3, #1
 80019c0:	4621      	mov	r1, r4
 80019c2:	f10d 020a 	add.w	r2, sp, #10
 80019c6:	f005 ffab 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <drv_write_OCPCR+0x60>)
 80019cc:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80019d0:	2a02      	cmp	r2, #2
 80019d2:	d0fb      	beq.n	80019cc <drv_write_OCPCR+0x48>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80019d4:	2201      	movs	r2, #1
 80019d6:	2110      	movs	r1, #16
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f005 f848 	bl	8006a70 <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 80019e0:	b005      	add	sp, #20
 80019e2:	bd30      	pop	{r4, r5, pc}
 80019e4:	2000c33c 	.word	0x2000c33c

080019e8 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019e8:	b530      	push	{r4, r5, lr}
 80019ea:	b085      	sub	sp, #20
 80019ec:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019f0:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019f6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019fc:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a06:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a08:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a0c:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a0e:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001a12:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001a16:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a1a:	ac02      	add	r4, sp, #8
 8001a1c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a20:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a24:	2200      	movs	r2, #0
 8001a26:	2110      	movs	r1, #16
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a2c:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a30:	f005 f81e 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4809      	ldr	r0, [pc, #36]	; (8001a60 <drv_write_CSACR+0x78>)
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	f10d 020a 	add.w	r2, sp, #10
 8001a42:	f005 ff6d 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <drv_write_CSACR+0x78>)
 8001a48:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001a4c:	2a02      	cmp	r2, #2
 8001a4e:	d0fb      	beq.n	8001a48 <drv_write_CSACR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f005 f80a 	bl	8006a70 <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 8001a5c:	b005      	add	sp, #20
 8001a5e:	bd30      	pop	{r4, r5, pc}
 8001a60:	2000c33c 	.word	0x2000c33c

08001a64 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001a64:	b530      	push	{r4, r5, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	ac02      	add	r4, sp, #8
 8001a6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001a72:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a76:	9004      	str	r0, [sp, #16]
 8001a78:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2110      	movs	r1, #16
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a84:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a88:	f004 fff2 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	481d      	ldr	r0, [pc, #116]	; (8001b04 <drv_enable_gd+0xa0>)
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	a904      	add	r1, sp, #16
 8001a94:	f10d 0212 	add.w	r2, sp, #18
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	f005 ff40 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001aa0:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d0fb      	beq.n	8001aa0 <drv_enable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab0:	f004 ffde 	bl	8006a70 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001abc:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
	drv_spi_write(&drv, (reg<<11)|val);
 8001ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac8:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001aca:	2200      	movs	r2, #0
 8001acc:	2110      	movs	r1, #16
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001ad2:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001ad6:	f004 ffcb 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001ada:	2364      	movs	r3, #100	; 0x64
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4809      	ldr	r0, [pc, #36]	; (8001b04 <drv_enable_gd+0xa0>)
 8001ae0:	f10d 0212 	add.w	r2, sp, #18
 8001ae4:	a904      	add	r1, sp, #16
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f005 ff1a 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001aec:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d0fb      	beq.n	8001aec <drv_enable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001af4:	2201      	movs	r2, #1
 8001af6:	2110      	movs	r1, #16
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f004 ffb8 	bl	8006a70 <HAL_GPIO_WritePin>
}
 8001b00:	b007      	add	sp, #28
 8001b02:	bd30      	pop	{r4, r5, pc}
 8001b04:	2000c33c 	.word	0x2000c33c

08001b08 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001b08:	b530      	push	{r4, r5, lr}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	ac02      	add	r4, sp, #8
 8001b0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b12:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001b16:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001b1a:	9004      	str	r0, [sp, #16]
 8001b1c:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b20:	2200      	movs	r2, #0
 8001b22:	2110      	movs	r1, #16
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b28:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b2c:	f004 ffa0 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	481d      	ldr	r0, [pc, #116]	; (8001ba8 <drv_disable_gd+0xa0>)
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	a904      	add	r1, sp, #16
 8001b38:	f10d 0212 	add.w	r2, sp, #18
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	4605      	mov	r5, r0
 8001b40:	f005 feee 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b44:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d0fb      	beq.n	8001b44 <drv_disable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2110      	movs	r1, #16
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f004 ff8c 	bl	8006a70 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b5c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001b60:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv_spi_write(&drv, (reg<<11)|val);
 8001b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2110      	movs	r1, #16
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b76:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b7a:	f004 ff79 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b7e:	2364      	movs	r3, #100	; 0x64
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <drv_disable_gd+0xa0>)
 8001b84:	f10d 0212 	add.w	r2, sp, #18
 8001b88:	a904      	add	r1, sp, #16
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f005 fec8 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b90:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d0fb      	beq.n	8001b90 <drv_disable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f004 ff66 	bl	8006a70 <HAL_GPIO_WritePin>
}
 8001ba4:	b007      	add	sp, #28
 8001ba6:	bd30      	pop	{r4, r5, pc}
 8001ba8:	2000c33c 	.word	0x2000c33c

08001bac <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	ac02      	add	r4, sp, #8
 8001bb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bbe:	9004      	str	r0, [sp, #16]
 8001bc0:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001bcc:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bd0:	f004 ff4e 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	486a      	ldr	r0, [pc, #424]	; (8001d80 <drv_print_faults+0x1d4>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	a904      	add	r1, sp, #16
 8001bdc:	f10d 0212 	add.w	r2, sp, #18
 8001be0:	2301      	movs	r3, #1
 8001be2:	4606      	mov	r6, r0
 8001be4:	f005 fe9c 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001be8:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d0fb      	beq.n	8001be8 <drv_print_faults+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f004 ff3a 	bl	8006a70 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001c00:	f248 0301 	movw	r3, #32769	; 0x8001
	return drv->spi_rx_word;
 8001c04:	f8bd 5012 	ldrh.w	r5, [sp, #18]
    uint16_t val1 = drv_read_FSR1(drv);
    uint16_t val2 = drv_read_FSR2(drv);
 8001c08:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv->spi_tx_word = val;
 8001c0c:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2110      	movs	r1, #16
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001c16:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001c1a:	f004 ff29 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4857      	ldr	r0, [pc, #348]	; (8001d80 <drv_print_faults+0x1d4>)
 8001c24:	f10d 0212 	add.w	r2, sp, #18
 8001c28:	a904      	add	r1, sp, #16
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f005 fe78 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001c30:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d0fb      	beq.n	8001c30 <drv_print_faults+0x84>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f004 ff16 	bl	8006a70 <HAL_GPIO_WritePin>

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c44:	056e      	lsls	r6, r5, #21
	return drv->spi_rx_word;
 8001c46:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c4a:	d42b      	bmi.n	8001ca4 <drv_print_faults+0xf8>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001c4c:	05a8      	lsls	r0, r5, #22
 8001c4e:	d42e      	bmi.n	8001cae <drv_print_faults+0x102>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001c50:	05e9      	lsls	r1, r5, #23
 8001c52:	d431      	bmi.n	8001cb8 <drv_print_faults+0x10c>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001c54:	062a      	lsls	r2, r5, #24
 8001c56:	d434      	bmi.n	8001cc2 <drv_print_faults+0x116>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001c58:	066b      	lsls	r3, r5, #25
 8001c5a:	d437      	bmi.n	8001ccc <drv_print_faults+0x120>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001c5c:	06ae      	lsls	r6, r5, #26
 8001c5e:	d43a      	bmi.n	8001cd6 <drv_print_faults+0x12a>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001c60:	06e8      	lsls	r0, r5, #27
 8001c62:	d43d      	bmi.n	8001ce0 <drv_print_faults+0x134>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001c64:	0729      	lsls	r1, r5, #28
 8001c66:	d440      	bmi.n	8001cea <drv_print_faults+0x13e>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001c68:	076a      	lsls	r2, r5, #29
 8001c6a:	d443      	bmi.n	8001cf4 <drv_print_faults+0x148>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001c6c:	07ab      	lsls	r3, r5, #30
 8001c6e:	d446      	bmi.n	8001cfe <drv_print_faults+0x152>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001c70:	07ee      	lsls	r6, r5, #31
 8001c72:	d449      	bmi.n	8001d08 <drv_print_faults+0x15c>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001c74:	0565      	lsls	r5, r4, #21
 8001c76:	d44c      	bmi.n	8001d12 <drv_print_faults+0x166>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001c78:	05a0      	lsls	r0, r4, #22
 8001c7a:	d44f      	bmi.n	8001d1c <drv_print_faults+0x170>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001c7c:	05e1      	lsls	r1, r4, #23
 8001c7e:	d452      	bmi.n	8001d26 <drv_print_faults+0x17a>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001c80:	0622      	lsls	r2, r4, #24
 8001c82:	d455      	bmi.n	8001d30 <drv_print_faults+0x184>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001c84:	0663      	lsls	r3, r4, #25
 8001c86:	d458      	bmi.n	8001d3a <drv_print_faults+0x18e>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001c88:	06a6      	lsls	r6, r4, #26
 8001c8a:	d45b      	bmi.n	8001d44 <drv_print_faults+0x198>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001c8c:	06e5      	lsls	r5, r4, #27
 8001c8e:	d45e      	bmi.n	8001d4e <drv_print_faults+0x1a2>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001c90:	0720      	lsls	r0, r4, #28
 8001c92:	d461      	bmi.n	8001d58 <drv_print_faults+0x1ac>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001c94:	0761      	lsls	r1, r4, #29
 8001c96:	d464      	bmi.n	8001d62 <drv_print_faults+0x1b6>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001c98:	07a2      	lsls	r2, r4, #30
 8001c9a:	d467      	bmi.n	8001d6c <drv_print_faults+0x1c0>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001c9c:	07e3      	lsls	r3, r4, #31
 8001c9e:	d46a      	bmi.n	8001d76 <drv_print_faults+0x1ca>

}
 8001ca0:	b006      	add	sp, #24
 8001ca2:	bd70      	pop	{r4, r5, r6, pc}
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001ca4:	4837      	ldr	r0, [pc, #220]	; (8001d84 <drv_print_faults+0x1d8>)
 8001ca6:	f008 fbb5 	bl	800a414 <iprintf>
    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001caa:	05a8      	lsls	r0, r5, #22
 8001cac:	d5d0      	bpl.n	8001c50 <drv_print_faults+0xa4>
 8001cae:	4836      	ldr	r0, [pc, #216]	; (8001d88 <drv_print_faults+0x1dc>)
 8001cb0:	f008 fbb0 	bl	800a414 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001cb4:	05e9      	lsls	r1, r5, #23
 8001cb6:	d5cd      	bpl.n	8001c54 <drv_print_faults+0xa8>
 8001cb8:	4834      	ldr	r0, [pc, #208]	; (8001d8c <drv_print_faults+0x1e0>)
 8001cba:	f008 fbab 	bl	800a414 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001cbe:	062a      	lsls	r2, r5, #24
 8001cc0:	d5ca      	bpl.n	8001c58 <drv_print_faults+0xac>
 8001cc2:	4833      	ldr	r0, [pc, #204]	; (8001d90 <drv_print_faults+0x1e4>)
 8001cc4:	f008 fba6 	bl	800a414 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001cc8:	066b      	lsls	r3, r5, #25
 8001cca:	d5c7      	bpl.n	8001c5c <drv_print_faults+0xb0>
 8001ccc:	4831      	ldr	r0, [pc, #196]	; (8001d94 <drv_print_faults+0x1e8>)
 8001cce:	f008 fba1 	bl	800a414 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001cd2:	06ae      	lsls	r6, r5, #26
 8001cd4:	d5c4      	bpl.n	8001c60 <drv_print_faults+0xb4>
 8001cd6:	4830      	ldr	r0, [pc, #192]	; (8001d98 <drv_print_faults+0x1ec>)
 8001cd8:	f008 fb9c 	bl	800a414 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001cdc:	06e8      	lsls	r0, r5, #27
 8001cde:	d5c1      	bpl.n	8001c64 <drv_print_faults+0xb8>
 8001ce0:	482e      	ldr	r0, [pc, #184]	; (8001d9c <drv_print_faults+0x1f0>)
 8001ce2:	f008 fb97 	bl	800a414 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001ce6:	0729      	lsls	r1, r5, #28
 8001ce8:	d5be      	bpl.n	8001c68 <drv_print_faults+0xbc>
 8001cea:	482d      	ldr	r0, [pc, #180]	; (8001da0 <drv_print_faults+0x1f4>)
 8001cec:	f008 fb92 	bl	800a414 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001cf0:	076a      	lsls	r2, r5, #29
 8001cf2:	d5bb      	bpl.n	8001c6c <drv_print_faults+0xc0>
 8001cf4:	482b      	ldr	r0, [pc, #172]	; (8001da4 <drv_print_faults+0x1f8>)
 8001cf6:	f008 fb8d 	bl	800a414 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001cfa:	07ab      	lsls	r3, r5, #30
 8001cfc:	d5b8      	bpl.n	8001c70 <drv_print_faults+0xc4>
 8001cfe:	482a      	ldr	r0, [pc, #168]	; (8001da8 <drv_print_faults+0x1fc>)
 8001d00:	f008 fb88 	bl	800a414 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001d04:	07ee      	lsls	r6, r5, #31
 8001d06:	d5b5      	bpl.n	8001c74 <drv_print_faults+0xc8>
 8001d08:	4828      	ldr	r0, [pc, #160]	; (8001dac <drv_print_faults+0x200>)
 8001d0a:	f008 fb83 	bl	800a414 <iprintf>
    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001d0e:	0565      	lsls	r5, r4, #21
 8001d10:	d5b2      	bpl.n	8001c78 <drv_print_faults+0xcc>
 8001d12:	4827      	ldr	r0, [pc, #156]	; (8001db0 <drv_print_faults+0x204>)
 8001d14:	f008 fb7e 	bl	800a414 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001d18:	05a0      	lsls	r0, r4, #22
 8001d1a:	d5af      	bpl.n	8001c7c <drv_print_faults+0xd0>
 8001d1c:	4825      	ldr	r0, [pc, #148]	; (8001db4 <drv_print_faults+0x208>)
 8001d1e:	f008 fb79 	bl	800a414 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001d22:	05e1      	lsls	r1, r4, #23
 8001d24:	d5ac      	bpl.n	8001c80 <drv_print_faults+0xd4>
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <drv_print_faults+0x20c>)
 8001d28:	f008 fb74 	bl	800a414 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001d2c:	0622      	lsls	r2, r4, #24
 8001d2e:	d5a9      	bpl.n	8001c84 <drv_print_faults+0xd8>
 8001d30:	4822      	ldr	r0, [pc, #136]	; (8001dbc <drv_print_faults+0x210>)
 8001d32:	f008 fb6f 	bl	800a414 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001d36:	0663      	lsls	r3, r4, #25
 8001d38:	d5a6      	bpl.n	8001c88 <drv_print_faults+0xdc>
 8001d3a:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <drv_print_faults+0x214>)
 8001d3c:	f008 fb6a 	bl	800a414 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001d40:	06a6      	lsls	r6, r4, #26
 8001d42:	d5a3      	bpl.n	8001c8c <drv_print_faults+0xe0>
 8001d44:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <drv_print_faults+0x218>)
 8001d46:	f008 fb65 	bl	800a414 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001d4a:	06e5      	lsls	r5, r4, #27
 8001d4c:	d5a0      	bpl.n	8001c90 <drv_print_faults+0xe4>
 8001d4e:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <drv_print_faults+0x21c>)
 8001d50:	f008 fb60 	bl	800a414 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001d54:	0720      	lsls	r0, r4, #28
 8001d56:	d59d      	bpl.n	8001c94 <drv_print_faults+0xe8>
 8001d58:	481c      	ldr	r0, [pc, #112]	; (8001dcc <drv_print_faults+0x220>)
 8001d5a:	f008 fb5b 	bl	800a414 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001d5e:	0761      	lsls	r1, r4, #29
 8001d60:	d59a      	bpl.n	8001c98 <drv_print_faults+0xec>
 8001d62:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <drv_print_faults+0x224>)
 8001d64:	f008 fb56 	bl	800a414 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001d68:	07a2      	lsls	r2, r4, #30
 8001d6a:	d597      	bpl.n	8001c9c <drv_print_faults+0xf0>
 8001d6c:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <drv_print_faults+0x228>)
 8001d6e:	f008 fb51 	bl	800a414 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001d72:	07e3      	lsls	r3, r4, #31
 8001d74:	d594      	bpl.n	8001ca0 <drv_print_faults+0xf4>
 8001d76:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <drv_print_faults+0x22c>)
 8001d78:	f008 fb4c 	bl	800a414 <iprintf>
}
 8001d7c:	b006      	add	sp, #24
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	2000c33c 	.word	0x2000c33c
 8001d84:	0800e370 	.word	0x0800e370
 8001d88:	0800e37c 	.word	0x0800e37c
 8001d8c:	0800e388 	.word	0x0800e388
 8001d90:	0800e390 	.word	0x0800e390
 8001d94:	0800e398 	.word	0x0800e398
 8001d98:	0800e3a0 	.word	0x0800e3a0
 8001d9c:	0800e3ac 	.word	0x0800e3ac
 8001da0:	0800e3b8 	.word	0x0800e3b8
 8001da4:	0800e3c4 	.word	0x0800e3c4
 8001da8:	0800e3d0 	.word	0x0800e3d0
 8001dac:	0800e3dc 	.word	0x0800e3dc
 8001db0:	0800e3e8 	.word	0x0800e3e8
 8001db4:	0800e3f0 	.word	0x0800e3f0
 8001db8:	0800e3f8 	.word	0x0800e3f8
 8001dbc:	0800e400 	.word	0x0800e400
 8001dc0:	0800e408 	.word	0x0800e408
 8001dc4:	0800e410 	.word	0x0800e410
 8001dc8:	0800e41c 	.word	0x0800e41c
 8001dcc:	0800e428 	.word	0x0800e428
 8001dd0:	0800e434 	.word	0x0800e434
 8001dd4:	0800e440 	.word	0x0800e440
 8001dd8:	0800e44c 	.word	0x0800e44c

08001ddc <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <MX_FDCAN2_Init+0x40>)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_FDCAN2_Init+0x44>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001de0:	2200      	movs	r2, #0
{
 8001de2:	b510      	push	{r4, lr}
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 12;
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001de4:	2103      	movs	r1, #3
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001de6:	240c      	movs	r4, #12
  hfdcan2.Instance = FDCAN2;
 8001de8:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001dea:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.NominalPrescaler = 1;
 8001dec:	2301      	movs	r3, #1
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001dee:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001df2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001df6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg1 = 12;
  hfdcan2.Init.DataTimeSeg2 = 3;
  hfdcan2.Init.StdFiltersNbr = 1;
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001dfa:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.ProtocolException = DISABLE;
 8001dfe:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e00:	63c2      	str	r2, [r0, #60]	; 0x3c
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001e02:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001e04:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001e06:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001e08:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001e0a:	f003 ff93 	bl	8005d34 <HAL_FDCAN_Init>
 8001e0e:	b900      	cbnz	r0, 8001e12 <MX_FDCAN2_Init+0x36>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001e16:	f002 b887 	b.w	8003f28 <Error_Handler>
 8001e1a:	bf00      	nop
 8001e1c:	20003268 	.word	0x20003268
 8001e20:	40006800 	.word	0x40006800

08001e24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001e24:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(fdcanHandle->Instance==FDCAN2)
 8001e26:	6802      	ldr	r2, [r0, #0]
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_FDCAN_MspInit+0x74>)
{
 8001e2a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	2400      	movs	r4, #0
  if(fdcanHandle->Instance==FDCAN2)
 8001e2e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001e34:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001e38:	9406      	str	r4, [sp, #24]
  if(fdcanHandle->Instance==FDCAN2)
 8001e3a:	d001      	beq.n	8001e40 <HAL_FDCAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001e3c:	b008      	add	sp, #32
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e40:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <HAL_FDCAN_MspInit+0x78>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e4a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e52:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e5c:	f042 0202 	orr.w	r2, r2, #2
 8001e60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e6a:	2260      	movs	r2, #96	; 0x60
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e72:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e74:	2300      	movs	r3, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e7e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f004 fd02 	bl	8006888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 0);
 8001e84:	4622      	mov	r2, r4
 8001e86:	2101      	movs	r1, #1
 8001e88:	2056      	movs	r0, #86	; 0x56
 8001e8a:	f003 fe79 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001e8e:	2056      	movs	r0, #86	; 0x56
 8001e90:	f003 feae 	bl	8005bf0 <HAL_NVIC_EnableIRQ>
}
 8001e94:	b008      	add	sp, #32
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
 8001e98:	40006800 	.word	0x40006800
 8001e9c:	48000400 	.word	0x48000400

08001ea0 <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8001ea0:	b530      	push	{r4, r5, lr}
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <can_rx_init+0x3c>)
	msg->filter.IdType = FDCAN_STANDARD_ID;
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001ea4:	4d0e      	ldr	r5, [pc, #56]	; (8001ee0 <can_rx_init+0x40>)
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001ea6:	685c      	ldr	r4, [r3, #4]
 8001ea8:	6444      	str	r4, [r0, #68]	; 0x44
void can_rx_init(CANRxMessage *msg){
 8001eaa:	b083      	sub	sp, #12
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001eac:	2402      	movs	r4, #2
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001eae:	2201      	movs	r2, #1
	msg->filter.FilterIndex = 0;
 8001eb0:	2300      	movs	r3, #0
	msg->filter.FilterID2 = 0x7FF;
 8001eb2:	f240 71ff 	movw	r1, #2047	; 0x7ff
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8001eb6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	msg->filter.FilterID2 = 0x7FF;
 8001eba:	6481      	str	r1, [r0, #72]	; 0x48
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001ebc:	6402      	str	r2, [r0, #64]	; 0x40
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001ebe:	63c4      	str	r4, [r0, #60]	; 0x3c
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001ec0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f004 f8b5 	bl	8006034 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 8001eca:	9400      	str	r4, [sp, #0]
 8001ecc:	4628      	mov	r0, r5
 8001ece:	4623      	mov	r3, r4
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	f004 f8e0 	bl	8006098 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 8001ed8:	b003      	add	sp, #12
 8001eda:	bd30      	pop	{r4, r5, pc}
 8001edc:	2000be30 	.word	0x2000be30
 8001ee0:	20003268 	.word	0x20003268

08001ee4 <can_tx_init>:
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <can_tx_init+0x24>)
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001ee6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001eea:	6891      	ldr	r1, [r2, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001eec:	6143      	str	r3, [r0, #20]
	msg->tx_header.MessageMarker = 0; //???
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001eee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001ef2:	2300      	movs	r3, #0
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 8001ef4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001ef8:	6081      	str	r1, [r0, #8]
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001efa:	6242      	str	r2, [r0, #36]	; 0x24
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001efc:	6203      	str	r3, [r0, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8001efe:	60c3      	str	r3, [r0, #12]
	msg->tx_header.MessageMarker = 0; //???
 8001f00:	6283      	str	r3, [r0, #40]	; 0x28
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001f02:	6103      	str	r3, [r0, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000be30 	.word	0x2000be30

08001f0c <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f12:	ed2d 8b02 	vpush	{d8}
 8001f16:	ac0a      	add	r4, sp, #40	; 0x28
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f1c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8001f20:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f24:	f8bd 0029 	ldrh.w	r0, [sp, #41]	; 0x29
 8001f28:	4c2f      	ldr	r4, [pc, #188]	; (8001fe8 <unpack_cmd+0xdc>)
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f2a:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f2e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f32:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f36:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f3a:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8001f3e:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001f42:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001fec <unpack_cmd+0xe0>
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f46:	ea4f 2902 	mov.w	r9, r2, lsl #8
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f4a:	ea4f 2803 	mov.w	r8, r3, lsl #8
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f4e:	ba40      	rev16	r0, r0
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f50:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f54:	091b      	lsrs	r3, r3, #4
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f56:	0912      	lsrs	r2, r2, #4
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f58:	ea49 0901 	orr.w	r9, r9, r1
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f5c:	b280      	uxth	r0, r0
 8001f5e:	2110      	movs	r1, #16
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f60:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f64:	ea42 1606 	orr.w	r6, r2, r6, lsl #4
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f68:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f6c:	ea48 0807 	orr.w	r8, r8, r7
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001f70:	9f1d      	ldr	r7, [sp, #116]	; 0x74
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f72:	f002 f839 	bl	8003fe8 <uint_to_float>
 8001f76:	ed87 0a00 	vstr	s0, [r7]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001f7a:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 8001f7e:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8001f82:	4630      	mov	r0, r6
 8001f84:	210c      	movs	r1, #12
 8001f86:	f002 f82f 	bl	8003fe8 <uint_to_float>
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001f8e:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 8001f92:	4648      	mov	r0, r9
 8001f94:	eeb0 0a48 	vmov.f32	s0, s16
 8001f98:	210c      	movs	r1, #12
 8001f9a:	f002 f825 	bl	8003fe8 <uint_to_float>
 8001f9e:	ed87 0a02 	vstr	s0, [r7, #8]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001fa2:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	eeb0 0a48 	vmov.f32	s0, s16
 8001fac:	210c      	movs	r1, #12
 8001fae:	f002 f81b 	bl	8003fe8 <uint_to_float>
 8001fb2:	ed87 0a03 	vstr	s0, [r7, #12]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001fb6:	edd4 0a03 	vldr	s1, [r4, #12]
 8001fba:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8001fbe:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001fc2:	ee60 0a87 	vmul.f32	s1, s1, s14
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001fcc:	210c      	movs	r1, #12
 8001fce:	eeb1 0a60 	vneg.f32	s0, s1
 8001fd2:	f002 f809 	bl	8003fe8 <uint_to_float>

    }
 8001fd6:	ecbd 8b02 	vpop	{d8}
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001fda:	ed87 0a04 	vstr	s0, [r7, #16]
    }
 8001fde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fe2:	b004      	add	sp, #16
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20003574 	.word	0x20003574
 8001fec:	00000000 	.word	0x00000000

08001ff0 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 8001ff0:	b410      	push	{r4}
 8001ff2:	4c16      	ldr	r4, [pc, #88]	; (800204c <load_from_flash+0x5c>)
 8001ff4:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	f500 20fb 	add.w	r0, r0, #514048	; 0x7d800
 8001ffe:	f504 7480 	add.w	r4, r4, #256	; 0x100
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
    	uint32_t address = FLOATS_ADDR + i*4;
    	uint64_t doubleWord = *((uint64_t*)(address));
 8002002:	18c2      	adds	r2, r0, r3
 8002004:	58c1      	ldr	r1, [r0, r3]
 8002006:	6852      	ldr	r2, [r2, #4]

    	float float1 = *((float*)(&word1));
    	float float2 = *((float*)(&word2));

    	__float_reg[i] =   float1;
    	__float_reg[i+1] = float2;
 8002008:	605a      	str	r2, [r3, #4]
    	__float_reg[i] =   float1;
 800200a:	6019      	str	r1, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 800200c:	3308      	adds	r3, #8
 800200e:	429c      	cmp	r4, r3
 8002010:	d1f7      	bne.n	8002002 <load_from_flash+0x12>
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <load_from_flash+0x60>)
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <load_from_flash+0x64>)

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8002016:	4810      	ldr	r0, [pc, #64]	; (8002058 <load_from_flash+0x68>)
 8002018:	1d11      	adds	r1, r2, #4
    	uint64_t doubleWord = *((uint64_t*)(address));

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;

		float int1 = *((int*)(&word1));
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float int2 = *((int*)(&word2));
 8002022:	edd3 7a01 	vldr	s15, [r3, #4]

		__int_reg[i] =   int1;
 8002026:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float int2 = *((int*)(&word2));
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		__int_reg[i] =   int1;
 800202e:	ee17 4a10 	vmov	r4, s14
		__int_reg[i+1] = int2;
 8002032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		__int_reg[i] =   int1;
 8002036:	50d4      	str	r4, [r2, r3]
		__int_reg[i+1] = int2;
 8002038:	ee17 4a90 	vmov	r4, s15
 800203c:	50cc      	str	r4, [r1, r3]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 800203e:	3308      	adds	r3, #8
 8002040:	4283      	cmp	r3, r0
 8002042:	d1ea      	bne.n	800201a <load_from_flash+0x2a>
    }
}
 8002044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20003574 	.word	0x20003574
 8002050:	17f8e530 	.word	0x17f8e530
 8002054:	0807d900 	.word	0x0807d900
 8002058:	0807dd00 	.word	0x0807dd00

0800205c <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	b087      	sub	sp, #28

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8002060:	f004 face 	bl	8006600 <HAL_FLASH_Unlock>
	if(status!=HAL_OK) return 1;
 8002064:	b110      	cbz	r0, 800206c <save_to_flash+0x10>
 8002066:	2001      	movs	r0, #1
    }
    HAL_FLASH_Lock();
    HAL_FLASH_OB_Lock();
    printf("SaveToFlash All Ok\n");
    return 0;
}
 8002068:	b007      	add	sp, #28
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_FLASH_OB_Unlock();
 800206c:	f004 fae8 	bl	8006640 <HAL_FLASH_OB_Unlock>
	if(status!=HAL_OK) return 2;
 8002070:	2800      	cmp	r0, #0
 8002072:	d134      	bne.n	80020de <save_to_flash+0x82>
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002074:	2305      	movs	r3, #5
 8002076:	227b      	movs	r2, #123	; 0x7b
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002078:	a901      	add	r1, sp, #4
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800207a:	2400      	movs	r4, #0
 800207c:	2502      	movs	r5, #2
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 800207e:	a802      	add	r0, sp, #8
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002084:	e9cd 4502 	strd	r4, r5, [sp, #8]
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002088:	f004 fb26 	bl	80066d8 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 800208c:	4827      	ldr	r0, [pc, #156]	; (800212c <save_to_flash+0xd0>)
 800208e:	f008 f9c1 	bl	800a414 <iprintf>
    return error;
 8002092:	9b01      	ldr	r3, [sp, #4]
    if(eraseError!=0xFFFFFFFF) return 3;
 8002094:	3301      	adds	r3, #1
 8002096:	d002      	beq.n	800209e <save_to_flash+0x42>
 8002098:	2003      	movs	r0, #3
}
 800209a:	b007      	add	sp, #28
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <save_to_flash+0xd4>)
 80020a0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80020a4:	611a      	str	r2, [r3, #16]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020aa:	f004 faeb 	bl	8006684 <FLASH_WaitForLastOperation>
    if(status!=HAL_OK) return 5;
 80020ae:	bb90      	cbnz	r0, 8002116 <save_to_flash+0xba>
 80020b0:	4c20      	ldr	r4, [pc, #128]	; (8002134 <save_to_flash+0xd8>)
 80020b2:	4e21      	ldr	r6, [pc, #132]	; (8002138 <save_to_flash+0xdc>)
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 80020b4:	4605      	mov	r5, r0
 80020b6:	e002      	b.n	80020be <save_to_flash+0x62>
 80020b8:	3502      	adds	r5, #2
 80020ba:	2d40      	cmp	r5, #64	; 0x40
 80020bc:	d012      	beq.n	80020e4 <save_to_flash+0x88>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 80020be:	1933      	adds	r3, r6, r4
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 80020c0:	4621      	mov	r1, r4
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	2000      	movs	r0, #0
 80020c8:	f004 f9ec 	bl	80064a4 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 80020cc:	3408      	adds	r4, #8
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d0f2      	beq.n	80020b8 <save_to_flash+0x5c>
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <save_to_flash+0xe0>)
 80020d4:	4629      	mov	r1, r5
 80020d6:	f008 f99d 	bl	800a414 <iprintf>
 80020da:	2006      	movs	r0, #6
 80020dc:	e7c4      	b.n	8002068 <save_to_flash+0xc>
	if(status!=HAL_OK) return 2;
 80020de:	2002      	movs	r0, #2
}
 80020e0:	b007      	add	sp, #28
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	4e16      	ldr	r6, [pc, #88]	; (8002140 <save_to_flash+0xe4>)
 80020e6:	4f17      	ldr	r7, [pc, #92]	; (8002144 <save_to_flash+0xe8>)
    for(int i=0;i<INTSCOUNT;i=i+2){
 80020e8:	4604      	mov	r4, r0
 80020ea:	e003      	b.n	80020f4 <save_to_flash+0x98>
 80020ec:	3402      	adds	r4, #2
 80020ee:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80020f2:	d012      	beq.n	800211a <save_to_flash+0xbe>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 80020f4:	19bb      	adds	r3, r7, r6
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 80020f6:	4631      	mov	r1, r6
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	2000      	movs	r0, #0
 80020fe:	f004 f9d1 	bl	80064a4 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 8002102:	3608      	adds	r6, #8
 8002104:	4605      	mov	r5, r0
 8002106:	2800      	cmp	r0, #0
 8002108:	d0f0      	beq.n	80020ec <save_to_flash+0x90>
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <save_to_flash+0xec>)
 800210c:	4621      	mov	r1, r4
 800210e:	f008 f981 	bl	800a414 <iprintf>
 8002112:	2007      	movs	r0, #7
 8002114:	e7a8      	b.n	8002068 <save_to_flash+0xc>
    if(status!=HAL_OK) return 5;
 8002116:	2005      	movs	r0, #5
 8002118:	e7a6      	b.n	8002068 <save_to_flash+0xc>
    HAL_FLASH_Lock();
 800211a:	f004 fa85 	bl	8006628 <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 800211e:	f004 faa3 	bl	8006668 <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <save_to_flash+0xf0>)
 8002124:	f008 f9fc 	bl	800a520 <puts>
    return 0;
 8002128:	4628      	mov	r0, r5
 800212a:	e79d      	b.n	8002068 <save_to_flash+0xc>
 800212c:	0800e458 	.word	0x0800e458
 8002130:	40022000 	.word	0x40022000
 8002134:	0807d800 	.word	0x0807d800
 8002138:	17f85d74 	.word	0x17f85d74
 800213c:	0800e470 	.word	0x0800e470
 8002140:	0807d900 	.word	0x0807d900
 8002144:	17f8e530 	.word	0x17f8e530
 8002148:	0800e494 	.word	0x0800e494
 800214c:	0800e4b8 	.word	0x0800e4b8

08002150 <set_dtc>:

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <set_dtc+0xa8>)
	float dtc_u = controller->dtc_u;
 8002152:	ed90 6a19 	vldr	s12, [r0, #100]	; 0x64
	float dtc_v = controller->dtc_v;
 8002156:	ed90 7a1a 	vldr	s14, [r0, #104]	; 0x68
	float dtc_w = controller->dtc_w;
 800215a:	edd0 5a1b 	vldr	s11, [r0, #108]	; 0x6c
	if(!PHASE_ORDER){
 800215e:	681b      	ldr	r3, [r3, #0]
		dtc_u = 1.0f - controller->dtc_u;
 8002160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002164:	ee37 6ac6 	vsub.f32	s12, s15, s12
		dtc_v = 1.0f - controller->dtc_v;
 8002168:	ee77 6ac7 	vsub.f32	s13, s15, s14
		dtc_w = 1.0f - controller->dtc_w;
 800216c:	ee77 7ae5 	vsub.f32	s15, s15, s11
	if(!PHASE_ORDER){
 8002170:	bb03      	cbnz	r3, 80021b4 <set_dtc+0x64>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <set_dtc+0xac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800217a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800217e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002182:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002186:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 800218a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800218e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002192:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002196:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800219a:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800219e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ae:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80021b2:	4770      	bx	lr
	}
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <set_dtc+0xac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80021c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80021c8:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 80021cc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80021d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80021dc:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 80021e0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	}
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	2000be30 	.word	0x2000be30
 80021fc:	2000c3a0 	.word	0x2000c3a0

08002200 <analog_sample>:
		else{
			*filtB = (bHist[0]+bHist[2])/2.0;
		}
}

void analog_sample (ControllerStruct *controller){
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4604      	mov	r4, r0
	/* Sample ADCs */

	HAL_ADC_Start(&ADC_CH_IA);
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <analog_sample+0xb8>)
 8002206:	f003 faab 	bl	8005760 <HAL_ADC_Start>
	HAL_ADC_Start(&ADC_CH_IB);
 800220a:	482c      	ldr	r0, [pc, #176]	; (80022bc <analog_sample+0xbc>)
 800220c:	f003 faa8 	bl	8005760 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IA, HAL_MAX_DELAY);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	4828      	ldr	r0, [pc, #160]	; (80022b8 <analog_sample+0xb8>)
 8002216:	f002 fdcf 	bl	8004db8 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&ADC_CH_IB, HAL_MAX_DELAY);
 800221a:	4828      	ldr	r0, [pc, #160]	; (80022bc <analog_sample+0xbc>)
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	f002 fdca 	bl	8004db8 <HAL_ADC_PollForConversion>
	//don't do Vbus
	//HAL_ADC_Start(&ADC_CH_MAIN);
	//HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY); //vbus conversion is slower, probably replace with polling IB if vbus is ever removed

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <analog_sample+0xc0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	bbab      	cbnz	r3, 8002296 <analog_sample+0x96>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800222a:	4823      	ldr	r0, [pc, #140]	; (80022b8 <analog_sample+0xb8>)
 800222c:	f002 fe66 	bl	8004efc <HAL_ADC_GetValue>
 8002230:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002232:	4822      	ldr	r0, [pc, #136]	; (80022bc <analog_sample+0xbc>)
 8002234:	f002 fe62 	bl	8004efc <HAL_ADC_GetValue>
 8002238:	4603      	mov	r3, r0
 800223a:	60a0      	str	r0, [r4, #8]
	//HAL_ADC_Start(&ADC_CH_MAIN);
	//HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);


	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800223c:	e9d4 5127 	ldrd	r5, r1, [r4, #156]	; 0x9c
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002240:	6862      	ldr	r2, [r4, #4]
 8002242:	eddf 6a20 	vldr	s13, [pc, #128]	; 80022c4 <analog_sample+0xc4>

    controller->i_c = -controller->i_a - controller->i_b;
    //controller->i_c_un = -controller->i_a_un - controller->i_b_un;

    //vbus raw reading moved to interrupt
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 8002246:	6920      	ldr	r0, [r4, #16]
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002248:	1b52      	subs	r2, r2, r5
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800224a:	1a5b      	subs	r3, r3, r1
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800224c:	ee07 2a10 	vmov	s14, r2
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002250:	ee07 3a90 	vmov	s15, r3
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800225c:	ee27 7a26 	vmul.f32	s14, s14, s13
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002260:	ee67 7aa6 	vmul.f32	s15, s15, s13
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002264:	ed84 7a08 	vstr	s14, [r4, #32]
    controller->i_c = -controller->i_a - controller->i_b;
 8002268:	ee77 6a27 	vadd.f32	s13, s14, s15
	controller->i_a = controller->i_a_un;
 800226c:	ed84 7a05 	vstr	s14, [r4, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 8002270:	eeb1 7a66 	vneg.f32	s14, s13
 8002274:	ed84 7a07 	vstr	s14, [r4, #28]
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002278:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	controller->i_b = controller->i_b_un;
 800227c:	edc4 7a06 	vstr	s15, [r4, #24]
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 8002280:	f7fe f978 	bl	8000574 <__aeabi_i2d>
 8002284:	a30a      	add	r3, pc, #40	; (adr r3, 80022b0 <analog_sample+0xb0>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f9dd 	bl	8000648 <__aeabi_dmul>
 800228e:	f7fe fcd3 	bl	8000c38 <__aeabi_d2f>
 8002292:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8002294:	bd38      	pop	{r3, r4, r5, pc}
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002296:	4809      	ldr	r0, [pc, #36]	; (80022bc <analog_sample+0xbc>)
 8002298:	f002 fe30 	bl	8004efc <HAL_ADC_GetValue>
 800229c:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800229e:	4806      	ldr	r0, [pc, #24]	; (80022b8 <analog_sample+0xb8>)
 80022a0:	f002 fe2c 	bl	8004efc <HAL_ADC_GetValue>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60a0      	str	r0, [r4, #8]
 80022a8:	e7c8      	b.n	800223c <analog_sample+0x3c>
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	60000000 	.word	0x60000000
 80022b4:	3fea6666 	.word	0x3fea6666
 80022b8:	20003190 	.word	0x20003190
 80022bc:	20003124 	.word	0x20003124
 80022c0:	2000be30 	.word	0x2000be30
 80022c4:	3ca50000 	.word	0x3ca50000

080022c8 <svm>:
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);

    }

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	ed2d 8b0a 	vpush	{d8-d12}
 80022ce:	eef0 9a60 	vmov.f32	s19, s1
 80022d2:	eeb0 9a41 	vmov.f32	s18, s2
 80022d6:	eeb0 ca40 	vmov.f32	s24, s0
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80022da:	eeb0 0a60 	vmov.f32	s0, s1
 80022de:	eef0 0a41 	vmov.f32	s1, s2
 80022e2:	eeb0 1a61 	vmov.f32	s2, s3
void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80022e6:	eef0 8a61 	vmov.f32	s17, s3
 80022ea:	4606      	mov	r6, r0
 80022ec:	460d      	mov	r5, r1
 80022ee:	4614      	mov	r4, r2
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80022f0:	f001 fe44 	bl	8003f7c <fminf3>
 80022f4:	eeb0 1a68 	vmov.f32	s2, s17
 80022f8:	eef0 0a49 	vmov.f32	s1, s18
 80022fc:	eeb0 8a40 	vmov.f32	s16, s0
 8002300:	eeb0 0a69 	vmov.f32	s0, s19
 8002304:	f001 fe22 	bl	8003f4c <fmaxf3>
 8002308:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002390 <svm+0xc8>
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800230c:	ed9f ba21 	vldr	s22, [pc, #132]	; 8002394 <svm+0xcc>
 8002310:	eddf aa21 	vldr	s21, [pc, #132]	; 8002398 <svm+0xd0>
 8002314:	ed9f aa21 	vldr	s20, [pc, #132]	; 800239c <svm+0xd4>
 8002318:	eec7 ba8c 	vdiv.f32	s23, s15, s24
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800231c:	ee38 8a00 	vadd.f32	s16, s16, s0
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002320:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
 8002324:	eee8 9a4c 	vfms.f32	s19, s16, s24
 8002328:	eeb0 0a4b 	vmov.f32	s0, s22
 800232c:	eef0 0a6a 	vmov.f32	s1, s21
 8002330:	eea9 0aab 	vfma.f32	s0, s19, s23
 8002334:	f001 fdfa 	bl	8003f2c <fast_fmaxf>
 8002338:	eeb1 8a48 	vneg.f32	s16, s16
 800233c:	eef0 0a4a 	vmov.f32	s1, s20
 8002340:	f001 fdfc 	bl	8003f3c <fast_fminf>
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002344:	eea8 9a0c 	vfma.f32	s18, s16, s24
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002348:	ed86 0a00 	vstr	s0, [r6]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800234c:	eeb0 0a4b 	vmov.f32	s0, s22
 8002350:	eef0 0a6a 	vmov.f32	s1, s21
 8002354:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8002358:	f001 fde8 	bl	8003f2c <fast_fmaxf>
 800235c:	eef0 0a4a 	vmov.f32	s1, s20
 8002360:	f001 fdec 	bl	8003f3c <fast_fminf>
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002364:	eee8 8a0c 	vfma.f32	s17, s16, s24
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002368:	ed85 0a00 	vstr	s0, [r5]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800236c:	eeb0 0a4b 	vmov.f32	s0, s22
 8002370:	eef0 0a6a 	vmov.f32	s1, s21
 8002374:	eea8 0aab 	vfma.f32	s0, s17, s23
 8002378:	f001 fdd8 	bl	8003f2c <fast_fmaxf>
 800237c:	eef0 0a4a 	vmov.f32	s1, s20
 8002380:	f001 fddc 	bl	8003f3c <fast_fminf>

    }
 8002384:	ecbd 8b0a 	vpop	{d8-d12}
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002388:	ed84 0a00 	vstr	s0, [r4]
    }
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	bf00      	nop
 8002390:	3f133333 	.word	0x3f133333
 8002394:	3ef0a3d7 	.word	0x3ef0a3d7
 8002398:	00000000 	.word	0x00000000
 800239c:	3f70a3d7 	.word	0x3f70a3d7

080023a0 <zero_current>:

void zero_current(ControllerStruct *controller){
 80023a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
    int adc_b_offset = 0;
    int n = 1000;
    controller->dtc_u = 0.f;
 80023a4:	2300      	movs	r3, #0
void zero_current(ControllerStruct *controller){
 80023a6:	ed2d 8b02 	vpush	{d8}
    int adc_b_offset = 0;
 80023aa:	f04f 0900 	mov.w	r9, #0
    controller->dtc_u = 0.f;
 80023ae:	6643      	str	r3, [r0, #100]	; 0x64
    controller->dtc_v = 0.f;
 80023b0:	6683      	str	r3, [r0, #104]	; 0x68
    controller->dtc_w = 0.f;
 80023b2:	66c3      	str	r3, [r0, #108]	; 0x6c
void zero_current(ControllerStruct *controller){
 80023b4:	4604      	mov	r4, r0
	HAL_ADC_Start(&ADC_CH_IA);
 80023b6:	4e3c      	ldr	r6, [pc, #240]	; (80024a8 <zero_current+0x108>)
	HAL_ADC_Start(&ADC_CH_IB);
 80023b8:	4f3c      	ldr	r7, [pc, #240]	; (80024ac <zero_current+0x10c>)
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023ba:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 80024b0 <zero_current+0x110>
    set_dtc(controller);
 80023be:	f7ff fec7 	bl	8002150 <set_dtc>
    int adc_a_offset = 0;
 80023c2:	46ca      	mov	sl, r9
    set_dtc(controller);
 80023c4:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
 80023c8:	e038      	b.n	800243c <zero_current+0x9c>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80023ca:	f002 fd97 	bl	8004efc <HAL_ADC_GetValue>
 80023ce:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80023d0:	4638      	mov	r0, r7
 80023d2:	f002 fd93 	bl	8004efc <HAL_ADC_GetValue>
 80023d6:	4605      	mov	r5, r0
 80023d8:	60a0      	str	r0, [r4, #8]
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023da:	e9d4 2327 	ldrd	r2, r3, [r4, #156]	; 0x9c
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023de:	f8d4 8004 	ldr.w	r8, [r4, #4]
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 80023e2:	6920      	ldr	r0, [r4, #16]
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023e4:	eba8 0202 	sub.w	r2, r8, r2
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023e8:	1aeb      	subs	r3, r5, r3
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023ea:	ee07 2a10 	vmov	s14, r2
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023ee:	ee07 3a90 	vmov	s15, r3
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023fa:	ee27 7a08 	vmul.f32	s14, s14, s16
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023fe:	ee67 7a88 	vmul.f32	s15, s15, s16
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002402:	ed84 7a08 	vstr	s14, [r4, #32]
    controller->i_c = -controller->i_a - controller->i_b;
 8002406:	ee77 6a27 	vadd.f32	s13, s14, s15
	controller->i_a = controller->i_a_un;
 800240a:	ed84 7a05 	vstr	s14, [r4, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 800240e:	eeb1 7a66 	vneg.f32	s14, s13
 8002412:	ed84 7a07 	vstr	s14, [r4, #28]
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002416:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	controller->i_b = controller->i_b_un;
 800241a:	edc4 7a06 	vstr	s15, [r4, #24]
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 800241e:	f7fe f8a9 	bl	8000574 <__aeabi_i2d>
 8002422:	a31f      	add	r3, pc, #124	; (adr r3, 80024a0 <zero_current+0x100>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f90e 	bl	8000648 <__aeabi_dmul>
 800242c:	f7fe fc04 	bl	8000c38 <__aeabi_d2f>

    for (int i = 0; i<n; i++){               // Average n samples
 8002430:	f1bb 0b01 	subs.w	fp, fp, #1
    	analog_sample(controller);
    	adc_a_offset +=  controller->adc_a_raw;
    	adc_b_offset += controller->adc_b_raw;
 8002434:	44a9      	add	r9, r5
    	adc_a_offset +=  controller->adc_a_raw;
 8002436:	44c2      	add	sl, r8
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 8002438:	62e0      	str	r0, [r4, #44]	; 0x2c
    for (int i = 0; i<n; i++){               // Average n samples
 800243a:	d01e      	beq.n	800247a <zero_current+0xda>
	HAL_ADC_Start(&ADC_CH_IA);
 800243c:	4630      	mov	r0, r6
 800243e:	f003 f98f 	bl	8005760 <HAL_ADC_Start>
	HAL_ADC_Start(&ADC_CH_IB);
 8002442:	4638      	mov	r0, r7
 8002444:	f003 f98c 	bl	8005760 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IA, HAL_MAX_DELAY);
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	4630      	mov	r0, r6
 800244e:	f002 fcb3 	bl	8004db8 <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&ADC_CH_IB, HAL_MAX_DELAY);
 8002452:	f04f 31ff 	mov.w	r1, #4294967295
 8002456:	4638      	mov	r0, r7
 8002458:	f002 fcae 	bl	8004db8 <HAL_ADC_PollForConversion>
	if(!PHASE_ORDER){
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <zero_current+0x114>)
 800245e:	681b      	ldr	r3, [r3, #0]
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002460:	4630      	mov	r0, r6
	if(!PHASE_ORDER){
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0b1      	beq.n	80023ca <zero_current+0x2a>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002466:	4638      	mov	r0, r7
 8002468:	f002 fd48 	bl	8004efc <HAL_ADC_GetValue>
 800246c:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800246e:	4630      	mov	r0, r6
 8002470:	f002 fd44 	bl	8004efc <HAL_ADC_GetValue>
 8002474:	4605      	mov	r5, r0
 8002476:	60a0      	str	r0, [r4, #8]
 8002478:	e7af      	b.n	80023da <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
    controller->adc_b_offset = adc_b_offset/n;

    }
 800247a:	ecbd 8b02 	vpop	{d8}
    controller->adc_a_offset = adc_a_offset/n;
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <zero_current+0x118>)
 8002480:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8002484:	fb81 300a 	smull	r3, r0, r1, sl
    controller->adc_b_offset = adc_b_offset/n;
 8002488:	fb81 3109 	smull	r3, r1, r1, r9
 800248c:	ea4f 73e9 	mov.w	r3, r9, asr #31
    controller->adc_a_offset = adc_a_offset/n;
 8002490:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
    controller->adc_b_offset = adc_b_offset/n;
 8002494:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8002498:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
    }
 800249c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a0:	60000000 	.word	0x60000000
 80024a4:	3fea6666 	.word	0x3fea6666
 80024a8:	20003190 	.word	0x20003190
 80024ac:	20003124 	.word	0x20003124
 80024b0:	3ca50000 	.word	0x3ca50000
 80024b4:	2000be30 	.word	0x2000be30
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80024bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    controller->ki_q = KI_Q;
    controller->k_d = K_SCALE*I_BW;
    controller->k_q = K_SCALE*I_BW;
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
    controller->ki_fw = .1f*controller->ki_d;
    controller->phase_order = PHASE_ORDER;
 80024c0:	492b      	ldr	r1, [pc, #172]	; (8002570 <init_controller_params+0xb4>)
	controller->ki_d = KI_D;
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <init_controller_params+0xb8>)
    controller->k_d = K_SCALE*I_BW;
 80024c4:	4d2c      	ldr	r5, [pc, #176]	; (8002578 <init_controller_params+0xbc>)
    controller->phase_order = PHASE_ORDER;
 80024c6:	6809      	ldr	r1, [r1, #0]
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80024c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800257c <init_controller_params+0xc0>
    controller->k_d = K_SCALE*I_BW;
 80024cc:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8002580 <init_controller_params+0xc4>
    controller->ki_fw = .1f*controller->ki_d;
 80024d0:	4c2c      	ldr	r4, [pc, #176]	; (8002584 <init_controller_params+0xc8>)
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <init_controller_params+0xcc>)
 80024d4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002594 <init_controller_params+0xd8>
 80024d8:	4f2c      	ldr	r7, [pc, #176]	; (800258c <init_controller_params+0xd0>)
void init_controller_params(ControllerStruct *controller){
 80024da:	ed2d 8b02 	vpush	{d8}
	controller->ki_d = KI_D;
 80024de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    controller->ki_q = KI_Q;
 80024e2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    controller->k_d = K_SCALE*I_BW;
 80024e6:	edd5 7a02 	vldr	s15, [r5, #8]
 80024ea:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8002590 <init_controller_params+0xd4>
    controller->ki_fw = .1f*controller->ki_d;
 80024ee:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80024f2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80024f6:	eee7 6a87 	vfma.f32	s13, s15, s14
    controller->phase_order = PHASE_ORDER;
 80024fa:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
 80024fe:	f500 7580 	add.w	r5, r0, #256	; 0x100
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002502:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002506:	ee86 7a26 	vdiv.f32	s14, s12, s13
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800250a:	2401      	movs	r4, #1
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 800250c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8002510:	2600      	movs	r6, #0
 8002512:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    controller->k_d = K_SCALE*I_BW;
 8002516:	ee67 7aa5 	vmul.f32	s15, s15, s11
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800251a:	ee37 7a06 	vadd.f32	s14, s14, s12
    controller->k_d = K_SCALE*I_BW;
 800251e:	edc0 7a1f 	vstr	s15, [r0, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002522:	ed80 7a24 	vstr	s14, [r0, #144]	; 0x90
    controller->k_q = K_SCALE*I_BW;
 8002526:	edc0 7a20 	vstr	s15, [r0, #128]	; 0x80
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800252a:	ee07 4a90 	vmov	s15, r4
 800252e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002532:	3401      	adds	r4, #1
 8002534:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002538:	ee17 0a90 	vmov	r0, s15
 800253c:	f7fe f82c 	bl	8000598 <__aeabi_f2d>
 8002540:	ec41 0b10 	vmov	d0, r0, r1
 8002544:	f00b fc18 	bl	800dd78 <exp>
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002548:	4642      	mov	r2, r8
 800254a:	ec51 0b10 	vmov	r0, r1, d0
 800254e:	464b      	mov	r3, r9
 8002550:	f7fe f87a 	bl	8000648 <__aeabi_dmul>
 8002554:	4632      	mov	r2, r6
 8002556:	463b      	mov	r3, r7
 8002558:	f7fd fec0 	bl	80002dc <__adddf3>
 800255c:	f7fe fb6c 	bl	8000c38 <__aeabi_d2f>
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002560:	2c80      	cmp	r4, #128	; 0x80
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002562:	f845 0b04 	str.w	r0, [r5], #4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002566:	d1e0      	bne.n	800252a <init_controller_params+0x6e>
    }

    }
 8002568:	ecbd 8b02 	vpop	{d8}
 800256c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002570:	2000be30 	.word	0x2000be30
 8002574:	3d3851ec 	.word	0x3d3851ec
 8002578:	20003574 	.word	0x20003574
 800257c:	3966980b 	.word	0x3966980b
 8002580:	38d1b717 	.word	0x38d1b717
 8002584:	3b9374bd 	.word	0x3b9374bd
 8002588:	400ccccd 	.word	0x400ccccd
 800258c:	3ff00000 	.word	0x3ff00000
 8002590:	be79ffff 	.word	0xbe79ffff
 8002594:	3ff33333 	.word	0x3ff33333

08002598 <reset_foc>:

void reset_foc(ControllerStruct *controller){

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <reset_foc+0x6c>)
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 80025a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80025a4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025a8:	ee27 7a26 	vmul.f32	s14, s14, s13
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
    controller->i_d_des = 0;
 80025ac:	2300      	movs	r3, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80025ae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    controller->q_int = 0;
    controller->d_int = 0;
    controller->v_q = 0;
    controller->v_d = 0;
    controller->fw_int = 0;
    controller->otw_flag = 0;
 80025b2:	2100      	movs	r1, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80025b4:	ed82 7a0f 	vstr	s14, [r2, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80025b8:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 80025bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80025c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80025c8:	ed82 7a0d 	vstr	s14, [r2, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80025cc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80025d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025dc:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
    controller->otw_flag = 0;
 80025e0:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
    controller->i_d_des = 0;
 80025e4:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    controller->i_q_des = 0;
 80025e8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    controller->i_d = 0;
 80025ec:	6483      	str	r3, [r0, #72]	; 0x48
    controller->i_q = 0;
 80025ee:	64c3      	str	r3, [r0, #76]	; 0x4c
    controller->i_q_filt = 0;
 80025f0:	6503      	str	r3, [r0, #80]	; 0x50
    controller->q_int = 0;
 80025f2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    controller->d_int = 0;
 80025f6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    controller->v_q = 0;
 80025fa:	6603      	str	r3, [r0, #96]	; 0x60
    controller->v_d = 0;
 80025fc:	65c3      	str	r3, [r0, #92]	; 0x5c
    controller->fw_int = 0;
 80025fe:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

    }
 8002602:	4770      	bx	lr
 8002604:	2000c3a0 	.word	0x2000c3a0

08002608 <field_weaken>:

void field_weaken(ControllerStruct *controller)
{
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002608:	edd0 7a3a 	vldr	s15, [r0, #232]	; 0xe8
 800260c:	edd0 6a3b 	vldr	s13, [r0, #236]	; 0xec
 8002610:	ed90 0a3c 	vldr	s0, [r0, #240]	; 0xf0
 8002614:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002678 <field_weaken+0x70>
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002618:	eddf 0a18 	vldr	s1, [pc, #96]	; 800267c <field_weaken+0x74>
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 800261c:	ee77 7ae6 	vsub.f32	s15, s15, s13
{
 8002620:	b510      	push	{r4, lr}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002622:	eea7 0a87 	vfma.f32	s0, s15, s14
{
 8002626:	4604      	mov	r4, r0
 8002628:	ed2d 8b02 	vpush	{d8}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 800262c:	ed80 0a3c 	vstr	s0, [r0, #240]	; 0xf0
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002630:	f001 fc84 	bl	8003f3c <fast_fminf>
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <field_weaken+0x78>)
 8002636:	edd3 0a06 	vldr	s1, [r3, #24]
 800263a:	eef1 0a60 	vneg.f32	s1, s1
 800263e:	f001 fc75 	bl	8003f2c <fast_fmaxf>
       controller->i_d_des = controller->fw_int;
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002642:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002646:	ed84 0a3c 	vstr	s0, [r4, #240]	; 0xf0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 800264a:	ee60 7a40 	vnmul.f32	s15, s0, s0
       controller->i_d_des = controller->fw_int;
 800264e:	ed84 0a2b 	vstr	s0, [r4, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002652:	eee7 7a07 	vfma.f32	s15, s14, s14
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002656:	ed94 0a2c 	vldr	s0, [r4, #176]	; 0xb0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 800265a:	eeb1 8ae7 	vsqrt.f32	s16, s15
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 800265e:	eef0 0a48 	vmov.f32	s1, s16
 8002662:	f001 fc6b 	bl	8003f3c <fast_fminf>
 8002666:	eef1 0a48 	vneg.f32	s1, s16
 800266a:	f001 fc5f 	bl	8003f2c <fast_fmaxf>


}
 800266e:	ecbd 8b02 	vpop	{d8}
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002672:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
}
 8002676:	bd10      	pop	{r4, pc}
 8002678:	3ba3d70a 	.word	0x3ba3d70a
 800267c:	00000000 	.word	0x00000000
 8002680:	20003574 	.word	0x20003574

08002684 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	ed2d 8b08 	vpush	{d8-d11}
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800268a:	edd1 9a17 	vldr	s19, [r1, #92]	; 0x5c
		controller->dtheta_elec = encoder->elec_velocity;
 800268e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 8002690:	4d9f      	ldr	r5, [pc, #636]	; (8002910 <commutate+0x28c>)
 8002692:	ed91 6a18 	vldr	s12, [r1, #96]	; 0x60
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002696:	edd1 6a03 	vldr	s13, [r1, #12]
		controller->dtheta_elec = encoder->elec_velocity;
 800269a:	6403      	str	r3, [r0, #64]	; 0x40
		controller->theta_elec = encoder->elec_angle;
 800269c:	edc0 9a0e 	vstr	s19, [r0, #56]	; 0x38
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 80026a0:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80026a4:	ed90 aa05 	vldr	s20, [r0, #20]
 80026a8:	ed90 ba06 	vldr	s22, [r0, #24]
 80026ac:	edd0 aa07 	vldr	s21, [r0, #28]
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026b0:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8002914 <commutate+0x290>
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 80026b4:	eec6 7a07 	vdiv.f32	s15, s12, s14
{
 80026b8:	4604      	mov	r4, r0
    float cf = cos_lut(theta);
 80026ba:	eeb0 0a69 	vmov.f32	s0, s19
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 80026be:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80026c2:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
 80026c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026ca:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80026ce:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    float cf = cos_lut(theta);
 80026d2:	f001 fcc5 	bl	8004060 <cos_lut>
 80026d6:	eeb0 8a40 	vmov.f32	s16, s0
    float sf = sin_lut(theta);
 80026da:	eeb0 0a69 	vmov.f32	s0, s19
 80026de:	f001 fc99 	bl	8004014 <sin_lut>
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80026e2:	ee68 5a09 	vmul.f32	s11, s16, s18
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026e6:	ee28 5ac8 	vnmul.f32	s10, s17, s16
 80026ea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002918 <commutate+0x294>
 80026ee:	eddf 4a8b 	vldr	s9, [pc, #556]	; 800291c <commutate+0x298>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80026f2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80026f6:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 8002920 <commutate+0x29c>
 80026fa:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026fe:	ed9f 6a89 	vldr	s12, [pc, #548]	; 8002924 <commutate+0x2a0>
 8002702:	ed94 4a14 	vldr	s8, [r4, #80]	; 0x50
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002706:	eef0 7a65 	vmov.f32	s15, s11
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800270a:	eef0 2a45 	vmov.f32	s5, s10
 800270e:	eee0 2a07 	vfma.f32	s5, s0, s14

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002712:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8002716:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800271a:	eee0 7a28 	vfma.f32	s15, s0, s17
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800271e:	eea0 5a09 	vfma.f32	s10, s0, s18
 8002722:	ee2a 7aa2 	vmul.f32	s14, s21, s5
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002726:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800272a:	eed0 5a28 	vfnms.f32	s11, s0, s17
 800272e:	eeea 7a40 	vfms.f32	s15, s20, s0
 8002732:	eeab 7a05 	vfma.f32	s14, s22, s10
 8002736:	eeea 7aa5 	vfma.f32	s15, s21, s11
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800273a:	eeaa 7a08 	vfma.f32	s14, s20, s16
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800273e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002742:	ee27 7a24 	vmul.f32	s14, s14, s9
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002746:	ee66 6a83 	vmul.f32	s13, s13, s6
 800274a:	ed9f 3a77 	vldr	s6, [pc, #476]	; 8002928 <commutate+0x2a4>
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800274e:	edd4 4a15 	vldr	s9, [r4, #84]	; 0x54
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002752:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800292c <commutate+0x2a8>
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002756:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800275a:	eee3 6a83 	vfma.f32	s13, s7, s6
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800275e:	ee67 7a86 	vmul.f32	s15, s15, s12
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002762:	ee27 6a06 	vmul.f32	s12, s14, s12
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002766:	eee4 7a05 	vfma.f32	s15, s8, s10
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800276a:	eea4 6a85 	vfma.f32	s12, s9, s10
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800276e:	eddf 5a70 	vldr	s11, [pc, #448]	; 8002930 <commutate+0x2ac>
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002772:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002776:	ee66 5aa5 	vmul.f32	s11, s13, s11
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800277a:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800277e:	edc4 5a3a 	vstr	s11, [r4, #232]	; 0xe8
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002782:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002786:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800278a:	ed95 0a03 	vldr	s0, [r5, #12]
 800278e:	ed84 0a3e 	vstr	s0, [r4, #248]	; 0xf8
       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002792:	f001 fc0b 	bl	8003fac <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002796:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
 800279a:	edd4 9a2b 	vldr	s19, [r4, #172]	; 0xac

       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800279e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 80027a2:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
       float i_q_error = controller->i_q_des - controller->i_q;
 80027a6:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 80027aa:	ed94 8a2c 	vldr	s16, [r4, #176]	; 0xb0
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80027ae:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       float i_d_error = controller->i_d_des - controller->i_d;
 80027b2:	ee79 9ae6 	vsub.f32	s19, s19, s13
       float i_q_error = controller->i_q_des - controller->i_q;
 80027b6:	ee38 8a47 	vsub.f32	s16, s16, s14
       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 80027ba:	eea7 0aa9 	vfma.f32	s0, s15, s19
 80027be:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80027c2:	f001 fbbb 	bl	8003f3c <fast_fminf>
 80027c6:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 80027ca:	eef1 0a60 	vneg.f32	s1, s1
 80027ce:	f001 fbad 	bl	8003f2c <fast_fmaxf>

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80027d2:	edd4 6a21 	vldr	s13, [r4, #132]	; 0x84
 80027d6:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
 80027da:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80027de:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80027e2:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80027e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80027ea:	eee7 7a29 	vfma.f32	s15, s14, s19
 80027ee:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 80027f2:	eeb0 0a67 	vmov.f32	s0, s15
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80027f6:	f001 fba1 	bl	8003f3c <fast_fminf>
 80027fa:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 80027fe:	eef1 0a60 	vneg.f32	s1, s1
 8002802:	f001 fb93 	bl	8003f2c <fast_fmaxf>
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002806:	ed94 6a20 	vldr	s12, [r4, #128]	; 0x80
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800280a:	edd4 6a22 	vldr	s13, [r4, #136]	; 0x88
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800280e:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002812:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8002816:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800281a:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800281e:	ee66 6a26 	vmul.f32	s13, s12, s13
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002822:	eef0 5a47 	vmov.f32	s11, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002826:	ee67 7ae7 	vnmul.f32	s15, s15, s15
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800282a:	eee6 5a08 	vfma.f32	s11, s12, s16
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800282e:	eea6 7a88 	vfma.f32	s14, s13, s16
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002832:	eee0 7aa0 	vfma.f32	s15, s1, s1
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002836:	edc4 5a18 	vstr	s11, [r4, #96]	; 0x60
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800283a:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002842:	eeb1 8ae7 	vsqrt.f32	s16, s15
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002846:	f001 fb79 	bl	8003f3c <fast_fminf>
 800284a:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 800284e:	eef1 0a60 	vneg.f32	s1, s1
 8002852:	f001 fb6b 	bl	8003f2c <fast_fmaxf>
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002856:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 800285a:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 800285e:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002862:	ee67 7a07 	vmul.f32	s15, s14, s14
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002866:	eeb0 0a47 	vmov.f32	s0, s14
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 800286a:	eee6 7aa6 	vfma.f32	s15, s13, s13
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800286e:	eef0 0a48 	vmov.f32	s1, s16
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002872:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8002876:	ed84 7a3b 	vstr	s14, [r4, #236]	; 0xec
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800287a:	f001 fb5f 	bl	8003f3c <fast_fminf>
 800287e:	eef1 0a48 	vneg.f32	s1, s16
 8002882:	f001 fb53 	bl	8003f2c <fast_fmaxf>

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002886:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800288a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800288e:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002892:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8002896:	f001 fb89 	bl	8003fac <limit_norm>
       //debug according to Ben: apply small positive voltage on q-axis, motor should spin in positive direction
       controller->v_q = 1.0;
       controller->v_d = 0.0;


       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800289a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800289e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002934 <commutate+0x2b0>
 80028a2:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 80028a6:	eea7 8a27 	vfma.f32	s16, s14, s15
       controller->v_d = 0.0;
 80028aa:	2300      	movs	r3, #0
       controller->v_q = 1.0;
 80028ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028b0:	6622      	str	r2, [r4, #96]	; 0x60
       controller->v_d = 0.0;
 80028b2:	65e3      	str	r3, [r4, #92]	; 0x5c
    float cf = cos_lut(theta);
 80028b4:	eeb0 0a48 	vmov.f32	s0, s16
 80028b8:	f001 fbd2 	bl	8004060 <cos_lut>
 80028bc:	eef0 1a40 	vmov.f32	s3, s0
    float sf = sin_lut(theta);
 80028c0:	eeb0 0a48 	vmov.f32	s0, s16
    float cf = cos_lut(theta);
 80028c4:	eeb0 8a61 	vmov.f32	s16, s3
    float sf = sin_lut(theta);
 80028c8:	f001 fba4 	bl	8004014 <sin_lut>
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80028cc:	ee68 1a09 	vmul.f32	s3, s16, s18
    *a = cf*d - sf*q;
 80028d0:	eef1 0a40 	vneg.f32	s1, s0
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80028d4:	eeb0 1a61 	vmov.f32	s2, s3
 80028d8:	eea0 1a28 	vfma.f32	s2, s0, s17

       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80028dc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80028e0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80028e4:	eed0 1a28 	vfnms.f32	s3, s0, s17
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80028e8:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80028ec:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80028f0:	ed84 1a1d 	vstr	s2, [r4, #116]	; 0x74
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80028f4:	edc4 1a1e 	vstr	s3, [r4, #120]	; 0x78
    *a = cf*d - sf*q;
 80028f8:	edc4 0a1c 	vstr	s1, [r4, #112]	; 0x70
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80028fc:	f7ff fce4 	bl	80022c8 <svm>
       //DEBUG zeros
       //svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       set_dtc(controller);

    }
 8002900:	ecbd 8b08 	vpop	{d8-d11}
       set_dtc(controller);
 8002904:	4620      	mov	r0, r4
    }
 8002906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       set_dtc(controller);
 800290a:	f7ff bc21 	b.w	8002150 <set_dtc>
 800290e:	bf00      	nop
 8002910:	20003574 	.word	0x20003574
 8002914:	3f5db3d7 	.word	0x3f5db3d7
 8002918:	bf5db3d7 	.word	0xbf5db3d7
 800291c:	3f2aaaab 	.word	0x3f2aaaab
 8002920:	3dcccccd 	.word	0x3dcccccd
 8002924:	3c23d70a 	.word	0x3c23d70a
 8002928:	3f666666 	.word	0x3f666666
 800292c:	3f7d70a4 	.word	0x3f7d70a4
 8002930:	3f1fc60a 	.word	0x3f1fc60a
 8002934:	385c3372 	.word	0x385c3372

08002938 <torque_control>:


void torque_control(ControllerStruct *controller){

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002938:	edd0 7a36 	vldr	s15, [r0, #216]	; 0xd8
 800293c:	edd0 3a0f 	vldr	s7, [r0, #60]	; 0x3c
 8002940:	edd0 4a38 	vldr	s9, [r0, #224]	; 0xe0
 8002944:	edd0 6a35 	vldr	s13, [r0, #212]	; 0xd4
 8002948:	ed90 4a0d 	vldr	s8, [r0, #52]	; 0x34
 800294c:	edd0 5a37 	vldr	s11, [r0, #220]	; 0xdc
    controller->i_q_des = torque_des/(KT*GR);
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <torque_control+0x50>)
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002952:	ed90 6a39 	vldr	s12, [r0, #228]	; 0xe4
    controller->i_q_des = torque_des/(KT*GR);
 8002956:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800295a:	ed93 5a11 	vldr	s10, [r3, #68]	; 0x44
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 800295e:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8002962:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8002966:	ee67 7aa4 	vmul.f32	s15, s15, s9
    controller->i_q_des = torque_des/(KT*GR);
 800296a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800296e:	eee5 7aa6 	vfma.f32	s15, s11, s13
    controller->i_d_des = 0.0f;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002978:	ee77 7a86 	vadd.f32	s15, s15, s12
    controller->i_q_des = torque_des/(KT*GR);
 800297c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002980:	edc0 6a2c 	vstr	s13, [r0, #176]	; 0xb0

    }
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20003574 	.word	0x20003574

0800298c <zero_commands>:



void zero_commands(ControllerStruct * controller){
	//printf("ZERO COMMANDS!!");
	controller->t_ff = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	controller->kp = 0;
 8002992:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	controller->kd = 0;
 8002996:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	controller->p_des = 0;
 800299a:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	controller->v_des = 0;
 800299e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
	controller->i_q_des = 0;
 80029a2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
}
 80029a6:	4770      	bx	lr

080029a8 <debug_data_capture>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "flash_access.h"

void debug_data_capture(EncoderStruct *encoder, ControllerStruct *controller){
 80029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			const char la[] = "ia";
			const char lb[] = "ib";
			const char lc[] = "ic";
			const char ld[] = "id";
			const char le[] = "iq";
			const char lf[] = "theta_elec";
 80029ac:	4a9e      	ldr	r2, [pc, #632]	; (8002c28 <debug_data_capture+0x280>)
			const char lg[] = "theta_mech";
 80029ae:	4b9f      	ldr	r3, [pc, #636]	; (8002c2c <debug_data_capture+0x284>)
			const char la[] = "ia";
 80029b0:	4d9f      	ldr	r5, [pc, #636]	; (8002c30 <debug_data_capture+0x288>)
void debug_data_capture(EncoderStruct *encoder, ControllerStruct *controller){
 80029b2:	ed2d 8b02 	vpush	{d8}
 80029b6:	460f      	mov	r7, r1
			const char lf[] = "theta_elec";
 80029b8:	ca07      	ldmia	r2, {r0, r1, r2}
void debug_data_capture(EncoderStruct *encoder, ControllerStruct *controller){
 80029ba:	b0a5      	sub	sp, #148	; 0x94
			const char lf[] = "theta_elec";
 80029bc:	ac1e      	add	r4, sp, #120	; 0x78
 80029be:	c403      	stmia	r4!, {r0, r1}
 80029c0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80029c4:	f824 2b02 	strh.w	r2, [r4], #2
			const char lg[] = "theta_mech";
 80029c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029cc:	ab21      	add	r3, sp, #132	; 0x84
 80029ce:	c303      	stmia	r3!, {r0, r1}
			const char lb[] = "ib";
 80029d0:	4898      	ldr	r0, [pc, #608]	; (8002c34 <debug_data_capture+0x28c>)
			const char la[] = "ia";
 80029d2:	6829      	ldr	r1, [r5, #0]
			const char lb[] = "ib";
 80029d4:	6806      	ldr	r6, [r0, #0]
			const char lc[] = "ic";
 80029d6:	4898      	ldr	r0, [pc, #608]	; (8002c38 <debug_data_capture+0x290>)
			const char lf[] = "theta_elec";
 80029d8:	f884 c000 	strb.w	ip, [r4]
			const char lc[] = "ic";
 80029dc:	6805      	ldr	r5, [r0, #0]
			const char ld[] = "id";
 80029de:	4c97      	ldr	r4, [pc, #604]	; (8002c3c <debug_data_capture+0x294>)
			const char le[] = "iq";
 80029e0:	4897      	ldr	r0, [pc, #604]	; (8002c40 <debug_data_capture+0x298>)
			const char lg[] = "theta_mech";
 80029e2:	f823 2b02 	strh.w	r2, [r3], #2
			const char le[] = "iq";
 80029e6:	f8d0 c000 	ldr.w	ip, [r0]
			const char ld[] = "id";
 80029ea:	6824      	ldr	r4, [r4, #0]
			const char lh[] = "vbus";
 80029ec:	4895      	ldr	r0, [pc, #596]	; (8002c44 <debug_data_capture+0x29c>)
			const char la[] = "ia";
 80029ee:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
			const char lg[] = "theta_mech";
 80029f2:	0c12      	lsrs	r2, r2, #16
			const char la[] = "ia";
 80029f4:	0c09      	lsrs	r1, r1, #16
			const char lg[] = "theta_mech";
 80029f6:	701a      	strb	r2, [r3, #0]
			const char la[] = "ia";
 80029f8:	f88d 105e 	strb.w	r1, [sp, #94]	; 0x5e
			const char lb[] = "ib";
 80029fc:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
			const char lh[] = "vbus";
 8002a00:	c803      	ldmia	r0, {r0, r1}
			const char lc[] = "ic";
 8002a02:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
			const char ld[] = "id";
 8002a06:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
			const char le[] = "iq";
 8002a0a:	ea4f 431c 	mov.w	r3, ip, lsr #16
			const char lb[] = "ib";
 8002a0e:	0c36      	lsrs	r6, r6, #16
			const char lc[] = "ic";
 8002a10:	0c2d      	lsrs	r5, r5, #16
			const char ld[] = "id";
 8002a12:	0c24      	lsrs	r4, r4, #16
			const char lb[] = "ib";
 8002a14:	f88d 6062 	strb.w	r6, [sp, #98]	; 0x62
			const char lc[] = "ic";
 8002a18:	f88d 5066 	strb.w	r5, [sp, #102]	; 0x66
			const char ld[] = "id";
 8002a1c:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
			const char le[] = "iq";
 8002a20:	f8ad c06c 	strh.w	ip, [sp, #108]	; 0x6c
 8002a24:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
			const char li[] = "0";
			if(debugCounter%sampleRate==0){
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <debug_data_capture+0x2a0>)
 8002a2a:	4a88      	ldr	r2, [pc, #544]	; (8002c4c <debug_data_capture+0x2a4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
			const char lh[] = "vbus";
 8002a2e:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
			if(debugCounter%sampleRate==0){
 8002a32:	4987      	ldr	r1, [pc, #540]	; (8002c50 <debug_data_capture+0x2a8>)
			const char lh[] = "vbus";
 8002a34:	901c      	str	r0, [sp, #112]	; 0x70
			if(debugCounter%sampleRate==0){
 8002a36:	fb02 1203 	mla	r2, r2, r3, r1
 8002a3a:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
			const char li[] = "0";
 8002a3e:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002a42:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
			if(debugCounter%sampleRate==0){
 8002a46:	d243      	bcs.n	8002ad0 <debug_data_capture+0x128>
						k = 0;
					}
				}

				//printf("%d\n\r",k);
				if(k<sampleCount){
 8002a48:	f240 52db 	movw	r2, #1499	; 0x5db
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	dc47      	bgt.n	8002ae0 <debug_data_capture+0x138>
				int k = debugCounter/sampleRate;
 8002a50:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <debug_data_capture+0x2ac>)
				valsA[k] = controller->i_a;
 8002a52:	4981      	ldr	r1, [pc, #516]	; (8002c58 <debug_data_capture+0x2b0>)
 8002a54:	6978      	ldr	r0, [r7, #20]
				valsE[k] = controller->i_q;
				valsF[k] = controller->theta_elec;
				valsG[k] = controller->theta_mech;
				valsH[k] = controller->v_bus;
				valsI[k] = 0.0;//controller->dtc_w;
				times[k] = debugCounter*DT;
 8002a56:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002c5c <debug_data_capture+0x2b4>
				int k = debugCounter/sampleRate;
 8002a5a:	fb82 4203 	smull	r4, r2, r2, r3
 8002a5e:	17dc      	asrs	r4, r3, #31
 8002a60:	ebc4 0262 	rsb	r2, r4, r2, asr #1
				valsA[k] = controller->i_a;
 8002a64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
				times[k] = debugCounter*DT;
 8002a68:	ee07 3a90 	vmov	s15, r3
				valsA[k] = controller->i_a;
 8002a6c:	6008      	str	r0, [r1, #0]
				valsB[k] = controller->i_b;
 8002a6e:	487c      	ldr	r0, [pc, #496]	; (8002c60 <debug_data_capture+0x2b8>)
				valsC[k] = controller->i_c;
 8002a70:	497c      	ldr	r1, [pc, #496]	; (8002c64 <debug_data_capture+0x2bc>)
				valsB[k] = controller->i_b;
 8002a72:	69bc      	ldr	r4, [r7, #24]
 8002a74:	eb00 0082 	add.w	r0, r0, r2, lsl #2
				valsC[k] = controller->i_c;
 8002a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
				valsB[k] = controller->i_b;
 8002a7c:	6004      	str	r4, [r0, #0]
				valsD[k] = controller->i_d;
 8002a7e:	487a      	ldr	r0, [pc, #488]	; (8002c68 <debug_data_capture+0x2c0>)
				valsC[k] = controller->i_c;
 8002a80:	69fc      	ldr	r4, [r7, #28]
 8002a82:	600c      	str	r4, [r1, #0]
				valsD[k] = controller->i_d;
 8002a84:	eb00 0082 	add.w	r0, r0, r2, lsl #2
				valsE[k] = controller->i_q;
 8002a88:	4978      	ldr	r1, [pc, #480]	; (8002c6c <debug_data_capture+0x2c4>)
				valsD[k] = controller->i_d;
 8002a8a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002a8c:	6004      	str	r4, [r0, #0]
				valsE[k] = controller->i_q;
 8002a8e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
				valsF[k] = controller->theta_elec;
 8002a92:	4877      	ldr	r0, [pc, #476]	; (8002c70 <debug_data_capture+0x2c8>)
				valsE[k] = controller->i_q;
 8002a94:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002a96:	600c      	str	r4, [r1, #0]
				valsF[k] = controller->theta_elec;
 8002a98:	eb00 0082 	add.w	r0, r0, r2, lsl #2
				valsG[k] = controller->theta_mech;
 8002a9c:	4975      	ldr	r1, [pc, #468]	; (8002c74 <debug_data_capture+0x2cc>)
				valsF[k] = controller->theta_elec;
 8002a9e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002aa0:	6004      	str	r4, [r0, #0]
				valsG[k] = controller->theta_mech;
 8002aa2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002aa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002aa8:	6008      	str	r0, [r1, #0]
				valsH[k] = controller->v_bus;
 8002aaa:	4c73      	ldr	r4, [pc, #460]	; (8002c78 <debug_data_capture+0x2d0>)
				valsI[k] = 0.0;//controller->dtc_w;
 8002aac:	4873      	ldr	r0, [pc, #460]	; (8002c7c <debug_data_capture+0x2d4>)
				times[k] = debugCounter*DT;
 8002aae:	4974      	ldr	r1, [pc, #464]	; (8002c80 <debug_data_capture+0x2d8>)
				valsH[k] = controller->v_bus;
 8002ab0:	6afe      	ldr	r6, [r7, #44]	; 0x2c
				times[k] = debugCounter*DT;
 8002ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				valsH[k] = controller->v_bus;
 8002ab6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
				valsI[k] = 0.0;//controller->dtc_w;
 8002aba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
				times[k] = debugCounter*DT;
 8002abe:	ee67 7a87 	vmul.f32	s15, s15, s14
				valsI[k] = 0.0;//controller->dtc_w;
 8002ac2:	2500      	movs	r5, #0
				times[k] = debugCounter*DT;
 8002ac4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
				valsH[k] = controller->v_bus;
 8002ac8:	6026      	str	r6, [r4, #0]
				valsI[k] = 0.0;//controller->dtc_w;
 8002aca:	6005      	str	r5, [r0, #0]
				times[k] = debugCounter*DT;
 8002acc:	edc2 7a00 	vstr	s15, [r2]
							}
						}
					}
				}
			}
			debugCounter++;
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <debug_data_capture+0x2a0>)
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	6013      	str	r3, [r2, #0]
		}


}
 8002ad6:	b025      	add	sp, #148	; 0x94
 8002ad8:	ecbd 8b02 	vpop	{d8}
 8002adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if(printed){
 8002ae0:	4d68      	ldr	r5, [pc, #416]	; (8002c84 <debug_data_capture+0x2dc>)
 8002ae2:	682a      	ldr	r2, [r5, #0]
 8002ae4:	2a00      	cmp	r2, #0
 8002ae6:	d1f3      	bne.n	8002ad0 <debug_data_capture+0x128>
						if(k>sampleCount+freeRun){
 8002ae8:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8002aec:	ddf0      	ble.n	8002ad0 <debug_data_capture+0x128>
								drv_disable_gd(drv);
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <debug_data_capture+0x2e0>)
 8002af0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002c74 <debug_data_capture+0x2cc>
 8002af4:	8899      	ldrh	r1, [r3, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	4b5a      	ldr	r3, [pc, #360]	; (8002c64 <debug_data_capture+0x2bc>)
 8002afa:	9314      	str	r3, [sp, #80]	; 0x50
 8002afc:	0c12      	lsrs	r2, r2, #16
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <debug_data_capture+0x2c0>)
 8002b00:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b02:	0412      	lsls	r2, r2, #16
 8002b04:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <debug_data_capture+0x2c4>)
 8002b06:	9312      	str	r3, [sp, #72]	; 0x48
 8002b08:	4311      	orrs	r1, r2
							printed = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	602b      	str	r3, [r5, #0]
								drv_disable_gd(drv);
 8002b0e:	f7fe fffb 	bl	8001b08 <drv_disable_gd>
								printf("DATACAP\r\n");
 8002b12:	485e      	ldr	r0, [pc, #376]	; (8002c8c <debug_data_capture+0x2e4>)
 8002b14:	f8df a158 	ldr.w	sl, [pc, #344]	; 8002c70 <debug_data_capture+0x2c8>
 8002b18:	4d58      	ldr	r5, [pc, #352]	; (8002c7c <debug_data_capture+0x2d4>)
 8002b1a:	4c59      	ldr	r4, [pc, #356]	; (8002c80 <debug_data_capture+0x2d8>)
 8002b1c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002c58 <debug_data_capture+0x2b0>
 8002b20:	4f4f      	ldr	r7, [pc, #316]	; (8002c60 <debug_data_capture+0x2b8>)
 8002b22:	4e55      	ldr	r6, [pc, #340]	; (8002c78 <debug_data_capture+0x2d0>)
 8002b24:	f007 fcfc 	bl	800a520 <puts>
								printf("t %s %s %s %s %s %s %s %s %s \r\n", la, lb, lc, ld, le, lf, lg, lh, li);
 8002b28:	ab21      	add	r3, sp, #132	; 0x84
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	ab1e      	add	r3, sp, #120	; 0x78
 8002b2e:	a816      	add	r0, sp, #88	; 0x58
 8002b30:	a91c      	add	r1, sp, #112	; 0x70
 8002b32:	aa1b      	add	r2, sp, #108	; 0x6c
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	ab1a      	add	r3, sp, #104	; 0x68
 8002b38:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8002b3c:	e9cd 3200 	strd	r3, r2, [sp]
 8002b40:	4853      	ldr	r0, [pc, #332]	; (8002c90 <debug_data_capture+0x2e8>)
 8002b42:	ab19      	add	r3, sp, #100	; 0x64
 8002b44:	aa18      	add	r2, sp, #96	; 0x60
 8002b46:	a917      	add	r1, sp, #92	; 0x5c
 8002b48:	f007 fc64 	bl	800a414 <iprintf>
								for(int i=0;i<sampleCount;i++){
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	9515      	str	r5, [sp, #84]	; 0x54
 8002b50:	46d1      	mov	r9, sl
 8002b52:	469a      	mov	sl, r3
									printf("%f %f %f %f %f %f %f %f %f %f \r\n", times[i], valsA[i], valsB[i], valsC[i], valsD[i], valsE[i], valsF[i], valsG[i], valsH[i], valsI[i]);
 8002b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002b56:	f854 0b04 	ldr.w	r0, [r4], #4
 8002b5a:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8002b60:	f7fd fd1a 	bl	8000598 <__aeabi_f2d>
 8002b64:	460b      	mov	r3, r1
 8002b66:	4602      	mov	r2, r0
 8002b68:	4628      	mov	r0, r5
 8002b6a:	ec43 2b18 	vmov	d8, r2, r3
 8002b6e:	f7fd fd13 	bl	8000598 <__aeabi_f2d>
 8002b72:	f856 bb04 	ldr.w	fp, [r6], #4
 8002b76:	460a      	mov	r2, r1
 8002b78:	4601      	mov	r1, r0
 8002b7a:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8002b7e:	4658      	mov	r0, fp
 8002b80:	f7fd fd0a 	bl	8000598 <__aeabi_f2d>
 8002b84:	f85a bb04 	ldr.w	fp, [sl], #4
 8002b88:	460a      	mov	r2, r1
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4658      	mov	r0, fp
 8002b8e:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8002b92:	f7fd fd01 	bl	8000598 <__aeabi_f2d>
 8002b96:	460a      	mov	r2, r1
 8002b98:	4601      	mov	r1, r0
 8002b9a:	f859 bb04 	ldr.w	fp, [r9], #4
 8002b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ba0:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8002ba4:	4658      	mov	r0, fp
 8002ba6:	f853 bb04 	ldr.w	fp, [r3], #4
 8002baa:	9312      	str	r3, [sp, #72]	; 0x48
 8002bac:	f7fd fcf4 	bl	8000598 <__aeabi_f2d>
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8002bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002bba:	4658      	mov	r0, fp
 8002bbc:	f853 bb04 	ldr.w	fp, [r3], #4
 8002bc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8002bc2:	f7fd fce9 	bl	8000598 <__aeabi_f2d>
 8002bc6:	460a      	mov	r2, r1
 8002bc8:	4601      	mov	r1, r0
 8002bca:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8002bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002bd0:	4658      	mov	r0, fp
 8002bd2:	f853 bb04 	ldr.w	fp, [r3], #4
 8002bd6:	9314      	str	r3, [sp, #80]	; 0x50
 8002bd8:	f7fd fcde 	bl	8000598 <__aeabi_f2d>
 8002bdc:	460a      	mov	r2, r1
 8002bde:	4601      	mov	r1, r0
 8002be0:	4658      	mov	r0, fp
 8002be2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002be6:	f7fd fcd7 	bl	8000598 <__aeabi_f2d>
 8002bea:	f857 bb04 	ldr.w	fp, [r7], #4
 8002bee:	460a      	mov	r2, r1
 8002bf0:	4601      	mov	r1, r0
 8002bf2:	4658      	mov	r0, fp
 8002bf4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002bf8:	f7fd fcce 	bl	8000598 <__aeabi_f2d>
 8002bfc:	f858 bb04 	ldr.w	fp, [r8], #4
 8002c00:	460a      	mov	r2, r1
 8002c02:	4601      	mov	r1, r0
 8002c04:	4658      	mov	r0, fp
 8002c06:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002c0a:	f7fd fcc5 	bl	8000598 <__aeabi_f2d>
 8002c0e:	ec53 2b18 	vmov	r2, r3, d8
 8002c12:	e9cd 0100 	strd	r0, r1, [sp]
 8002c16:	481f      	ldr	r0, [pc, #124]	; (8002c94 <debug_data_capture+0x2ec>)
 8002c18:	f007 fbfc 	bl	800a414 <iprintf>
								for(int i=0;i<sampleCount;i++){
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <debug_data_capture+0x2f0>)
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d198      	bne.n	8002b54 <debug_data_capture+0x1ac>
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <debug_data_capture+0x2a0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e753      	b.n	8002ad0 <debug_data_capture+0x128>
 8002c28:	0800e51c 	.word	0x0800e51c
 8002c2c:	0800e528 	.word	0x0800e528
 8002c30:	0800e534 	.word	0x0800e534
 8002c34:	0800e538 	.word	0x0800e538
 8002c38:	0800e53c 	.word	0x0800e53c
 8002c3c:	0800e540 	.word	0x0800e540
 8002c40:	0800e544 	.word	0x0800e544
 8002c44:	0800e548 	.word	0x0800e548
 8002c48:	20000230 	.word	0x20000230
 8002c4c:	cccccccd 	.word	0xcccccccd
 8002c50:	19999999 	.word	0x19999999
 8002c54:	66666667 	.word	0x66666667
 8002c58:	200006e8 	.word	0x200006e8
 8002c5c:	3812ccf7 	.word	0x3812ccf7
 8002c60:	20000b98 	.word	0x20000b98
 8002c64:	20001048 	.word	0x20001048
 8002c68:	200014f8 	.word	0x200014f8
 8002c6c:	200019a8 	.word	0x200019a8
 8002c70:	20001e58 	.word	0x20001e58
 8002c74:	20002308 	.word	0x20002308
 8002c78:	200027b8 	.word	0x200027b8
 8002c7c:	20002c68 	.word	0x20002c68
 8002c80:	20000238 	.word	0x20000238
 8002c84:	20000234 	.word	0x20000234
 8002c88:	2000c25c 	.word	0x2000c25c
 8002c8c:	0800e4cc 	.word	0x0800e4cc
 8002c90:	0800e4d8 	.word	0x0800e4d8
 8002c94:	0800e4f8 	.word	0x0800e4f8
 8002c98:	200006e8 	.word	0x200006e8

08002c9c <enter_setup_state>:
	    printf(" esc - Exit to Menu\n\r");

	    //gpio.led->write(0);
 }

 void enter_setup_state(void){
 8002c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("\r\n Configuration Options \n\r");
 8002ca0:	486b      	ldr	r0, [pc, #428]	; (8002e50 <enter_setup_state+0x1b4>)
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
	    printf("\r\n Motor:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8002ca2:	4c6c      	ldr	r4, [pc, #432]	; (8002e54 <enter_setup_state+0x1b8>)
 8002ca4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8002f2c <enter_setup_state+0x290>
 8002ca8:	4f6b      	ldr	r7, [pc, #428]	; (8002e58 <enter_setup_state+0x1bc>)
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
	    printf("\r\n Control:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8002caa:	4d6c      	ldr	r5, [pc, #432]	; (8002e5c <enter_setup_state+0x1c0>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8002cac:	4e6c      	ldr	r6, [pc, #432]	; (8002e60 <enter_setup_state+0x1c4>)
 8002cae:	f8df b280 	ldr.w	fp, [pc, #640]	; 8002f30 <enter_setup_state+0x294>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
	    printf("\r\n CAN:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002cb2:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002f34 <enter_setup_state+0x298>
 8002cb6:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002f38 <enter_setup_state+0x29c>
 void enter_setup_state(void){
 8002cba:	b085      	sub	sp, #20
	    printf("\r\n Configuration Options \n\r");
 8002cbc:	f007 fbaa 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8002cc0:	4a68      	ldr	r2, [pc, #416]	; (8002e64 <enter_setup_state+0x1c8>)
 8002cc2:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <enter_setup_state+0x1cc>)
 8002cc4:	4969      	ldr	r1, [pc, #420]	; (8002e6c <enter_setup_state+0x1d0>)
 8002cc6:	486a      	ldr	r0, [pc, #424]	; (8002e70 <enter_setup_state+0x1d4>)
 8002cc8:	e9cd 3200 	strd	r3, r2, [sp]
 8002ccc:	4b69      	ldr	r3, [pc, #420]	; (8002e74 <enter_setup_state+0x1d8>)
 8002cce:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <enter_setup_state+0x1dc>)
 8002cd0:	f007 fba0 	bl	800a414 <iprintf>
	    printf("\r\n Motor:\r\n");
 8002cd4:	4869      	ldr	r0, [pc, #420]	; (8002e7c <enter_setup_state+0x1e0>)
 8002cd6:	f007 fc23 	bl	800a520 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8002cda:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002cdc:	f7fd fc5c 	bl	8000598 <__aeabi_f2d>
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ce6:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <enter_setup_state+0x1e4>)
 8002ce8:	9700      	str	r7, [sp, #0]
 8002cea:	4966      	ldr	r1, [pc, #408]	; (8002e84 <enter_setup_state+0x1e8>)
 8002cec:	4866      	ldr	r0, [pc, #408]	; (8002e88 <enter_setup_state+0x1ec>)
 8002cee:	f007 fb91 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8002cf2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <enter_setup_state+0x1f0>)
 8002d00:	4963      	ldr	r1, [pc, #396]	; (8002e90 <enter_setup_state+0x1f4>)
 8002d02:	9700      	str	r7, [sp, #0]
 8002d04:	4863      	ldr	r0, [pc, #396]	; (8002e94 <enter_setup_state+0x1f8>)
 8002d06:	f007 fb85 	bl	800a414 <iprintf>
	    printf("\r\n Control:\r\n");
 8002d0a:	4863      	ldr	r0, [pc, #396]	; (8002e98 <enter_setup_state+0x1fc>)
 8002d0c:	f007 fc08 	bl	800a520 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8002d10:	68a0      	ldr	r0, [r4, #8]
 8002d12:	f7fd fc41 	bl	8000598 <__aeabi_f2d>
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <enter_setup_state+0x200>)
 8002d18:	4a61      	ldr	r2, [pc, #388]	; (8002ea0 <enter_setup_state+0x204>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d20:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <enter_setup_state+0x208>)
 8002d22:	4961      	ldr	r1, [pc, #388]	; (8002ea8 <enter_setup_state+0x20c>)
 8002d24:	4628      	mov	r0, r5
 8002d26:	f007 fb75 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8002d2a:	68e0      	ldr	r0, [r4, #12]
 8002d2c:	f7fd fc34 	bl	8000598 <__aeabi_f2d>
 8002d30:	4633      	mov	r3, r6
 8002d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d36:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <enter_setup_state+0x210>)
 8002d38:	495d      	ldr	r1, [pc, #372]	; (8002eb0 <enter_setup_state+0x214>)
 8002d3a:	f8cd b000 	str.w	fp, [sp]
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f007 fb68 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8002d44:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002d46:	f7fd fc27 	bl	8000598 <__aeabi_f2d>
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <enter_setup_state+0x218>)
 8002d52:	9700      	str	r7, [sp, #0]
 8002d54:	4958      	ldr	r1, [pc, #352]	; (8002eb8 <enter_setup_state+0x21c>)
 8002d56:	4628      	mov	r0, r5
 8002d58:	f007 fb5c 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d5e:	f7fd fc1b 	bl	8000598 <__aeabi_f2d>
 8002d62:	463b      	mov	r3, r7
 8002d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d68:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <enter_setup_state+0x220>)
 8002d6a:	9700      	str	r7, [sp, #0]
 8002d6c:	4954      	ldr	r1, [pc, #336]	; (8002ec0 <enter_setup_state+0x224>)
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002d6e:	4f55      	ldr	r7, [pc, #340]	; (8002ec4 <enter_setup_state+0x228>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002d70:	4628      	mov	r0, r5
 8002d72:	f007 fb4f 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8002d76:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002d78:	f7fd fc0e 	bl	8000598 <__aeabi_f2d>
 8002d7c:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <enter_setup_state+0x22c>)
 8002d7e:	4a53      	ldr	r2, [pc, #332]	; (8002ecc <enter_setup_state+0x230>)
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d86:	4633      	mov	r3, r6
 8002d88:	4951      	ldr	r1, [pc, #324]	; (8002ed0 <enter_setup_state+0x234>)
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f007 fb42 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8002d90:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002d92:	f7fd fc01 	bl	8000598 <__aeabi_f2d>
 8002d96:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <enter_setup_state+0x238>)
 8002d98:	4a4f      	ldr	r2, [pc, #316]	; (8002ed8 <enter_setup_state+0x23c>)
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002da0:	4633      	mov	r3, r6
 8002da2:	494e      	ldr	r1, [pc, #312]	; (8002edc <enter_setup_state+0x240>)
 8002da4:	4628      	mov	r0, r5
 8002da6:	f007 fb35 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8002daa:	69a0      	ldr	r0, [r4, #24]
 8002dac:	f7fd fbf4 	bl	8000598 <__aeabi_f2d>
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <enter_setup_state+0x244>)
 8002db2:	4a4c      	ldr	r2, [pc, #304]	; (8002ee4 <enter_setup_state+0x248>)
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dba:	4633      	mov	r3, r6
 8002dbc:	494a      	ldr	r1, [pc, #296]	; (8002ee8 <enter_setup_state+0x24c>)
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f007 fb28 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8002dc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002dc6:	f7fd fbe7 	bl	8000598 <__aeabi_f2d>
 8002dca:	4633      	mov	r3, r6
 8002dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <enter_setup_state+0x250>)
 8002dd2:	4947      	ldr	r1, [pc, #284]	; (8002ef0 <enter_setup_state+0x254>)
 8002dd4:	f8cd b000 	str.w	fp, [sp]
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f007 fb1b 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8002dde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002de0:	f7fd fbda 	bl	8000598 <__aeabi_f2d>
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <enter_setup_state+0x258>)
 8002de6:	4a44      	ldr	r2, [pc, #272]	; (8002ef8 <enter_setup_state+0x25c>)
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dee:	4633      	mov	r3, r6
 8002df0:	4942      	ldr	r1, [pc, #264]	; (8002efc <enter_setup_state+0x260>)
 8002df2:	4628      	mov	r0, r5
 8002df4:	f007 fb0e 	bl	800a414 <iprintf>
	    printf("\r\n CAN:\r\n");
 8002df8:	4841      	ldr	r0, [pc, #260]	; (8002f00 <enter_setup_state+0x264>)
 8002dfa:	f007 fb91 	bl	800a520 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002dfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	4a3f      	ldr	r2, [pc, #252]	; (8002f04 <enter_setup_state+0x268>)
 8002e06:	4940      	ldr	r1, [pc, #256]	; (8002f08 <enter_setup_state+0x26c>)
 8002e08:	9700      	str	r7, [sp, #0]
 8002e0a:	4643      	mov	r3, r8
 8002e0c:	4650      	mov	r0, sl
 8002e0e:	f007 fb01 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER); //ben bugfix change MASTER to TX in string
 8002e12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <enter_setup_state+0x270>)
 8002e1a:	493d      	ldr	r1, [pc, #244]	; (8002f10 <enter_setup_state+0x274>)
 8002e1c:	9700      	str	r7, [sp, #0]
 8002e1e:	4643      	mov	r3, r8
 8002e20:	4650      	mov	r0, sl
 8002e22:	f007 faf7 	bl	800a414 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8002e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <enter_setup_state+0x278>)
 8002e2c:	493a      	ldr	r1, [pc, #232]	; (8002f18 <enter_setup_state+0x27c>)
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	9200      	str	r2, [sp, #0]
 8002e32:	4643      	mov	r3, r8
 8002e34:	4a39      	ldr	r2, [pc, #228]	; (8002f1c <enter_setup_state+0x280>)
 8002e36:	483a      	ldr	r0, [pc, #232]	; (8002f20 <enter_setup_state+0x284>)
 8002e38:	f007 faec 	bl	800a414 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8002e3c:	4839      	ldr	r0, [pc, #228]	; (8002f24 <enter_setup_state+0x288>)
 8002e3e:	f007 fae9 	bl	800a414 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002e42:	4839      	ldr	r0, [pc, #228]	; (8002f28 <enter_setup_state+0x28c>)
 }
 8002e44:	b005      	add	sp, #20
 8002e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002e4a:	f007 bae3 	b.w	800a414 <iprintf>
 8002e4e:	bf00      	nop
 8002e50:	0800e644 	.word	0x0800e644
 8002e54:	20003574 	.word	0x20003574
 8002e58:	0800e6ec 	.word	0x0800e6ec
 8002e5c:	0800e75c 	.word	0x0800e75c
 8002e60:	0800e784 	.word	0x0800e784
 8002e64:	0800e698 	.word	0x0800e698
 8002e68:	0800e6a8 	.word	0x0800e6a8
 8002e6c:	0800e670 	.word	0x0800e670
 8002e70:	0800e678 	.word	0x0800e678
 8002e74:	0800e660 	.word	0x0800e660
 8002e78:	0800e664 	.word	0x0800e664
 8002e7c:	0800e6ac 	.word	0x0800e6ac
 8002e80:	0800e6bc 	.word	0x0800e6bc
 8002e84:	0800e6c8 	.word	0x0800e6c8
 8002e88:	0800e6cc 	.word	0x0800e6cc
 8002e8c:	0800e6f0 	.word	0x0800e6f0
 8002e90:	0800e708 	.word	0x0800e708
 8002e94:	0800e70c 	.word	0x0800e70c
 8002e98:	0800e72c 	.word	0x0800e72c
 8002e9c:	0800e77c 	.word	0x0800e77c
 8002ea0:	0800e740 	.word	0x0800e740
 8002ea4:	0800e73c 	.word	0x0800e73c
 8002ea8:	0800e758 	.word	0x0800e758
 8002eac:	0800e788 	.word	0x0800e788
 8002eb0:	0800e79c 	.word	0x0800e79c
 8002eb4:	0800e7a8 	.word	0x0800e7a8
 8002eb8:	0800e7c4 	.word	0x0800e7c4
 8002ebc:	0800e7c8 	.word	0x0800e7c8
 8002ec0:	0800e7e8 	.word	0x0800e7e8
 8002ec4:	0800e8d4 	.word	0x0800e8d4
 8002ec8:	0800e80c 	.word	0x0800e80c
 8002ecc:	0800e7ec 	.word	0x0800e7ec
 8002ed0:	0800e808 	.word	0x0800e808
 8002ed4:	0800e838 	.word	0x0800e838
 8002ed8:	0800e814 	.word	0x0800e814
 8002edc:	0800e834 	.word	0x0800e834
 8002ee0:	0800e854 	.word	0x0800e854
 8002ee4:	0800e83c 	.word	0x0800e83c
 8002ee8:	0800f65c 	.word	0x0800f65c
 8002eec:	0800e85c 	.word	0x0800e85c
 8002ef0:	0800e874 	.word	0x0800e874
 8002ef4:	0800e894 	.word	0x0800e894
 8002ef8:	0800e878 	.word	0x0800e878
 8002efc:	0800e890 	.word	0x0800e890
 8002f00:	0800e89c 	.word	0x0800e89c
 8002f04:	0800e8a8 	.word	0x0800e8a8
 8002f08:	0800e8b0 	.word	0x0800e8b0
 8002f0c:	0800e8d8 	.word	0x0800e8d8
 8002f10:	0800e8e4 	.word	0x0800e8e4
 8002f14:	0800e928 	.word	0x0800e928
 8002f18:	0800e908 	.word	0x0800e908
 8002f1c:	0800e8e8 	.word	0x0800e8e8
 8002f20:	0800e90c 	.word	0x0800e90c
 8002f24:	0800e930 	.word	0x0800e930
 8002f28:	0800e97c 	.word	0x0800e97c
 8002f2c:	0800e6b8 	.word	0x0800e6b8
 8002f30:	0800e7a0 	.word	0x0800e7a0
 8002f34:	2000be30 	.word	0x2000be30
 8002f38:	0800e8b4 	.word	0x0800e8b4

08002f3c <fsm_enter_state>:
 void fsm_enter_state(FSMStruct * fsmstate){
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	7803      	ldrb	r3, [r0, #0]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d804      	bhi.n	8002f4e <fsm_enter_state+0x12>
 8002f44:	e8df f003 	tbb	[pc, r3]
 8002f48:	03422b08 	.word	0x03422b08
 8002f4c:	04          	.byte	0x04
 8002f4d:	00          	.byte	0x00
 }
 8002f4e:	bd10      	pop	{r4, pc}
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				enter_setup_state();
 8002f54:	f7ff bea2 	b.w	8002c9c <enter_setup_state>
	    printf("\n\r\n\r");
 8002f58:	4821      	ldr	r0, [pc, #132]	; (8002fe0 <fsm_enter_state+0xa4>)
 8002f5a:	f007 fa5b 	bl	800a414 <iprintf>
	    printf(" Commands:\n\r");
 8002f5e:	4821      	ldr	r0, [pc, #132]	; (8002fe4 <fsm_enter_state+0xa8>)
 8002f60:	f007 fa58 	bl	800a414 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8002f64:	4820      	ldr	r0, [pc, #128]	; (8002fe8 <fsm_enter_state+0xac>)
 8002f66:	f007 fa55 	bl	800a414 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8002f6a:	4820      	ldr	r0, [pc, #128]	; (8002fec <fsm_enter_state+0xb0>)
 8002f6c:	f007 fa52 	bl	800a414 <iprintf>
	    printf(" s - Setup\n\r");
 8002f70:	481f      	ldr	r0, [pc, #124]	; (8002ff0 <fsm_enter_state+0xb4>)
 8002f72:	f007 fa4f 	bl	800a414 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8002f76:	481f      	ldr	r0, [pc, #124]	; (8002ff4 <fsm_enter_state+0xb8>)
 8002f78:	f007 fa4c 	bl	800a414 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8002f7c:	481e      	ldr	r0, [pc, #120]	; (8002ff8 <fsm_enter_state+0xbc>)
 8002f7e:	f007 fa49 	bl	800a414 <iprintf>
	    printf(" f - Factory reset flash vars\n\r");
 8002f82:	481e      	ldr	r0, [pc, #120]	; (8002ffc <fsm_enter_state+0xc0>)
 8002f84:	f007 fa46 	bl	800a414 <iprintf>
	    printf(" d - Variable dump\n\r");
 8002f88:	481d      	ldr	r0, [pc, #116]	; (8003000 <fsm_enter_state+0xc4>)
 8002f8a:	f007 fa43 	bl	800a414 <iprintf>
	    printf(" o - Swap phase order\n\r");
 8002f8e:	481d      	ldr	r0, [pc, #116]	; (8003004 <fsm_enter_state+0xc8>)
 8002f90:	f007 fa40 	bl	800a414 <iprintf>
 }
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    printf(" esc - Exit to Menu\n\r");
 8002f98:	481b      	ldr	r0, [pc, #108]	; (8003008 <fsm_enter_state+0xcc>)
 8002f9a:	f007 ba3b 	b.w	800a414 <iprintf>
				comm_encoder.e_zero = 0;
 8002f9e:	4c1b      	ldr	r4, [pc, #108]	; (800300c <fsm_enter_state+0xd0>)
				comm_encoder_cal.done_cal = 0;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <fsm_enter_state+0xd4>)
 8002fa2:	2100      	movs	r1, #0
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002fa4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
				comm_encoder.e_zero = 0;
 8002fac:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
				comm_encoder_cal.done_cal = 0;
 8002fb0:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002fb4:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002fb8:	7419      	strb	r1, [r3, #16]
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002fba:	f006 fdb9 	bl	8009b30 <memset>
				drv_enable_gd(drv);
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <fsm_enter_state+0xd8>)
 }
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				drv_enable_gd(drv);
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	8899      	ldrh	r1, [r3, #4]
 8002fc8:	f7fe bd4c 	b.w	8001a64 <drv_enable_gd>
				HAL_GPIO_WritePin(LED2, GPIO_PIN_SET );
 8002fcc:	4812      	ldr	r0, [pc, #72]	; (8003018 <fsm_enter_state+0xdc>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	f003 fd4d 	bl	8006a70 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002fd6:	4811      	ldr	r0, [pc, #68]	; (800301c <fsm_enter_state+0xe0>)
 8002fd8:	f7ff fade 	bl	8002598 <reset_foc>
				drv_enable_gd(drv);
 8002fdc:	e7ef      	b.n	8002fbe <fsm_enter_state+0x82>
 8002fde:	bf00      	nop
 8002fe0:	0800e550 	.word	0x0800e550
 8002fe4:	0800e558 	.word	0x0800e558
 8002fe8:	0800e568 	.word	0x0800e568
 8002fec:	0800e57c 	.word	0x0800e57c
 8002ff0:	0800e598 	.word	0x0800e598
 8002ff4:	0800e5a8 	.word	0x0800e5a8
 8002ff8:	0800e5c0 	.word	0x0800e5c0
 8002ffc:	0800e5dc 	.word	0x0800e5dc
 8003000:	0800e5fc 	.word	0x0800e5fc
 8003004:	0800e614 	.word	0x0800e614
 8003008:	0800e62c 	.word	0x0800e62c
 800300c:	200032d0 	.word	0x200032d0
 8003010:	20003974 	.word	0x20003974
 8003014:	2000c25c 	.word	0x2000c25c
 8003018:	48000800 	.word	0x48000800
 800301c:	20003674 	.word	0x20003674

08003020 <run_fsm>:
 void run_fsm(FSMStruct * fsmstate){
 8003020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 if(fsmstate->next_state != fsmstate->state){
 8003024:	7842      	ldrb	r2, [r0, #1]
 8003026:	7803      	ldrb	r3, [r0, #0]
 8003028:	429a      	cmp	r2, r3
 void run_fsm(FSMStruct * fsmstate){
 800302a:	4604      	mov	r4, r0
	 if(fsmstate->next_state != fsmstate->state){
 800302c:	d107      	bne.n	800303e <run_fsm+0x1e>
	 switch(fsmstate->state){
 800302e:	2b02      	cmp	r3, #2
 8003030:	d024      	beq.n	800307c <run_fsm+0x5c>
 8003032:	2b05      	cmp	r3, #5
 8003034:	d04e      	beq.n	80030d4 <run_fsm+0xb4>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d03d      	beq.n	80030b6 <run_fsm+0x96>
 }
 800303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch(fsmstate->state){
 800303e:	2b05      	cmp	r3, #5
 8003040:	d816      	bhi.n	8003070 <run_fsm+0x50>
 8003042:	e8df f003 	tbb	[pc, r3]
 8003046:	4d31      	.short	0x4d31
 8003048:	31311503 	.word	0x31311503
				drv_disable_gd(drv);
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <run_fsm+0x158>)
				fsmstate->ready = 1;
 800304e:	2201      	movs	r2, #1
 8003050:	70c2      	strb	r2, [r0, #3]
				drv_disable_gd(drv);
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	8899      	ldrh	r1, [r3, #4]
 8003056:	f7fe fd57 	bl	8001b08 <drv_disable_gd>
				reset_foc(&controller);
 800305a:	4848      	ldr	r0, [pc, #288]	; (800317c <run_fsm+0x15c>)
 800305c:	f7ff fa9c 	bl	8002598 <reset_foc>
				HAL_GPIO_WritePin(LED2, GPIO_PIN_RESET );
 8003060:	4847      	ldr	r0, [pc, #284]	; (8003180 <run_fsm+0x160>)
 8003062:	2200      	movs	r2, #0
 8003064:	2108      	movs	r1, #8
 8003066:	f003 fd03 	bl	8006a70 <HAL_GPIO_WritePin>
				zero_commands(&controller);		// Set commands to zero
 800306a:	4844      	ldr	r0, [pc, #272]	; (800317c <run_fsm+0x15c>)
 800306c:	f7ff fc8e 	bl	800298c <zero_commands>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003070:	78e3      	ldrb	r3, [r4, #3]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d17e      	bne.n	8003174 <run_fsm+0x154>
 8003076:	7823      	ldrb	r3, [r4, #0]
	 switch(fsmstate->state){
 8003078:	2b02      	cmp	r3, #2
 800307a:	d1da      	bne.n	8003032 <run_fsm+0x12>
				 torque_control(&controller);
 800307c:	4c3f      	ldr	r4, [pc, #252]	; (800317c <run_fsm+0x15c>)
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff fc5a 	bl	8002938 <torque_control>
				 field_weaken(&controller);
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff fabf 	bl	8002608 <field_weaken>
				 commutate(&controller, &comm_encoder);
 800308a:	493e      	ldr	r1, [pc, #248]	; (8003184 <run_fsm+0x164>)
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff faf9 	bl	8002684 <commutate>
				 debug_data_capture(&comm_encoder, &controller);
 8003092:	483c      	ldr	r0, [pc, #240]	; (8003184 <run_fsm+0x164>)
 8003094:	4621      	mov	r1, r4
 8003096:	f7ff fc87 	bl	80029a8 <debug_data_capture>
			 controller.timeout ++;
 800309a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 }
 80030a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				fsmstate->ready = 1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	70c3      	strb	r3, [r0, #3]
			 fsmstate->state = fsmstate->next_state;
 80030ac:	7022      	strb	r2, [r4, #0]
			 fsm_enter_state(fsmstate);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff ff44 	bl	8002f3c <fsm_enter_state>
 80030b4:	e7df      	b.n	8003076 <run_fsm+0x56>
			 if(!comm_encoder_cal.done_ordering){
 80030b6:	4a34      	ldr	r2, [pc, #208]	; (8003188 <run_fsm+0x168>)
 80030b8:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80030bc:	b1cb      	cbz	r3, 80030f2 <run_fsm+0xd2>
			 else if(!comm_encoder_cal.done_cal){
 80030be:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80030c2:	b9f3      	cbnz	r3, 8003102 <run_fsm+0xe2>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80030c4:	492d      	ldr	r1, [pc, #180]	; (800317c <run_fsm+0x15c>)
 80030c6:	482f      	ldr	r0, [pc, #188]	; (8003184 <run_fsm+0x164>)
 80030c8:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 }
 80030cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80030d0:	f7fe ba40 	b.w	8001554 <calibrate_encoder>
 }
 80030d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 ps_print(&comm_encoder, 100);
 80030d8:	482a      	ldr	r0, [pc, #168]	; (8003184 <run_fsm+0x164>)
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	f001 b8f2 	b.w	80042c4 <ps_print>
				drv_disable_gd(drv);
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <run_fsm+0x158>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	8899      	ldrh	r1, [r3, #4]
 80030e6:	f7fe fd0f 	bl	8001b08 <drv_disable_gd>
				fsmstate->ready = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	7862      	ldrb	r2, [r4, #1]
 80030ee:	70e3      	strb	r3, [r4, #3]
				break;
 80030f0:	e7dc      	b.n	80030ac <run_fsm+0x8c>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80030f2:	4922      	ldr	r1, [pc, #136]	; (800317c <run_fsm+0x15c>)
 80030f4:	4823      	ldr	r0, [pc, #140]	; (8003184 <run_fsm+0x164>)
 80030f6:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 }
 80030fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80030fe:	f7fe b91f 	b.w	8001340 <order_phases>
				 E_ZERO = comm_encoder_cal.ezero;
 8003102:	69d5      	ldr	r5, [r2, #28]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003104:	4f1f      	ldr	r7, [pc, #124]	; (8003184 <run_fsm+0x164>)
 8003106:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800318c <run_fsm+0x16c>
 800310a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
				 E_ZERO = comm_encoder_cal.ezero;
 800310e:	4e20      	ldr	r6, [pc, #128]	; (8003190 <run_fsm+0x170>)
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003110:	426b      	negs	r3, r5
 8003112:	ee00 3a10 	vmov	s0, r3
 8003116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800311e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003122:	ee20 0a27 	vmul.f32	s0, s0, s15
				 E_ZERO = comm_encoder_cal.ezero;
 8003126:	6175      	str	r5, [r6, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003128:	f00a fe74 	bl	800de14 <fmodf>
 800312c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003194 <run_fsm+0x174>
 8003130:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd fa2e 	bl	8000598 <__aeabi_f2d>
 800313c:	460b      	mov	r3, r1
 800313e:	4602      	mov	r2, r0
 8003140:	4629      	mov	r1, r5
 8003142:	4815      	ldr	r0, [pc, #84]	; (8003198 <run_fsm+0x178>)
 8003144:	f007 f966 	bl	800a414 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003148:	4914      	ldr	r1, [pc, #80]	; (800319c <run_fsm+0x17c>)
 800314a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003152:	f006 fcc5 	bl	8009ae0 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003156:	4911      	ldr	r1, [pc, #68]	; (800319c <run_fsm+0x17c>)
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	f106 0018 	add.w	r0, r6, #24
 8003160:	f006 fcbe 	bl	8009ae0 <memcpy>
				 save_to_flash();
 8003164:	f7fe ff7a 	bl	800205c <save_to_flash>
				 load_from_flash();
 8003168:	f7fe ff42 	bl	8001ff0 <load_from_flash>
		fsmstate->next_state = MENU_MODE;
 800316c:	2300      	movs	r3, #0
 800316e:	7063      	strb	r3, [r4, #1]
		fsmstate->ready = 0;
 8003170:	70e3      	strb	r3, [r4, #3]
		return;
 8003172:	e762      	b.n	800303a <run_fsm+0x1a>
 8003174:	7862      	ldrb	r2, [r4, #1]
 8003176:	e799      	b.n	80030ac <run_fsm+0x8c>
 8003178:	2000c25c 	.word	0x2000c25c
 800317c:	20003674 	.word	0x20003674
 8003180:	48000800 	.word	0x48000800
 8003184:	200032d0 	.word	0x200032d0
 8003188:	20003974 	.word	0x20003974
 800318c:	37800000 	.word	0x37800000
 8003190:	2000be30 	.word	0x2000be30
 8003194:	40c90fdb 	.word	0x40c90fdb
 8003198:	0800e9a8 	.word	0x0800e9a8
 800319c:	2000b9a0 	.word	0x2000b9a0

080031a0 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	7b43      	ldrb	r3, [r0, #13]
 80031a4:	3b61      	subs	r3, #97	; 0x61
 80031a6:	4604      	mov	r4, r0
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
			 V_MIN = -V_MAX;
			 printf("V_MAX set to %f\r\n", V_MAX);
			 break;
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80031a8:	1d05      	adds	r5, r0, #4
 80031aa:	2b17      	cmp	r3, #23
 80031ac:	d819      	bhi.n	80031e2 <process_user_input+0x42>
 80031ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031b2:	0028      	.short	0x0028
 80031b4:	00780050 	.word	0x00780050
 80031b8:	001800a0 	.word	0x001800a0
 80031bc:	00e700bf 	.word	0x00e700bf
 80031c0:	012e0106 	.word	0x012e0106
 80031c4:	01380018 	.word	0x01380018
 80031c8:	017f0157 	.word	0x017f0157
 80031cc:	00180018 	.word	0x00180018
 80031d0:	00180189 	.word	0x00180189
 80031d4:	00180018 	.word	0x00180018
 80031d8:	001801ac 	.word	0x001801ac
 80031dc:	001801b6 	.word	0x001801b6
 80031e0:	020b      	.short	0x020b
 80031e2:	48e0      	ldr	r0, [pc, #896]	; (8003564 <process_user_input+0x3c4>)
 80031e4:	4629      	mov	r1, r5
 80031e6:	f007 f915 	bl	800a414 <iprintf>
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 80031ea:	f7fe ff37 	bl	800205c <save_to_flash>
	 load_from_flash();
 80031ee:	f7fe feff 	bl	8001ff0 <load_from_flash>
	 enter_setup_state();
 80031f2:	f7ff fd53 	bl	8002c9c <enter_setup_state>

	 fsmstate->bytecount = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	7323      	strb	r3, [r4, #12]
	 fsmstate->cmd_id = 0;
 80031fa:	7363      	strb	r3, [r4, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80031fc:	602b      	str	r3, [r5, #0]
 80031fe:	606b      	str	r3, [r5, #4]
 }
 8003200:	bd38      	pop	{r3, r4, r5, pc}
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003202:	4628      	mov	r0, r5
 8003204:	f006 fc3a 	bl	8009a7c <atof>
 8003208:	ec51 0b10 	vmov	r0, r1, d0
 800320c:	f7fd fd14 	bl	8000c38 <__aeabi_d2f>
 8003210:	ee07 0a90 	vmov	s15, r0
 8003214:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	bf88      	it	hi
 8003222:	eef0 7a47 	vmovhi.f32	s15, s14
 8003226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800322a:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80035c4 <process_user_input+0x424>
 800322e:	4bce      	ldr	r3, [pc, #824]	; (8003568 <process_user_input+0x3c8>)
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	bfb8      	it	lt
 8003236:	eef0 7a47 	vmovlt.f32	s15, s14
 800323a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 800323e:	ee17 0a90 	vmov	r0, s15
 8003242:	f7fd f9a9 	bl	8000598 <__aeabi_f2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	48c8      	ldr	r0, [pc, #800]	; (800356c <process_user_input+0x3cc>)
 800324c:	f007 f8e2 	bl	800a414 <iprintf>
			 break;
 8003250:	e7cb      	b.n	80031ea <process_user_input+0x4a>
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003252:	4628      	mov	r0, r5
 8003254:	f006 fc12 	bl	8009a7c <atof>
 8003258:	ec51 0b10 	vmov	r0, r1, d0
 800325c:	f7fd fcec 	bl	8000c38 <__aeabi_d2f>
 8003260:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003570 <process_user_input+0x3d0>
 8003264:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8003574 <process_user_input+0x3d4>
 8003268:	4bbf      	ldr	r3, [pc, #764]	; (8003568 <process_user_input+0x3c8>)
 800326a:	ee07 0a90 	vmov	s15, r0
 800326e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	bf88      	it	hi
 8003278:	eef0 7a66 	vmovhi.f32	s15, s13
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	bfb8      	it	lt
 8003286:	eef0 7a47 	vmovlt.f32	s15, s14
 800328a:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800328e:	ee17 0a90 	vmov	r0, s15
 8003292:	f7fd f981 	bl	8000598 <__aeabi_f2d>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	48b7      	ldr	r0, [pc, #732]	; (8003578 <process_user_input+0x3d8>)
 800329c:	f007 f8ba 	bl	800a414 <iprintf>
			 break;
 80032a0:	e7a3      	b.n	80031ea <process_user_input+0x4a>
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80032a2:	4628      	mov	r0, r5
 80032a4:	f006 fbea 	bl	8009a7c <atof>
 80032a8:	ec51 0b10 	vmov	r0, r1, d0
 80032ac:	f7fd fcc4 	bl	8000c38 <__aeabi_d2f>
 80032b0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800357c <process_user_input+0x3dc>
 80032b4:	eddf 6ac3 	vldr	s13, [pc, #780]	; 80035c4 <process_user_input+0x424>
 80032b8:	4bab      	ldr	r3, [pc, #684]	; (8003568 <process_user_input+0x3c8>)
 80032ba:	ee07 0a90 	vmov	s15, r0
 80032be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	bf88      	it	hi
 80032c8:	eef0 7a47 	vmovhi.f32	s15, s14
 80032cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	bfb8      	it	lt
 80032d6:	eef0 7a66 	vmovlt.f32	s15, s13
 80032da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80032de:	ee17 0a90 	vmov	r0, s15
 80032e2:	f7fd f959 	bl	8000598 <__aeabi_f2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	48a5      	ldr	r0, [pc, #660]	; (8003580 <process_user_input+0x3e0>)
 80032ec:	f007 f892 	bl	800a414 <iprintf>
			 break;
 80032f0:	e77b      	b.n	80031ea <process_user_input+0x4a>
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80032f2:	4628      	mov	r0, r5
 80032f4:	f006 fbc2 	bl	8009a7c <atof>
 80032f8:	ec51 0b10 	vmov	r0, r1, d0
 80032fc:	f7fd fc9c 	bl	8000c38 <__aeabi_d2f>
 8003300:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80035c4 <process_user_input+0x424>
 8003304:	4b98      	ldr	r3, [pc, #608]	; (8003568 <process_user_input+0x3c8>)
 8003306:	ee07 0a90 	vmov	s15, r0
 800330a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	bfb8      	it	lt
 8003314:	eef0 7a47 	vmovlt.f32	s15, s14
 8003318:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800331c:	ee17 0a90 	vmov	r0, s15
 8003320:	f7fd f93a 	bl	8000598 <__aeabi_f2d>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4896      	ldr	r0, [pc, #600]	; (8003584 <process_user_input+0x3e4>)
 800332a:	f007 f873 	bl	800a414 <iprintf>
			 break;
 800332e:	e75c      	b.n	80031ea <process_user_input+0x4a>
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003330:	4628      	mov	r0, r5
 8003332:	f006 fba3 	bl	8009a7c <atof>
 8003336:	ec51 0b10 	vmov	r0, r1, d0
 800333a:	f7fd fc7d 	bl	8000c38 <__aeabi_d2f>
 800333e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003588 <process_user_input+0x3e8>
 8003342:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80035c4 <process_user_input+0x424>
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <process_user_input+0x3c8>)
 8003348:	ee07 0a90 	vmov	s15, r0
 800334c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	bf88      	it	hi
 8003356:	eef0 7a47 	vmovhi.f32	s15, s14
 800335a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	bfb8      	it	lt
 8003364:	eef0 7a66 	vmovlt.f32	s15, s13
 8003368:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800336c:	ee17 0a90 	vmov	r0, s15
 8003370:	f7fd f912 	bl	8000598 <__aeabi_f2d>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4884      	ldr	r0, [pc, #528]	; (800358c <process_user_input+0x3ec>)
 800337a:	f007 f84b 	bl	800a414 <iprintf>
			 break;
 800337e:	e734      	b.n	80031ea <process_user_input+0x4a>
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003380:	4628      	mov	r0, r5
 8003382:	f006 fb7b 	bl	8009a7c <atof>
 8003386:	ec51 0b10 	vmov	r0, r1, d0
 800338a:	f7fd fc55 	bl	8000c38 <__aeabi_d2f>
 800338e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003590 <process_user_input+0x3f0>
 8003392:	4b75      	ldr	r3, [pc, #468]	; (8003568 <process_user_input+0x3c8>)
 8003394:	ee07 0a90 	vmov	s15, r0
 8003398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	bfb8      	it	lt
 80033a2:	eef0 7a47 	vmovlt.f32	s15, s14
 80033a6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 80033aa:	ee17 0a90 	vmov	r0, s15
 80033ae:	f7fd f8f3 	bl	8000598 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4877      	ldr	r0, [pc, #476]	; (8003594 <process_user_input+0x3f4>)
 80033b8:	f007 f82c 	bl	800a414 <iprintf>
			 break;
 80033bc:	e715      	b.n	80031ea <process_user_input+0x4a>
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80033be:	4628      	mov	r0, r5
 80033c0:	f006 fb5c 	bl	8009a7c <atof>
 80033c4:	ec51 0b10 	vmov	r0, r1, d0
 80033c8:	f7fd fc36 	bl	8000c38 <__aeabi_d2f>
 80033cc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003598 <process_user_input+0x3f8>
 80033d0:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80035c4 <process_user_input+0x424>
 80033d4:	4b64      	ldr	r3, [pc, #400]	; (8003568 <process_user_input+0x3c8>)
 80033d6:	ee07 0a90 	vmov	s15, r0
 80033da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e2:	bf88      	it	hi
 80033e4:	eef0 7a47 	vmovhi.f32	s15, s14
 80033e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80033ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f0:	bfb8      	it	lt
 80033f2:	eef0 7a66 	vmovlt.f32	s15, s13
 80033f6:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80033fa:	ee17 0a90 	vmov	r0, s15
 80033fe:	f7fd f8cb 	bl	8000598 <__aeabi_f2d>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4865      	ldr	r0, [pc, #404]	; (800359c <process_user_input+0x3fc>)
 8003408:	f007 f804 	bl	800a414 <iprintf>
			 break;
 800340c:	e6ed      	b.n	80031ea <process_user_input+0x4a>
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800340e:	4628      	mov	r0, r5
 8003410:	f006 fb37 	bl	8009a82 <atoi>
 8003414:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <process_user_input+0x400>)
 8003416:	4601      	mov	r1, r0
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003418:	4862      	ldr	r0, [pc, #392]	; (80035a4 <process_user_input+0x404>)
			 CAN_ID = atoi(fsmstate->cmd_buff);
 800341a:	6059      	str	r1, [r3, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 800341c:	f006 fffa 	bl	800a414 <iprintf>
			 break;
 8003420:	e6e3      	b.n	80031ea <process_user_input+0x4a>
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003422:	4628      	mov	r0, r5
 8003424:	f006 fb2a 	bl	8009a7c <atof>
 8003428:	ec51 0b10 	vmov	r0, r1, d0
 800342c:	f7fd fc04 	bl	8000c38 <__aeabi_d2f>
 8003430:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80035a8 <process_user_input+0x408>
 8003434:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <process_user_input+0x3c8>)
 8003436:	ee07 0a90 	vmov	s15, r0
 800343a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	bfb8      	it	lt
 8003444:	eef0 7a47 	vmovlt.f32	s15, s14
 8003448:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 800344c:	ee17 0a90 	vmov	r0, s15
 8003450:	f7fd f8a2 	bl	8000598 <__aeabi_f2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4854      	ldr	r0, [pc, #336]	; (80035ac <process_user_input+0x40c>)
 800345a:	f006 ffdb 	bl	800a414 <iprintf>
			 break;
 800345e:	e6c4      	b.n	80031ea <process_user_input+0x4a>
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003460:	4628      	mov	r0, r5
 8003462:	f006 fb0b 	bl	8009a7c <atof>
 8003466:	ec51 0b10 	vmov	r0, r1, d0
 800346a:	f7fd fbe5 	bl	8000c38 <__aeabi_d2f>
 800346e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800357c <process_user_input+0x3dc>
 8003472:	eddf 6a54 	vldr	s13, [pc, #336]	; 80035c4 <process_user_input+0x424>
 8003476:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <process_user_input+0x3c8>)
 8003478:	ee07 0a90 	vmov	s15, r0
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	bf88      	it	hi
 8003486:	eef0 7a47 	vmovhi.f32	s15, s14
 800348a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	bfb8      	it	lt
 8003494:	eef0 7a66 	vmovlt.f32	s15, s13
 8003498:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800349c:	ee17 0a90 	vmov	r0, s15
 80034a0:	f7fd f87a 	bl	8000598 <__aeabi_f2d>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4841      	ldr	r0, [pc, #260]	; (80035b0 <process_user_input+0x410>)
 80034aa:	f006 ffb3 	bl	800a414 <iprintf>
			 break;
 80034ae:	e69c      	b.n	80031ea <process_user_input+0x4a>
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80034b0:	4628      	mov	r0, r5
 80034b2:	f006 fae6 	bl	8009a82 <atoi>
 80034b6:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <process_user_input+0x400>)
 80034b8:	4601      	mov	r1, r0
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER); //ben bugfix MASTER to TX_ID in string
 80034ba:	483e      	ldr	r0, [pc, #248]	; (80035b4 <process_user_input+0x414>)
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80034bc:	6099      	str	r1, [r3, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER); //ben bugfix MASTER to TX_ID in string
 80034be:	f006 ffa9 	bl	800a414 <iprintf>
			 break;
 80034c2:	e692      	b.n	80031ea <process_user_input+0x4a>
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80034c4:	4628      	mov	r0, r5
 80034c6:	f006 fad9 	bl	8009a7c <atof>
 80034ca:	ec51 0b10 	vmov	r0, r1, d0
 80034ce:	f7fd fbb3 	bl	8000c38 <__aeabi_d2f>
 80034d2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80035c4 <process_user_input+0x424>
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <process_user_input+0x3c8>)
 80034d8:	ee07 0a90 	vmov	s15, r0
 80034dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	bfb8      	it	lt
 80034e6:	eef0 7a47 	vmovlt.f32	s15, s14
			 P_MIN = -P_MAX;
 80034ea:	eeb1 7a67 	vneg.f32	s14, s15
 80034ee:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80034f2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 printf("P_MAX set to %f\r\n", P_MAX);
 80034f6:	ee17 0a90 	vmov	r0, s15
 80034fa:	f7fd f84d 	bl	8000598 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	482d      	ldr	r0, [pc, #180]	; (80035b8 <process_user_input+0x418>)
 8003504:	f006 ff86 	bl	800a414 <iprintf>
			 break;
 8003508:	e66f      	b.n	80031ea <process_user_input+0x4a>
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 800350a:	4628      	mov	r0, r5
 800350c:	f006 fab9 	bl	8009a82 <atoi>
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <process_user_input+0x400>)
 8003512:	4601      	mov	r1, r0
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003514:	4829      	ldr	r0, [pc, #164]	; (80035bc <process_user_input+0x41c>)
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003516:	60d9      	str	r1, [r3, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003518:	f006 ff7c 	bl	800a414 <iprintf>
			 break;
 800351c:	e665      	b.n	80031ea <process_user_input+0x4a>
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800351e:	4628      	mov	r0, r5
 8003520:	f006 faac 	bl	8009a7c <atof>
 8003524:	ec51 0b10 	vmov	r0, r1, d0
 8003528:	f7fd fb86 	bl	8000c38 <__aeabi_d2f>
 800352c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80035c4 <process_user_input+0x424>
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <process_user_input+0x3c8>)
 8003532:	ee07 0a90 	vmov	s15, r0
 8003536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	bfb8      	it	lt
 8003540:	eef0 7a47 	vmovlt.f32	s15, s14
			 V_MIN = -V_MAX;
 8003544:	eeb1 7a67 	vneg.f32	s14, s15
 8003548:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800354c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003550:	ee17 0a90 	vmov	r0, s15
 8003554:	f7fd f820 	bl	8000598 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4818      	ldr	r0, [pc, #96]	; (80035c0 <process_user_input+0x420>)
 800355e:	f006 ff59 	bl	800a414 <iprintf>
			 break;
 8003562:	e642      	b.n	80031ea <process_user_input+0x4a>
 8003564:	0800eaf4 	.word	0x0800eaf4
 8003568:	20003574 	.word	0x20003574
 800356c:	0800ea70 	.word	0x0800ea70
 8003570:	44fa0000 	.word	0x44fa0000
 8003574:	42c80000 	.word	0x42c80000
 8003578:	0800e9bc 	.word	0x0800e9bc
 800357c:	42200000 	.word	0x42200000
 8003580:	0800ea58 	.word	0x0800ea58
 8003584:	0800eab8 	.word	0x0800eab8
 8003588:	42040000 	.word	0x42040000
 800358c:	0800ea10 	.word	0x0800ea10
 8003590:	3a83126f 	.word	0x3a83126f
 8003594:	0800ea84 	.word	0x0800ea84
 8003598:	43160000 	.word	0x43160000
 800359c:	0800ea40 	.word	0x0800ea40
 80035a0:	2000be30 	.word	0x2000be30
 80035a4:	0800e9d0 	.word	0x0800e9d0
 80035a8:	38d1b717 	.word	0x38d1b717
 80035ac:	0800ea94 	.word	0x0800ea94
 80035b0:	0800e9fc 	.word	0x0800e9fc
 80035b4:	0800e9e4 	.word	0x0800e9e4
 80035b8:	0800eacc 	.word	0x0800eacc
 80035bc:	0800ea28 	.word	0x0800ea28
 80035c0:	0800eae0 	.word	0x0800eae0
 80035c4:	00000000 	.word	0x00000000
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80035c8:	4628      	mov	r0, r5
 80035ca:	f006 fa57 	bl	8009a7c <atof>
 80035ce:	ec51 0b10 	vmov	r0, r1, d0
 80035d2:	f7fd fb31 	bl	8000c38 <__aeabi_d2f>
 80035d6:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80035c4 <process_user_input+0x424>
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <process_user_input+0x468>)
 80035dc:	ee07 0a90 	vmov	s15, r0
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	bfb8      	it	lt
 80035ea:	eef0 7a47 	vmovlt.f32	s15, s14
 80035ee:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80035f2:	ee17 0a90 	vmov	r0, s15
 80035f6:	f7fc ffcf 	bl	8000598 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4803      	ldr	r0, [pc, #12]	; (800360c <process_user_input+0x46c>)
 8003600:	f006 ff08 	bl	800a414 <iprintf>
			 break;
 8003604:	e5f1      	b.n	80031ea <process_user_input+0x4a>
 8003606:	bf00      	nop
 8003608:	20003574 	.word	0x20003574
 800360c:	0800eaa4 	.word	0x0800eaa4

08003610 <update_fsm>:
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003610:	291b      	cmp	r1, #27
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003612:	4603      	mov	r3, r0
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003614:	d026      	beq.n	8003664 <update_fsm+0x54>
	switch(fsmstate->state){
 8003616:	7802      	ldrb	r2, [r0, #0]
 8003618:	b152      	cbz	r2, 8003630 <update_fsm+0x20>
 800361a:	2a04      	cmp	r2, #4
 800361c:	d121      	bne.n	8003662 <update_fsm+0x52>
			if(fsm_input == ENTER_CMD){
 800361e:	290d      	cmp	r1, #13
 8003620:	d028      	beq.n	8003674 <update_fsm+0x64>
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003622:	7b02      	ldrb	r2, [r0, #12]
 8003624:	b312      	cbz	r2, 800366c <update_fsm+0x5c>
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003626:	4410      	add	r0, r2
			fsmstate->bytecount++;
 8003628:	3201      	adds	r2, #1
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 800362a:	70c1      	strb	r1, [r0, #3]
			fsmstate->bytecount++;
 800362c:	731a      	strb	r2, [r3, #12]
			break;
 800362e:	4770      	bx	lr
			switch (fsm_input){
 8003630:	3963      	subs	r1, #99	; 0x63
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003636:	2917      	cmp	r1, #23
 8003638:	d811      	bhi.n	800365e <update_fsm+0x4e>
 800363a:	e8df f001 	tbb	[pc, r1]
 800363e:	8e0c      	.short	0x8e0c
 8003640:	10105389 	.word	0x10105389
 8003644:	10101010 	.word	0x10101010
 8003648:	103e104e 	.word	0x103e104e
 800364c:	10391010 	.word	0x10391010
 8003650:	10101010 	.word	0x10101010
 8003654:	1d10      	.short	0x1d10
					fsmstate->next_state = CALIBRATION_MODE;
 8003656:	2101      	movs	r1, #1
					fsmstate->ready = 0;
 8003658:	2200      	movs	r2, #0
					fsmstate->next_state = CALIBRATION_MODE;
 800365a:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 800365c:	70c2      	strb	r2, [r0, #3]
 }
 800365e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003662:	4770      	bx	lr
		fsmstate->next_state = MENU_MODE;
 8003664:	2200      	movs	r2, #0
 8003666:	7042      	strb	r2, [r0, #1]
		fsmstate->ready = 0;
 8003668:	70c2      	strb	r2, [r0, #3]
		return;
 800366a:	4770      	bx	lr
			fsmstate->bytecount++;
 800366c:	3201      	adds	r2, #1
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 800366e:	7341      	strb	r1, [r0, #13]
			fsmstate->bytecount++;
 8003670:	731a      	strb	r2, [r3, #12]
			break;
 8003672:	4770      	bx	lr
				process_user_input(fsmstate);
 8003674:	f7ff bd94 	b.w	80031a0 <process_user_input>
					comm_encoder.m_zero = 0;
 8003678:	4cac      	ldr	r4, [pc, #688]	; (800392c <update_fsm+0x31c>)
					printf("Zero pos command entry\n\r");
 800367a:	48ad      	ldr	r0, [pc, #692]	; (8003930 <update_fsm+0x320>)
					M_ZERO = zero_count;				 //ben bugfix
 800367c:	4dad      	ldr	r5, [pc, #692]	; (8003934 <update_fsm+0x324>)
					printf("Zero pos command entry\n\r");
 800367e:	f006 fec9 	bl	800a414 <iprintf>
					ps_sample(&comm_encoder, DT);
 8003682:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8003938 <update_fsm+0x328>
					comm_encoder.m_zero = 0;
 8003686:	2300      	movs	r3, #0
					ps_sample(&comm_encoder, DT);
 8003688:	4620      	mov	r0, r4
					comm_encoder.m_zero = 0;
 800368a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 800368e:	f000 fd41 	bl	8004114 <ps_sample>
					HAL_Delay(20);
 8003692:	2014      	movs	r0, #20
 8003694:	f001 fa56 	bl	8004b44 <HAL_Delay>
					M_ZERO = zero_count;				 //ben bugfix
 8003698:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800369a:	612b      	str	r3, [r5, #16]
					save_to_flash();
 800369c:	f7fe fcde 	bl	800205c <save_to_flash>
					load_from_flash();
 80036a0:	f7fe fca6 	bl	8001ff0 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 80036a4:	6929      	ldr	r1, [r5, #16]
 80036a6:	48a5      	ldr	r0, [pc, #660]	; (800393c <update_fsm+0x32c>)
 }
 80036a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 80036ac:	f006 beb2 	b.w	800a414 <iprintf>
					fsmstate->next_state = SETUP_MODE;
 80036b0:	2104      	movs	r1, #4
					fsmstate->ready = 0;
 80036b2:	2200      	movs	r2, #0
					fsmstate->next_state = SETUP_MODE;
 80036b4:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 80036b6:	70c2      	strb	r2, [r0, #3]
					break;
 80036b8:	e7d1      	b.n	800365e <update_fsm+0x4e>
					PHASE_ORDER = !PHASE_ORDER;
 80036ba:	4c9e      	ldr	r4, [pc, #632]	; (8003934 <update_fsm+0x324>)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	6023      	str	r3, [r4, #0]
					save_to_flash();
 80036c6:	f7fe fcc9 	bl	800205c <save_to_flash>
					load_from_flash();
 80036ca:	f7fe fc91 	bl	8001ff0 <load_from_flash>
					printf("Phase order is now %d. Please cycle power.\n\r", PHASE_ORDER);
 80036ce:	6821      	ldr	r1, [r4, #0]
 80036d0:	489b      	ldr	r0, [pc, #620]	; (8003940 <update_fsm+0x330>)
 }
 80036d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("Phase order is now %d. Please cycle power.\n\r", PHASE_ORDER);
 80036d6:	f006 be9d 	b.w	800a414 <iprintf>
					fsmstate->next_state = MOTOR_MODE;
 80036da:	2102      	movs	r1, #2
					fsmstate->ready = 0;
 80036dc:	2200      	movs	r2, #0
					fsmstate->next_state = MOTOR_MODE;
 80036de:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 80036e0:	70c2      	strb	r2, [r0, #3]
					break;
 80036e2:	e7bc      	b.n	800365e <update_fsm+0x4e>
				    I_BW = 1000;
 80036e4:	4b97      	ldr	r3, [pc, #604]	; (8003944 <update_fsm+0x334>)
					E_ZERO = 0;
 80036e6:	4a93      	ldr	r2, [pc, #588]	; (8003934 <update_fsm+0x324>)
				    I_BW = 1000;
 80036e8:	4997      	ldr	r1, [pc, #604]	; (8003948 <update_fsm+0x338>)
 80036ea:	6099      	str	r1, [r3, #8]
				    CAN_ID = 1;
 80036ec:	2001      	movs	r0, #1
					E_ZERO = 0;
 80036ee:	2100      	movs	r1, #0
				    CAN_ID = 1;
 80036f0:	6050      	str	r0, [r2, #4]
				    CAN_TIMEOUT = 1000;
 80036f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
					E_ZERO = 0;
 80036f6:	6151      	str	r1, [r2, #20]
				    M_ZERO = 0;
 80036f8:	6111      	str	r1, [r2, #16]
				    CAN_MASTER = 0;
 80036fa:	6091      	str	r1, [r2, #8]
				    CAN_TIMEOUT = 1000;
 80036fc:	60d0      	str	r0, [r2, #12]
 80036fe:	f102 0018 	add.w	r0, r2, #24
				    PPAIRS = 21.0f;
 8003702:	4a92      	ldr	r2, [pc, #584]	; (800394c <update_fsm+0x33c>)
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
				    P_MAX = 12.5f;
 8003706:	4a92      	ldr	r2, [pc, #584]	; (8003950 <update_fsm+0x340>)
 8003708:	651a      	str	r2, [r3, #80]	; 0x50
				    I_MAX=40;
 800370a:	4d92      	ldr	r5, [pc, #584]	; (8003954 <update_fsm+0x344>)
				    TEMP_MAX = 125.0f;
 800370c:	4c92      	ldr	r4, [pc, #584]	; (8003958 <update_fsm+0x348>)
				    P_MIN = -12.5f;
 800370e:	4a93      	ldr	r2, [pc, #588]	; (800395c <update_fsm+0x34c>)
				    I_MAX=40;
 8003710:	60dd      	str	r5, [r3, #12]
				    TEMP_MAX = 125.0f;
 8003712:	621c      	str	r4, [r3, #32]
				    P_MIN = -12.5f;
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
				    V_MAX = 65.0f;
 8003716:	4d92      	ldr	r5, [pc, #584]	; (8003960 <update_fsm+0x350>)
				    V_MIN = -65.0f;
 8003718:	4c92      	ldr	r4, [pc, #584]	; (8003964 <update_fsm+0x354>)
				    V_MAX = 65.0f;
 800371a:	659d      	str	r5, [r3, #88]	; 0x58
				    I_FW_MAX=0;
 800371c:	2200      	movs	r2, #0
				    V_MIN = -65.0f;
 800371e:	655c      	str	r4, [r3, #84]	; 0x54
				    I_FW_MAX=0;
 8003720:	619a      	str	r2, [r3, #24]
				    R_NOMINAL = 0.0f;
 8003722:	61da      	str	r2, [r3, #28]
				    I_CAL = 5.0f;
 8003724:	4d90      	ldr	r5, [pc, #576]	; (8003968 <update_fsm+0x358>)
				    KP_MAX = 500.0f;
 8003726:	4e91      	ldr	r6, [pc, #580]	; (800396c <update_fsm+0x35c>)
 8003728:	65de      	str	r6, [r3, #92]	; 0x5c
				    GR = 1.0f;
 800372a:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
				    I_CAL = 5.0f;
 8003732:	649d      	str	r5, [r3, #72]	; 0x48
				    KD_MAX = 5.0f;
 8003734:	661d      	str	r5, [r3, #96]	; 0x60
				    GR = 1.0f;
 8003736:	645c      	str	r4, [r3, #68]	; 0x44
				    KT = 1.0f;
 8003738:	639c      	str	r4, [r3, #56]	; 0x38
				    for(int i = 0; i < 128; i++){
 800373a:	f006 f9f9 	bl	8009b30 <memset>
				    save_to_flash();
 800373e:	f7fe fc8d 	bl	800205c <save_to_flash>
				    load_from_flash();
 8003742:	f7fe fc55 	bl	8001ff0 <load_from_flash>
 }
 8003746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				    printf("\n\r  FLASH variables reset. \n\r Please cycle power. \n\r\n\r");
 800374a:	4889      	ldr	r0, [pc, #548]	; (8003970 <update_fsm+0x360>)
 800374c:	f006 be62 	b.w	800a414 <iprintf>
					fsmstate->next_state = ENCODER_MODE;
 8003750:	2105      	movs	r1, #5
					fsmstate->ready = 0;
 8003752:	2200      	movs	r2, #0
					fsmstate->next_state = ENCODER_MODE;
 8003754:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003756:	70c2      	strb	r2, [r0, #3]
					break;
 8003758:	e781      	b.n	800365e <update_fsm+0x4e>
						printf("%d ", encLut[i]);
 800375a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8003934 <update_fsm+0x324>
					printf("Variable dump:\n\r");
 800375e:	4885      	ldr	r0, [pc, #532]	; (8003974 <update_fsm+0x364>)
						printf("%d ", encLut[i]);
 8003760:	4e85      	ldr	r6, [pc, #532]	; (8003978 <update_fsm+0x368>)
							printf("\n\r");
 8003762:	4f86      	ldr	r7, [pc, #536]	; (800397c <update_fsm+0x36c>)
						printf("%d ", encLut[i]);
 8003764:	4645      	mov	r5, r8
					printf("Variable dump:\n\r");
 8003766:	f006 fe55 	bl	800a414 <iprintf>
					printf("---Enc. LUT:---\n\r");
 800376a:	4885      	ldr	r0, [pc, #532]	; (8003980 <update_fsm+0x370>)
 800376c:	f006 fe52 	bl	800a414 <iprintf>
						printf("%d ", encLut[i]);
 8003770:	f855 1f18 	ldr.w	r1, [r5, #24]!
 8003774:	4630      	mov	r0, r6
 8003776:	f006 fe4d 	bl	800a414 <iprintf>
						i++;
 800377a:	2401      	movs	r4, #1
						printf("%d ", encLut[i]);
 800377c:	f855 1f04 	ldr.w	r1, [r5, #4]!
						i++;
 8003780:	3401      	adds	r4, #1
						printf("%d ", encLut[i]);
 8003782:	4630      	mov	r0, r6
 8003784:	f006 fe46 	bl	800a414 <iprintf>
						if(i%8==0){
 8003788:	0763      	lsls	r3, r4, #29
 800378a:	d102      	bne.n	8003792 <update_fsm+0x182>
							printf("\n\r");
 800378c:	4638      	mov	r0, r7
 800378e:	f006 fe41 	bl	800a414 <iprintf>
					for(int i = 0; i < 128;){
 8003792:	2c80      	cmp	r4, #128	; 0x80
 8003794:	d1f2      	bne.n	800377c <update_fsm+0x16c>
					printf("---Int regs:---\n\r");
 8003796:	487b      	ldr	r0, [pc, #492]	; (8003984 <update_fsm+0x374>)
					printf("I_BW %f \n\r", I_BW);
 8003798:	4c6a      	ldr	r4, [pc, #424]	; (8003944 <update_fsm+0x334>)
					printf("---Int regs:---\n\r");
 800379a:	f006 fe3b 	bl	800a414 <iprintf>
					printf("PHASE_ORDER %d \n\r", PHASE_ORDER);
 800379e:	f8d8 1000 	ldr.w	r1, [r8]
 80037a2:	4879      	ldr	r0, [pc, #484]	; (8003988 <update_fsm+0x378>)
 80037a4:	f006 fe36 	bl	800a414 <iprintf>
					printf("CAN_ID %d \n\r", CAN_ID);
 80037a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80037ac:	4877      	ldr	r0, [pc, #476]	; (800398c <update_fsm+0x37c>)
 80037ae:	f006 fe31 	bl	800a414 <iprintf>
					printf("CAN_MASTER %d \n\r", CAN_MASTER);
 80037b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80037b6:	4876      	ldr	r0, [pc, #472]	; (8003990 <update_fsm+0x380>)
 80037b8:	f006 fe2c 	bl	800a414 <iprintf>
					printf("CAN_TIMEOUT %d \n\r", CAN_TIMEOUT);
 80037bc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80037c0:	4874      	ldr	r0, [pc, #464]	; (8003994 <update_fsm+0x384>)
 80037c2:	f006 fe27 	bl	800a414 <iprintf>
					printf("M_ZERO %d \n\r", M_ZERO);
 80037c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80037ca:	4873      	ldr	r0, [pc, #460]	; (8003998 <update_fsm+0x388>)
 80037cc:	f006 fe22 	bl	800a414 <iprintf>
					printf("E_ZERO %d \n\r", E_ZERO);
 80037d0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80037d4:	4871      	ldr	r0, [pc, #452]	; (800399c <update_fsm+0x38c>)
 80037d6:	f006 fe1d 	bl	800a414 <iprintf>
					printf("--Float regs:--\n\r");
 80037da:	4871      	ldr	r0, [pc, #452]	; (80039a0 <update_fsm+0x390>)
 80037dc:	f006 fe1a 	bl	800a414 <iprintf>
					printf("I_BW %f \n\r", I_BW);
 80037e0:	68a0      	ldr	r0, [r4, #8]
 80037e2:	f7fc fed9 	bl	8000598 <__aeabi_f2d>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	486e      	ldr	r0, [pc, #440]	; (80039a4 <update_fsm+0x394>)
 80037ec:	f006 fe12 	bl	800a414 <iprintf>
					printf("I_MAX %f \n\r", I_MAX);
 80037f0:	68e0      	ldr	r0, [r4, #12]
 80037f2:	f7fc fed1 	bl	8000598 <__aeabi_f2d>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	486b      	ldr	r0, [pc, #428]	; (80039a8 <update_fsm+0x398>)
 80037fc:	f006 fe0a 	bl	800a414 <iprintf>
					printf("THETA_MIN %f \n\r", THETA_MIN);
 8003800:	6920      	ldr	r0, [r4, #16]
 8003802:	f7fc fec9 	bl	8000598 <__aeabi_f2d>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4868      	ldr	r0, [pc, #416]	; (80039ac <update_fsm+0x39c>)
 800380c:	f006 fe02 	bl	800a414 <iprintf>
					printf("THETA_MAX %f \n\r", THETA_MAX);
 8003810:	6960      	ldr	r0, [r4, #20]
 8003812:	f7fc fec1 	bl	8000598 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4865      	ldr	r0, [pc, #404]	; (80039b0 <update_fsm+0x3a0>)
 800381c:	f006 fdfa 	bl	800a414 <iprintf>
					printf("I_FW_MAX %f \n\r", I_FW_MAX);
 8003820:	69a0      	ldr	r0, [r4, #24]
 8003822:	f7fc feb9 	bl	8000598 <__aeabi_f2d>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4862      	ldr	r0, [pc, #392]	; (80039b4 <update_fsm+0x3a4>)
 800382c:	f006 fdf2 	bl	800a414 <iprintf>
					printf("R_NOMINAL %f \n\r", R_NOMINAL);
 8003830:	69e0      	ldr	r0, [r4, #28]
 8003832:	f7fc feb1 	bl	8000598 <__aeabi_f2d>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	485f      	ldr	r0, [pc, #380]	; (80039b8 <update_fsm+0x3a8>)
 800383c:	f006 fdea 	bl	800a414 <iprintf>
					printf("TEMP_MAX %f \n\r", TEMP_MAX);
 8003840:	6a20      	ldr	r0, [r4, #32]
 8003842:	f7fc fea9 	bl	8000598 <__aeabi_f2d>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	485c      	ldr	r0, [pc, #368]	; (80039bc <update_fsm+0x3ac>)
 800384c:	f006 fde2 	bl	800a414 <iprintf>
					printf("I_MAX_CONT %f \n\r", I_MAX_CONT);
 8003850:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003852:	f7fc fea1 	bl	8000598 <__aeabi_f2d>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4859      	ldr	r0, [pc, #356]	; (80039c0 <update_fsm+0x3b0>)
 800385c:	f006 fdda 	bl	800a414 <iprintf>
					printf("PPAIRS %f \n\r", PPAIRS);
 8003860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003862:	f7fc fe99 	bl	8000598 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4856      	ldr	r0, [pc, #344]	; (80039c4 <update_fsm+0x3b4>)
 800386c:	f006 fdd2 	bl	800a414 <iprintf>
					printf("R_PHASE %f \n\r", R_PHASE);
 8003870:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003872:	f7fc fe91 	bl	8000598 <__aeabi_f2d>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4853      	ldr	r0, [pc, #332]	; (80039c8 <update_fsm+0x3b8>)
 800387c:	f006 fdca 	bl	800a414 <iprintf>
					printf("KT %f \n\r", KT);
 8003880:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003882:	f7fc fe89 	bl	8000598 <__aeabi_f2d>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4850      	ldr	r0, [pc, #320]	; (80039cc <update_fsm+0x3bc>)
 800388c:	f006 fdc2 	bl	800a414 <iprintf>
					printf("C_TH %f \n\r", C_TH);
 8003890:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003892:	f7fc fe81 	bl	8000598 <__aeabi_f2d>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	484d      	ldr	r0, [pc, #308]	; (80039d0 <update_fsm+0x3c0>)
 800389c:	f006 fdba 	bl	800a414 <iprintf>
					printf("GR %f \n\r", GR);
 80038a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80038a2:	f7fc fe79 	bl	8000598 <__aeabi_f2d>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	484a      	ldr	r0, [pc, #296]	; (80039d4 <update_fsm+0x3c4>)
 80038ac:	f006 fdb2 	bl	800a414 <iprintf>
					printf("I_CAL %f \n\r", I_CAL);
 80038b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80038b2:	f7fc fe71 	bl	8000598 <__aeabi_f2d>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4847      	ldr	r0, [pc, #284]	; (80039d8 <update_fsm+0x3c8>)
 80038bc:	f006 fdaa 	bl	800a414 <iprintf>
					printf("P_MIN %f \n\r", P_MIN);
 80038c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80038c2:	f7fc fe69 	bl	8000598 <__aeabi_f2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4844      	ldr	r0, [pc, #272]	; (80039dc <update_fsm+0x3cc>)
 80038cc:	f006 fda2 	bl	800a414 <iprintf>
					printf("P_MAX %f \n\r", P_MAX);
 80038d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80038d2:	f7fc fe61 	bl	8000598 <__aeabi_f2d>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4841      	ldr	r0, [pc, #260]	; (80039e0 <update_fsm+0x3d0>)
 80038dc:	f006 fd9a 	bl	800a414 <iprintf>
					printf("V_MIN %f \n\r", V_MIN);
 80038e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038e2:	f7fc fe59 	bl	8000598 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	483e      	ldr	r0, [pc, #248]	; (80039e4 <update_fsm+0x3d4>)
 80038ec:	f006 fd92 	bl	800a414 <iprintf>
					printf("V_MAX %f \n\r", V_MAX);
 80038f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038f2:	f7fc fe51 	bl	8000598 <__aeabi_f2d>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	483b      	ldr	r0, [pc, #236]	; (80039e8 <update_fsm+0x3d8>)
 80038fc:	f006 fd8a 	bl	800a414 <iprintf>
					printf("KP_MAX %f \n\r", KP_MAX);
 8003900:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003902:	f7fc fe49 	bl	8000598 <__aeabi_f2d>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4838      	ldr	r0, [pc, #224]	; (80039ec <update_fsm+0x3dc>)
 800390c:	f006 fd82 	bl	800a414 <iprintf>
					printf("KD_MAX %f \n\r", KD_MAX);
 8003910:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003912:	f7fc fe41 	bl	8000598 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4835      	ldr	r0, [pc, #212]	; (80039f0 <update_fsm+0x3e0>)
 800391c:	f006 fd7a 	bl	800a414 <iprintf>
 }
 8003920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("----------------\n\r");
 8003924:	4833      	ldr	r0, [pc, #204]	; (80039f4 <update_fsm+0x3e4>)
 8003926:	f006 bd75 	b.w	800a414 <iprintf>
 800392a:	bf00      	nop
 800392c:	200032d0 	.word	0x200032d0
 8003930:	0800eb1c 	.word	0x0800eb1c
 8003934:	2000be30 	.word	0x2000be30
 8003938:	3812ccf7 	.word	0x3812ccf7
 800393c:	0800eb38 	.word	0x0800eb38
 8003940:	0800eb98 	.word	0x0800eb98
 8003944:	20003574 	.word	0x20003574
 8003948:	447a0000 	.word	0x447a0000
 800394c:	41a80000 	.word	0x41a80000
 8003950:	41480000 	.word	0x41480000
 8003954:	42200000 	.word	0x42200000
 8003958:	42fa0000 	.word	0x42fa0000
 800395c:	c1480000 	.word	0xc1480000
 8003960:	42820000 	.word	0x42820000
 8003964:	c2820000 	.word	0xc2820000
 8003968:	40a00000 	.word	0x40a00000
 800396c:	43fa0000 	.word	0x43fa0000
 8003970:	0800eb60 	.word	0x0800eb60
 8003974:	0800ebc8 	.word	0x0800ebc8
 8003978:	0800ebf0 	.word	0x0800ebf0
 800397c:	0800eb94 	.word	0x0800eb94
 8003980:	0800ebdc 	.word	0x0800ebdc
 8003984:	0800ebf4 	.word	0x0800ebf4
 8003988:	0800ec08 	.word	0x0800ec08
 800398c:	0800ec1c 	.word	0x0800ec1c
 8003990:	0800ec2c 	.word	0x0800ec2c
 8003994:	0800ec40 	.word	0x0800ec40
 8003998:	0800ec54 	.word	0x0800ec54
 800399c:	0800ec64 	.word	0x0800ec64
 80039a0:	0800ec74 	.word	0x0800ec74
 80039a4:	0800ec88 	.word	0x0800ec88
 80039a8:	0800ec94 	.word	0x0800ec94
 80039ac:	0800eca0 	.word	0x0800eca0
 80039b0:	0800ecb0 	.word	0x0800ecb0
 80039b4:	0800ecc0 	.word	0x0800ecc0
 80039b8:	0800ecd0 	.word	0x0800ecd0
 80039bc:	0800ece0 	.word	0x0800ece0
 80039c0:	0800ecf0 	.word	0x0800ecf0
 80039c4:	0800ed04 	.word	0x0800ed04
 80039c8:	0800ed14 	.word	0x0800ed14
 80039cc:	0800ed24 	.word	0x0800ed24
 80039d0:	0800ed30 	.word	0x0800ed30
 80039d4:	0800ed3c 	.word	0x0800ed3c
 80039d8:	0800ed48 	.word	0x0800ed48
 80039dc:	0800ed54 	.word	0x0800ed54
 80039e0:	0800ed60 	.word	0x0800ed60
 80039e4:	0800ed6c 	.word	0x0800ed6c
 80039e8:	0800ed78 	.word	0x0800ed78
 80039ec:	0800ed84 	.word	0x0800ed84
 80039f0:	0800ed94 	.word	0x0800ed94
 80039f4:	0800eda4 	.word	0x0800eda4

080039f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fa:	2400      	movs	r4, #0
{
 80039fc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fe:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003a02:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <MX_GPIO_Init+0xcc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a0c:	4f2e      	ldr	r7, [pc, #184]	; (8003ac8 <MX_GPIO_Init+0xd0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a0e:	4e2f      	ldr	r6, [pc, #188]	; (8003acc <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a10:	f042 0220 	orr.w	r2, r2, #32
 8003a14:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a18:	f002 0220 	and.w	r2, r2, #32
 8003a1c:	9200      	str	r2, [sp, #0]
 8003a1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a22:	f042 0204 	orr.w	r2, r2, #4
 8003a26:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a2a:	f002 0204 	and.w	r2, r2, #4
 8003a2e:	9201      	str	r2, [sp, #4]
 8003a30:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3c:	f002 0201 	and.w	r2, r2, #1
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a54:	4622      	mov	r2, r4
 8003a56:	4638      	mov	r0, r7
 8003a58:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a5c:	f003 f808 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8003a60:	4622      	mov	r2, r4
 8003a62:	f648 0110 	movw	r1, #34832	; 0x8810
 8003a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6a:	f003 f801 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4630      	mov	r0, r6
 8003a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a76:	f002 fffb 	bl	8006a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a7a:	2400      	movs	r4, #0
 8003a7c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7e:	4638      	mov	r0, r7
 8003a80:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a82:	220c      	movs	r2, #12
 8003a84:	2301      	movs	r3, #1
 8003a86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8e:	f002 fefb 	bl	8006888 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003a94:	f648 0210 	movw	r2, #34832	; 0x8810
 8003a98:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	f002 feef 	bl	8006888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aae:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	a904      	add	r1, sp, #16
 8003ab2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ab4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	f002 fee4 	bl	8006888 <HAL_GPIO_Init>

}
 8003ac0:	b00b      	add	sp, #44	; 0x2c
 8003ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000400 	.word	0x48000400

08003ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad2:	2100      	movs	r1, #0
{
 8003ad4:	b0ab      	sub	sp, #172	; 0xac
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad6:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad8:	a806      	add	r0, sp, #24
 8003ada:	2238      	movs	r2, #56	; 0x38
 8003adc:	f006 f828 	bl	8009b30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	2254      	movs	r2, #84	; 0x54
 8003ae4:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae6:	e9cd 4400 	strd	r4, r4, [sp]
 8003aea:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003aee:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003af0:	f006 f81e 	bl	8009b30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003af4:	4620      	mov	r0, r4
 8003af6:	f002 ffc1 	bl	8006a7c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003afa:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003afc:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003afe:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b00:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b02:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b04:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8003b08:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b0c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b10:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003b12:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b14:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b16:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b18:	9210      	str	r2, [sp, #64]	; 0x40
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b1a:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1c:	f003 f834 	bl	8006b88 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b20:	2703      	movs	r7, #3
 8003b22:	2200      	movs	r2, #0
 8003b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b28:	4668      	mov	r0, sp
 8003b2a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b30:	e9cd 6700 	strd	r6, r7, [sp]
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8003b34:	4d09      	ldr	r5, [pc, #36]	; (8003b5c <SystemClock_Config+0x8c>)
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b36:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b38:	f003 faaa 	bl	8007090 <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b48:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003b4a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b4e:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8003b50:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003b52:	9123      	str	r1, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b54:	f003 fbd2 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003b58:	b02b      	add	sp, #172	; 0xac
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5c:	00019002 	.word	0x00019002

08003b60 <main>:
{
 8003b60:	b580      	push	{r7, lr}
  if(E_ZERO==-1){E_ZERO = 0;}
 8003b62:	4ecd      	ldr	r6, [pc, #820]	; (8003e98 <main+0x338>)
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003b64:	4dcd      	ldr	r5, [pc, #820]	; (8003e9c <main+0x33c>)
  init_controller_params(&controller);
 8003b66:	f8df 839c 	ldr.w	r8, [pc, #924]	; 8003f04 <main+0x3a4>
  comm_encoder.m_zero = M_ZERO;
 8003b6a:	4fcd      	ldr	r7, [pc, #820]	; (8003ea0 <main+0x340>)
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003b6c:	4ccd      	ldr	r4, [pc, #820]	; (8003ea4 <main+0x344>)
{
 8003b6e:	b088      	sub	sp, #32
  HAL_Init();
 8003b70:	f000 ffc6 	bl	8004b00 <HAL_Init>
  SystemClock_Config();
 8003b74:	f7ff ffac 	bl	8003ad0 <SystemClock_Config>
  MX_GPIO_Init();
 8003b78:	f7ff ff3e 	bl	80039f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003b7c:	f7fd fa5e 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8003b80:	f7fe f92c 	bl	8001ddc <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8003b84:	f000 fbd4 	bl	8004330 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003b88:	f000 fece 	bl	8004928 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003b8c:	f000 fbf8 	bl	8004380 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003b90:	f000 fde8 	bl	8004764 <MX_TIM1_Init>
  MX_ADC2_Init();
 8003b94:	f7fd faa4 	bl	80010e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003b98:	f7fd faea 	bl	8001170 <MX_ADC3_Init>
    load_from_flash();
 8003b9c:	f7fe fa28 	bl	8001ff0 <load_from_flash>
  if(E_ZERO==-1){E_ZERO = 0;}
 8003ba0:	6973      	ldr	r3, [r6, #20]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003ba2:	ed95 7a02 	vldr	s14, [r5, #8]
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003ba6:	48c0      	ldr	r0, [pc, #768]	; (8003ea8 <main+0x348>)
  if(E_ZERO==-1){E_ZERO = 0;}
 8003ba8:	3301      	adds	r3, #1
 8003baa:	bf04      	itt	eq
 8003bac:	2300      	moveq	r3, #0
 8003bae:	6173      	streq	r3, [r6, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003bb0:	6933      	ldr	r3, [r6, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003bb2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(M_ZERO==-1){M_ZERO = 0;}
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	bf08      	it	eq
 8003bba:	2300      	moveq	r3, #0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003bbc:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003bc0:	ed95 7a03 	vldr	s14, [r5, #12]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003bc4:	bf08      	it	eq
 8003bc6:	6133      	streq	r3, [r6, #16]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003bc8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	bf04      	itt	eq
 8003bd2:	4bb6      	ldreq	r3, [pc, #728]	; (8003eac <main+0x34c>)
 8003bd4:	60ab      	streq	r3, [r5, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003bd6:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003bda:	ed95 7a06 	vldr	s14, [r5, #24]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003be2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003be6:	bf04      	itt	eq
 8003be8:	4bb1      	ldreq	r3, [pc, #708]	; (8003eb0 <main+0x350>)
 8003bea:	60eb      	streq	r3, [r5, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003bec:	eeb4 7a67 	vcmp.f32	s14, s15
 8003bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf4:	bf04      	itt	eq
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	61ab      	streq	r3, [r5, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003bfa:	6873      	ldr	r3, [r6, #4]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003bfc:	ed95 7a07 	vldr	s14, [r5, #28]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003c00:	3301      	adds	r3, #1
 8003c02:	bf04      	itt	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	6073      	streq	r3, [r6, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003c08:	68b3      	ldr	r3, [r6, #8]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	bf04      	itt	eq
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	60b3      	streq	r3, [r6, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8003c12:	68f3      	ldr	r3, [r6, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003c14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8003c18:	3301      	adds	r3, #1
 8003c1a:	bf08      	it	eq
 8003c1c:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003c20:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003c24:	ed95 7a08 	vldr	s14, [r5, #32]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8003c28:	bf08      	it	eq
 8003c2a:	60f3      	streq	r3, [r6, #12]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003c2c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	bf08      	it	eq
 8003c36:	2300      	moveq	r3, #0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003c38:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003c3c:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003c40:	bf08      	it	eq
 8003c42:	61eb      	streq	r3, [r5, #28]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003c44:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	bf04      	itt	eq
 8003c4e:	4b99      	ldreq	r3, [pc, #612]	; (8003eb4 <main+0x354>)
 8003c50:	622b      	streq	r3, [r5, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003c52:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003c56:	ed95 7a12 	vldr	s14, [r5, #72]	; 0x48
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003c5e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003c62:	bf04      	itt	eq
 8003c64:	4b94      	ldreq	r3, [pc, #592]	; (8003eb8 <main+0x358>)
 8003c66:	626b      	streq	r3, [r5, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003c68:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003c6c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003c74:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003c78:	bf04      	itt	eq
 8003c7a:	4b90      	ldreq	r3, [pc, #576]	; (8003ebc <main+0x35c>)
 8003c7c:	64ab      	streq	r3, [r5, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003c7e:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003c82:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003c8a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003c8e:	bf04      	itt	eq
 8003c90:	4b8b      	ldreq	r3, [pc, #556]	; (8003ec0 <main+0x360>)
 8003c92:	62ab      	streq	r3, [r5, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003c94:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003c98:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003ca0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003ca4:	bf08      	it	eq
 8003ca6:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003caa:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003cae:	ed95 7a17 	vldr	s14, [r5, #92]	; 0x5c
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003cb2:	bf08      	it	eq
 8003cb4:	646b      	streq	r3, [r5, #68]	; 0x44
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003cb6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbe:	bf08      	it	eq
 8003cc0:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003cc4:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003cc8:	bf08      	it	eq
 8003cca:	63ab      	streq	r3, [r5, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd0:	bf04      	itt	eq
 8003cd2:	4b7c      	ldreq	r3, [pc, #496]	; (8003ec4 <main+0x364>)
 8003cd4:	65eb      	streq	r3, [r5, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8003cd6:	ed95 7a18 	vldr	s14, [r5, #96]	; 0x60
 8003cda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003cde:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce6:	bf04      	itt	eq
 8003ce8:	4b74      	ldreq	r3, [pc, #464]	; (8003ebc <main+0x35c>)
 8003cea:	662b      	streq	r3, [r5, #96]	; 0x60
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003cec:	a368      	add	r3, pc, #416	; (adr r3, 8003e90 <main+0x330>)
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f006 fb8f 	bl	800a414 <iprintf>
  init_controller_params(&controller);
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	f7fe fbe0 	bl	80024bc <init_controller_params>
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8003cfc:	f44f 7224 	mov.w	r2, #656	; 0x290
 8003d00:	2100      	movs	r1, #0
 8003d02:	4871      	ldr	r0, [pc, #452]	; (8003ec8 <main+0x368>)
 8003d04:	f005 ff14 	bl	8009b30 <memset>
  comm_encoder.m_zero = M_ZERO;
 8003d08:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  comm_encoder.ppairs = PPAIRS;
 8003d0c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003d0e:	66b9      	str	r1, [r7, #104]	; 0x68
  comm_encoder.m_zero = M_ZERO;
 8003d10:	e9c7 2321 	strd	r2, r3, [r7, #132]	; 0x84
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8003d14:	4638      	mov	r0, r7
 8003d16:	2164      	movs	r1, #100	; 0x64
 8003d18:	f000 f9ce 	bl	80040b8 <ps_warmup>
  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8003d1c:	496b      	ldr	r1, [pc, #428]	; (8003ecc <main+0x36c>)
 8003d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d22:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003d26:	f005 fedb 	bl	8009ae0 <memcpy>
  HAL_ADC_Start(&hadc1);
 8003d2a:	4869      	ldr	r0, [pc, #420]	; (8003ed0 <main+0x370>)
 8003d2c:	f001 fd18 	bl	8005760 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003d30:	4868      	ldr	r0, [pc, #416]	; (8003ed4 <main+0x374>)
 8003d32:	f001 fd15 	bl	8005760 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003d36:	4868      	ldr	r0, [pc, #416]	; (8003ed8 <main+0x378>)
 8003d38:	f001 fd12 	bl	8005760 <HAL_ADC_Start>
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2110      	movs	r1, #16
 8003d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d44:	f002 fe94 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003d52:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003d54:	f002 fe8c 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003d58:	2001      	movs	r0, #1
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003d5a:	2500      	movs	r5, #0
  HAL_Delay(1);
 8003d5c:	f000 fef2 	bl	8004b44 <HAL_Delay>
  HAL_Delay(1);
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 feef 	bl	8004b44 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003d66:	88a1      	ldrh	r1, [r4, #4]
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	9606      	str	r6, [sp, #24]
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	462a      	mov	r2, r5
 8003d70:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003d74:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003d78:	9601      	str	r6, [sp, #4]
 8003d7a:	9500      	str	r5, [sp, #0]
 8003d7c:	f7fd fdc4 	bl	8001908 <drv_write_DCR>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003d80:	2703      	movs	r7, #3
  HAL_Delay(1);
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 fede 	bl	8004b44 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003d88:	88a1      	ldrh	r1, [r4, #4]
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	9706      	str	r7, [sp, #24]
 8003d8e:	4633      	mov	r3, r6
 8003d90:	462a      	mov	r2, r5
 8003d92:	9701      	str	r7, [sp, #4]
 8003d94:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8003d98:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003d9c:	9500      	str	r5, [sp, #0]
 8003d9e:	f7fd fe23 	bl	80019e8 <drv_write_CSACR>
  HAL_Delay(1);
 8003da2:	4630      	mov	r0, r6
 8003da4:	f000 fece 	bl	8004b44 <HAL_Delay>
  zero_current(&controller);
 8003da8:	4640      	mov	r0, r8
 8003daa:	f7fe faf9 	bl	80023a0 <zero_current>
  HAL_Delay(1);
 8003dae:	4630      	mov	r0, r6
 8003db0:	f000 fec8 	bl	8004b44 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8003db4:	88a1      	ldrh	r1, [r4, #4]
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	9500      	str	r5, [sp, #0]
 8003dba:	4633      	mov	r3, r6
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8003dc2:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8003dc6:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8003dca:	f7fd fe0d 	bl	80019e8 <drv_write_CSACR>
  HAL_Delay(1);
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 feb8 	bl	8004b44 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8003dd4:	f04f 0c0e 	mov.w	ip, #14
 8003dd8:	462b      	mov	r3, r5
 8003dda:	f8cd c008 	str.w	ip, [sp, #8]
 8003dde:	4632      	mov	r2, r6
 8003de0:	88a1      	ldrh	r1, [r4, #4]
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	e9cd 7700 	strd	r7, r7, [sp]
 8003de8:	f7fd fdcc 	bl	8001984 <drv_write_OCPCR>
  HAL_Delay(1);
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 fea9 	bl	8004b44 <HAL_Delay>
  drv_disable_gd(drv);
 8003df2:	88a1      	ldrh	r1, [r4, #4]
 8003df4:	6820      	ldr	r0, [r4, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	4f39      	ldr	r7, [pc, #228]	; (8003edc <main+0x37c>)
 8003df8:	f7fd fe86 	bl	8001b08 <drv_disable_gd>
  HAL_Delay(1);
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 fea1 	bl	8004b44 <HAL_Delay>
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8003e02:	e9d8 1227 	ldrd	r1, r2, [r8, #156]	; 0x9c
 8003e06:	4836      	ldr	r0, [pc, #216]	; (8003ee0 <main+0x380>)
 8003e08:	f006 fb04 	bl	800a414 <iprintf>
  HAL_GPIO_WritePin(LED1, 1 );
 8003e0c:	4835      	ldr	r0, [pc, #212]	; (8003ee4 <main+0x384>)
 8003e0e:	4632      	mov	r2, r6
 8003e10:	2104      	movs	r1, #4
 8003e12:	f002 fe2d 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 8003e16:	4632      	mov	r2, r6
 8003e18:	4832      	ldr	r0, [pc, #200]	; (8003ee4 <main+0x384>)
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	f002 fe28 	bl	8006a70 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003e20:	4629      	mov	r1, r5
 8003e22:	4831      	ldr	r0, [pc, #196]	; (8003ee8 <main+0x388>)
 8003e24:	f004 f962 	bl	80080ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003e28:	2104      	movs	r1, #4
 8003e2a:	482f      	ldr	r0, [pc, #188]	; (8003ee8 <main+0x388>)
 8003e2c:	f004 f95e 	bl	80080ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003e30:	2108      	movs	r1, #8
 8003e32:	482d      	ldr	r0, [pc, #180]	; (8003ee8 <main+0x388>)
 8003e34:	f004 f95a 	bl	80080ec <HAL_TIM_PWM_Start>
  can_rx_init(&can_rx);
 8003e38:	482c      	ldr	r0, [pc, #176]	; (8003eec <main+0x38c>)
 8003e3a:	f7fe f831 	bl	8001ea0 <can_rx_init>
  can_tx_init(&can_tx);
 8003e3e:	482c      	ldr	r0, [pc, #176]	; (8003ef0 <main+0x390>)
 8003e40:	f7fe f850 	bl	8001ee4 <can_tx_init>
  HAL_FDCAN_Start(&CAN_H);
 8003e44:	482b      	ldr	r0, [pc, #172]	; (8003ef4 <main+0x394>)
 8003e46:	f002 f947 	bl	80060d8 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	4829      	ldr	r0, [pc, #164]	; (8003ef4 <main+0x394>)
 8003e50:	f002 f9d8 	bl	8006204 <HAL_FDCAN_ActivateNotification>
  state.state = MENU_MODE;
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <main+0x398>)
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003e56:	4929      	ldr	r1, [pc, #164]	; (8003efc <main+0x39c>)
  state.ready = 1;
 8003e58:	70de      	strb	r6, [r3, #3]
 8003e5a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8003e5e:	2210      	movs	r2, #16
 8003e60:	f887 2319 	strb.w	r2, [r7, #793]	; 0x319
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003e64:	4826      	ldr	r0, [pc, #152]	; (8003f00 <main+0x3a0>)
 8003e66:	f887 c356 	strb.w	ip, [r7, #854]	; 0x356
 8003e6a:	4632      	mov	r2, r6
  state.next_state = MENU_MODE;
 8003e6c:	705d      	strb	r5, [r3, #1]
  state.state = MENU_MODE;
 8003e6e:	701d      	strb	r5, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003e70:	f004 fdc4 	bl	80089fc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003e74:	481c      	ldr	r0, [pc, #112]	; (8003ee8 <main+0x388>)
 8003e76:	f004 f85d 	bl	8007f34 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8003e7a:	4817      	ldr	r0, [pc, #92]	; (8003ed8 <main+0x378>)
 8003e7c:	f001 fcf4 	bl	8005868 <HAL_ADC_Start_IT>
  HAL_GPIO_WritePin(LED1, 0 );
 8003e80:	4818      	ldr	r0, [pc, #96]	; (8003ee4 <main+0x384>)
 8003e82:	462a      	mov	r2, r5
 8003e84:	2104      	movs	r1, #4
 8003e86:	f002 fdf3 	bl	8006a70 <HAL_GPIO_WritePin>
 8003e8a:	e03d      	b.n	8003f08 <main+0x3a8>
 8003e8c:	f3af 8000 	nop.w
 8003e90:	c0000000 	.word	0xc0000000
 8003e94:	4000cccc 	.word	0x4000cccc
 8003e98:	2000be30 	.word	0x2000be30
 8003e9c:	20003574 	.word	0x20003574
 8003ea0:	200032d0 	.word	0x200032d0
 8003ea4:	2000c25c 	.word	0x2000c25c
 8003ea8:	0800edb8 	.word	0x0800edb8
 8003eac:	447a0000 	.word	0x447a0000
 8003eb0:	42200000 	.word	0x42200000
 8003eb4:	42fa0000 	.word	0x42fa0000
 8003eb8:	41600000 	.word	0x41600000
 8003ebc:	40a00000 	.word	0x40a00000
 8003ec0:	41a80000 	.word	0x41a80000
 8003ec4:	43fa0000 	.word	0x43fa0000
 8003ec8:	2000bba0 	.word	0x2000bba0
 8003ecc:	2000be48 	.word	0x2000be48
 8003ed0:	20003190 	.word	0x20003190
 8003ed4:	20003124 	.word	0x20003124
 8003ed8:	200031fc 	.word	0x200031fc
 8003edc:	e000e100 	.word	0xe000e100
 8003ee0:	0800eddc 	.word	0x0800eddc
 8003ee4:	48000800 	.word	0x48000800
 8003ee8:	2000c3a0 	.word	0x2000c3a0
 8003eec:	2000c264 	.word	0x2000c264
 8003ef0:	2000c230 	.word	0x2000c230
 8003ef4:	20003268 	.word	0x20003268
 8003ef8:	20003564 	.word	0x20003564
 8003efc:	20003560 	.word	0x20003560
 8003f00:	2000c3ec 	.word	0x2000c3ec
 8003f04:	20003674 	.word	0x20003674
  HAL_GPIO_WritePin(LED2, 0 );
 8003f08:	4806      	ldr	r0, [pc, #24]	; (8003f24 <main+0x3c4>)
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	f002 fdaf 	bl	8006a70 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8003f12:	2064      	movs	r0, #100	; 0x64
 8003f14:	f000 fe16 	bl	8004b44 <HAL_Delay>
	  if(! (DRV_DISABLED||DRV_NOPRINT) ) drv_print_faults(drv);
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	88a1      	ldrh	r1, [r4, #4]
 8003f1c:	f7fd fe46 	bl	8001bac <drv_print_faults>
	  if(state.state==MOTOR_MODE){
 8003f20:	e7f7      	b.n	8003f12 <main+0x3b2>
 8003f22:	bf00      	nop
 8003f24:	48000800 	.word	0x48000800

08003f28 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <fast_fmaxf>:
#include "lookup.h"


float fast_fmaxf(float x, float y){
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003f2c:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003f34:	bfa8      	it	ge
 8003f36:	eeb0 0a60 	vmovge.f32	s0, s1
 8003f3a:	4770      	bx	lr

08003f3c <fast_fminf>:

float fast_fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003f3c:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003f44:	bf98      	it	ls
 8003f46:	eeb0 0a60 	vmovls.f32	s0, s1
 8003f4a:	4770      	bx	lr

08003f4c <fmaxf3>:

float fmaxf3(float x, float y, float z){
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8003f4c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	dd07      	ble.n	8003f66 <fmaxf3+0x1a>
 8003f56:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	bfb8      	it	lt
 8003f60:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003f64:	4770      	bx	lr
 8003f66:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	bfb4      	ite	lt
 8003f70:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003f74:	eeb0 0a60 	vmovge.f32	s0, s1
    }
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <fminf3>:

float fminf3(float x, float y, float z){
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8003f7c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	d507      	bpl.n	8003f96 <fminf3+0x1a>
 8003f86:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	bf88      	it	hi
 8003f90:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003f94:	4770      	bx	lr
 8003f96:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9e:	bf8c      	ite	hi
 8003fa0:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003fa4:	eeb0 0a60 	vmovls.f32	s0, s1
    }
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop

08003fac <limit_norm>:
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8003fac:	edd1 7a00 	vldr	s15, [r1]
 8003fb0:	ed90 7a00 	vldr	s14, [r0]
 8003fb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fb8:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003fbc:	eef1 6ae7 	vsqrt.f32	s13, s15
    if(norm > limit){
 8003fc0:	eef4 6ac0 	vcmpe.f32	s13, s0
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	dd0d      	ble.n	8003fe6 <limit_norm+0x3a>
        *x = *x * limit/norm;
 8003fca:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd2:	edc0 7a00 	vstr	s15, [r0]
        *y = *y * limit/norm;
 8003fd6:	edd1 7a00 	vldr	s15, [r1]
 8003fda:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003fde:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8003fe2:	edc1 7a00 	vstr	s15, [r1]
        }
    }
 8003fe6:	4770      	bx	lr

08003fe8 <uint_to_float>:
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	ee07 0a90 	vmov	s15, r0
 8003fee:	fa03 f101 	lsl.w	r1, r3, r1
 8003ff2:	3901      	subs	r1, #1
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float span = x_max - x_min;
 8003ff8:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003ffc:	ee07 1a90 	vmov	s15, r1
 8004000:	ee67 0a20 	vmul.f32	s1, s14, s1
 8004004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004008:	ee80 7aa7 	vdiv.f32	s14, s1, s15
    }
 800400c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <sin_lut>:

float sin_lut(float theta){
 8004014:	b508      	push	{r3, lr}
 8004016:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 800401a:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8004054 <sin_lut+0x40>
 800401e:	eef0 0a48 	vmov.f32	s1, s16
 8004022:	f009 fef7 	bl	800de14 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004026:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	bf48      	it	mi
 8004030:	ee30 0a08 	vaddmi.f32	s0, s0, s16

	return sin_tab[(int) (LUT_MULT*theta)];
 8004034:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004058 <sin_lut+0x44>
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <sin_lut+0x48>)
 800403a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800403e:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8004042:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004046:	ee10 2a10 	vmov	r2, s0
 800404a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 800404e:	ed93 0a00 	vldr	s0, [r3]
 8004052:	bd08      	pop	{r3, pc}
 8004054:	40c90fdb 	.word	0x40c90fdb
 8004058:	42a2f983 	.word	0x42a2f983
 800405c:	0800ee04 	.word	0x0800ee04

08004060 <cos_lut>:

float cos_lut(float theta){
 8004060:	b508      	push	{r3, lr}
	return sin_lut(PI_OVER_2_F - theta);
 8004062:	eddf 7a11 	vldr	s15, [pc, #68]	; 80040a8 <cos_lut+0x48>
float cos_lut(float theta){
 8004066:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 800406a:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80040ac <cos_lut+0x4c>
 800406e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004072:	eef0 0a48 	vmov.f32	s1, s16
 8004076:	f009 fecd 	bl	800de14 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 800407a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004082:	bf48      	it	mi
 8004084:	ee30 0a08 	vaddmi.f32	s0, s0, s16
	return sin_tab[(int) (LUT_MULT*theta)];
 8004088:	eddf 7a09 	vldr	s15, [pc, #36]	; 80040b0 <cos_lut+0x50>
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <cos_lut+0x54>)
 800408e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8004092:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8004096:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800409a:	ee10 2a10 	vmov	r2, s0
 800409e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 80040a2:	ed93 0a00 	vldr	s0, [r3]
 80040a6:	bd08      	pop	{r3, pc}
 80040a8:	3fc90fdb 	.word	0x3fc90fdb
 80040ac:	40c90fdb 	.word	0x40c90fdb
 80040b0:	42a2f983 	.word	0x42a2f983
 80040b4:	0800ee04 	.word	0x0800ee04

080040b8 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80040bc:	1e0f      	subs	r7, r1, #0
void ps_warmup(EncoderStruct * encoder, int n){
 80040be:	b082      	sub	sp, #8
	for(int i = 0; i<n; i++){
 80040c0:	dd22      	ble.n	8004108 <ps_warmup+0x50>
 80040c2:	4c13      	ldr	r4, [pc, #76]	; (8004110 <ps_warmup+0x58>)
 80040c4:	4606      	mov	r6, r0
 80040c6:	f100 0802 	add.w	r8, r0, #2
 80040ca:	2500      	movs	r5, #0
		encoder->spi_tx_word = 0x0000;
 80040cc:	2200      	movs	r2, #0
 80040ce:	8032      	strh	r2, [r6, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80040d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d8:	f002 fcca 	bl	8006a70 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80040dc:	2364      	movs	r3, #100	; 0x64
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	480b      	ldr	r0, [pc, #44]	; (8004110 <ps_warmup+0x58>)
 80040e2:	2301      	movs	r3, #1
 80040e4:	4642      	mov	r2, r8
 80040e6:	4631      	mov	r1, r6
 80040e8:	f003 fc1a 	bl	8007920 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80040ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d0fb      	beq.n	80040ec <ps_warmup+0x34>
	for(int i = 0; i<n; i++){
 80040f4:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80040f6:	2201      	movs	r2, #1
 80040f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004100:	f002 fcb6 	bl	8006a70 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004104:	42af      	cmp	r7, r5
 8004106:	d1e1      	bne.n	80040cc <ps_warmup+0x14>
	}
}
 8004108:	b002      	add	sp, #8
 800410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800410e:	bf00      	nop
 8004110:	2000c2d8 	.word	0x2000c2d8

08004114 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004114:	b530      	push	{r4, r5, lr}
 8004116:	ed2d 8b02 	vpush	{d8}
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 800411a:	6843      	ldr	r3, [r0, #4]
 800411c:	6083      	str	r3, [r0, #8]
void ps_sample(EncoderStruct * encoder, float dt){
 800411e:	4604      	mov	r4, r0
 8004120:	b083      	sub	sp, #12
 8004122:	f100 010c 	add.w	r1, r0, #12
 8004126:	224c      	movs	r2, #76	; 0x4c
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8004128:	4625      	mov	r5, r4
 800412a:	3010      	adds	r0, #16
void ps_sample(EncoderStruct * encoder, float dt){
 800412c:	eeb0 8a40 	vmov.f32	s16, s0
 8004130:	f005 fce4 	bl	8009afc <memmove>
	encoder->spi_tx_word = ENC_READ_WORD;
 8004134:	2200      	movs	r2, #0
 8004136:	f825 2b02 	strh.w	r2, [r5], #2
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800413a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800413e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004142:	f002 fc95 	bl	8006a70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 8004146:	2364      	movs	r3, #100	; 0x64
 8004148:	462a      	mov	r2, r5
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4856      	ldr	r0, [pc, #344]	; (80042a8 <ps_sample+0x194>)
 800414e:	4621      	mov	r1, r4
 8004150:	2302      	movs	r3, #2
 8004152:	f003 fbe5 	bl	8007920 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004156:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <ps_sample+0x194>)
 8004158:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 800415c:	2b02      	cmp	r3, #2
 800415e:	d0fb      	beq.n	8004158 <ps_sample+0x44>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004160:	2201      	movs	r2, #1
 8004162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416a:	f002 fc81 	bl	8006a70 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 800416e:	8861      	ldrh	r1, [r4, #2]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
	encoder->count = encoder->raw + off_interp;

	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8004170:	4d4e      	ldr	r5, [pc, #312]	; (80042ac <ps_sample+0x198>)
	encoder->raw = encoder ->spi_rx_word;
 8004172:	6761      	str	r1, [r4, #116]	; 0x74
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004174:	124b      	asrs	r3, r1, #9
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800417c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8004184:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	int int_angle = encoder->angle_singleturn;
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 800418c:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042b0 <ps_sample+0x19c>
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004190:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80042b4 <ps_sample+0x1a0>
	int_angle = (int)encoder->elec_angle;
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004194:	eddf 5a46 	vldr	s11, [pc, #280]	; 80042b0 <ps_sample+0x19c>
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8004198:	1ac0      	subs	r0, r0, r3
 800419a:	f3c1 0208 	ubfx	r2, r1, #0, #9
 800419e:	fb02 f200 	mul.w	r2, r2, r0
 80041a2:	eb03 2362 	add.w	r3, r3, r2, asr #9
	encoder->count = encoder->raw + off_interp;
 80041a6:	440b      	add	r3, r1
 80041a8:	67a3      	str	r3, [r4, #120]	; 0x78
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80041aa:	692a      	ldr	r2, [r5, #16]
 80041ac:	1a9a      	subs	r2, r3, r2
 80041ae:	ee07 2a10 	vmov	s14, r2
 80041b2:	eeba 7ac8 	vcvt.f32.s32	s14, s14, #16
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041b6:	696a      	ldr	r2, [r5, #20]
	int int_angle = encoder->angle_singleturn;
 80041b8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041bc:	1a9b      	subs	r3, r3, r2
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80041be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c2:	ee37 7a67 	vsub.f32	s14, s14, s15
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041c6:	ee07 3a90 	vmov	s15, r3
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 80041ca:	ee27 7a26 	vmul.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 80041d2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	bf48      	it	mi
 80041dc:	ee37 7a26 	vaddmi.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041e0:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 80041e4:	ed84 7a01 	vstr	s14, [r4, #4]
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 80041e8:	ee26 6a86 	vmul.f32	s12, s13, s12
 80041ec:	ee67 7a86 	vmul.f32	s15, s15, s12
	int_angle = (int)encoder->elec_angle;
 80041f0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 80041f4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80041f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//if(angle_diff > PI_F){encoder->turns--;}
	//else if(angle_diff < -PI_F){encoder->turns++;}

	//ben bugfix added
	int rollover = 0;
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80041fc:	ed94 6a02 	vldr	s12, [r4, #8]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004200:	ee67 7aa5 	vmul.f32	s15, s15, s11
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	bf48      	it	mi
 800420e:	ee77 7aa5 	vaddmi.f32	s15, s15, s11
	if(angle_diff > PI_F){rollover = -1;}
 8004212:	eddf 5a29 	vldr	s11, [pc, #164]	; 80042b8 <ps_sample+0x1a4>
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004216:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 800421a:	ee77 7a46 	vsub.f32	s15, s14, s12
	if(angle_diff > PI_F){rollover = -1;}
 800421e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004226:	dc2e      	bgt.n	8004286 <ps_sample+0x172>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004228:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80042bc <ps_sample+0x1a8>
	encoder->turns += rollover;
 800422c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80

	if(!encoder->first_sample){
 8004230:	f894 228c 	ldrb.w	r2, [r4, #652]	; 0x28c
	else if(angle_diff < -PI_F){rollover = 1;}
 8004234:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	bf4c      	ite	mi
 800423e:	2301      	movmi	r3, #1
 8004240:	2300      	movpl	r3, #0
	encoder->turns += rollover;
 8004242:	440b      	add	r3, r1
 8004244:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8004248:	b342      	cbz	r2, 800429c <ps_sample+0x188>
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80042b0 <ps_sample+0x19c>
 8004252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004256:	eea7 7a86 	vfma.f32	s14, s15, s12
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800425a:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
 800425e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80042c0 <ps_sample+0x1ac>
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8004262:	ed84 7a03 	vstr	s14, [r4, #12]
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004266:	ee37 7a46 	vsub.f32	s14, s14, s12
 800426a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426e:	eec7 7a08 	vdiv.f32	s15, s14, s16
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004272:	ee66 6aa7 	vmul.f32	s13, s13, s15
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004276:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 800427a:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64

}
 800427e:	b003      	add	sp, #12
 8004280:	ecbd 8b02 	vpop	{d8}
 8004284:	bd30      	pop	{r4, r5, pc}
	encoder->turns += rollover;
 8004286:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 800428a:	f894 228c 	ldrb.w	r2, [r4, #652]	; 0x28c
	if(angle_diff > PI_F){rollover = -1;}
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
	encoder->turns += rollover;
 8004292:	440b      	add	r3, r1
 8004294:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8004298:	2a00      	cmp	r2, #0
 800429a:	d1d6      	bne.n	800424a <ps_sample+0x136>
		encoder->first_sample = 1;
 800429c:	2301      	movs	r3, #1
		encoder->turns = 0;
 800429e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		encoder->first_sample = 1;
 80042a2:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
 80042a6:	e7d8      	b.n	800425a <ps_sample+0x146>
 80042a8:	2000c2d8 	.word	0x2000c2d8
 80042ac:	2000be30 	.word	0x2000be30
 80042b0:	40c90fdb 	.word	0x40c90fdb
 80042b4:	37800000 	.word	0x37800000
 80042b8:	40490fdb 	.word	0x40490fdb
 80042bc:	c0490fdb 	.word	0xc0490fdb
 80042c0:	3d579436 	.word	0x3d579436

080042c4 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4604      	mov	r4, r0
	printf("Raw: %d", encoder->raw);
 80042c8:	4813      	ldr	r0, [pc, #76]	; (8004318 <ps_print+0x54>)
 80042ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80042cc:	f006 f8a2 	bl	800a414 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80042d0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80042d2:	4812      	ldr	r0, [pc, #72]	; (800431c <ps_print+0x58>)
 80042d4:	f006 f89e 	bl	800a414 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80042d8:	6860      	ldr	r0, [r4, #4]
 80042da:	f7fc f95d 	bl	8000598 <__aeabi_f2d>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	480f      	ldr	r0, [pc, #60]	; (8004320 <ps_print+0x5c>)
 80042e4:	f006 f896 	bl	800a414 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80042e8:	68e0      	ldr	r0, [r4, #12]
 80042ea:	f7fc f955 	bl	8000598 <__aeabi_f2d>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	480c      	ldr	r0, [pc, #48]	; (8004324 <ps_print+0x60>)
 80042f4:	f006 f88e 	bl	800a414 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80042f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80042fa:	f7fc f94d 	bl	8000598 <__aeabi_f2d>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4809      	ldr	r0, [pc, #36]	; (8004328 <ps_print+0x64>)
 8004304:	f006 f886 	bl	800a414 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8004308:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800430c:	4807      	ldr	r0, [pc, #28]	; (800432c <ps_print+0x68>)
	//HAL_Delay(dt_ms);
}
 800430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("   Turns:  %d\r\n", encoder->turns);
 8004312:	f006 b87f 	b.w	800a414 <iprintf>
 8004316:	bf00      	nop
 8004318:	0800f604 	.word	0x0800f604
 800431c:	0800f60c 	.word	0x0800f60c
 8004320:	0800f624 	.word	0x0800f624
 8004324:	0800f638 	.word	0x0800f638
 8004328:	0800f64c 	.word	0x0800f64c
 800432c:	0800f660 	.word	0x0800f660

08004330 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004330:	4811      	ldr	r0, [pc, #68]	; (8004378 <MX_SPI1_Init+0x48>)
{
 8004332:	b538      	push	{r3, r4, r5, lr}
  hspi1.Instance = SPI1;
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <MX_SPI1_Init+0x4c>)
 8004336:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004338:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800433c:	2301      	movs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800433e:	f44f 6570 	mov.w	r5, #3840	; 0xf00
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004342:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004346:	2130      	movs	r1, #48	; 0x30
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004348:	6042      	str	r2, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800434a:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800434c:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800434e:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004350:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004354:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004358:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800435c:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 7;
 800435e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004360:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004362:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004364:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004366:	f003 fa55 	bl	8007814 <HAL_SPI_Init>
 800436a:	b900      	cbnz	r0, 800436e <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800436c:	bd38      	pop	{r3, r4, r5, pc}
 800436e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8004372:	f7ff bdd9 	b.w	8003f28 <Error_Handler>
 8004376:	bf00      	nop
 8004378:	2000c33c 	.word	0x2000c33c
 800437c:	40013000 	.word	0x40013000

08004380 <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004380:	4810      	ldr	r0, [pc, #64]	; (80043c4 <MX_SPI3_Init+0x44>)
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <MX_SPI3_Init+0x48>)
{
 8004384:	b510      	push	{r4, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004386:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi3.Instance = SPI3;
 800438a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800438c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004390:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8004394:	2107      	movs	r1, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004396:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004398:	60c2      	str	r2, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800439a:	2300      	movs	r3, #0
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800439c:	2208      	movs	r2, #8
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800439e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80043a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80043a6:	6184      	str	r4, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 80043a8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80043aa:	6083      	str	r3, [r0, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ac:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043ae:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80043b0:	61c2      	str	r2, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043b2:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80043b4:	f003 fa2e 	bl	8007814 <HAL_SPI_Init>
 80043b8:	b900      	cbnz	r0, 80043bc <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80043ba:	bd10      	pop	{r4, pc}
 80043bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80043c0:	f7ff bdb2 	b.w	8003f28 <Error_Handler>
 80043c4:	2000c2d8 	.word	0x2000c2d8
 80043c8:	40003c00 	.word	0x40003c00

080043cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043cc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80043ce:	6802      	ldr	r2, [r0, #0]
 80043d0:	492d      	ldr	r1, [pc, #180]	; (8004488 <HAL_SPI_MspInit+0xbc>)
{
 80043d2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80043d6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80043dc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80043e0:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80043e2:	d004      	beq.n	80043ee <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <HAL_SPI_MspInit+0xc0>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d028      	beq.n	800443c <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80043ea:	b00a      	add	sp, #40	; 0x28
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043f6:	2005      	movs	r0, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004400:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004402:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004406:	9200      	str	r2, [sp, #0]
 8004408:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	64da      	str	r2, [r3, #76]	; 0x4c
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004414:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800441c:	2200      	movs	r2, #0
 800441e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004420:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004422:	24e0      	movs	r4, #224	; 0xe0
 8004424:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800442a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800442e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004434:	f002 fa28 	bl	8006888 <HAL_GPIO_Init>
}
 8004438:	b00a      	add	sp, #40	; 0x28
 800443a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800443c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004440:	4813      	ldr	r0, [pc, #76]	; (8004490 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004442:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004448:	659a      	str	r2, [r3, #88]	; 0x58
 800444a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800444c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004450:	9202      	str	r2, [sp, #8]
 8004452:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004456:	f042 0204 	orr.w	r2, r2, #4
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004464:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004466:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004468:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800446a:	2200      	movs	r2, #0
 800446c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004470:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
 8004474:	2502      	movs	r5, #2
 8004476:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800447a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447e:	f002 fa03 	bl	8006888 <HAL_GPIO_Init>
}
 8004482:	b00a      	add	sp, #40	; 0x28
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	bf00      	nop
 8004488:	40013000 	.word	0x40013000
 800448c:	40003c00 	.word	0x40003c00
 8004490:	48000800 	.word	0x48000800

08004494 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_MspInit+0x30>)
 8004496:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	661a      	str	r2, [r3, #96]	; 0x60
 800449e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80044a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a2:	f002 0201 	and.w	r2, r2, #1
 80044a6:	9200      	str	r2, [sp, #0]
 80044a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044b0:	659a      	str	r2, [r3, #88]	; 0x58
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044bc:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80044be:	f002 bb5b 	b.w	8006b78 <HAL_PWREx_DisableUCPDDeadBattery>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044c8:	e7fe      	b.n	80044c8 <NMI_Handler>
 80044ca:	bf00      	nop

080044cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044cc:	e7fe      	b.n	80044cc <HardFault_Handler>
 80044ce:	bf00      	nop

080044d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044d0:	e7fe      	b.n	80044d0 <MemManage_Handler>
 80044d2:	bf00      	nop

080044d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <BusFault_Handler>
 80044d6:	bf00      	nop

080044d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044d8:	e7fe      	b.n	80044d8 <UsageFault_Handler>
 80044da:	bf00      	nop

080044dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop

080044e0 <DebugMon_Handler>:
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop

080044e4 <PendSV_Handler>:
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f000 bb1a 	b.w	8004b20 <HAL_IncTick>

080044ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80044ec:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  HAL_GPIO_WritePin(LED1, 1);
 80044ee:	4d10      	ldr	r5, [pc, #64]	; (8004530 <TIM1_UP_TIM16_IRQHandler+0x44>)

  analog_sample(&controller);
 80044f0:	4c10      	ldr	r4, [pc, #64]	; (8004534 <TIM1_UP_TIM16_IRQHandler+0x48>)
  HAL_GPIO_WritePin(LED1, 1);
 80044f2:	2201      	movs	r2, #1
 80044f4:	2104      	movs	r1, #4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f002 faba 	bl	8006a70 <HAL_GPIO_WritePin>
  analog_sample(&controller);
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7fd fe7f 	bl	8002200 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 8004502:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004538 <TIM1_UP_TIM16_IRQHandler+0x4c>
 8004506:	480d      	ldr	r0, [pc, #52]	; (800453c <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004508:	f7ff fe04 	bl	8004114 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 800450c:	480c      	ldr	r0, [pc, #48]	; (8004540 <TIM1_UP_TIM16_IRQHandler+0x54>)
 800450e:	f7fe fd87 	bl	8003020 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 8004512:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc


  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004516:	480b      	ldr	r0, [pc, #44]	; (8004544 <TIM1_UP_TIM16_IRQHandler+0x58>)
  controller.loop_count++;
 8004518:	3301      	adds	r3, #1
 800451a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  HAL_TIM_IRQHandler(&htim1);
 800451e:	f003 ff5d 	bl	80083dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_WritePin(LED1, 0);
 8004522:	4628      	mov	r0, r5
 8004524:	2200      	movs	r2, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1, 0);
 800452a:	2104      	movs	r1, #4
 800452c:	f002 baa0 	b.w	8006a70 <HAL_GPIO_WritePin>
 8004530:	48000800 	.word	0x48000800
 8004534:	20003674 	.word	0x20003674
 8004538:	3812ccf7 	.word	0x3812ccf7
 800453c:	200032d0 	.word	0x200032d0
 8004540:	20003564 	.word	0x20003564
 8004544:	2000c3a0 	.word	0x2000c3a0

08004548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800454a:	4805      	ldr	r0, [pc, #20]	; (8004560 <USART2_IRQHandler+0x18>)
 800454c:	f004 fb10 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <USART2_IRQHandler+0x1c>)
  update_fsm(&state, c);
 8004552:	4805      	ldr	r0, [pc, #20]	; (8004568 <USART2_IRQHandler+0x20>)
 8004554:	7819      	ldrb	r1, [r3, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8004556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_fsm(&state, c);
 800455a:	f7ff b859 	b.w	8003610 <update_fsm>
 800455e:	bf00      	nop
 8004560:	2000c3ec 	.word	0x2000c3ec
 8004564:	20003560 	.word	0x20003560
 8004568:	20003564 	.word	0x20003564

0800456c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800456c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800456e:	4c07      	ldr	r4, [pc, #28]	; (800458c <ADC3_IRQHandler+0x20>)
 8004570:	4620      	mov	r0, r4
 8004572:	f000 fccd 	bl	8004f10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
  controller.adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8004576:	4620      	mov	r0, r4
 8004578:	f000 fcc0 	bl	8004efc <HAL_ADC_GetValue>
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <ADC3_IRQHandler+0x24>)
 800457e:	4602      	mov	r2, r0
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8004580:	4620      	mov	r0, r4
  /* USER CODE END ADC3_IRQn 1 */
}
 8004582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  controller.adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8004586:	611a      	str	r2, [r3, #16]
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8004588:	f001 b96e 	b.w	8005868 <HAL_ADC_Start_IT>
 800458c:	200031fc 	.word	0x200031fc
 8004590:	20003674 	.word	0x20003674

08004594 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004598:	4838      	ldr	r0, [pc, #224]	; (800467c <FDCAN2_IT0_IRQHandler+0xe8>)
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800459a:	4c39      	ldr	r4, [pc, #228]	; (8004680 <FDCAN2_IT0_IRQHandler+0xec>)
{
 800459c:	b090      	sub	sp, #64	; 0x40
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800459e:	f001 feb9 	bl	8006314 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <FDCAN2_IT0_IRQHandler+0xf0>)
 80045a4:	4835      	ldr	r0, [pc, #212]	; (800467c <FDCAN2_IT0_IRQHandler+0xe8>)
 80045a6:	f103 020b 	add.w	r2, r3, #11
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	f001 fdac 	bl	8006108 <HAL_FDCAN_GetRxMessage>
  printf("CAN tx disabled!!\n\r");
 80045b0:	4835      	ldr	r0, [pc, #212]	; (8004688 <FDCAN2_IT0_IRQHandler+0xf4>)
 80045b2:	f005 ff2f 	bl	800a414 <iprintf>
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80045b6:	7926      	ldrb	r6, [r4, #4]
 80045b8:	7963      	ldrb	r3, [r4, #5]
 80045ba:	79a0      	ldrb	r0, [r4, #6]
 80045bc:	7862      	ldrb	r2, [r4, #1]
 80045be:	f894 c002 	ldrb.w	ip, [r4, #2]
 80045c2:	78e5      	ldrb	r5, [r4, #3]
 80045c4:	79e7      	ldrb	r7, [r4, #7]
 80045c6:	ea06 0103 	and.w	r1, r6, r3
 80045ca:	4001      	ands	r1, r0
 80045cc:	ea02 020c 	and.w	r2, r2, ip
 80045d0:	402a      	ands	r2, r5
 80045d2:	4039      	ands	r1, r7
 80045d4:	4011      	ands	r1, r2
 80045d6:	29ff      	cmp	r1, #255	; 0xff
 80045d8:	7a25      	ldrb	r5, [r4, #8]
 80045da:	d101      	bne.n	80045e0 <FDCAN2_IT0_IRQHandler+0x4c>
 80045dc:	2dfc      	cmp	r5, #252	; 0xfc
 80045de:	d025      	beq.n	800462c <FDCAN2_IT0_IRQHandler+0x98>
	  update_fsm(&state, MOTOR_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80045e0:	f1a6 06ff 	sub.w	r6, r6, #255	; 0xff
 80045e4:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
 80045e8:	fab6 f686 	clz	r6, r6
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	0976      	lsrs	r6, r6, #5
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	4038      	ands	r0, r7
 80045f6:	4002      	ands	r2, r0
 80045f8:	fb03 f306 	mul.w	r3, r3, r6
 80045fc:	2aff      	cmp	r2, #255	; 0xff
 80045fe:	bf14      	ite	ne
 8004600:	2300      	movne	r3, #0
 8004602:	f003 0301 	andeq.w	r3, r3, #1
 8004606:	2dfd      	cmp	r5, #253	; 0xfd
 8004608:	bf14      	ite	ne
 800460a:	2200      	movne	r2, #0
 800460c:	f003 0201 	andeq.w	r2, r3, #1
 8004610:	b99a      	cbnz	r2, 800463a <FDCAN2_IT0_IRQHandler+0xa6>
	  update_fsm(&state, MENU_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8004612:	2dfe      	cmp	r5, #254	; 0xfe
 8004614:	bf14      	ite	ne
 8004616:	2500      	movne	r5, #0
 8004618:	f003 0501 	andeq.w	r5, r3, #1
 800461c:	b1a5      	cbz	r5, 8004648 <FDCAN2_IT0_IRQHandler+0xb4>
	  update_fsm(&state, ZERO_CMD);
 800461e:	481b      	ldr	r0, [pc, #108]	; (800468c <FDCAN2_IT0_IRQHandler+0xf8>)
 8004620:	217a      	movs	r1, #122	; 0x7a
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004622:	b010      	add	sp, #64	; 0x40
 8004624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004628:	f7fe bff2 	b.w	8003610 <update_fsm>
 800462c:	4817      	ldr	r0, [pc, #92]	; (800468c <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MOTOR_CMD);
 800462e:	216d      	movs	r1, #109	; 0x6d
}
 8004630:	b010      	add	sp, #64	; 0x40
 8004632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004636:	f7fe bfeb 	b.w	8003610 <update_fsm>
 800463a:	4814      	ldr	r0, [pc, #80]	; (800468c <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MENU_CMD);
 800463c:	211b      	movs	r1, #27
}
 800463e:	b010      	add	sp, #64	; 0x40
 8004640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004644:	f7fe bfe4 	b.w	8003610 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8004648:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8004694 <FDCAN2_IT0_IRQHandler+0x100>
 800464c:	4f10      	ldr	r7, [pc, #64]	; (8004690 <FDCAN2_IT0_IRQHandler+0xfc>)
 800464e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8004652:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004654:	466e      	mov	r6, sp
 8004656:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004658:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800465a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800465c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800465e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004660:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004664:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004668:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800466c:	f7fd fc4e 	bl	8001f0c <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 8004670:	f848 5c14 	str.w	r5, [r8, #-20]
}
 8004674:	b010      	add	sp, #64	; 0x40
 8004676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467a:	bf00      	nop
 800467c:	20003268 	.word	0x20003268
 8004680:	2000c264 	.word	0x2000c264
 8004684:	2000c265 	.word	0x2000c265
 8004688:	0800f670 	.word	0x0800f670
 800468c:	20003564 	.word	0x20003564
 8004690:	2000c274 	.word	0x2000c274
 8004694:	20003748 	.word	0x20003748

08004698 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004698:	2001      	movs	r0, #1
 800469a:	4770      	bx	lr

0800469c <_kill>:

int _kill(int pid, int sig)
{
 800469c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800469e:	f005 f9f5 	bl	8009a8c <__errno>
 80046a2:	2316      	movs	r3, #22
 80046a4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	bd08      	pop	{r3, pc}

080046ac <_exit>:

void _exit (int status)
{
 80046ac:	b508      	push	{r3, lr}
	errno = EINVAL;
 80046ae:	f005 f9ed 	bl	8009a8c <__errno>
 80046b2:	2316      	movs	r3, #22
 80046b4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80046b6:	e7fe      	b.n	80046b6 <_exit+0xa>

080046b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046b8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	1e16      	subs	r6, r2, #0
 80046bc:	dd07      	ble.n	80046ce <_read+0x16>
 80046be:	460c      	mov	r4, r1
 80046c0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80046c2:	f3af 8000 	nop.w
 80046c6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ca:	42a5      	cmp	r5, r4
 80046cc:	d1f9      	bne.n	80046c2 <_read+0xa>
	}

return len;
}
 80046ce:	4630      	mov	r0, r6
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	bf00      	nop

080046d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046d4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	1e16      	subs	r6, r2, #0
 80046d8:	dd07      	ble.n	80046ea <_write+0x16>
 80046da:	460c      	mov	r4, r1
 80046dc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80046de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80046e2:	f000 f9a3 	bl	8004a2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e6:	42ac      	cmp	r4, r5
 80046e8:	d1f9      	bne.n	80046de <_write+0xa>
	}
	return len;
}
 80046ea:	4630      	mov	r0, r6
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
 80046ee:	bf00      	nop

080046f0 <_close>:

int _close(int file)
{
	return -1;
}
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80046f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046fc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80046fe:	2000      	movs	r0, #0
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop

08004704 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004704:	2001      	movs	r0, #1
 8004706:	4770      	bx	lr

08004708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004708:	2000      	movs	r0, #0
 800470a:	4770      	bx	lr

0800470c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800470e:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004710:	680b      	ldr	r3, [r1, #0]
{
 8004712:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004714:	4c0c      	ldr	r4, [pc, #48]	; (8004748 <_sbrk+0x3c>)
 8004716:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004718:	b12b      	cbz	r3, 8004726 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471a:	4418      	add	r0, r3
 800471c:	4290      	cmp	r0, r2
 800471e:	d807      	bhi.n	8004730 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004720:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004722:	4618      	mov	r0, r3
 8004724:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <_sbrk+0x40>)
 8004728:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800472a:	4418      	add	r0, r3
 800472c:	4290      	cmp	r0, r2
 800472e:	d9f7      	bls.n	8004720 <_sbrk+0x14>
    errno = ENOMEM;
 8004730:	f005 f9ac 	bl	8009a8c <__errno>
 8004734:	230c      	movs	r3, #12
 8004736:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd10      	pop	{r4, pc}
 8004740:	20003118 	.word	0x20003118
 8004744:	20020000 	.word	0x20020000
 8004748:	00000400 	.word	0x00000400
 800474c:	2000c490 	.word	0x2000c490

08004750 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <SystemInit+0x10>)
 8004752:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800475a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004764:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004766:	2400      	movs	r4, #0
{
 8004768:	b0a7      	sub	sp, #156	; 0x9c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800476a:	4d5d      	ldr	r5, [pc, #372]	; (80048e0 <MX_TIM1_Init+0x17c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800476c:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800476e:	4621      	mov	r1, r4
 8004770:	2234      	movs	r2, #52	; 0x34
 8004772:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004774:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004778:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800477c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8004780:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8004784:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004788:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800478a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800478c:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800478e:	f005 f9cf 	bl	8009b30 <memset>
  htim1.Instance = TIM1;
 8004792:	4854      	ldr	r0, [pc, #336]	; (80048e4 <MX_TIM1_Init+0x180>)
 8004794:	6028      	str	r0, [r5, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004796:	2120      	movs	r1, #32
  htim1.Init.Period = 5950;
 8004798:	f241 723e 	movw	r2, #5950	; 0x173e
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800479c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800479e:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 80047a0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 5950;
 80047a4:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.Prescaler = 0;
 80047a8:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047aa:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047ac:	f003 fb2a 	bl	8007e04 <HAL_TIM_Base_Init>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d15e      	bne.n	8004872 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047b8:	4849      	ldr	r0, [pc, #292]	; (80048e0 <MX_TIM1_Init+0x17c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ba:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047bc:	a906      	add	r1, sp, #24
 80047be:	f003 fd33 	bl	8008228 <HAL_TIM_ConfigClockSource>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d16a      	bne.n	800489c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047c6:	4846      	ldr	r0, [pc, #280]	; (80048e0 <MX_TIM1_Init+0x17c>)
 80047c8:	f003 fbf8 	bl	8007fbc <HAL_TIM_PWM_Init>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d162      	bne.n	8004896 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d0:	2600      	movs	r6, #0
 80047d2:	2700      	movs	r7, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047d6:	4842      	ldr	r0, [pc, #264]	; (80048e0 <MX_TIM1_Init+0x17c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d8:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047da:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047e0:	f004 f84a 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d153      	bne.n	8004890 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e8:	2660      	movs	r6, #96	; 0x60
 80047ea:	2700      	movs	r7, #0
 80047ec:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047f0:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f2:	2600      	movs	r6, #0
 80047f4:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047f6:	483a      	ldr	r0, [pc, #232]	; (80048e0 <MX_TIM1_Init+0x17c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047f8:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047fa:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004800:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004804:	f003 ff36 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8004808:	2800      	cmp	r0, #0
 800480a:	d13e      	bne.n	800488a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800480c:	4834      	ldr	r0, [pc, #208]	; (80048e0 <MX_TIM1_Init+0x17c>)
 800480e:	2204      	movs	r2, #4
 8004810:	a910      	add	r1, sp, #64	; 0x40
 8004812:	f003 ff2f 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8004816:	bba8      	cbnz	r0, 8004884 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004818:	4831      	ldr	r0, [pc, #196]	; (80048e0 <MX_TIM1_Init+0x17c>)
 800481a:	a910      	add	r1, sp, #64	; 0x40
 800481c:	2208      	movs	r2, #8
 800481e:	f003 ff29 	bl	8008674 <HAL_TIM_PWM_ConfigChannel>
 8004822:	bb60      	cbnz	r0, 800487e <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004824:	2200      	movs	r2, #0
 8004826:	2300      	movs	r3, #0
 8004828:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800482c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004830:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8004834:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800483e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004842:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004844:	2200      	movs	r2, #0
 8004846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800484a:	4825      	ldr	r0, [pc, #148]	; (80048e0 <MX_TIM1_Init+0x17c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800484c:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800484e:	a918      	add	r1, sp, #96	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004850:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004854:	f004 f874 	bl	8008940 <HAL_TIMEx_ConfigBreakDeadTime>
 8004858:	b970      	cbnz	r0, 8004878 <MX_TIM1_Init+0x114>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800485a:	6829      	ldr	r1, [r5, #0]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <MX_TIM1_Init+0x180>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800485e:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8004860:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004862:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8004866:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800486a:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 800486c:	d019      	beq.n	80048a2 <MX_TIM1_Init+0x13e>
}
 800486e:	b027      	add	sp, #156	; 0x9c
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004872:	f7ff fb59 	bl	8003f28 <Error_Handler>
 8004876:	e79d      	b.n	80047b4 <MX_TIM1_Init+0x50>
    Error_Handler();
 8004878:	f7ff fb56 	bl	8003f28 <Error_Handler>
 800487c:	e7ed      	b.n	800485a <MX_TIM1_Init+0xf6>
    Error_Handler();
 800487e:	f7ff fb53 	bl	8003f28 <Error_Handler>
 8004882:	e7cf      	b.n	8004824 <MX_TIM1_Init+0xc0>
    Error_Handler();
 8004884:	f7ff fb50 	bl	8003f28 <Error_Handler>
 8004888:	e7c6      	b.n	8004818 <MX_TIM1_Init+0xb4>
    Error_Handler();
 800488a:	f7ff fb4d 	bl	8003f28 <Error_Handler>
 800488e:	e7bd      	b.n	800480c <MX_TIM1_Init+0xa8>
    Error_Handler();
 8004890:	f7ff fb4a 	bl	8003f28 <Error_Handler>
 8004894:	e7a8      	b.n	80047e8 <MX_TIM1_Init+0x84>
    Error_Handler();
 8004896:	f7ff fb47 	bl	8003f28 <Error_Handler>
 800489a:	e799      	b.n	80047d0 <MX_TIM1_Init+0x6c>
    Error_Handler();
 800489c:	f7ff fb44 	bl	8003f28 <Error_Handler>
 80048a0:	e791      	b.n	80047c6 <MX_TIM1_Init+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80048aa:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80048b6:	900e      	str	r0, [sp, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80048be:	2200      	movs	r2, #0
 80048c0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c2:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80048c4:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 80048c8:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80048ce:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80048d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d6:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d8:	f001 ffd6 	bl	8006888 <HAL_GPIO_Init>
}
 80048dc:	b027      	add	sp, #156	; 0x9c
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e0:	2000c3a0 	.word	0x2000c3a0
 80048e4:	40012c00 	.word	0x40012c00

080048e8 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80048e8:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_TIM_Base_MspInit+0x3c>)
 80048ea:	6802      	ldr	r2, [r0, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d000      	beq.n	80048f2 <HAL_TIM_Base_MspInit+0xa>
 80048f0:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048f2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 80048f6:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8004902:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2101      	movs	r1, #1
 800490e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004910:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004912:	f001 f935 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004916:	2019      	movs	r0, #25
}
 8004918:	b003      	add	sp, #12
 800491a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800491e:	f001 b967 	b.w	8005bf0 <HAL_NVIC_EnableIRQ>
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00

08004928 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004928:	481f      	ldr	r0, [pc, #124]	; (80049a8 <MX_USART2_UART_Init+0x80>)
{
 800492a:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <MX_USART2_UART_Init+0x84>)
 800492e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004930:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004934:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004936:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004938:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800493c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004940:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8004944:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004946:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004948:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800494a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800494c:	f004 fd1e 	bl	800938c <HAL_UART_Init>
 8004950:	b970      	cbnz	r0, 8004970 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004952:	4815      	ldr	r0, [pc, #84]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 8004954:	2100      	movs	r1, #0
 8004956:	f005 f815 	bl	8009984 <HAL_UARTEx_SetTxFifoThreshold>
 800495a:	b988      	cbnz	r0, 8004980 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800495c:	4812      	ldr	r0, [pc, #72]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 800495e:	2100      	movs	r1, #0
 8004960:	f005 f84e 	bl	8009a00 <HAL_UARTEx_SetRxFifoThreshold>
 8004964:	b9a0      	cbnz	r0, 8004990 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004966:	4810      	ldr	r0, [pc, #64]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 8004968:	f004 ffee 	bl	8009948 <HAL_UARTEx_DisableFifoMode>
 800496c:	b9b8      	cbnz	r0, 800499e <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800496e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004970:	f7ff fada 	bl	8003f28 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004974:	480c      	ldr	r0, [pc, #48]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 8004976:	2100      	movs	r1, #0
 8004978:	f005 f804 	bl	8009984 <HAL_UARTEx_SetTxFifoThreshold>
 800497c:	2800      	cmp	r0, #0
 800497e:	d0ed      	beq.n	800495c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004980:	f7ff fad2 	bl	8003f28 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004984:	4808      	ldr	r0, [pc, #32]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 8004986:	2100      	movs	r1, #0
 8004988:	f005 f83a 	bl	8009a00 <HAL_UARTEx_SetRxFifoThreshold>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0ea      	beq.n	8004966 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004990:	f7ff faca 	bl	8003f28 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004994:	4804      	ldr	r0, [pc, #16]	; (80049a8 <MX_USART2_UART_Init+0x80>)
 8004996:	f004 ffd7 	bl	8009948 <HAL_UARTEx_DisableFifoMode>
 800499a:	2800      	cmp	r0, #0
 800499c:	d0e7      	beq.n	800496e <MX_USART2_UART_Init+0x46>
}
 800499e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80049a2:	f7ff bac1 	b.w	8003f28 <Error_Handler>
 80049a6:	bf00      	nop
 80049a8:	2000c3ec 	.word	0x2000c3ec
 80049ac:	40004400 	.word	0x40004400

080049b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049b0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 80049b2:	6802      	ldr	r2, [r0, #0]
 80049b4:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_UART_MspInit+0x78>)
{
 80049b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 80049ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80049c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80049c4:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 80049c6:	d001      	beq.n	80049cc <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80049c8:	b008      	add	sp, #32
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80049cc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80049d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049d8:	659a      	str	r2, [r3, #88]	; 0x58
 80049da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049f4:	220c      	movs	r2, #12
 80049f6:	2302      	movs	r3, #2
 80049f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049fc:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049fe:	2300      	movs	r3, #0
 8004a00:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a0c:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	f001 ff3b 	bl	8006888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004a12:	4622      	mov	r2, r4
 8004a14:	2101      	movs	r1, #1
 8004a16:	2026      	movs	r0, #38	; 0x26
 8004a18:	f001 f8b2 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a1c:	2026      	movs	r0, #38	; 0x26
 8004a1e:	f001 f8e7 	bl	8005bf0 <HAL_NVIC_EnableIRQ>
}
 8004a22:	b008      	add	sp, #32
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	bf00      	nop
 8004a28:	40004400 	.word	0x40004400

08004a2c <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8004a2c:	b500      	push	{lr}
 8004a2e:	b083      	sub	sp, #12
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8004a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 8004a34:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8004a36:	2201      	movs	r2, #1
 8004a38:	a901      	add	r1, sp, #4
 8004a3a:	4803      	ldr	r0, [pc, #12]	; (8004a48 <__io_putchar+0x1c>)
 8004a3c:	f004 fed8 	bl	80097f0 <HAL_UART_Transmit>
return 0;
}
 8004a40:	2000      	movs	r0, #0
 8004a42:	b003      	add	sp, #12
 8004a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a48:	2000c3ec 	.word	0x2000c3ec

08004a4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004a4c:	4902      	ldr	r1, [pc, #8]	; (8004a58 <HAL_UART_RxCpltCallback+0xc>)
 8004a4e:	4803      	ldr	r0, [pc, #12]	; (8004a5c <HAL_UART_RxCpltCallback+0x10>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	f003 bfd3 	b.w	80089fc <HAL_UART_Receive_IT>
 8004a56:	bf00      	nop
 8004a58:	20003560 	.word	0x20003560
 8004a5c:	2000c3ec 	.word	0x2000c3ec

08004a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a60:	480d      	ldr	r0, [pc, #52]	; (8004a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a64:	480d      	ldr	r0, [pc, #52]	; (8004a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8004a66:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a68:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <LoopForever+0xe>)
  movs r3, #0
 8004a6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a6c:	e002      	b.n	8004a74 <LoopCopyDataInit>

08004a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a72:	3304      	adds	r3, #4

08004a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a78:	d3f9      	bcc.n	8004a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a7a:	4a0b      	ldr	r2, [pc, #44]	; (8004aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a7c:	4c0b      	ldr	r4, [pc, #44]	; (8004aac <LoopForever+0x16>)
  movs r3, #0
 8004a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a80:	e001      	b.n	8004a86 <LoopFillZerobss>

08004a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a84:	3204      	adds	r2, #4

08004a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a88:	d3fb      	bcc.n	8004a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a8a:	f7ff fe61 	bl	8004750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a8e:	f005 f803 	bl	8009a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a92:	f7ff f865 	bl	8003b60 <main>

08004a96 <LoopForever>:

LoopForever:
    b LoopForever
 8004a96:	e7fe      	b.n	8004a96 <LoopForever>
  ldr   r0, =_estack
 8004a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aa0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004aa4:	0800fbe0 	.word	0x0800fbe0
  ldr r2, =_sbss
 8004aa8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004aac:	2000c490 	.word	0x2000c490

08004ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ab0:	e7fe      	b.n	8004ab0 <ADC1_2_IRQHandler>
	...

08004ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ab4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_InitTick+0x40>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b90b      	cbnz	r3, 8004ac0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004abc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ac0:	490d      	ldr	r1, [pc, #52]	; (8004af8 <HAL_InitTick+0x44>)
 8004ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	6808      	ldr	r0, [r1, #0]
 8004ace:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ad2:	f001 f89b 	bl	8005c0c <HAL_SYSTICK_Config>
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d1ef      	bne.n	8004abc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004adc:	2d0f      	cmp	r5, #15
 8004ade:	d8ed      	bhi.n	8004abc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f001 f84a 	bl	8005b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_InitTick+0x48>)
 8004aee:	4620      	mov	r0, r4
 8004af0:	601d      	str	r5, [r3, #0]
}
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20000004 	.word	0x20000004
 8004af8:	20000000 	.word	0x20000000
 8004afc:	20000008 	.word	0x20000008

08004b00 <HAL_Init>:
{
 8004b00:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b02:	2003      	movs	r0, #3
 8004b04:	f001 f828 	bl	8005b58 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7ff ffd3 	bl	8004ab4 <HAL_InitTick>
 8004b0e:	b110      	cbz	r0, 8004b16 <HAL_Init+0x16>
    status = HAL_ERROR;
 8004b10:	2401      	movs	r4, #1
}
 8004b12:	4620      	mov	r0, r4
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	4604      	mov	r4, r0
    HAL_MspInit();
 8004b18:	f7ff fcbc 	bl	8004494 <HAL_MspInit>
}
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_IncTick+0x10>)
 8004b22:	4904      	ldr	r1, [pc, #16]	; (8004b34 <HAL_IncTick+0x14>)
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	440b      	add	r3, r1
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2000c47c 	.word	0x2000c47c
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b38:	4b01      	ldr	r3, [pc, #4]	; (8004b40 <HAL_GetTick+0x8>)
 8004b3a:	6818      	ldr	r0, [r3, #0]
}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	2000c47c 	.word	0x2000c47c

08004b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7ff fff6 	bl	8004b38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b4c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004b4e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004b50:	d002      	beq.n	8004b58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_Delay+0x20>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b58:	f7ff ffee 	bl	8004b38 <HAL_GetTick>
 8004b5c:	1b43      	subs	r3, r0, r5
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	d3fa      	bcc.n	8004b58 <HAL_Delay+0x14>
  {
  }
}
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20000004 	.word	0x20000004

08004b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f000 80d6 	beq.w	8004d22 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b76:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004b78:	4604      	mov	r4, r0
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	f000 809f 	beq.w	8004cbe <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b80:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b82:	6893      	ldr	r3, [r2, #8]
 8004b84:	0099      	lsls	r1, r3, #2
 8004b86:	d505      	bpl.n	8004b94 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b88:	6893      	ldr	r3, [r2, #8]
 8004b8a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b92:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b94:	6893      	ldr	r3, [r2, #8]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	d419      	bmi.n	8004bce <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <HAL_ADC_Init+0x230>)
 8004b9c:	487f      	ldr	r0, [pc, #508]	; (8004d9c <HAL_ADC_Init+0x234>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004ba0:	6891      	ldr	r1, [r2, #8]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	fba0 0303 	umull	r0, r3, r0, r3
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004bba:	6091      	str	r1, [r2, #8]
 8004bbc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004bbe:	9b01      	ldr	r3, [sp, #4]
 8004bc0:	b12b      	cbz	r3, 8004bce <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f9      	bne.n	8004bc2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bce:	6893      	ldr	r3, [r2, #8]
 8004bd0:	00de      	lsls	r6, r3, #3
 8004bd2:	d466      	bmi.n	8004ca2 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bd6:	f043 0310 	orr.w	r3, r3, #16
 8004bda:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004be4:	6893      	ldr	r3, [r2, #8]
 8004be6:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8004bea:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bf0:	d15e      	bne.n	8004cb0 <HAL_ADC_Init+0x148>
 8004bf2:	06dd      	lsls	r5, r3, #27
 8004bf4:	d45c      	bmi.n	8004cb0 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c02:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c04:	07d9      	lsls	r1, r3, #31
 8004c06:	d419      	bmi.n	8004c3c <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c08:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004c0c:	f000 80a1 	beq.w	8004d52 <HAL_ADC_Init+0x1ea>
 8004c10:	4b63      	ldr	r3, [pc, #396]	; (8004da0 <HAL_ADC_Init+0x238>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	f000 80a6 	beq.w	8004d64 <HAL_ADC_Init+0x1fc>
 8004c18:	4d62      	ldr	r5, [pc, #392]	; (8004da4 <HAL_ADC_Init+0x23c>)
 8004c1a:	4963      	ldr	r1, [pc, #396]	; (8004da8 <HAL_ADC_Init+0x240>)
 8004c1c:	68ad      	ldr	r5, [r5, #8]
 8004c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	6889      	ldr	r1, [r1, #8]
 8004c26:	432b      	orrs	r3, r5
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	07db      	lsls	r3, r3, #31
 8004c2c:	d406      	bmi.n	8004c3c <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c2e:	495f      	ldr	r1, [pc, #380]	; (8004dac <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c30:	688b      	ldr	r3, [r1, #8]
 8004c32:	6865      	ldr	r5, [r4, #4]
 8004c34:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004c38:	432b      	orrs	r3, r5
 8004c3a:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004c3c:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c42:	432b      	orrs	r3, r5
 8004c44:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c46:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c48:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004c4c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c50:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c56:	d05f      	beq.n	8004d18 <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c5a:	b121      	cbz	r1, 8004c66 <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004c5c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c5e:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c62:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c64:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c66:	68d6      	ldr	r6, [r2, #12]
 8004c68:	4951      	ldr	r1, [pc, #324]	; (8004db0 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c6a:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c6c:	4031      	ands	r1, r6
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c72:	6913      	ldr	r3, [r2, #16]
 8004c74:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004c78:	432b      	orrs	r3, r5
 8004c7a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c7c:	6893      	ldr	r3, [r2, #8]
 8004c7e:	075e      	lsls	r6, r3, #29
 8004c80:	d523      	bpl.n	8004cca <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c82:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c84:	6963      	ldr	r3, [r4, #20]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d04e      	beq.n	8004d28 <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c8c:	f023 030f 	bic.w	r3, r3, #15
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ca2:	6893      	ldr	r3, [r2, #8]
 8004ca4:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca8:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004cae:	d0a0      	beq.n	8004bf2 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004cb2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004cba:	b002      	add	sp, #8
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004cbe:	f7fc faab 	bl	8001218 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004cc2:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004cc4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004cc8:	e75a      	b.n	8004b80 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cca:	6893      	ldr	r3, [r2, #8]
 8004ccc:	071d      	lsls	r5, r3, #28
 8004cce:	d4d9      	bmi.n	8004c84 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004cd0:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cd2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cd6:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8004cd8:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004cda:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cde:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ce0:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ce4:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004cec:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004cee:	bb1d      	cbnz	r5, 8004d38 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004cf6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004cfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004d06:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d033      	beq.n	8004d76 <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d0e:	6913      	ldr	r3, [r2, #16]
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6113      	str	r3, [r2, #16]
 8004d16:	e7b5      	b.n	8004c84 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d1a:	3901      	subs	r1, #1
 8004d1c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004d20:	e79a      	b.n	8004c58 <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8004d22:	2001      	movs	r0, #1
}
 8004d24:	b002      	add	sp, #8
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d2a:	6a23      	ldr	r3, [r4, #32]
 8004d2c:	f021 010f 	bic.w	r1, r1, #15
 8004d30:	3b01      	subs	r3, #1
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	e7ac      	b.n	8004c92 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d3e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004d42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d4a:	432b      	orrs	r3, r5
 8004d4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004d50:	e7d9      	b.n	8004d06 <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d52:	4913      	ldr	r1, [pc, #76]	; (8004da0 <HAL_ADC_Init+0x238>)
 8004d54:	6893      	ldr	r3, [r2, #8]
 8004d56:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	07d9      	lsls	r1, r3, #31
 8004d5c:	f53f af6e 	bmi.w	8004c3c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d60:	4914      	ldr	r1, [pc, #80]	; (8004db4 <HAL_ADC_Init+0x24c>)
 8004d62:	e765      	b.n	8004c30 <HAL_ADC_Init+0xc8>
 8004d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	07db      	lsls	r3, r3, #31
 8004d70:	f53f af64 	bmi.w	8004c3c <HAL_ADC_Init+0xd4>
 8004d74:	e7f4      	b.n	8004d60 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d76:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004d7a:	6911      	ldr	r1, [r2, #16]
 8004d7c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004d7e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004d82:	f021 0104 	bic.w	r1, r1, #4
 8004d86:	4333      	orrs	r3, r6
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d8c:	432b      	orrs	r3, r5
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6113      	str	r3, [r2, #16]
 8004d96:	e775      	b.n	8004c84 <HAL_ADC_Init+0x11c>
 8004d98:	20000000 	.word	0x20000000
 8004d9c:	053e2d63 	.word	0x053e2d63
 8004da0:	50000100 	.word	0x50000100
 8004da4:	50000400 	.word	0x50000400
 8004da8:	50000600 	.word	0x50000600
 8004dac:	50000700 	.word	0x50000700
 8004db0:	fff04007 	.word	0xfff04007
 8004db4:	50000300 	.word	0x50000300

08004db8 <HAL_ADC_PollForConversion>:
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db8:	6803      	ldr	r3, [r0, #0]
 8004dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dc6:	d06f      	beq.n	8004ea8 <HAL_ADC_PollForConversion+0xf0>
 8004dc8:	4848      	ldr	r0, [pc, #288]	; (8004eec <HAL_ADC_PollForConversion+0x134>)
 8004dca:	4a49      	ldr	r2, [pc, #292]	; (8004ef0 <HAL_ADC_PollForConversion+0x138>)
 8004dcc:	4949      	ldr	r1, [pc, #292]	; (8004ef4 <HAL_ADC_PollForConversion+0x13c>)
 8004dce:	4283      	cmp	r3, r0
 8004dd0:	bf18      	it	ne
 8004dd2:	460a      	movne	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004dd4:	69ac      	ldr	r4, [r5, #24]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004dd6:	6897      	ldr	r7, [r2, #8]
 8004dd8:	2c08      	cmp	r4, #8
 8004dda:	f007 071f 	and.w	r7, r7, #31
 8004dde:	d00a      	beq.n	8004df6 <HAL_ADC_PollForConversion+0x3e>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004de0:	2f09      	cmp	r7, #9
 8004de2:	d863      	bhi.n	8004eac <HAL_ADC_PollForConversion+0xf4>
 8004de4:	f240 2221 	movw	r2, #545	; 0x221
 8004de8:	40fa      	lsrs	r2, r7
 8004dea:	07d1      	lsls	r1, r2, #31
 8004dec:	d55e      	bpl.n	8004eac <HAL_ADC_PollForConversion+0xf4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	07da      	lsls	r2, r3, #31
 8004df2:	d469      	bmi.n	8004ec8 <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004df4:	2404      	movs	r4, #4
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004df6:	f7ff fe9f 	bl	8004b38 <HAL_GetTick>
 8004dfa:	682a      	ldr	r2, [r5, #0]
 8004dfc:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004dfe:	1c73      	adds	r3, r6, #1
 8004e00:	d12c      	bne.n	8004e5c <HAL_ADC_PollForConversion+0xa4>
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	421c      	tst	r4, r3
 8004e06:	d0fc      	beq.n	8004e02 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e08:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0e:	65eb      	str	r3, [r5, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e10:	68d3      	ldr	r3, [r2, #12]
 8004e12:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004e16:	d10f      	bne.n	8004e38 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e18:	7f6b      	ldrb	r3, [r5, #29]
 8004e1a:	b96b      	cbnz	r3, 8004e38 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e1c:	6813      	ldr	r3, [r2, #0]
 8004e1e:	0718      	lsls	r0, r3, #28
 8004e20:	d50a      	bpl.n	8004e38 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e22:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	65eb      	str	r3, [r5, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e2a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e2c:	04d9      	lsls	r1, r3, #19
 8004e2e:	d403      	bmi.n	8004e38 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e30:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	65eb      	str	r3, [r5, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e38:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_ADC_PollForConversion+0x134>)
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d029      	beq.n	8004e92 <HAL_ADC_PollForConversion+0xda>
 8004e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d04e      	beq.n	8004ee4 <HAL_ADC_PollForConversion+0x12c>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e46:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e48:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e4a:	d029      	beq.n	8004ea0 <HAL_ADC_PollForConversion+0xe8>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004e4c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e50:	bf06      	itte	eq
 8004e52:	230c      	moveq	r3, #12
 8004e54:	6013      	streq	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2000      	movne	r0, #0
}
 8004e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	4223      	tst	r3, r4
 8004e60:	d1d2      	bne.n	8004e08 <HAL_ADC_PollForConversion+0x50>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e62:	f7ff fe69 	bl	8004b38 <HAL_GetTick>
 8004e66:	eba0 0008 	sub.w	r0, r0, r8
 8004e6a:	42b0      	cmp	r0, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e6c:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e6e:	d90a      	bls.n	8004e86 <HAL_ADC_PollForConversion+0xce>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	4023      	ands	r3, r4
 8004e74:	d1c3      	bne.n	8004dfe <HAL_ADC_PollForConversion+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e76:	6dea      	ldr	r2, [r5, #92]	; 0x5c
          __HAL_UNLOCK(hadc);
 8004e78:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e7c:	f042 0204 	orr.w	r2, r2, #4
 8004e80:	65ea      	str	r2, [r5, #92]	; 0x5c
          return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
 8004e84:	e7e8      	b.n	8004e58 <HAL_ADC_PollForConversion+0xa0>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	d1b9      	bne.n	8004dfe <HAL_ADC_PollForConversion+0x46>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	4023      	ands	r3, r4
 8004e8e:	d1b6      	bne.n	8004dfe <HAL_ADC_PollForConversion+0x46>
 8004e90:	e7f1      	b.n	8004e76 <HAL_ADC_PollForConversion+0xbe>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e92:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e96:	2f09      	cmp	r7, #9
 8004e98:	d91d      	bls.n	8004ed6 <HAL_ADC_PollForConversion+0x11e>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e9a:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e9c:	68c8      	ldr	r0, [r1, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e9e:	d1d5      	bne.n	8004e4c <HAL_ADC_PollForConversion+0x94>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004ea0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8004ea2:	2000      	movs	r0, #0
}
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <HAL_ADC_PollForConversion+0x138>)
 8004eaa:	e793      	b.n	8004dd4 <HAL_ADC_PollForConversion+0x1c>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb0:	d01a      	beq.n	8004ee8 <HAL_ADC_PollForConversion+0x130>
 8004eb2:	480e      	ldr	r0, [pc, #56]	; (8004eec <HAL_ADC_PollForConversion+0x134>)
 8004eb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <HAL_ADC_PollForConversion+0x138>)
 8004eb6:	490f      	ldr	r1, [pc, #60]	; (8004ef4 <HAL_ADC_PollForConversion+0x13c>)
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	bf0c      	ite	eq
 8004ebc:	4613      	moveq	r3, r2
 8004ebe:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8004ec6:	d095      	beq.n	8004df4 <HAL_ADC_PollForConversion+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004eca:	f043 0320 	orr.w	r3, r3, #32
 8004ece:	65eb      	str	r3, [r5, #92]	; 0x5c
        return HAL_ERROR;
 8004ed0:	2001      	movs	r0, #1
}
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ed6:	f240 2321 	movw	r3, #545	; 0x221
 8004eda:	fa23 f707 	lsr.w	r7, r3, r7
 8004ede:	07fb      	lsls	r3, r7, #31
 8004ee0:	d5db      	bpl.n	8004e9a <HAL_ADC_PollForConversion+0xe2>
 8004ee2:	e7b0      	b.n	8004e46 <HAL_ADC_PollForConversion+0x8e>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ee4:	4904      	ldr	r1, [pc, #16]	; (8004ef8 <HAL_ADC_PollForConversion+0x140>)
 8004ee6:	e7d6      	b.n	8004e96 <HAL_ADC_PollForConversion+0xde>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ee8:	4b01      	ldr	r3, [pc, #4]	; (8004ef0 <HAL_ADC_PollForConversion+0x138>)
 8004eea:	e7e9      	b.n	8004ec0 <HAL_ADC_PollForConversion+0x108>
 8004eec:	50000100 	.word	0x50000100
 8004ef0:	50000300 	.word	0x50000300
 8004ef4:	50000700 	.word	0x50000700
 8004ef8:	50000400 	.word	0x50000400

08004efc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004efc:	6803      	ldr	r3, [r0, #0]
 8004efe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop

08004f04 <HAL_ADC_ConvCpltCallback>:
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <HAL_ADC_LevelOutOfWindowCallback>:
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <HAL_ADC_ErrorCallback>:
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f12:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f18:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f1a:	685f      	ldr	r7, [r3, #4]
{
 8004f1c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f1e:	f000 80d2 	beq.w	80050c6 <HAL_ADC_IRQHandler+0x1b6>
 8004f22:	48a2      	ldr	r0, [pc, #648]	; (80051ac <HAL_ADC_IRQHandler+0x29c>)
 8004f24:	4aa2      	ldr	r2, [pc, #648]	; (80051b0 <HAL_ADC_IRQHandler+0x2a0>)
 8004f26:	49a3      	ldr	r1, [pc, #652]	; (80051b4 <HAL_ADC_IRQHandler+0x2a4>)
 8004f28:	4283      	cmp	r3, r0
 8004f2a:	bf08      	it	eq
 8004f2c:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f2e:	6895      	ldr	r5, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f30:	07b1      	lsls	r1, r6, #30
 8004f32:	f005 051f 	and.w	r5, r5, #31
 8004f36:	d502      	bpl.n	8004f3e <HAL_ADC_IRQHandler+0x2e>
 8004f38:	07ba      	lsls	r2, r7, #30
 8004f3a:	f100 80b6 	bmi.w	80050aa <HAL_ADC_IRQHandler+0x19a>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f3e:	0770      	lsls	r0, r6, #29
 8004f40:	f140 8086 	bpl.w	8005050 <HAL_ADC_IRQHandler+0x140>
 8004f44:	0779      	lsls	r1, r7, #29
 8004f46:	f140 8083 	bpl.w	8005050 <HAL_ADC_IRQHandler+0x140>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f4c:	06d1      	lsls	r1, r2, #27
 8004f4e:	d403      	bmi.n	8004f58 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f50:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004f5e:	d121      	bne.n	8004fa4 <HAL_ADC_IRQHandler+0x94>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f60:	4a92      	ldr	r2, [pc, #584]	; (80051ac <HAL_ADC_IRQHandler+0x29c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f000 80ec 	beq.w	8005140 <HAL_ADC_IRQHandler+0x230>
 8004f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	f000 810f 	beq.w	8005190 <HAL_ADC_IRQHandler+0x280>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f72:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004f74:	0490      	lsls	r0, r2, #18
 8004f76:	d415      	bmi.n	8004fa4 <HAL_ADC_IRQHandler+0x94>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	0711      	lsls	r1, r2, #28
 8004f7c:	d512      	bpl.n	8004fa4 <HAL_ADC_IRQHandler+0x94>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	0752      	lsls	r2, r2, #29
 8004f82:	f100 80fc 	bmi.w	800517e <HAL_ADC_IRQHandler+0x26e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	f022 020c 	bic.w	r2, r2, #12
 8004f8c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f94:	65e3      	str	r3, [r4, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f98:	04db      	lsls	r3, r3, #19
 8004f9a:	d403      	bmi.n	8004fa4 <HAL_ADC_IRQHandler+0x94>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	65e3      	str	r3, [r4, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff ffad 	bl	8004f04 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	220c      	movs	r2, #12
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fb0:	06b0      	lsls	r0, r6, #26
 8004fb2:	d554      	bpl.n	800505e <HAL_ADC_IRQHandler+0x14e>
 8004fb4:	06b9      	lsls	r1, r7, #26
 8004fb6:	d552      	bpl.n	800505e <HAL_ADC_IRQHandler+0x14e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fba:	06d1      	lsls	r1, r2, #27
 8004fbc:	d403      	bmi.n	8004fc6 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004fbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc4:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fc6:	4979      	ldr	r1, [pc, #484]	; (80051ac <HAL_ADC_IRQHandler+0x29c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004fca:	68d8      	ldr	r0, [r3, #12]
 8004fcc:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004fce:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004fd2:	f000 80bb 	beq.w	800514c <HAL_ADC_IRQHandler+0x23c>
 8004fd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fda:	428b      	cmp	r3, r1
 8004fdc:	f000 80c2 	beq.w	8005164 <HAL_ADC_IRQHandler+0x254>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fe0:	68d9      	ldr	r1, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004fe2:	b9d2      	cbnz	r2, 800501a <HAL_ADC_IRQHandler+0x10a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004fe4:	018a      	lsls	r2, r1, #6
 8004fe6:	f100 80a3 	bmi.w	8005130 <HAL_ADC_IRQHandler+0x220>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	0650      	lsls	r0, r2, #25
 8004fee:	d514      	bpl.n	800501a <HAL_ADC_IRQHandler+0x10a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004ff0:	0289      	lsls	r1, r1, #10
 8004ff2:	d412      	bmi.n	800501a <HAL_ADC_IRQHandler+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	0712      	lsls	r2, r2, #28
 8004ff8:	f100 80ce 	bmi.w	8005198 <HAL_ADC_IRQHandler+0x288>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005002:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005004:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500a:	65e3      	str	r3, [r4, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800500c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800500e:	05d8      	lsls	r0, r3, #23
 8005010:	d403      	bmi.n	800501a <HAL_ADC_IRQHandler+0x10a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005012:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	65e3      	str	r3, [r4, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800501a:	4620      	mov	r0, r4
 800501c:	f000 fce0 	bl	80059e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	2260      	movs	r2, #96	; 0x60
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005026:	0631      	lsls	r1, r6, #24
 8005028:	d501      	bpl.n	800502e <HAL_ADC_IRQHandler+0x11e>
 800502a:	063a      	lsls	r2, r7, #24
 800502c:	d459      	bmi.n	80050e2 <HAL_ADC_IRQHandler+0x1d2>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800502e:	05f0      	lsls	r0, r6, #23
 8005030:	d501      	bpl.n	8005036 <HAL_ADC_IRQHandler+0x126>
 8005032:	05f9      	lsls	r1, r7, #23
 8005034:	d460      	bmi.n	80050f8 <HAL_ADC_IRQHandler+0x1e8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005036:	05b2      	lsls	r2, r6, #22
 8005038:	d501      	bpl.n	800503e <HAL_ADC_IRQHandler+0x12e>
 800503a:	05b8      	lsls	r0, r7, #22
 800503c:	d445      	bmi.n	80050ca <HAL_ADC_IRQHandler+0x1ba>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800503e:	06f1      	lsls	r1, r6, #27
 8005040:	d501      	bpl.n	8005046 <HAL_ADC_IRQHandler+0x136>
 8005042:	06fa      	lsls	r2, r7, #27
 8005044:	d410      	bmi.n	8005068 <HAL_ADC_IRQHandler+0x158>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005046:	0571      	lsls	r1, r6, #21
 8005048:	d501      	bpl.n	800504e <HAL_ADC_IRQHandler+0x13e>
 800504a:	057a      	lsls	r2, r7, #21
 800504c:	d460      	bmi.n	8005110 <HAL_ADC_IRQHandler+0x200>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005050:	0732      	lsls	r2, r6, #28
 8005052:	d5ad      	bpl.n	8004fb0 <HAL_ADC_IRQHandler+0xa0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005054:	0738      	lsls	r0, r7, #28
 8005056:	f53f af78 	bmi.w	8004f4a <HAL_ADC_IRQHandler+0x3a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800505a:	06b0      	lsls	r0, r6, #26
 800505c:	d4aa      	bmi.n	8004fb4 <HAL_ADC_IRQHandler+0xa4>
 800505e:	0672      	lsls	r2, r6, #25
 8005060:	d5e1      	bpl.n	8005026 <HAL_ADC_IRQHandler+0x116>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005062:	0678      	lsls	r0, r7, #25
 8005064:	d5df      	bpl.n	8005026 <HAL_ADC_IRQHandler+0x116>
 8005066:	e7a7      	b.n	8004fb8 <HAL_ADC_IRQHandler+0xa8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005068:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800506a:	b17a      	cbz	r2, 800508c <HAL_ADC_IRQHandler+0x17c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800506c:	2d00      	cmp	r5, #0
 800506e:	d07c      	beq.n	800516a <HAL_ADC_IRQHandler+0x25a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005074:	f000 808e 	beq.w	8005194 <HAL_ADC_IRQHandler+0x284>
 8005078:	484c      	ldr	r0, [pc, #304]	; (80051ac <HAL_ADC_IRQHandler+0x29c>)
 800507a:	4a4d      	ldr	r2, [pc, #308]	; (80051b0 <HAL_ADC_IRQHandler+0x2a0>)
 800507c:	494d      	ldr	r1, [pc, #308]	; (80051b4 <HAL_ADC_IRQHandler+0x2a4>)
 800507e:	4283      	cmp	r3, r0
 8005080:	bf08      	it	eq
 8005082:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005084:	6892      	ldr	r2, [r2, #8]
 8005086:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 800508a:	d00b      	beq.n	80050a4 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800508c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800508e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005092:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005094:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005096:	f043 0302 	orr.w	r3, r3, #2
 800509a:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff ff35 	bl	8004f0c <HAL_ADC_ErrorCallback>
 80050a2:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050a4:	2210      	movs	r2, #16
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e7cd      	b.n	8005046 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050ac:	06db      	lsls	r3, r3, #27
 80050ae:	d403      	bmi.n	80050b8 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80050b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fc99 	bl	80059f0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	2202      	movs	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e73b      	b.n	8004f3e <HAL_ADC_IRQHandler+0x2e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <HAL_ADC_IRQHandler+0x2a4>)
 80050c8:	e731      	b.n	8004f2e <HAL_ADC_IRQHandler+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80050ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 fc8a 	bl	80059ec <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e7ad      	b.n	800503e <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7ff ff0c 	bl	8004f08 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e79a      	b.n	800502e <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80050f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005100:	4620      	mov	r0, r4
 8005102:	f000 fc71 	bl	80059e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e792      	b.n	8005036 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005110:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005116:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005118:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800511a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005124:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005126:	6019      	str	r1, [r3, #0]
}
 8005128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800512c:	f000 bc5a 	b.w	80059e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005130:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005134:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005138:	4302      	orrs	r2, r0
 800513a:	f47f af6e 	bne.w	800501a <HAL_ADC_IRQHandler+0x10a>
 800513e:	e754      	b.n	8004fea <HAL_ADC_IRQHandler+0xda>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005140:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005144:	2d09      	cmp	r5, #9
 8005146:	d914      	bls.n	8005172 <HAL_ADC_IRQHandler+0x262>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005148:	68ca      	ldr	r2, [r1, #12]
 800514a:	e713      	b.n	8004f74 <HAL_ADC_IRQHandler+0x64>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800514c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005150:	2d00      	cmp	r5, #0
 8005152:	f43f af45 	beq.w	8004fe0 <HAL_ADC_IRQHandler+0xd0>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005156:	1fa9      	subs	r1, r5, #6
 8005158:	2901      	cmp	r1, #1
 800515a:	f67f af41 	bls.w	8004fe0 <HAL_ADC_IRQHandler+0xd0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800515e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8005162:	e73e      	b.n	8004fe2 <HAL_ADC_IRQHandler+0xd2>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005164:	f8df c050 	ldr.w	ip, [pc, #80]	; 80051b8 <HAL_ADC_IRQHandler+0x2a8>
 8005168:	e7f2      	b.n	8005150 <HAL_ADC_IRQHandler+0x240>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	07d0      	lsls	r0, r2, #31
 800516e:	d599      	bpl.n	80050a4 <HAL_ADC_IRQHandler+0x194>
 8005170:	e78c      	b.n	800508c <HAL_ADC_IRQHandler+0x17c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005172:	f240 2221 	movw	r2, #545	; 0x221
 8005176:	40ea      	lsrs	r2, r5
 8005178:	07d2      	lsls	r2, r2, #31
 800517a:	d5e5      	bpl.n	8005148 <HAL_ADC_IRQHandler+0x238>
 800517c:	e6f9      	b.n	8004f72 <HAL_ADC_IRQHandler+0x62>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005180:	f043 0310 	orr.w	r3, r3, #16
 8005184:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005186:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6623      	str	r3, [r4, #96]	; 0x60
 800518e:	e709      	b.n	8004fa4 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005190:	4909      	ldr	r1, [pc, #36]	; (80051b8 <HAL_ADC_IRQHandler+0x2a8>)
 8005192:	e7d7      	b.n	8005144 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005194:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <HAL_ADC_IRQHandler+0x2a4>)
 8005196:	e775      	b.n	8005084 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005198:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800519a:	f043 0310 	orr.w	r3, r3, #16
 800519e:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6623      	str	r3, [r4, #96]	; 0x60
 80051a8:	e737      	b.n	800501a <HAL_ADC_IRQHandler+0x10a>
 80051aa:	bf00      	nop
 80051ac:	50000100 	.word	0x50000100
 80051b0:	50000700 	.word	0x50000700
 80051b4:	50000300 	.word	0x50000300
 80051b8:	50000400 	.word	0x50000400

080051bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051be:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80051c2:	b083      	sub	sp, #12
 80051c4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80051c6:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80051ce:	f000 8150 	beq.w	8005472 <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80051d4:	2001      	movs	r0, #1
 80051d6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051da:	6894      	ldr	r4, [r2, #8]
 80051dc:	0766      	lsls	r6, r4, #29
 80051de:	d450      	bmi.n	8005282 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 80051e0:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80051e4:	09a6      	lsrs	r6, r4, #6
 80051e6:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80051ea:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80051ee:	f004 041f 	and.w	r4, r4, #31
 80051f2:	5977      	ldr	r7, [r6, r5]
 80051f4:	f04f 0c1f 	mov.w	ip, #31
 80051f8:	fa0c fc04 	lsl.w	ip, ip, r4
 80051fc:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005200:	ea27 070c 	bic.w	r7, r7, ip
 8005204:	40a0      	lsls	r0, r4
 8005206:	4338      	orrs	r0, r7
 8005208:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800520a:	6890      	ldr	r0, [r2, #8]
 800520c:	0745      	lsls	r5, r0, #29
 800520e:	f140 80a5 	bpl.w	800535c <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005212:	6890      	ldr	r0, [r2, #8]
 8005214:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005216:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005218:	07e4      	lsls	r4, r4, #31
 800521a:	d53b      	bpl.n	8005294 <HAL_ADC_ConfigChannel+0xd8>
 800521c:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800521e:	49c2      	ldr	r1, [pc, #776]	; (8005528 <HAL_ADC_ConfigChannel+0x36c>)
 8005220:	420c      	tst	r4, r1
 8005222:	d02c      	beq.n	800527e <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005224:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005228:	f000 8121 	beq.w	800546e <HAL_ADC_ConfigChannel+0x2b2>
 800522c:	4dbf      	ldr	r5, [pc, #764]	; (800552c <HAL_ADC_ConfigChannel+0x370>)
 800522e:	49c0      	ldr	r1, [pc, #768]	; (8005530 <HAL_ADC_ConfigChannel+0x374>)
 8005230:	48c0      	ldr	r0, [pc, #768]	; (8005534 <HAL_ADC_ConfigChannel+0x378>)
 8005232:	42aa      	cmp	r2, r5
 8005234:	bf18      	it	ne
 8005236:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005238:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800523a:	49bf      	ldr	r1, [pc, #764]	; (8005538 <HAL_ADC_ConfigChannel+0x37c>)
 800523c:	428c      	cmp	r4, r1
 800523e:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005242:	f000 8119 	beq.w	8005478 <HAL_ADC_ConfigChannel+0x2bc>
 8005246:	49bd      	ldr	r1, [pc, #756]	; (800553c <HAL_ADC_ConfigChannel+0x380>)
 8005248:	428c      	cmp	r4, r1
 800524a:	f000 8115 	beq.w	8005478 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800524e:	49bc      	ldr	r1, [pc, #752]	; (8005540 <HAL_ADC_ConfigChannel+0x384>)
 8005250:	428c      	cmp	r4, r1
 8005252:	f040 814d 	bne.w	80054f0 <HAL_ADC_ConfigChannel+0x334>
 8005256:	01c0      	lsls	r0, r0, #7
 8005258:	d411      	bmi.n	800527e <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800525a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800525e:	f000 822c 	beq.w	80056ba <HAL_ADC_ConfigChannel+0x4fe>
 8005262:	4cb2      	ldr	r4, [pc, #712]	; (800552c <HAL_ADC_ConfigChannel+0x370>)
 8005264:	49b2      	ldr	r1, [pc, #712]	; (8005530 <HAL_ADC_ConfigChannel+0x374>)
 8005266:	48b3      	ldr	r0, [pc, #716]	; (8005534 <HAL_ADC_ConfigChannel+0x378>)
 8005268:	42a2      	cmp	r2, r4
 800526a:	bf0c      	ite	eq
 800526c:	460a      	moveq	r2, r1
 800526e:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005270:	6891      	ldr	r1, [r2, #8]
 8005272:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005276:	430d      	orrs	r5, r1
 8005278:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 800527c:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800527e:	2000      	movs	r0, #0
}
 8005280:	e003      	b.n	800528a <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005284:	f042 0220 	orr.w	r2, r2, #32
 8005288:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005290:	b003      	add	sp, #12
 8005292:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005294:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005296:	4cab      	ldr	r4, [pc, #684]	; (8005544 <HAL_ADC_ConfigChannel+0x388>)
 8005298:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800529c:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8005558 <HAL_ADC_ConfigChannel+0x39c>
 80052a0:	f006 0718 	and.w	r7, r6, #24
 80052a4:	40fc      	lsrs	r4, r7
 80052a6:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80052aa:	4004      	ands	r4, r0
 80052ac:	ea25 0507 	bic.w	r5, r5, r7
 80052b0:	432c      	orrs	r4, r5
 80052b2:	4566      	cmp	r6, ip
 80052b4:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80052b8:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052ba:	d1b0      	bne.n	800521e <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052bc:	2f00      	cmp	r7, #0
 80052be:	f000 8104 	beq.w	80054ca <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	f000 819c 	beq.w	8005604 <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80052cc:	fab4 f484 	clz	r4, r4
 80052d0:	3401      	adds	r4, #1
 80052d2:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052d6:	2c09      	cmp	r4, #9
 80052d8:	f240 8194 	bls.w	8005604 <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	f000 81f0 	beq.w	80056c6 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 80052e6:	fab5 f585 	clz	r5, r5
 80052ea:	3501      	adds	r5, #1
 80052ec:	06ad      	lsls	r5, r5, #26
 80052ee:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	f000 81e3 	beq.w	80056c2 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 80052fc:	fab4 f484 	clz	r4, r4
 8005300:	3401      	adds	r4, #1
 8005302:	f004 041f 	and.w	r4, r4, #31
 8005306:	2601      	movs	r6, #1
 8005308:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800530c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005312:	2800      	cmp	r0, #0
 8005314:	f000 81d3 	beq.w	80056be <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8005318:	fab0 f480 	clz	r4, r0
 800531c:	3401      	adds	r4, #1
 800531e:	f004 041f 	and.w	r4, r4, #31
 8005322:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005326:	f1a4 001e 	sub.w	r0, r4, #30
 800532a:	0500      	lsls	r0, r0, #20
 800532c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005330:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005332:	0dc7      	lsrs	r7, r0, #23
 8005334:	f007 0704 	and.w	r7, r7, #4
 8005338:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800533c:	688e      	ldr	r6, [r1, #8]
 800533e:	597c      	ldr	r4, [r7, r5]
 8005340:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005344:	f04f 0c07 	mov.w	ip, #7
 8005348:	fa0c fc00 	lsl.w	ip, ip, r0
 800534c:	ea24 040c 	bic.w	r4, r4, ip
 8005350:	fa06 f000 	lsl.w	r0, r6, r0
 8005354:	4320      	orrs	r0, r4
 8005356:	5178      	str	r0, [r7, r5]
 8005358:	680c      	ldr	r4, [r1, #0]
}
 800535a:	e760      	b.n	800521e <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800535c:	6890      	ldr	r0, [r2, #8]
 800535e:	f010 0008 	ands.w	r0, r0, #8
 8005362:	f040 8082 	bne.w	800546a <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005366:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005368:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800536a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800536e:	f000 80f7 	beq.w	8005560 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005372:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8005376:	f00c 0c04 	and.w	ip, ip, #4
 800537a:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 800537e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005382:	f85c 5007 	ldr.w	r5, [ip, r7]
 8005386:	f04f 0e07 	mov.w	lr, #7
 800538a:	fa0e fe06 	lsl.w	lr, lr, r6
 800538e:	40b4      	lsls	r4, r6
 8005390:	ea25 050e 	bic.w	r5, r5, lr
 8005394:	432c      	orrs	r4, r5
 8005396:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800539a:	6954      	ldr	r4, [r2, #20]
 800539c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80053a0:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053a2:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053a6:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053a8:	f1bc 0f04 	cmp.w	ip, #4
 80053ac:	d02e      	beq.n	800540c <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ae:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80053b2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800555c <HAL_ADC_ConfigChannel+0x3a0>
 80053b6:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 80053ba:	680f      	ldr	r7, [r1, #0]
 80053bc:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053c0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80053c4:	694d      	ldr	r5, [r1, #20]
 80053c6:	0076      	lsls	r6, r6, #1
 80053c8:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80053cc:	40b5      	lsls	r5, r6
 80053ce:	ea47 070e 	orr.w	r7, r7, lr
 80053d2:	433d      	orrs	r5, r7
 80053d4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80053d8:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053dc:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80053de:	698e      	ldr	r6, [r1, #24]
 80053e0:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 80053e4:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80053e8:	4335      	orrs	r5, r6
 80053ea:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80053ee:	690e      	ldr	r6, [r1, #16]
 80053f0:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 80053f2:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80053f6:	2f01      	cmp	r7, #1
 80053f8:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80053fc:	bf08      	it	eq
 80053fe:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8005402:	4328      	orrs	r0, r5
 8005404:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005408:	6808      	ldr	r0, [r1, #0]
}
 800540a:	e704      	b.n	8005216 <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800540c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800540e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005410:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005412:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005416:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800541a:	2d00      	cmp	r5, #0
 800541c:	f040 80b4 	bne.w	8005588 <HAL_ADC_ConfigChannel+0x3cc>
 8005420:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005424:	42ac      	cmp	r4, r5
 8005426:	f000 8111 	beq.w	800564c <HAL_ADC_ConfigChannel+0x490>
 800542a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800542c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800542e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005432:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005436:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800543a:	42ae      	cmp	r6, r5
 800543c:	f000 812b 	beq.w	8005696 <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005440:	68a6      	ldr	r6, [r4, #8]
 8005442:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005444:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005448:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800544c:	42ae      	cmp	r6, r5
 800544e:	f000 8111 	beq.w	8005674 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005452:	68e6      	ldr	r6, [r4, #12]
 8005454:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005456:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005458:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800545c:	42b5      	cmp	r5, r6
 800545e:	f47f aeda 	bne.w	8005216 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005468:	6020      	str	r0, [r4, #0]
 800546a:	6808      	ldr	r0, [r1, #0]
}
 800546c:	e6d3      	b.n	8005216 <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800546e:	4930      	ldr	r1, [pc, #192]	; (8005530 <HAL_ADC_ConfigChannel+0x374>)
 8005470:	e6e2      	b.n	8005238 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8005472:	2002      	movs	r0, #2
}
 8005474:	b003      	add	sp, #12
 8005476:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005478:	0201      	lsls	r1, r0, #8
 800547a:	f53f af00 	bmi.w	800527e <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800547e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005482:	d033      	beq.n	80054ec <HAL_ADC_ConfigChannel+0x330>
 8005484:	4930      	ldr	r1, [pc, #192]	; (8005548 <HAL_ADC_ConfigChannel+0x38c>)
 8005486:	428a      	cmp	r2, r1
 8005488:	f47f aef9 	bne.w	800527e <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800548c:	4829      	ldr	r0, [pc, #164]	; (8005534 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <HAL_ADC_ConfigChannel+0x390>)
 8005490:	4c2f      	ldr	r4, [pc, #188]	; (8005550 <HAL_ADC_ConfigChannel+0x394>)
 8005492:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005494:	6881      	ldr	r1, [r0, #8]
 8005496:	0992      	lsrs	r2, r2, #6
 8005498:	fba4 4202 	umull	r4, r2, r4, r2
 800549c:	0992      	lsrs	r2, r2, #6
 800549e:	3201      	adds	r2, #1
 80054a0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80054a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80054a8:	430d      	orrs	r5, r1
 80054aa:	0092      	lsls	r2, r2, #2
 80054ac:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80054b0:	6085      	str	r5, [r0, #8]
 80054b2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80054b4:	9a01      	ldr	r2, [sp, #4]
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	f43f aee1 	beq.w	800527e <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 80054bc:	9a01      	ldr	r2, [sp, #4]
 80054be:	3a01      	subs	r2, #1
 80054c0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80054c2:	9a01      	ldr	r2, [sp, #4]
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	d1f9      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x300>
 80054c8:	e6d9      	b.n	800527e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054ca:	0e80      	lsrs	r0, r0, #26
 80054cc:	1c44      	adds	r4, r0, #1
 80054ce:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054d2:	2e09      	cmp	r6, #9
 80054d4:	f200 8088 	bhi.w	80055e8 <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054d8:	06a5      	lsls	r5, r4, #26
 80054da:	2401      	movs	r4, #1
 80054dc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80054e0:	40b4      	lsls	r4, r6
 80054e2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80054e6:	4325      	orrs	r5, r4
 80054e8:	0500      	lsls	r0, r0, #20
 80054ea:	e721      	b.n	8005330 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ec:	4810      	ldr	r0, [pc, #64]	; (8005530 <HAL_ADC_ConfigChannel+0x374>)
 80054ee:	e7ce      	b.n	800548e <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80054f0:	4918      	ldr	r1, [pc, #96]	; (8005554 <HAL_ADC_ConfigChannel+0x398>)
 80054f2:	428c      	cmp	r4, r1
 80054f4:	f47f aec3 	bne.w	800527e <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054f8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80054fc:	f47f aebf 	bne.w	800527e <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005500:	490a      	ldr	r1, [pc, #40]	; (800552c <HAL_ADC_ConfigChannel+0x370>)
 8005502:	428a      	cmp	r2, r1
 8005504:	f43f aebb 	beq.w	800527e <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005508:	4c0a      	ldr	r4, [pc, #40]	; (8005534 <HAL_ADC_ConfigChannel+0x378>)
 800550a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800550e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005512:	bf18      	it	ne
 8005514:	4621      	movne	r1, r4
 8005516:	688a      	ldr	r2, [r1, #8]
 8005518:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800551c:	432a      	orrs	r2, r5
 800551e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005522:	608a      	str	r2, [r1, #8]
}
 8005524:	e6b1      	b.n	800528a <HAL_ADC_ConfigChannel+0xce>
 8005526:	bf00      	nop
 8005528:	80080000 	.word	0x80080000
 800552c:	50000100 	.word	0x50000100
 8005530:	50000300 	.word	0x50000300
 8005534:	50000700 	.word	0x50000700
 8005538:	c3210000 	.word	0xc3210000
 800553c:	90c00010 	.word	0x90c00010
 8005540:	c7520000 	.word	0xc7520000
 8005544:	0007ffff 	.word	0x0007ffff
 8005548:	50000600 	.word	0x50000600
 800554c:	20000000 	.word	0x20000000
 8005550:	053e2d63 	.word	0x053e2d63
 8005554:	cb840000 	.word	0xcb840000
 8005558:	407f0000 	.word	0x407f0000
 800555c:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005560:	0df5      	lsrs	r5, r6, #23
 8005562:	f102 0414 	add.w	r4, r2, #20
 8005566:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800556a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800556e:	592f      	ldr	r7, [r5, r4]
 8005570:	f04f 0c07 	mov.w	ip, #7
 8005574:	fa0c f606 	lsl.w	r6, ip, r6
 8005578:	ea27 0606 	bic.w	r6, r7, r6
 800557c:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800557e:	6954      	ldr	r4, [r2, #20]
 8005580:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005584:	6154      	str	r4, [r2, #20]
}
 8005586:	e70c      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800558c:	b11d      	cbz	r5, 8005596 <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 800558e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005592:	42ac      	cmp	r4, r5
 8005594:	d05a      	beq.n	800564c <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005596:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005598:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800559a:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800559e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80055a2:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80055aa:	b11d      	cbz	r5, 80055b4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80055ac:	fab5 f585 	clz	r5, r5
 80055b0:	42ae      	cmp	r6, r5
 80055b2:	d070      	beq.n	8005696 <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055b4:	68a5      	ldr	r5, [r4, #8]
 80055b6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055b8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055bc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80055c4:	b11d      	cbz	r5, 80055ce <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 80055c6:	fab5 f585 	clz	r5, r5
 80055ca:	42ae      	cmp	r6, r5
 80055cc:	d052      	beq.n	8005674 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80055ce:	68e5      	ldr	r5, [r4, #12]
 80055d0:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055d2:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055d4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80055dc:	2d00      	cmp	r5, #0
 80055de:	f43f ae1a 	beq.w	8005216 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 80055e2:	fab5 f585 	clz	r5, r5
 80055e6:	e739      	b.n	800545c <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055e8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80055ec:	06a5      	lsls	r5, r4, #26
 80055ee:	381e      	subs	r0, #30
 80055f0:	2401      	movs	r4, #1
 80055f2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80055f6:	fa04 f606 	lsl.w	r6, r4, r6
 80055fa:	0500      	lsls	r0, r0, #20
 80055fc:	4335      	orrs	r5, r6
 80055fe:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005602:	e695      	b.n	8005330 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005608:	2d00      	cmp	r5, #0
 800560a:	d064      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800560c:	fab5 f585 	clz	r5, r5
 8005610:	3501      	adds	r5, #1
 8005612:	06ad      	lsls	r5, r5, #26
 8005614:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800561c:	2c00      	cmp	r4, #0
 800561e:	d058      	beq.n	80056d2 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8005620:	fab4 f484 	clz	r4, r4
 8005624:	3401      	adds	r4, #1
 8005626:	f004 041f 	and.w	r4, r4, #31
 800562a:	2601      	movs	r6, #1
 800562c:	fa06 f404 	lsl.w	r4, r6, r4
 8005630:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005636:	2800      	cmp	r0, #0
 8005638:	d048      	beq.n	80056cc <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 800563a:	fab0 f480 	clz	r4, r0
 800563e:	3401      	adds	r4, #1
 8005640:	f004 041f 	and.w	r4, r4, #31
 8005644:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005648:	0520      	lsls	r0, r4, #20
 800564a:	e671      	b.n	8005330 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 800564c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800564e:	4614      	mov	r4, r2
 8005650:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005654:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005658:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800565a:	6e55      	ldr	r5, [r2, #100]	; 0x64
 800565c:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800565e:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005662:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005666:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800566a:	2d00      	cmp	r5, #0
 800566c:	d19b      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x3ea>
 800566e:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005672:	e6e2      	b.n	800543a <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8005674:	6838      	ldr	r0, [r7, #0]
 8005676:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800567a:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800567c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800567e:	68e5      	ldr	r5, [r4, #12]
 8005680:	68e6      	ldr	r6, [r4, #12]
 8005682:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005686:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568a:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800568c:	2d00      	cmp	r5, #0
 800568e:	d1a3      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x41c>
 8005690:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005694:	e6e2      	b.n	800545c <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800569c:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800569e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056a0:	68a5      	ldr	r5, [r4, #8]
 80056a2:	68a6      	ldr	r6, [r4, #8]
 80056a4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056a8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056ac:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	d185      	bne.n	80055c0 <HAL_ADC_ConfigChannel+0x404>
 80056b4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80056b8:	e6c8      	b.n	800544c <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056ba:	4a08      	ldr	r2, [pc, #32]	; (80056dc <HAL_ADC_ConfigChannel+0x520>)
 80056bc:	e5d8      	b.n	8005270 <HAL_ADC_ConfigChannel+0xb4>
 80056be:	4808      	ldr	r0, [pc, #32]	; (80056e0 <HAL_ADC_ConfigChannel+0x524>)
 80056c0:	e636      	b.n	8005330 <HAL_ADC_ConfigChannel+0x174>
 80056c2:	2402      	movs	r4, #2
 80056c4:	e622      	b.n	800530c <HAL_ADC_ConfigChannel+0x150>
 80056c6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80056ca:	e612      	b.n	80052f2 <HAL_ADC_ConfigChannel+0x136>
 80056cc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80056d0:	e62e      	b.n	8005330 <HAL_ADC_ConfigChannel+0x174>
 80056d2:	2402      	movs	r4, #2
 80056d4:	e7ac      	b.n	8005630 <HAL_ADC_ConfigChannel+0x474>
 80056d6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80056da:	e79d      	b.n	8005618 <HAL_ADC_ConfigChannel+0x45c>
 80056dc:	50000300 	.word	0x50000300
 80056e0:	fe500000 	.word	0xfe500000

080056e4 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056e4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	07d1      	lsls	r1, r2, #31
 80056ea:	d501      	bpl.n	80056f0 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056ec:	2000      	movs	r0, #0
}
 80056ee:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056f0:	6899      	ldr	r1, [r3, #8]
 80056f2:	4a19      	ldr	r2, [pc, #100]	; (8005758 <ADC_Enable+0x74>)
 80056f4:	4211      	tst	r1, r2
{
 80056f6:	b570      	push	{r4, r5, r6, lr}
 80056f8:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056fa:	d122      	bne.n	8005742 <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	4d17      	ldr	r5, [pc, #92]	; (800575c <ADC_Enable+0x78>)
 8005700:	402a      	ands	r2, r5
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005708:	f7ff fa16 	bl	8004b38 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8005712:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005714:	d413      	bmi.n	800573e <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005716:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005718:	07d0      	lsls	r0, r2, #31
 800571a:	d404      	bmi.n	8005726 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	402a      	ands	r2, r5
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005726:	f7ff fa07 	bl	8004b38 <HAL_GetTick>
 800572a:	1b03      	subs	r3, r0, r4
 800572c:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800572e:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005730:	d902      	bls.n	8005738 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	07d1      	lsls	r1, r2, #31
 8005736:	d504      	bpl.n	8005742 <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	07d2      	lsls	r2, r2, #31
 800573c:	d5eb      	bpl.n	8005716 <ADC_Enable+0x32>
  return HAL_OK;
 800573e:	2000      	movs	r0, #0
}
 8005740:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005742:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005744:	f043 0310 	orr.w	r3, r3, #16
 8005748:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574a:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8005752:	2001      	movs	r0, #1
}
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	bf00      	nop
 8005758:	8000003f 	.word	0x8000003f
 800575c:	7fffffc0 	.word	0x7fffffc0

08005760 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005766:	b570      	push	{r4, r5, r6, lr}
 8005768:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800576a:	d04d      	beq.n	8005808 <HAL_ADC_Start+0xa8>
 800576c:	483a      	ldr	r0, [pc, #232]	; (8005858 <HAL_ADC_Start+0xf8>)
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <HAL_ADC_Start+0xfc>)
 8005770:	493b      	ldr	r1, [pc, #236]	; (8005860 <HAL_ADC_Start+0x100>)
 8005772:	4283      	cmp	r3, r0
 8005774:	bf18      	it	ne
 8005776:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005778:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800577a:	689d      	ldr	r5, [r3, #8]
 800577c:	f015 0504 	ands.w	r5, r5, #4
 8005780:	d140      	bne.n	8005804 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8005782:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005786:	2b01      	cmp	r3, #1
 8005788:	d03c      	beq.n	8005804 <HAL_ADC_Start+0xa4>
 800578a:	2301      	movs	r3, #1
 800578c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8005790:	4620      	mov	r0, r4
 8005792:	f7ff ffa7 	bl	80056e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005796:	2800      	cmp	r0, #0
 8005798:	d138      	bne.n	800580c <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 800579a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	492e      	ldr	r1, [pc, #184]	; (8005858 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 80057a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057ac:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80057ae:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 80057b2:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057b4:	d045      	beq.n	8005842 <HAL_ADC_Start+0xe2>
 80057b6:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <HAL_ADC_Start+0x104>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d047      	beq.n	800584c <HAL_ADC_Start+0xec>
 80057bc:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057c4:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057c8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057cc:	bf1c      	itt	ne
 80057ce:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80057d0:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80057d4:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057d6:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 80057d8:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057da:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057dc:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 80057de:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057e2:	d01c      	beq.n	800581e <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057e4:	2e09      	cmp	r6, #9
 80057e6:	d914      	bls.n	8005812 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ee:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80057f0:	68cb      	ldr	r3, [r1, #12]
 80057f2:	019b      	lsls	r3, r3, #6
 80057f4:	d505      	bpl.n	8005802 <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80057f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005800:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8005802:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8005804:	2002      	movs	r0, #2
}
 8005806:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005808:	4a14      	ldr	r2, [pc, #80]	; (800585c <HAL_ADC_Start+0xfc>)
 800580a:	e7b5      	b.n	8005778 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 800580c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005810:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005812:	f240 2321 	movw	r3, #545	; 0x221
 8005816:	fa23 f606 	lsr.w	r6, r3, r6
 800581a:	07f5      	lsls	r5, r6, #31
 800581c:	d5e4      	bpl.n	80057e8 <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800581e:	68d3      	ldr	r3, [r2, #12]
 8005820:	0199      	lsls	r1, r3, #6
 8005822:	d505      	bpl.n	8005830 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005824:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800582a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800582e:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8005830:	6893      	ldr	r3, [r2, #8]
 8005832:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005836:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	6093      	str	r3, [r2, #8]
}
 8005840:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005842:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005846:	2e00      	cmp	r6, #0
 8005848:	d1bd      	bne.n	80057c6 <HAL_ADC_Start+0x66>
 800584a:	e7b8      	b.n	80057be <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800584c:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005850:	2e00      	cmp	r6, #0
 8005852:	d1b8      	bne.n	80057c6 <HAL_ADC_Start+0x66>
 8005854:	e7b3      	b.n	80057be <HAL_ADC_Start+0x5e>
 8005856:	bf00      	nop
 8005858:	50000100 	.word	0x50000100
 800585c:	50000300 	.word	0x50000300
 8005860:	50000700 	.word	0x50000700
 8005864:	50000500 	.word	0x50000500

08005868 <HAL_ADC_Start_IT>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800586e:	b570      	push	{r4, r5, r6, lr}
 8005870:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005872:	d06a      	beq.n	800594a <HAL_ADC_Start_IT+0xe2>
 8005874:	4855      	ldr	r0, [pc, #340]	; (80059cc <HAL_ADC_Start_IT+0x164>)
 8005876:	4a56      	ldr	r2, [pc, #344]	; (80059d0 <HAL_ADC_Start_IT+0x168>)
 8005878:	4956      	ldr	r1, [pc, #344]	; (80059d4 <HAL_ADC_Start_IT+0x16c>)
 800587a:	4283      	cmp	r3, r0
 800587c:	bf18      	it	ne
 800587e:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005880:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005882:	689d      	ldr	r5, [r3, #8]
 8005884:	f015 0504 	ands.w	r5, r5, #4
 8005888:	d15d      	bne.n	8005946 <HAL_ADC_Start_IT+0xde>
    __HAL_LOCK(hadc);
 800588a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800588e:	2b01      	cmp	r3, #1
 8005890:	d059      	beq.n	8005946 <HAL_ADC_Start_IT+0xde>
 8005892:	2301      	movs	r3, #1
 8005894:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8005898:	4620      	mov	r0, r4
 800589a:	f7ff ff23 	bl	80056e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800589e:	2800      	cmp	r0, #0
 80058a0:	d155      	bne.n	800594e <HAL_ADC_Start_IT+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 80058a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	4949      	ldr	r1, [pc, #292]	; (80059cc <HAL_ADC_Start_IT+0x164>)
      ADC_STATE_CLR_SET(hadc->State,
 80058a8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058b4:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80058b6:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 80058ba:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058bc:	d06c      	beq.n	8005998 <HAL_ADC_Start_IT+0x130>
 80058be:	4a46      	ldr	r2, [pc, #280]	; (80059d8 <HAL_ADC_Start_IT+0x170>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d06e      	beq.n	80059a2 <HAL_ADC_Start_IT+0x13a>
 80058c4:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80058cc:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80058ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058d4:	bf1c      	itt	ne
 80058d6:	6e22      	ldrne	r2, [r4, #96]	; 0x60
 80058d8:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80058dc:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058de:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80058e0:	2200      	movs	r2, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058e2:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hadc);
 80058e4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80058e8:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80058ea:	69a1      	ldr	r1, [r4, #24]
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80058ec:	f022 021c 	bic.w	r2, r2, #28
 80058f0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80058f2:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80058f4:	2908      	cmp	r1, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80058f6:	bf0c      	ite	eq
 80058f8:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80058fc:	f042 0204 	orrne.w	r2, r2, #4
 8005900:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005902:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005904:	b91a      	cbnz	r2, 800590e <HAL_ADC_Start_IT+0xa6>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	f042 0210 	orr.w	r2, r2, #16
 800590c:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800590e:	42ab      	cmp	r3, r5
 8005910:	d026      	beq.n	8005960 <HAL_ADC_Start_IT+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005912:	2e09      	cmp	r6, #9
 8005914:	d91e      	bls.n	8005954 <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005916:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800591c:	65e2      	str	r2, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800591e:	68ea      	ldr	r2, [r5, #12]
 8005920:	0192      	lsls	r2, r2, #6
 8005922:	d50f      	bpl.n	8005944 <HAL_ADC_Start_IT+0xdc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005924:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005926:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800592a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592e:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8005930:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005932:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8005934:	d041      	beq.n	80059ba <HAL_ADC_Start_IT+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	605a      	str	r2, [r3, #4]
}
 8005944:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8005946:	2002      	movs	r0, #2
}
 8005948:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <HAL_ADC_Start_IT+0x168>)
 800594c:	e798      	b.n	8005880 <HAL_ADC_Start_IT+0x18>
      __HAL_UNLOCK(hadc);
 800594e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005952:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005954:	f240 2221 	movw	r2, #545	; 0x221
 8005958:	fa22 f606 	lsr.w	r6, r2, r6
 800595c:	07f6      	lsls	r6, r6, #31
 800595e:	d5da      	bpl.n	8005916 <HAL_ADC_Start_IT+0xae>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	0195      	lsls	r5, r2, #6
 8005964:	d50f      	bpl.n	8005986 <HAL_ADC_Start_IT+0x11e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005966:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005968:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800596c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005970:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8005972:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005974:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8005976:	d018      	beq.n	80059aa <HAL_ADC_Start_IT+0x142>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	f042 0220 	orr.w	r2, r2, #32
 8005984:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800598c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005990:	f042 0204 	orr.w	r2, r2, #4
 8005994:	609a      	str	r2, [r3, #8]
}
 8005996:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005998:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800599c:	2e00      	cmp	r6, #0
 800599e:	d196      	bne.n	80058ce <HAL_ADC_Start_IT+0x66>
 80059a0:	e791      	b.n	80058c6 <HAL_ADC_Start_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059a2:	4d0e      	ldr	r5, [pc, #56]	; (80059dc <HAL_ADC_Start_IT+0x174>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	d192      	bne.n	80058ce <HAL_ADC_Start_IT+0x66>
 80059a8:	e78d      	b.n	80058c6 <HAL_ADC_Start_IT+0x5e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80059aa:	f022 0220 	bic.w	r2, r2, #32
 80059ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b6:	605a      	str	r2, [r3, #4]
              break;
 80059b8:	e7e5      	b.n	8005986 <HAL_ADC_Start_IT+0x11e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80059ba:	f022 0220 	bic.w	r2, r2, #32
 80059be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c6:	605a      	str	r2, [r3, #4]
}
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
 80059ca:	bf00      	nop
 80059cc:	50000100 	.word	0x50000100
 80059d0:	50000300 	.word	0x50000300
 80059d4:	50000700 	.word	0x50000700
 80059d8:	50000500 	.word	0x50000500
 80059dc:	50000400 	.word	0x50000400

080059e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop

080059e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <HAL_ADCEx_EndOfSamplingCallback>:
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop

080059f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80059f4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059fa:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80059fc:	2b01      	cmp	r3, #1
{
 80059fe:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005a00:	d04d      	beq.n	8005a9e <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a02:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005a04:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005a06:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a08:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005a0c:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005a0e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005a12:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a14:	d00c      	beq.n	8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8005a16:	4d4a      	ldr	r5, [pc, #296]	; (8005b40 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005a18:	42aa      	cmp	r2, r5
 8005a1a:	d03e      	beq.n	8005a9a <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a1c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a1e:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a22:	f042 0220 	orr.w	r2, r2, #32
 8005a26:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	b01c      	add	sp, #112	; 0x70
 8005a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8005a2e:	4770      	bx	lr
 8005a30:	4b44      	ldr	r3, [pc, #272]	; (8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	075b      	lsls	r3, r3, #29
 8005a36:	d50c      	bpl.n	8005a52 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8005a38:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a3a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005a3c:	f043 0320 	orr.w	r3, r3, #32
 8005a40:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8005a44:	2200      	movs	r2, #0
 8005a46:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	b01c      	add	sp, #112	; 0x70
 8005a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8005a50:	4770      	bx	lr
 8005a52:	6893      	ldr	r3, [r2, #8]
 8005a54:	075c      	lsls	r4, r3, #29
 8005a56:	d4f0      	bmi.n	8005a3a <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005a5c:	d024      	beq.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8005a5e:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d021      	beq.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	d153      	bne.n	8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a68:	4a37      	ldr	r2, [pc, #220]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a6a:	4c35      	ldr	r4, [pc, #212]	; (8005b40 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005a6c:	6893      	ldr	r3, [r2, #8]
 8005a6e:	4d37      	ldr	r5, [pc, #220]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005a70:	4937      	ldr	r1, [pc, #220]	; (8005b50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005a72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005a76:	6093      	str	r3, [r2, #8]
 8005a78:	68a4      	ldr	r4, [r4, #8]
 8005a7a:	68ab      	ldr	r3, [r5, #8]
 8005a7c:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a7e:	4323      	orrs	r3, r4
 8005a80:	430b      	orrs	r3, r1
 8005a82:	43db      	mvns	r3, r3
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	b37b      	cbz	r3, 8005aea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a8a:	6893      	ldr	r3, [r2, #8]
 8005a8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a90:	f023 030f 	bic.w	r3, r3, #15
 8005a94:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e7d4      	b.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8005a9a:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005a9c:	e7c9      	b.n	8005a32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8005a9e:	2302      	movs	r3, #2
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	b01c      	add	sp, #112	; 0x70
 8005aa4:	bcf0      	pop	{r4, r5, r6, r7}
 8005aa6:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005aa8:	b30e      	cbz	r6, 8005aee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8005aac:	684d      	ldr	r5, [r1, #4]
 8005aae:	6893      	ldr	r3, [r2, #8]
 8005ab0:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8005ab4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005ab8:	432b      	orrs	r3, r5
 8005aba:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8005abe:	6093      	str	r3, [r2, #8]
 8005ac0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ac6:	6894      	ldr	r4, [r2, #8]
 8005ac8:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005aca:	4323      	orrs	r3, r4
 8005acc:	43db      	mvns	r3, r3
 8005ace:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	b143      	cbz	r3, 8005aea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8005ad8:	6894      	ldr	r4, [r2, #8]
 8005ada:	688b      	ldr	r3, [r1, #8]
 8005adc:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005ae0:	431e      	orrs	r6, r3
 8005ae2:	f021 010f 	bic.w	r1, r1, #15
 8005ae6:	430e      	orrs	r6, r1
 8005ae8:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e7aa      	b.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8005af0:	6893      	ldr	r3, [r2, #8]
 8005af2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005af6:	6093      	str	r3, [r2, #8]
 8005af8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005afe:	6891      	ldr	r1, [r2, #8]
 8005b00:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	43db      	mvns	r3, r3
 8005b06:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	e7bb      	b.n	8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005b12:	684d      	ldr	r5, [r1, #4]
 8005b14:	6893      	ldr	r3, [r2, #8]
 8005b16:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8005b1a:	4f0c      	ldr	r7, [pc, #48]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005b1c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005b20:	432b      	orrs	r3, r5
 8005b22:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8005b26:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005b28:	6093      	str	r3, [r2, #8]
 8005b2a:	4c09      	ldr	r4, [pc, #36]	; (8005b50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005b2c:	68ad      	ldr	r5, [r5, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b32:	432b      	orrs	r3, r5
 8005b34:	4323      	orrs	r3, r4
 8005b36:	43db      	mvns	r3, r3
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	e7cb      	b.n	8005ad6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8005b3e:	bf00      	nop
 8005b40:	50000400 	.word	0x50000400
 8005b44:	50000100 	.word	0x50000100
 8005b48:	50000700 	.word	0x50000700
 8005b4c:	50000500 	.word	0x50000500
 8005b50:	50000600 	.word	0x50000600
 8005b54:	50000300 	.word	0x50000300

08005b58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b58:	4908      	ldr	r1, [pc, #32]	; (8005b7c <HAL_NVIC_SetPriorityGrouping+0x24>)
 8005b5a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b5e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b60:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005b64:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b66:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005b74:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8005b78:	60cb      	str	r3, [r1, #12]
 8005b7a:	4770      	bx	lr
 8005b7c:	e000ed00 	.word	0xe000ed00

08005b80 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b80:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_NVIC_SetPriority+0x68>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b88:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b8a:	f1c3 0507 	rsb	r5, r3, #7
 8005b8e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b90:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b94:	bf28      	it	cs
 8005b96:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b98:	2c06      	cmp	r4, #6
 8005b9a:	d919      	bls.n	8005bd0 <HAL_NVIC_SetPriority+0x50>
 8005b9c:	3b03      	subs	r3, #3
 8005b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005ba2:	409c      	lsls	r4, r3
 8005ba4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bac:	40ac      	lsls	r4, r5
 8005bae:	ea21 0104 	bic.w	r1, r1, r4
 8005bb2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005bb4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005bba:	db0c      	blt.n	8005bd6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bbc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005bc0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005bc4:	0109      	lsls	r1, r1, #4
 8005bc6:	b2c9      	uxtb	r1, r1
 8005bc8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005bcc:	bc30      	pop	{r4, r5}
 8005bce:	4770      	bx	lr
 8005bd0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	e7e8      	b.n	8005ba8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_NVIC_SetPriority+0x6c>)
 8005bd8:	f000 000f 	and.w	r0, r0, #15
 8005bdc:	0109      	lsls	r1, r1, #4
 8005bde:	4403      	add	r3, r0
 8005be0:	b2c9      	uxtb	r1, r1
 8005be2:	7619      	strb	r1, [r3, #24]
 8005be4:	bc30      	pop	{r4, r5}
 8005be6:	4770      	bx	lr
 8005be8:	e000ed00 	.word	0xe000ed00
 8005bec:	e000ecfc 	.word	0xe000ecfc

08005bf0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	db07      	blt.n	8005c04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <HAL_NVIC_EnableIRQ+0x18>)
 8005bf6:	f000 011f 	and.w	r1, r0, #31
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	0940      	lsrs	r0, r0, #5
 8005bfe:	408b      	lsls	r3, r1
 8005c00:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e100 	.word	0xe000e100

08005c0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c0c:	3801      	subs	r0, #1
 8005c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005c12:	d20e      	bcs.n	8005c32 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c16:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c18:	4c08      	ldr	r4, [pc, #32]	; (8005c3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c1a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c1c:	20f0      	movs	r0, #240	; 0xf0
 8005c1e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c22:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c24:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c26:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c28:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8005c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c2e:	6019      	str	r1, [r3, #0]
 8005c30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005c32:	2001      	movs	r0, #1
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000e010 	.word	0xe000e010
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c40:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005c44:	2a02      	cmp	r2, #2
{
 8005c46:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c48:	d009      	beq.n	8005c5e <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c4e:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c50:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005c52:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005c54:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8005c5c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c5e:	6802      	ldr	r2, [r0, #0]
{
 8005c60:	b470      	push	{r4, r5, r6}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c62:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c64:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c66:	6cde      	ldr	r6, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c68:	f020 000e 	bic.w	r0, r0, #14
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c6c:	e9d3 5110 	ldrd	r5, r1, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c70:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005c78:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005c7a:	6814      	ldr	r4, [r2, #0]
     if (hdma->DMAmuxRequestGen != 0U)
 8005c7c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     __HAL_DMA_DISABLE(hdma);
 8005c7e:	f024 0401 	bic.w	r4, r4, #1
 8005c82:	6014      	str	r4, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c84:	f001 011f 	and.w	r1, r1, #31
 8005c88:	2201      	movs	r2, #1
 8005c8a:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c8e:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c90:	6071      	str	r1, [r6, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005c92:	b138      	cbz	r0, 8005ca4 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c94:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c96:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9e:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca2:	604c      	str	r4, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005ca6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005ca8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005cb0:	bc70      	pop	{r4, r5, r6}
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cb4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005cb8:	2a02      	cmp	r2, #2
{
 8005cba:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cbc:	d009      	beq.n	8005cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc0:	2004      	movs	r0, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc2:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc4:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005cc6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005cca:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 8005ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8005cd0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd2:	6802      	ldr	r2, [r0, #0]
{
 8005cd4:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cd6:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd8:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cda:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cdc:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce0:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce4:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ce6:	6810      	ldr	r0, [r2, #0]
 8005ce8:	f020 0001 	bic.w	r0, r0, #1
 8005cec:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cee:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005cf0:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cf8:	f001 011f 	and.w	r1, r1, #31
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d00:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d02:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d04:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005d06:	b130      	cbz	r0, 8005d16 <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d08:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d0a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d12:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d14:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005d18:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8005d1a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005d20:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005d24:	b11a      	cbz	r2, 8005d2e <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8005d26:	4618      	mov	r0, r3
 8005d28:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	4620      	mov	r0, r4
}
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005d2e:	4610      	mov	r0, r2
}
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	bf00      	nop

08005d34 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f000 8143 	beq.w	8005fc0 <HAL_FDCAN_Init+0x28c>
{
 8005d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d3e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005d42:	4604      	mov	r4, r0
 8005d44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d073      	beq.n	8005e34 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	6993      	ldr	r3, [r2, #24]
 8005d50:	f023 0310 	bic.w	r3, r3, #16
 8005d54:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d56:	f7fe feef 	bl	8004b38 <HAL_GetTick>
 8005d5a:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d5c:	e004      	b.n	8005d68 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d5e:	f7fe feeb 	bl	8004b38 <HAL_GetTick>
 8005d62:	1b43      	subs	r3, r0, r5
 8005d64:	2b0a      	cmp	r3, #10
 8005d66:	d85b      	bhi.n	8005e20 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	0712      	lsls	r2, r2, #28
 8005d6e:	d4f6      	bmi.n	8005d5e <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d78:	f7fe fede 	bl	8004b38 <HAL_GetTick>
 8005d7c:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d7e:	e004      	b.n	8005d8a <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d80:	f7fe feda 	bl	8004b38 <HAL_GetTick>
 8005d84:	1b40      	subs	r0, r0, r5
 8005d86:	280a      	cmp	r0, #10
 8005d88:	d84a      	bhi.n	8005e20 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	6993      	ldr	r3, [r2, #24]
 8005d8e:	07db      	lsls	r3, r3, #31
 8005d90:	d5f6      	bpl.n	8005d80 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d92:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d94:	4993      	ldr	r1, [pc, #588]	; (8005fe4 <HAL_FDCAN_Init+0x2b0>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d96:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005d9a:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d9c:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8005d9e:	f000 810b 	beq.w	8005fb8 <HAL_FDCAN_Init+0x284>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005da2:	7c23      	ldrb	r3, [r4, #16]
 8005da4:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005da6:	6993      	ldr	r3, [r2, #24]
 8005da8:	bf0c      	ite	eq
 8005daa:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005dae:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005db2:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005db4:	7c63      	ldrb	r3, [r4, #17]
 8005db6:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005db8:	6993      	ldr	r3, [r2, #24]
 8005dba:	bf0c      	ite	eq
 8005dbc:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005dc0:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005dc4:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005dc6:	7ca3      	ldrb	r3, [r4, #18]
 8005dc8:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dca:	6993      	ldr	r3, [r2, #24]
 8005dcc:	bf0c      	ite	eq
 8005dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dd6:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dd8:	6993      	ldr	r3, [r2, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dda:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de2:	432b      	orrs	r3, r5
 8005de4:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005de6:	6993      	ldr	r3, [r2, #24]
 8005de8:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005dec:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dee:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005df0:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005df2:	f023 0310 	bic.w	r3, r3, #16
 8005df6:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005df8:	d021      	beq.n	8005e3e <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005dfa:	b321      	cbz	r1, 8005e46 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dfc:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005dfe:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e00:	f000 80ec 	beq.w	8005fdc <HAL_FDCAN_Init+0x2a8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e0a:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e0c:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e0e:	f043 0310 	orr.w	r3, r3, #16
 8005e12:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e14:	d117      	bne.n	8005e46 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e16:	6993      	ldr	r3, [r2, #24]
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	6193      	str	r3, [r2, #24]
 8005e1e:	e012      	b.n	8005e46 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e20:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e22:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e2a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005e2e:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005e34:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005e38:	f7fb fff4 	bl	8001e24 <HAL_FDCAN_MspInit>
 8005e3c:	e786      	b.n	8005d4c <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e3e:	6993      	ldr	r3, [r2, #24]
 8005e40:	f043 0304 	orr.w	r3, r3, #4
 8005e44:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e46:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e4a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e4c:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e4e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e50:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e52:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e56:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e58:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e5a:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e5c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e62:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e66:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e68:	d10e      	bne.n	8005e88 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e6a:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e6e:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e72:	3b01      	subs	r3, #1
 8005e74:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e76:	3d01      	subs	r5, #1
 8005e78:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e7c:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e7e:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e80:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e86:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e88:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005e8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005e8e:	4956      	ldr	r1, [pc, #344]	; (8005fe8 <HAL_FDCAN_Init+0x2b4>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e90:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8005e92:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005e98:	f000 8094 	beq.w	8005fc4 <HAL_FDCAN_Init+0x290>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005e9c:	4d53      	ldr	r5, [pc, #332]	; (8005fec <HAL_FDCAN_Init+0x2b8>)
 8005e9e:	4854      	ldr	r0, [pc, #336]	; (8005ff0 <HAL_FDCAN_Init+0x2bc>)
 8005ea0:	4b54      	ldr	r3, [pc, #336]	; (8005ff4 <HAL_FDCAN_Init+0x2c0>)
 8005ea2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8006010 <HAL_FDCAN_Init+0x2dc>
 8005ea6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8006014 <HAL_FDCAN_Init+0x2e0>
 8005eaa:	4f53      	ldr	r7, [pc, #332]	; (8005ff8 <HAL_FDCAN_Init+0x2c4>)
 8005eac:	f8df c168 	ldr.w	ip, [pc, #360]	; 8006018 <HAL_FDCAN_Init+0x2e4>
 8005eb0:	f8df e168 	ldr.w	lr, [pc, #360]	; 800601c <HAL_FDCAN_Init+0x2e8>
 8005eb4:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8006020 <HAL_FDCAN_Init+0x2ec>
 8005eb8:	4e50      	ldr	r6, [pc, #320]	; (8005ffc <HAL_FDCAN_Init+0x2c8>)
 8005eba:	42aa      	cmp	r2, r5
 8005ebc:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 8005ec0:	f505 5561 	add.w	r5, r5, #14400	; 0x3840
 8005ec4:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8005ec8:	bf18      	it	ne
 8005eca:	4607      	movne	r7, r0
 8005ecc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005ed0:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 8005ed4:	bf18      	it	ne
 8005ed6:	4698      	movne	r8, r3
 8005ed8:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 8005edc:	bf03      	ittte	eq
 8005ede:	46c6      	moveq	lr, r8
 8005ee0:	46d4      	moveq	ip, sl
 8005ee2:	4688      	moveq	r8, r1
 8005ee4:	46a9      	movne	r9, r5
 8005ee6:	f1a1 01b0 	sub.w	r1, r1, #176	; 0xb0
 8005eea:	bf1c      	itt	ne
 8005eec:	4606      	movne	r6, r0
 8005eee:	4619      	movne	r1, r3

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ef0:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8005ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005ef6:	6421      	str	r1, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ef8:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8005efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8005f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005f04:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 8005f08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005f0a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005f0e:	1e70      	subs	r0, r6, #1
 8005f10:	1a40      	subs	r0, r0, r1
 8005f12:	f025 6970 	bic.w	r9, r5, #251658240	; 0xf000000
 8005f16:	0885      	lsrs	r5, r0, #2
 8005f18:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	f101 0901 	add.w	r9, r1, #1
 8005f22:	454e      	cmp	r6, r9
 8005f24:	bf38      	it	cc
 8005f26:	2501      	movcc	r5, #1
 8005f28:	2817      	cmp	r0, #23
 8005f2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005f2e:	e9c4 8e12 	strd	r8, lr, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005f32:	e9c4 c714 	strd	ip, r7, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f36:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8005f3a:	d91a      	bls.n	8005f72 <HAL_FDCAN_Init+0x23e>
 8005f3c:	454e      	cmp	r6, r9
 8005f3e:	bf2c      	ite	cs
 8005f40:	2200      	movcs	r2, #0
 8005f42:	2201      	movcc	r2, #1
 8005f44:	b9aa      	cbnz	r2, 8005f72 <HAL_FDCAN_Init+0x23e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f46:	460f      	mov	r7, r1
 8005f48:	b10b      	cbz	r3, 8005f4e <HAL_FDCAN_Init+0x21a>
 8005f4a:	f847 2b04 	str.w	r2, [r7], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f4e:	1aed      	subs	r5, r5, r3
 8005f50:	086a      	lsrs	r2, r5, #1
 8005f52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005f56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d1fb      	bne.n	8005f5e <HAL_FDCAN_Init+0x22a>
 8005f66:	f025 0301 	bic.w	r3, r5, #1
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005f70:	d01a      	beq.n	8005fa8 <HAL_FDCAN_Init+0x274>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f72:	460a      	mov	r2, r1
 8005f74:	2300      	movs	r3, #0
 8005f76:	f842 3b04 	str.w	r3, [r2], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f7a:	4296      	cmp	r6, r2
 8005f7c:	d914      	bls.n	8005fa8 <HAL_FDCAN_Init+0x274>
 8005f7e:	f101 0208 	add.w	r2, r1, #8
 8005f82:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f84:	604b      	str	r3, [r1, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f86:	d90f      	bls.n	8005fa8 <HAL_FDCAN_Init+0x274>
 8005f88:	f101 020c 	add.w	r2, r1, #12
 8005f8c:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f8e:	608b      	str	r3, [r1, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f90:	d90a      	bls.n	8005fa8 <HAL_FDCAN_Init+0x274>
 8005f92:	f101 0210 	add.w	r2, r1, #16
 8005f96:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f98:	60cb      	str	r3, [r1, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f9a:	d905      	bls.n	8005fa8 <HAL_FDCAN_Init+0x274>
 8005f9c:	f101 0214 	add.w	r2, r1, #20
 8005fa0:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005fa2:	610b      	str	r3, [r1, #16]
 8005fa4:	bf88      	it	hi
 8005fa6:	614b      	strhi	r3, [r1, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8005fa8:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005faa:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005fac:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005fae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005fb2:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005fb8:	4b11      	ldr	r3, [pc, #68]	; (8006000 <HAL_FDCAN_Init+0x2cc>)
 8005fba:	6861      	ldr	r1, [r4, #4]
 8005fbc:	6019      	str	r1, [r3, #0]
 8005fbe:	e6f0      	b.n	8005da2 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
}
 8005fc2:	4770      	bx	lr
 8005fc4:	4f0f      	ldr	r7, [pc, #60]	; (8006004 <HAL_FDCAN_Init+0x2d0>)
 8005fc6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8006024 <HAL_FDCAN_Init+0x2f0>
 8005fca:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8006028 <HAL_FDCAN_Init+0x2f4>
 8005fce:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800602c <HAL_FDCAN_Init+0x2f8>
 8005fd2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006030 <HAL_FDCAN_Init+0x2fc>
 8005fd6:	4e0c      	ldr	r6, [pc, #48]	; (8006008 <HAL_FDCAN_Init+0x2d4>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005fd8:	490c      	ldr	r1, [pc, #48]	; (800600c <HAL_FDCAN_Init+0x2d8>)
 8005fda:	e789      	b.n	8005ef0 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005fdc:	f043 0320 	orr.w	r3, r3, #32
 8005fe0:	6193      	str	r3, [r2, #24]
 8005fe2:	e730      	b.n	8005e46 <HAL_FDCAN_Init+0x112>
 8005fe4:	40006400 	.word	0x40006400
 8005fe8:	40006800 	.word	0x40006800
 8005fec:	40006c00 	.word	0x40006c00
 8005ff0:	4000a678 	.word	0x4000a678
 8005ff4:	4000a4b0 	.word	0x4000a4b0
 8005ff8:	4000ad18 	.word	0x4000ad18
 8005ffc:	4000adf0 	.word	0x4000adf0
 8006000:	40006500 	.word	0x40006500
 8006004:	4000a9c8 	.word	0x4000a9c8
 8006008:	4000aaa0 	.word	0x4000aaa0
 800600c:	4000a750 	.word	0x4000a750
 8006010:	4000ac28 	.word	0x4000ac28
 8006014:	4000ad00 	.word	0x4000ad00
 8006018:	4000a660 	.word	0x4000a660
 800601c:	4000a588 	.word	0x4000a588
 8006020:	4000ab10 	.word	0x4000ab10
 8006024:	4000a9b0 	.word	0x4000a9b0
 8006028:	4000a8d8 	.word	0x4000a8d8
 800602c:	4000a800 	.word	0x4000a800
 8006030:	4000a7c0 	.word	0x4000a7c0

08006034 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006034:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006038:	3b01      	subs	r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	d905      	bls.n	800604a <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800603e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006046:	2001      	movs	r0, #1
}
 8006048:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800604a:	680b      	ldr	r3, [r1, #0]
{
 800604c:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800604e:	b983      	cbnz	r3, 8006072 <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006050:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 8006054:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 8006056:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 8006058:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800605a:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 800605c:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800605e:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 8006062:	432a      	orrs	r2, r5
 8006064:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 8006068:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 800606c:	4618      	mov	r0, r3
}
 800606e:	bc70      	pop	{r4, r5, r6}
 8006070:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006072:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006076:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8006078:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800607a:	688d      	ldr	r5, [r1, #8]
 800607c:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800607e:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006082:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006086:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 800608a:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800608e:	2000      	movs	r0, #0
}
 8006090:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 8006092:	604b      	str	r3, [r1, #4]
}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8006098:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800609a:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 800609e:	2e01      	cmp	r6, #1
 80060a0:	d006      	beq.n	80060b0 <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80060a4:	f043 0304 	orr.w	r3, r3, #4
 80060a8:	6603      	str	r3, [r0, #96]	; 0x60
}
 80060aa:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 80060ac:	2001      	movs	r0, #1
}
 80060ae:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80060b0:	6806      	ldr	r6, [r0, #0]
 80060b2:	4615      	mov	r5, r2
 80060b4:	9a03      	ldr	r2, [sp, #12]
 80060b6:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80060ba:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80060be:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 80060c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80060c6:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 80060ca:	4319      	orrs	r1, r3
 80060cc:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 80060d0:	2000      	movs	r0, #0
}
 80060d2:	bc70      	pop	{r4, r5, r6}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop

080060d8 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060d8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80060dc:	2a01      	cmp	r2, #1
{
 80060de:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060e0:	d005      	beq.n	80060ee <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060e2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80060e4:	f042 0204 	orr.w	r2, r2, #4
 80060e8:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 80060ea:	2001      	movs	r0, #1
}
 80060ec:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060ee:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060f6:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060f8:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006100:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006102:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop

08006108 <HAL_FDCAN_GetRxMessage>:
{
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800610a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800610e:	2c02      	cmp	r4, #2
 8006110:	d10c      	bne.n	800612c <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006112:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006114:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006116:	d00f      	beq.n	8006138 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006118:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 800611c:	0724      	lsls	r4, r4, #28
 800611e:	d15c      	bne.n	80061da <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006120:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006126:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006128:	2001      	movs	r0, #1
}
 800612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800612c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800612e:	f043 0308 	orr.w	r3, r3, #8
 8006132:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006134:	2001      	movs	r0, #1
}
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006138:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 800613c:	0725      	lsls	r5, r4, #28
 800613e:	d0ef      	beq.n	8006120 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006140:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006144:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006146:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800614a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800614e:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006152:	683c      	ldr	r4, [r7, #0]
 8006154:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006158:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800615a:	2c00      	cmp	r4, #0
 800615c:	d14c      	bne.n	80061f8 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800615e:	683c      	ldr	r4, [r7, #0]
 8006160:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006164:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006166:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006168:	f8df c094 	ldr.w	ip, [pc, #148]	; 8006200 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800616c:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006170:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006172:	683c      	ldr	r4, [r7, #0]
 8006174:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006178:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800617a:	88bc      	ldrh	r4, [r7, #4]
 800617c:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800617e:	687c      	ldr	r4, [r7, #4]
 8006180:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006184:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006186:	687d      	ldr	r5, [r7, #4]
 8006188:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 800618c:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800618e:	687d      	ldr	r5, [r7, #4]
 8006190:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006194:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006196:	79fd      	ldrb	r5, [r7, #7]
 8006198:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800619c:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800619e:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80061a0:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061a2:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80061a6:	0fed      	lsrs	r5, r5, #31
 80061a8:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061aa:	b174      	cbz	r4, 80061ca <HAL_FDCAN_GetRxMessage+0xc2>
 80061ac:	1e5d      	subs	r5, r3, #1
 80061ae:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80061b0:	4623      	mov	r3, r4
 80061b2:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 80061b6:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061ba:	89d6      	ldrh	r6, [r2, #14]
 80061bc:	3b06      	subs	r3, #6
 80061be:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80061c2:	1bdb      	subs	r3, r3, r7
 80061c4:	429e      	cmp	r6, r3
 80061c6:	d8f3      	bhi.n	80061b0 <HAL_FDCAN_GetRxMessage+0xa8>
 80061c8:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061ca:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 80061cc:	bf0c      	ite	eq
 80061ce:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 80061d2:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 80061d6:	2000      	movs	r0, #0
}
 80061d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80061da:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80061de:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80061e0:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80061e4:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80061e8:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80061ec:	683c      	ldr	r4, [r7, #0]
 80061ee:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80061f2:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d0b2      	beq.n	800615e <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80061f8:	683c      	ldr	r4, [r7, #0]
 80061fa:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 80061fe:	e7b1      	b.n	8006164 <HAL_FDCAN_GetRxMessage+0x5c>
 8006200:	0800f69c 	.word	0x0800f69c

08006204 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006204:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006208:	3b01      	subs	r3, #1
 800620a:	2b01      	cmp	r3, #1
 800620c:	d905      	bls.n	800621a <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800620e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006210:	f043 0302 	orr.w	r3, r3, #2
 8006214:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006216:	2001      	movs	r0, #1
}
 8006218:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 800621a:	6803      	ldr	r3, [r0, #0]
{
 800621c:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800621e:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006222:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006224:	d03d      	beq.n	80062a2 <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006226:	07c4      	lsls	r4, r0, #31
 8006228:	d43b      	bmi.n	80062a2 <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800622a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800622c:	f044 0401 	orr.w	r4, r4, #1
 8006230:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006232:	b1cd      	cbz	r5, 8006268 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006234:	07c5      	lsls	r5, r0, #31
 8006236:	d517      	bpl.n	8006268 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006238:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800623a:	f040 0002 	orr.w	r0, r0, #2
 800623e:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006240:	060c      	lsls	r4, r1, #24
 8006242:	d504      	bpl.n	800624e <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006244:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006248:	4310      	orrs	r0, r2
 800624a:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800624e:	05c8      	lsls	r0, r1, #23
 8006250:	d504      	bpl.n	800625c <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006252:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006256:	4302      	orrs	r2, r0
 8006258:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800625c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625e:	4311      	orrs	r1, r2
    return HAL_OK;
 8006260:	2000      	movs	r0, #0
}
 8006262:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006264:	6559      	str	r1, [r3, #84]	; 0x54
}
 8006266:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006268:	f011 0f38 	tst.w	r1, #56	; 0x38
 800626c:	d001      	beq.n	8006272 <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800626e:	0784      	lsls	r4, r0, #30
 8006270:	d4e2      	bmi.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
 8006272:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006276:	d131      	bne.n	80062dc <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006278:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800627c:	d001      	beq.n	8006282 <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800627e:	0704      	lsls	r4, r0, #28
 8006280:	d4da      	bmi.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
 8006282:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006286:	d001      	beq.n	800628c <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006288:	06c5      	lsls	r5, r0, #27
 800628a:	d4d5      	bmi.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
 800628c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006290:	d001      	beq.n	8006296 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006292:	0684      	lsls	r4, r0, #26
 8006294:	d4d0      	bmi.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
 8006296:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 800629a:	d0d1      	beq.n	8006240 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800629c:	0645      	lsls	r5, r0, #25
 800629e:	d5cf      	bpl.n	8006240 <HAL_FDCAN_ActivateNotification+0x3c>
 80062a0:	e7ca      	b.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80062a2:	f011 0f38 	tst.w	r1, #56	; 0x38
 80062a6:	d001      	beq.n	80062ac <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80062a8:	0784      	lsls	r4, r0, #30
 80062aa:	d5be      	bpl.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
 80062ac:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80062b0:	d117      	bne.n	80062e2 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062b2:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80062b6:	d001      	beq.n	80062bc <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80062b8:	0704      	lsls	r4, r0, #28
 80062ba:	d5b6      	bpl.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
 80062bc:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80062c0:	d001      	beq.n	80062c6 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80062c2:	06c4      	lsls	r4, r0, #27
 80062c4:	d5b1      	bpl.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
 80062c6:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80062ca:	d001      	beq.n	80062d0 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80062cc:	0684      	lsls	r4, r0, #26
 80062ce:	d5ac      	bpl.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
 80062d0:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80062d4:	d0ad      	beq.n	8006232 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80062d6:	0644      	lsls	r4, r0, #25
 80062d8:	d4ab      	bmi.n	8006232 <HAL_FDCAN_ActivateNotification+0x2e>
 80062da:	e7a6      	b.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80062dc:	0745      	lsls	r5, r0, #29
 80062de:	d4ab      	bmi.n	8006238 <HAL_FDCAN_ActivateNotification+0x34>
 80062e0:	e7ca      	b.n	8006278 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062e2:	0744      	lsls	r4, r0, #29
 80062e4:	d5a1      	bpl.n	800622a <HAL_FDCAN_ActivateNotification+0x26>
 80062e6:	e7e4      	b.n	80062b2 <HAL_FDCAN_ActivateNotification+0xae>

080062e8 <HAL_FDCAN_TxEventFifoCallback>:
}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop

080062ec <HAL_FDCAN_RxFifo0Callback>:
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop

080062f0 <HAL_FDCAN_RxFifo1Callback>:
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop

080062f4 <HAL_FDCAN_TxFifoEmptyCallback>:
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <HAL_FDCAN_TxBufferCompleteCallback>:
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop

080062fc <HAL_FDCAN_TxBufferAbortCallback>:
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop

08006300 <HAL_FDCAN_TimestampWraparoundCallback>:
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop

08006304 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop

08006308 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <HAL_FDCAN_ErrorCallback>:
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop

08006310 <HAL_FDCAN_ErrorStatusCallback>:
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop

08006314 <HAL_FDCAN_IRQHandler>:
{
 8006314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006318:	6803      	ldr	r3, [r0, #0]
 800631a:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800631e:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006322:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006326:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006328:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800632a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800632c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 800632e:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006332:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006334:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006338:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 800633a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800633c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800633e:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8006342:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006346:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006348:	0652      	lsls	r2, r2, #25
{
 800634a:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 800634c:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006350:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006354:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006358:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800635c:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006360:	d502      	bpl.n	8006368 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006364:	0651      	lsls	r1, r2, #25
 8006366:	d473      	bmi.n	8006450 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800636a:	05d2      	lsls	r2, r2, #23
 800636c:	d502      	bpl.n	8006374 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800636e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006370:	05d0      	lsls	r0, r2, #23
 8006372:	d45d      	bmi.n	8006430 <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	d14a      	bne.n	8006410 <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 800637a:	f1b8 0f00 	cmp.w	r8, #0
 800637e:	d137      	bne.n	80063f0 <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8006380:	2f00      	cmp	r7, #0
 8006382:	d13e      	bne.n	8006402 <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006386:	0591      	lsls	r1, r2, #22
 8006388:	d502      	bpl.n	8006390 <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800638a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800638c:	0592      	lsls	r2, r2, #22
 800638e:	d475      	bmi.n	800647c <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006392:	0617      	lsls	r7, r2, #24
 8006394:	d502      	bpl.n	800639c <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006398:	0610      	lsls	r0, r2, #24
 800639a:	d477      	bmi.n	800648c <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800639c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800639e:	0491      	lsls	r1, r2, #18
 80063a0:	d502      	bpl.n	80063a8 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80063a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063a4:	0492      	lsls	r2, r2, #18
 80063a6:	d459      	bmi.n	800645c <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80063a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063aa:	0417      	lsls	r7, r2, #16
 80063ac:	d502      	bpl.n	80063b4 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80063ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b0:	0410      	lsls	r0, r2, #16
 80063b2:	d45b      	bmi.n	800646c <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80063b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b6:	0451      	lsls	r1, r2, #17
 80063b8:	d509      	bpl.n	80063ce <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80063ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063bc:	0452      	lsls	r2, r2, #17
 80063be:	d506      	bpl.n	80063ce <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80063c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063c4:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80063c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80063c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063cc:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80063ce:	b94e      	cbnz	r6, 80063e4 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 80063d0:	b125      	cbz	r5, 80063dc <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80063d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80063d8:	431d      	orrs	r5, r3
 80063da:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80063dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80063de:	bb13      	cbnz	r3, 8006426 <HAL_FDCAN_IRQHandler+0x112>
}
 80063e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80063e4:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80063e6:	4631      	mov	r1, r6
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff ff91 	bl	8006310 <HAL_FDCAN_ErrorStatusCallback>
 80063ee:	e7ef      	b.n	80063d0 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80063f0:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80063f4:	4641      	mov	r1, r8
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff ff78 	bl	80062ec <HAL_FDCAN_RxFifo0Callback>
 80063fc:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80063fe:	2f00      	cmp	r7, #0
 8006400:	d0c0      	beq.n	8006384 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006402:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006404:	4639      	mov	r1, r7
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff ff72 	bl	80062f0 <HAL_FDCAN_RxFifo1Callback>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	e7b9      	b.n	8006384 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006410:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006414:	4649      	mov	r1, r9
 8006416:	4620      	mov	r0, r4
 8006418:	f7ff ff66 	bl	80062e8 <HAL_FDCAN_TxEventFifoCallback>
 800641c:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	d0ad      	beq.n	8006380 <HAL_FDCAN_IRQHandler+0x6c>
 8006424:	e7e4      	b.n	80063f0 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff ff70 	bl	800630c <HAL_FDCAN_ErrorCallback>
}
 800642c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006430:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006434:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006438:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800643c:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800643e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff ff5b 	bl	80062fc <HAL_FDCAN_TxBufferAbortCallback>
 8006446:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006448:	f1b9 0f00 	cmp.w	r9, #0
 800644c:	d095      	beq.n	800637a <HAL_FDCAN_IRQHandler+0x66>
 800644e:	e7df      	b.n	8006410 <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006450:	2240      	movs	r2, #64	; 0x40
 8006452:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006454:	f7ff ff58 	bl	8006308 <HAL_FDCAN_HighPriorityMessageCallback>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	e785      	b.n	8006368 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800645c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006460:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff ff4c 	bl	8006300 <HAL_FDCAN_TimestampWraparoundCallback>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	e79d      	b.n	80063a8 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800646c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006470:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff46 	bl	8006304 <HAL_FDCAN_TimeoutOccurredCallback>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	e79b      	b.n	80063b4 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800647c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006480:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff ff36 	bl	80062f4 <HAL_FDCAN_TxFifoEmptyCallback>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	e781      	b.n	8006390 <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800648c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006490:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006494:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006496:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006498:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800649a:	4620      	mov	r0, r4
 800649c:	f7ff ff2c 	bl	80062f8 <HAL_FDCAN_TxBufferCompleteCallback>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	e77b      	b.n	800639c <HAL_FDCAN_IRQHandler+0x88>

080064a4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80064a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80064a8:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80065fc <HAL_FLASH_Program+0x158>
 80064ac:	f899 4000 	ldrb.w	r4, [r9]
 80064b0:	2c01      	cmp	r4, #1
 80064b2:	d04f      	beq.n	8006554 <HAL_FLASH_Program+0xb0>
 80064b4:	469b      	mov	fp, r3
 80064b6:	2301      	movs	r3, #1
 80064b8:	4682      	mov	sl, r0
 80064ba:	460f      	mov	r7, r1
 80064bc:	4690      	mov	r8, r2
 80064be:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80064c2:	f7fe fb39 	bl	8004b38 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80064c6:	4e4c      	ldr	r6, [pc, #304]	; (80065f8 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 80064c8:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80064ca:	e005      	b.n	80064d8 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80064cc:	f7fe fb34 	bl	8004b38 <HAL_GetTick>
 80064d0:	1b44      	subs	r4, r0, r5
 80064d2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80064d6:	d837      	bhi.n	8006548 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80064d8:	6933      	ldr	r3, [r6, #16]
 80064da:	03d8      	lsls	r0, r3, #15
 80064dc:	d4f6      	bmi.n	80064cc <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80064de:	6934      	ldr	r4, [r6, #16]
 80064e0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 80064e4:	401c      	ands	r4, r3
 80064e6:	d147      	bne.n	8006578 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80064e8:	6933      	ldr	r3, [r6, #16]
 80064ea:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80064ec:	bf44      	itt	mi
 80064ee:	2301      	movmi	r3, #1
 80064f0:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80064f8:	f1ba 0f00 	cmp.w	sl, #0
 80064fc:	d02d      	beq.n	800655a <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80064fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006502:	2b01      	cmp	r3, #1
 8006504:	d940      	bls.n	8006588 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8006506:	f7fe fb17 	bl	8004b38 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800650a:	4e3b      	ldr	r6, [pc, #236]	; (80065f8 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 800650c:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800650e:	e005      	b.n	800651c <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006510:	f7fe fb12 	bl	8004b38 <HAL_GetTick>
 8006514:	1b40      	subs	r0, r0, r5
 8006516:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800651a:	d82b      	bhi.n	8006574 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800651c:	6933      	ldr	r3, [r6, #16]
 800651e:	03db      	lsls	r3, r3, #15
 8006520:	d4f6      	bmi.n	8006510 <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006522:	6933      	ldr	r3, [r6, #16]
 8006524:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8006528:	4013      	ands	r3, r2
 800652a:	d152      	bne.n	80065d2 <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800652c:	6930      	ldr	r0, [r6, #16]
 800652e:	f010 0001 	ands.w	r0, r0, #1
 8006532:	d002      	beq.n	800653a <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006534:	2201      	movs	r2, #1
 8006536:	4618      	mov	r0, r3
 8006538:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 800653a:	b134      	cbz	r4, 800654a <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <HAL_FLASH_Program+0x154>)
 800653e:	6953      	ldr	r3, [r2, #20]
 8006540:	ea23 0404 	bic.w	r4, r3, r4
 8006544:	6154      	str	r4, [r2, #20]
 8006546:	e000      	b.n	800654a <HAL_FLASH_Program+0xa6>
 8006548:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 800654a:	2300      	movs	r3, #0
 800654c:	f889 3000 	strb.w	r3, [r9]
}
 8006550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8006554:	2002      	movs	r0, #2
}
 8006556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800655a:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <HAL_FLASH_Program+0x154>)
 800655c:	6953      	ldr	r3, [r2, #20]
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006564:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8006568:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800656c:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800656e:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8006572:	e7c8      	b.n	8006506 <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8006574:	2003      	movs	r0, #3
 8006576:	e7e0      	b.n	800653a <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8006578:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800657c:	4323      	orrs	r3, r4
 800657e:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8006582:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8006584:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 8006586:	e7e0      	b.n	800654a <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <HAL_FLASH_Program+0x154>)
 800658a:	6953      	ldr	r3, [r2, #20]
 800658c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006590:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006592:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006594:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006598:	b672      	cpsid	i
 800659a:	1dfa      	adds	r2, r7, #7
 800659c:	eba2 0208 	sub.w	r2, r2, r8
 80065a0:	2a0e      	cmp	r2, #14
 80065a2:	d91e      	bls.n	80065e2 <HAL_FLASH_Program+0x13e>
 80065a4:	ea47 0208 	orr.w	r2, r7, r8
 80065a8:	0752      	lsls	r2, r2, #29
 80065aa:	d11a      	bne.n	80065e2 <HAL_FLASH_Program+0x13e>
 80065ac:	1aff      	subs	r7, r7, r3
 80065ae:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80065b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065b6:	18fa      	adds	r2, r7, r3
 80065b8:	3308      	adds	r3, #8
 80065ba:	4543      	cmp	r3, r8
 80065bc:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 80065c0:	d1f7      	bne.n	80065b2 <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c2:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 80065c6:	f1ba 0f02 	cmp.w	sl, #2
 80065ca:	bf08      	it	eq
 80065cc:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 80065d0:	e799      	b.n	8006506 <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 80065d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 80065dc:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80065de:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 80065e0:	e7ab      	b.n	800653a <HAL_FLASH_Program+0x96>
 80065e2:	eba7 0708 	sub.w	r7, r7, r8
 80065e6:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	51da      	str	r2, [r3, r7]
    src_addr++;
 80065ee:	3304      	adds	r3, #4
  while (row_index != 0U);
 80065f0:	4598      	cmp	r8, r3
 80065f2:	d1fa      	bne.n	80065ea <HAL_FLASH_Program+0x146>
 80065f4:	e7e5      	b.n	80065c2 <HAL_FLASH_Program+0x11e>
 80065f6:	bf00      	nop
 80065f8:	40022000 	.word	0x40022000
 80065fc:	2000000c 	.word	0x2000000c

08006600 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <HAL_FLASH_Unlock+0x1c>)
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	2a00      	cmp	r2, #0
 8006606:	db01      	blt.n	800660c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8006608:	2000      	movs	r0, #0
}
 800660a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800660c:	4904      	ldr	r1, [pc, #16]	; (8006620 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800660e:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006610:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006612:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006614:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	0fc0      	lsrs	r0, r0, #31
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40022000 	.word	0x40022000
 8006620:	45670123 	.word	0x45670123
 8006624:	cdef89ab 	.word	0xcdef89ab

08006628 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <HAL_FLASH_Lock+0x14>)
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006630:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006632:	6958      	ldr	r0, [r3, #20]
}
 8006634:	43c0      	mvns	r0, r0
 8006636:	0fc0      	lsrs	r0, r0, #31
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40022000 	.word	0x40022000

08006640 <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_FLASH_OB_Unlock+0x1c>)
 8006642:	6958      	ldr	r0, [r3, #20]
 8006644:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8006648:	d006      	beq.n	8006658 <HAL_FLASH_OB_Unlock+0x18>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800664a:	4905      	ldr	r1, [pc, #20]	; (8006660 <HAL_FLASH_OB_Unlock+0x20>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800664c:	4a05      	ldr	r2, [pc, #20]	; (8006664 <HAL_FLASH_OB_Unlock+0x24>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800664e:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8006650:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006652:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8006654:	f3c0 7080 	ubfx	r0, r0, #30, #1
}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40022000 	.word	0x40022000
 8006660:	08192a3b 	.word	0x08192a3b
 8006664:	4c5d6e7f 	.word	0x4c5d6e7f

08006668 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_FLASH_OB_Lock+0x18>)
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006670:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006672:	6958      	ldr	r0, [r3, #20]
 8006674:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
}
 8006678:	f3c0 7080 	ubfx	r0, r0, #30, #1
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40022000 	.word	0x40022000

08006684 <FLASH_WaitForLastOperation>:
{
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006688:	f7fe fa56 	bl	8004b38 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800668c:	4e10      	ldr	r6, [pc, #64]	; (80066d0 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800668e:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006690:	e004      	b.n	800669c <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006692:	f7fe fa51 	bl	8004b38 <HAL_GetTick>
 8006696:	1b03      	subs	r3, r0, r4
 8006698:	42ab      	cmp	r3, r5
 800669a:	d80f      	bhi.n	80066bc <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800669c:	6933      	ldr	r3, [r6, #16]
 800669e:	03db      	lsls	r3, r3, #15
 80066a0:	d4f7      	bmi.n	8006692 <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80066a2:	6933      	ldr	r3, [r6, #16]
 80066a4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 80066a8:	4013      	ands	r3, r2
 80066aa:	d109      	bne.n	80066c0 <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80066ac:	6930      	ldr	r0, [r6, #16]
 80066ae:	f010 0001 	ands.w	r0, r0, #1
 80066b2:	d002      	beq.n	80066ba <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80066b4:	2201      	movs	r2, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	6132      	str	r2, [r6, #16]
}
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80066bc:	2003      	movs	r0, #3
}
 80066be:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80066c0:	4904      	ldr	r1, [pc, #16]	; (80066d4 <FLASH_WaitForLastOperation+0x50>)
 80066c2:	684a      	ldr	r2, [r1, #4]
 80066c4:	431a      	orrs	r2, r3
 80066c6:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 80066c8:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80066ca:	6133      	str	r3, [r6, #16]
}
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	bf00      	nop
 80066d0:	40022000 	.word	0x40022000
 80066d4:	2000000c 	.word	0x2000000c

080066d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80066dc:	4f67      	ldr	r7, [pc, #412]	; (800687c <HAL_FLASHEx_Erase+0x1a4>)
 80066de:	783b      	ldrb	r3, [r7, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d062      	beq.n	80067aa <HAL_FLASHEx_Erase+0xd2>
 80066e4:	4682      	mov	sl, r0
 80066e6:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ec:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80066ee:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066f0:	f7ff ffc8 	bl	8006684 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 80066f4:	4606      	mov	r6, r0
 80066f6:	b120      	cbz	r0, 8006702 <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80066f8:	2300      	movs	r3, #0
 80066fa:	703b      	strb	r3, [r7, #0]

  return status;
}
 80066fc:	4630      	mov	r0, r6
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006702:	4b5f      	ldr	r3, [pc, #380]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006704:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800670c:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800670e:	d150      	bne.n	80067b2 <HAL_FLASHEx_Erase+0xda>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006710:	0554      	lsls	r4, r2, #21
 8006712:	f140 80a1 	bpl.w	8006858 <HAL_FLASHEx_Erase+0x180>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006716:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006718:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006720:	7739      	strb	r1, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006722:	f8da 3000 	ldr.w	r3, [sl]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d050      	beq.n	80067cc <HAL_FLASHEx_Erase+0xf4>
      *PageError = 0xFFFFFFFFU;
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006732:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8006736:	442b      	add	r3, r5
 8006738:	429d      	cmp	r5, r3
 800673a:	d261      	bcs.n	8006800 <HAL_FLASHEx_Erase+0x128>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800673c:	4c50      	ldr	r4, [pc, #320]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800673e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006884 <HAL_FLASHEx_Erase+0x1ac>
 8006742:	e023      	b.n	800678c <HAL_FLASHEx_Erase+0xb4>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006744:	6963      	ldr	r3, [r4, #20]
 8006746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800674a:	6163      	str	r3, [r4, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800674c:	6962      	ldr	r2, [r4, #20]
 800674e:	00eb      	lsls	r3, r5, #3
 8006750:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8006754:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006758:	4313      	orrs	r3, r2
 800675a:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800675c:	6963      	ldr	r3, [r4, #20]
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006764:	6963      	ldr	r3, [r4, #20]
 8006766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676a:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800676c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006770:	f7ff ff88 	bl	8006684 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006774:	6963      	ldr	r3, [r4, #20]
 8006776:	ea03 0309 	and.w	r3, r3, r9
 800677a:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 800677c:	2800      	cmp	r0, #0
 800677e:	d165      	bne.n	800684c <HAL_FLASHEx_Erase+0x174>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006780:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8006784:	3501      	adds	r5, #1
 8006786:	4413      	add	r3, r2
 8006788:	42ab      	cmp	r3, r5
 800678a:	d939      	bls.n	8006800 <HAL_FLASHEx_Erase+0x128>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800678c:	6a23      	ldr	r3, [r4, #32]
 800678e:	025b      	lsls	r3, r3, #9
 8006790:	d5d8      	bpl.n	8006744 <HAL_FLASHEx_Erase+0x6c>
    if ((Banks & FLASH_BANK_1) != 0U)
 8006792:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006796:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800679a:	6963      	ldr	r3, [r4, #20]
 800679c:	bf14      	ite	ne
 800679e:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80067a2:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	e7d0      	b.n	800674c <HAL_FLASHEx_Erase+0x74>
  __HAL_LOCK(&pFlash);
 80067aa:	2602      	movs	r6, #2
}
 80067ac:	4630      	mov	r0, r6
 80067ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80067b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067b6:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	0555      	lsls	r5, r2, #21
 80067bc:	d54a      	bpl.n	8006854 <HAL_FLASHEx_Erase+0x17c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80067be:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80067c0:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80067c8:	7739      	strb	r1, [r7, #28]
 80067ca:	e7aa      	b.n	8006722 <HAL_FLASHEx_Erase+0x4a>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80067cc:	4b2c      	ldr	r3, [pc, #176]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	0250      	lsls	r0, r2, #9
 80067d2:	d443      	bmi.n	800685c <HAL_FLASHEx_Erase+0x184>
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067da:	f042 0204 	orr.w	r2, r2, #4
 80067de:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80067e0:	4c27      	ldr	r4, [pc, #156]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
 80067e2:	6963      	ldr	r3, [r4, #20]
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067ee:	f7ff ff49 	bl	8006684 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f8:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80067fc:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80067fe:	6163      	str	r3, [r4, #20]
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006800:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006802:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006806:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006808:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800680a:	d10c      	bne.n	8006826 <HAL_FLASHEx_Erase+0x14e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
 800680e:	6811      	ldr	r1, [r2, #0]
 8006810:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	6811      	ldr	r1, [r2, #0]
 8006818:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800681c:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800681e:	6811      	ldr	r1, [r2, #0]
 8006820:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006824:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006826:	3b02      	subs	r3, #2
 8006828:	2b01      	cmp	r3, #1
 800682a:	d80c      	bhi.n	8006846 <HAL_FLASHEx_Erase+0x16e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800683c:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006844:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006846:	2300      	movs	r3, #0
 8006848:	773b      	strb	r3, [r7, #28]
}
 800684a:	e755      	b.n	80066f8 <HAL_FLASHEx_Erase+0x20>
          *PageError = page_index;
 800684c:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006850:	4606      	mov	r6, r0
          break;
 8006852:	e7d5      	b.n	8006800 <HAL_FLASHEx_Erase+0x128>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006854:	773c      	strb	r4, [r7, #28]
 8006856:	e764      	b.n	8006722 <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006858:	7738      	strb	r0, [r7, #28]
 800685a:	e762      	b.n	8006722 <HAL_FLASHEx_Erase+0x4a>
      FLASH_MassErase(pEraseInit->Banks);
 800685c:	f8da 2004 	ldr.w	r2, [sl, #4]
    if ((Banks & FLASH_BANK_1) != 0U)
 8006860:	07d1      	lsls	r1, r2, #31
 8006862:	d503      	bpl.n	800686c <HAL_FLASHEx_Erase+0x194>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006864:	6959      	ldr	r1, [r3, #20]
 8006866:	f041 0104 	orr.w	r1, r1, #4
 800686a:	6159      	str	r1, [r3, #20]
    if ((Banks & FLASH_BANK_2) != 0U)
 800686c:	0792      	lsls	r2, r2, #30
 800686e:	d5b7      	bpl.n	80067e0 <HAL_FLASHEx_Erase+0x108>
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006870:	4a03      	ldr	r2, [pc, #12]	; (8006880 <HAL_FLASHEx_Erase+0x1a8>)
 8006872:	6953      	ldr	r3, [r2, #20]
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	6153      	str	r3, [r2, #20]
 800687a:	e7b1      	b.n	80067e0 <HAL_FLASHEx_Erase+0x108>
 800687c:	2000000c 	.word	0x2000000c
 8006880:	40022000 	.word	0x40022000
 8006884:	fffffc05 	.word	0xfffffc05

08006888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800688c:	680e      	ldr	r6, [r1, #0]
{
 800688e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006890:	2e00      	cmp	r6, #0
 8006892:	f000 808b 	beq.w	80069ac <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006896:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8006a6c <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 800689a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800689c:	2201      	movs	r2, #1
 800689e:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80068a2:	ea14 0c06 	ands.w	ip, r4, r6
 80068a6:	d07c      	beq.n	80069a2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068a8:	684d      	ldr	r5, [r1, #4]
 80068aa:	f025 0a10 	bic.w	sl, r5, #16
 80068ae:	f10a 32ff 	add.w	r2, sl, #4294967295
 80068b2:	2a01      	cmp	r2, #1
 80068b4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068b8:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068bc:	d979      	bls.n	80069b2 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 80068be:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068c0:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068c2:	fa02 f208 	lsl.w	r2, r2, r8
 80068c6:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068ca:	fa04 f408 	lsl.w	r4, r4, r8
 80068ce:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80068d0:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068d2:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 80068d4:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068d6:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068da:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068dc:	fa02 f208 	lsl.w	r2, r2, r8
 80068e0:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068e2:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80068e4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068e6:	d55c      	bpl.n	80069a2 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068e8:	4c5a      	ldr	r4, [pc, #360]	; (8006a54 <HAL_GPIO_Init+0x1cc>)
 80068ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	6622      	str	r2, [r4, #96]	; 0x60
 80068f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80068f4:	f023 0403 	bic.w	r4, r3, #3
 80068f8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80068fc:	f002 0201 	and.w	r2, r2, #1
 8006900:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006904:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006906:	f003 0203 	and.w	r2, r3, #3
 800690a:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800690e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006910:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006912:	220f      	movs	r2, #15
 8006914:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006918:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800691c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006920:	d018      	beq.n	8006954 <HAL_GPIO_Init+0xcc>
 8006922:	4a4d      	ldr	r2, [pc, #308]	; (8006a58 <HAL_GPIO_Init+0x1d0>)
 8006924:	4290      	cmp	r0, r2
 8006926:	f000 8084 	beq.w	8006a32 <HAL_GPIO_Init+0x1aa>
 800692a:	4a4c      	ldr	r2, [pc, #304]	; (8006a5c <HAL_GPIO_Init+0x1d4>)
 800692c:	4290      	cmp	r0, r2
 800692e:	f000 8085 	beq.w	8006a3c <HAL_GPIO_Init+0x1b4>
 8006932:	4a4b      	ldr	r2, [pc, #300]	; (8006a60 <HAL_GPIO_Init+0x1d8>)
 8006934:	4290      	cmp	r0, r2
 8006936:	d076      	beq.n	8006a26 <HAL_GPIO_Init+0x19e>
 8006938:	4a4a      	ldr	r2, [pc, #296]	; (8006a64 <HAL_GPIO_Init+0x1dc>)
 800693a:	4290      	cmp	r0, r2
 800693c:	f000 8084 	beq.w	8006a48 <HAL_GPIO_Init+0x1c0>
 8006940:	4a49      	ldr	r2, [pc, #292]	; (8006a68 <HAL_GPIO_Init+0x1e0>)
 8006942:	4290      	cmp	r0, r2
 8006944:	bf0c      	ite	eq
 8006946:	f04f 0805 	moveq.w	r8, #5
 800694a:	f04f 0806 	movne.w	r8, #6
 800694e:	fa08 f209 	lsl.w	r2, r8, r9
 8006952:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006954:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8006956:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800695a:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800695e:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8006960:	bf54      	ite	pl
 8006962:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006964:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8006968:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 800696c:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006970:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8006972:	bf54      	ite	pl
 8006974:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006976:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 800697a:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800697e:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006982:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8006984:	bf54      	ite	pl
 8006986:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006988:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 800698c:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006990:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006994:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8006996:	bf54      	ite	pl
 8006998:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800699a:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800699e:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80069a2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069a4:	fa36 f203 	lsrs.w	r2, r6, r3
 80069a8:	f47f af78 	bne.w	800689c <HAL_GPIO_Init+0x14>
  }
}
 80069ac:	b003      	add	sp, #12
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80069b2:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b4:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069b8:	fa02 f208 	lsl.w	r2, r2, r8
 80069bc:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069c0:	68cf      	ldr	r7, [r1, #12]
 80069c2:	fa07 f708 	lsl.w	r7, r7, r8
 80069c6:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80069ca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80069cc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80069ce:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069d2:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80069d6:	465c      	mov	r4, fp
 80069d8:	409c      	lsls	r4, r3
 80069da:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80069dc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80069de:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069e0:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069e4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069e8:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069ec:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069f0:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 80069f4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069f6:	f47f af6d 	bne.w	80068d4 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80069fa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80069fe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a02:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006a06:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a0a:	0092      	lsls	r2, r2, #2
 8006a0c:	f04f 0a0f 	mov.w	sl, #15
 8006a10:	fa0a fb02 	lsl.w	fp, sl, r2
 8006a14:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a18:	690c      	ldr	r4, [r1, #16]
 8006a1a:	4094      	lsls	r4, r2
 8006a1c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006a20:	f8c9 4020 	str.w	r4, [r9, #32]
 8006a24:	e756      	b.n	80068d4 <HAL_GPIO_Init+0x4c>
 8006a26:	f04f 0803 	mov.w	r8, #3
 8006a2a:	fa08 f209 	lsl.w	r2, r8, r9
 8006a2e:	4317      	orrs	r7, r2
 8006a30:	e790      	b.n	8006954 <HAL_GPIO_Init+0xcc>
 8006a32:	2201      	movs	r2, #1
 8006a34:	fa02 f209 	lsl.w	r2, r2, r9
 8006a38:	4317      	orrs	r7, r2
 8006a3a:	e78b      	b.n	8006954 <HAL_GPIO_Init+0xcc>
 8006a3c:	f04f 0802 	mov.w	r8, #2
 8006a40:	fa08 f209 	lsl.w	r2, r8, r9
 8006a44:	4317      	orrs	r7, r2
 8006a46:	e785      	b.n	8006954 <HAL_GPIO_Init+0xcc>
 8006a48:	f04f 0804 	mov.w	r8, #4
 8006a4c:	fa08 f209 	lsl.w	r2, r8, r9
 8006a50:	4317      	orrs	r7, r2
 8006a52:	e77f      	b.n	8006954 <HAL_GPIO_Init+0xcc>
 8006a54:	40021000 	.word	0x40021000
 8006a58:	48000400 	.word	0x48000400
 8006a5c:	48000800 	.word	0x48000800
 8006a60:	48000c00 	.word	0x48000c00
 8006a64:	48001000 	.word	0x48001000
 8006a68:	48001400 	.word	0x48001400
 8006a6c:	40010400 	.word	0x40010400

08006a70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a70:	b10a      	cbz	r2, 8006a76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a72:	6181      	str	r1, [r0, #24]
 8006a74:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a76:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a7c:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8006a7e:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a80:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a82:	b968      	cbnz	r0, 8006aa0 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8c:	d014      	beq.n	8006ab8 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aa0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006aa4:	d02f      	beq.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006ab0:	2000      	movs	r0, #0
}
 8006ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ab8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006abc:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006abe:	482d      	ldr	r0, [pc, #180]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ac0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006ac4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ac8:	6811      	ldr	r1, [r2, #0]
 8006aca:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006ace:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006ad2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ad4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ad6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ad8:	2332      	movs	r3, #50	; 0x32
 8006ada:	fb03 f304 	mul.w	r3, r3, r4
 8006ade:	fba0 0303 	umull	r0, r3, r0, r3
 8006ae2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ae4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ae6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aea:	d506      	bpl.n	8006afa <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006aec:	e000      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x74>
 8006aee:	b123      	cbz	r3, 8006afa <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006af0:	6951      	ldr	r1, [r2, #20]
 8006af2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006af4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006af8:	d4f9      	bmi.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006afa:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	055c      	lsls	r4, r3, #21
 8006b00:	d5d6      	bpl.n	8006ab0 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8006b02:	2003      	movs	r0, #3
 8006b04:	e7c9      	b.n	8006a9a <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0e:	d009      	beq.n	8006b24 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8006b14:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006b1c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8006b22:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b24:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b28:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006b2a:	4812      	ldr	r0, [pc, #72]	; (8006b74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b2c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b30:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006b3a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006b3e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b40:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b42:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b44:	2332      	movs	r3, #50	; 0x32
 8006b46:	fb03 f304 	mul.w	r3, r3, r4
 8006b4a:	fba0 0303 	umull	r0, r3, r0, r3
 8006b4e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b50:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b52:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b56:	d5d0      	bpl.n	8006afa <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006b58:	e001      	b.n	8006b5e <HAL_PWREx_ControlVoltageScaling+0xe2>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0cd      	beq.n	8006afa <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006b5e:	6951      	ldr	r1, [r2, #20]
 8006b60:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006b62:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b66:	d5c8      	bpl.n	8006afa <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006b68:	e7f7      	b.n	8006b5a <HAL_PWREx_ControlVoltageScaling+0xde>
 8006b6a:	bf00      	nop
 8006b6c:	40007000 	.word	0x40007000
 8006b70:	20000000 	.word	0x20000000
 8006b74:	431bde83 	.word	0x431bde83

08006b78 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006b78:	4a02      	ldr	r2, [pc, #8]	; (8006b84 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006b7a:	6893      	ldr	r3, [r2, #8]
 8006b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b80:	6093      	str	r3, [r2, #8]
}
 8006b82:	4770      	bx	lr
 8006b84:	40007000 	.word	0x40007000

08006b88 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f000 81c3 	beq.w	8006f14 <HAL_RCC_OscConfig+0x38c>
{
 8006b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b92:	6803      	ldr	r3, [r0, #0]
 8006b94:	07d9      	lsls	r1, r3, #31
{
 8006b96:	b082      	sub	sp, #8
 8006b98:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b9a:	d52d      	bpl.n	8006bf8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9c:	49b5      	ldr	r1, [pc, #724]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006b9e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ba0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ba2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ba6:	2a0c      	cmp	r2, #12
 8006ba8:	f000 810a 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x238>
 8006bac:	2a08      	cmp	r2, #8
 8006bae:	f000 810c 	beq.w	8006dca <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	f000 8133 	beq.w	8006e22 <HAL_RCC_OscConfig+0x29a>
 8006bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc0:	f000 819b 	beq.w	8006efa <HAL_RCC_OscConfig+0x372>
 8006bc4:	4dab      	ldr	r5, [pc, #684]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006bc6:	682a      	ldr	r2, [r5, #0]
 8006bc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	682a      	ldr	r2, [r5, #0]
 8006bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bd4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 8128 	bne.w	8006e2c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fd ffac 	bl	8004b38 <HAL_GetTick>
 8006be0:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006be2:	e005      	b.n	8006bf0 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fd ffa8 	bl	8004b38 <HAL_GetTick>
 8006be8:	1b80      	subs	r0, r0, r6
 8006bea:	2864      	cmp	r0, #100	; 0x64
 8006bec:	f200 813b 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	039f      	lsls	r7, r3, #14
 8006bf4:	d4f6      	bmi.n	8006be4 <HAL_RCC_OscConfig+0x5c>
 8006bf6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bf8:	079e      	lsls	r6, r3, #30
 8006bfa:	d528      	bpl.n	8006c4e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bfc:	4a9d      	ldr	r2, [pc, #628]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006bfe:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c00:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c02:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	f000 80ec 	beq.w	8006de4 <HAL_RCC_OscConfig+0x25c>
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	f000 80ee 	beq.w	8006dee <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c12:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c14:	4d97      	ldr	r5, [pc, #604]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8116 	beq.w	8006e48 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c22:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fd ff88 	bl	8004b38 <HAL_GetTick>
 8006c28:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c2a:	e005      	b.n	8006c38 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2c:	f7fd ff84 	bl	8004b38 <HAL_GetTick>
 8006c30:	1b80      	subs	r0, r0, r6
 8006c32:	2802      	cmp	r0, #2
 8006c34:	f200 8117 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	0558      	lsls	r0, r3, #21
 8006c3c:	d5f6      	bpl.n	8006c2c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3e:	686b      	ldr	r3, [r5, #4]
 8006c40:	6922      	ldr	r2, [r4, #16]
 8006c42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006c4a:	606b      	str	r3, [r5, #4]
 8006c4c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c4e:	071a      	lsls	r2, r3, #28
 8006c50:	d519      	bpl.n	8006c86 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c52:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c54:	4d87      	ldr	r5, [pc, #540]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 809e 	beq.w	8006d98 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006c5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c68:	f7fd ff66 	bl	8004b38 <HAL_GetTick>
 8006c6c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c6e:	e005      	b.n	8006c7c <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c70:	f7fd ff62 	bl	8004b38 <HAL_GetTick>
 8006c74:	1b80      	subs	r0, r0, r6
 8006c76:	2802      	cmp	r0, #2
 8006c78:	f200 80f5 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c7c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006c80:	079f      	lsls	r7, r3, #30
 8006c82:	d5f5      	bpl.n	8006c70 <HAL_RCC_OscConfig+0xe8>
 8006c84:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c86:	0759      	lsls	r1, r3, #29
 8006c88:	d541      	bpl.n	8006d0e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c8e:	00d2      	lsls	r2, r2, #3
 8006c90:	f100 80ed 	bmi.w	8006e6e <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006ca6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ca8:	4e73      	ldr	r6, [pc, #460]	; (8006e78 <HAL_RCC_OscConfig+0x2f0>)
 8006caa:	6833      	ldr	r3, [r6, #0]
 8006cac:	05df      	lsls	r7, r3, #23
 8006cae:	f140 8113 	bpl.w	8006ed8 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cb2:	68a3      	ldr	r3, [r4, #8]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	f000 80e3 	beq.w	8006e80 <HAL_RCC_OscConfig+0x2f8>
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	f000 8169 	beq.w	8006f92 <HAL_RCC_OscConfig+0x40a>
 8006cc0:	4e6c      	ldr	r6, [pc, #432]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006cc2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8006cce:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006cd2:	f022 0204 	bic.w	r2, r2, #4
 8006cd6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 80d7 	bne.w	8006e8e <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce0:	f7fd ff2a 	bl	8004b38 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006ce8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cea:	e005      	b.n	8006cf8 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cec:	f7fd ff24 	bl	8004b38 <HAL_GetTick>
 8006cf0:	1bc0      	subs	r0, r0, r7
 8006cf2:	4540      	cmp	r0, r8
 8006cf4:	f200 80b7 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006cfc:	079a      	lsls	r2, r3, #30
 8006cfe:	d4f5      	bmi.n	8006cec <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d00:	b125      	cbz	r5, 8006d0c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d02:	4a5c      	ldr	r2, [pc, #368]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006d04:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d0c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d0e:	069b      	lsls	r3, r3, #26
 8006d10:	d518      	bpl.n	8006d44 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d12:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d14:	4d57      	ldr	r5, [pc, #348]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80ca 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006d1c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fd ff06 	bl	8004b38 <HAL_GetTick>
 8006d2c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d2e:	e005      	b.n	8006d3c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d30:	f7fd ff02 	bl	8004b38 <HAL_GetTick>
 8006d34:	1b80      	subs	r0, r0, r6
 8006d36:	2802      	cmp	r0, #2
 8006d38:	f200 8095 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d3c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006d40:	079f      	lsls	r7, r3, #30
 8006d42:	d5f5      	bpl.n	8006d30 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d44:	69e0      	ldr	r0, [r4, #28]
 8006d46:	b318      	cbz	r0, 8006d90 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d48:	4d4a      	ldr	r5, [pc, #296]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006d4a:	68ab      	ldr	r3, [r5, #8]
 8006d4c:	f003 030c 	and.w	r3, r3, #12
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	f000 812c 	beq.w	8006fae <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d58:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d5e:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d60:	f000 80da 	beq.w	8006f18 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006d64:	68eb      	ldr	r3, [r5, #12]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d6c:	68eb      	ldr	r3, [r5, #12]
 8006d6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d76:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fd fede 	bl	8004b38 <HAL_GetTick>
 8006d7c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7e:	e004      	b.n	8006d8a <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d80:	f7fd feda 	bl	8004b38 <HAL_GetTick>
 8006d84:	1b00      	subs	r0, r0, r4
 8006d86:	2802      	cmp	r0, #2
 8006d88:	d86d      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	019b      	lsls	r3, r3, #6
 8006d8e:	d4f7      	bmi.n	8006d80 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006d90:	2000      	movs	r0, #0
}
 8006d92:	b002      	add	sp, #8
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006d98:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006da4:	f7fd fec8 	bl	8004b38 <HAL_GetTick>
 8006da8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006daa:	e004      	b.n	8006db6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dac:	f7fd fec4 	bl	8004b38 <HAL_GetTick>
 8006db0:	1b80      	subs	r0, r0, r6
 8006db2:	2802      	cmp	r0, #2
 8006db4:	d857      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006db6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006dba:	0798      	lsls	r0, r3, #30
 8006dbc:	d4f6      	bmi.n	8006dac <HAL_RCC_OscConfig+0x224>
 8006dbe:	e761      	b.n	8006c84 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dc0:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dc4:	2903      	cmp	r1, #3
 8006dc6:	f47f aef4 	bne.w	8006bb2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dca:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	0392      	lsls	r2, r2, #14
 8006dd0:	f57f af12 	bpl.w	8006bf8 <HAL_RCC_OscConfig+0x70>
 8006dd4:	6862      	ldr	r2, [r4, #4]
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	f47f af0e 	bne.w	8006bf8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006ddc:	2001      	movs	r0, #1
}
 8006dde:	b002      	add	sp, #8
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006de4:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006de8:	2a02      	cmp	r2, #2
 8006dea:	f47f af12 	bne.w	8006c12 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dee:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	055d      	lsls	r5, r3, #21
 8006df4:	d502      	bpl.n	8006dfc <HAL_RCC_OscConfig+0x274>
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ef      	beq.n	8006ddc <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006dfe:	6920      	ldr	r0, [r4, #16]
 8006e00:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e02:	491e      	ldr	r1, [pc, #120]	; (8006e7c <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006e0c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e0e:	6808      	ldr	r0, [r1, #0]
 8006e10:	f7fd fe50 	bl	8004ab4 <HAL_InitTick>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d1e1      	bne.n	8006ddc <HAL_RCC_OscConfig+0x254>
 8006e18:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e1a:	071a      	lsls	r2, r3, #28
 8006e1c:	f57f af33 	bpl.w	8006c86 <HAL_RCC_OscConfig+0xfe>
 8006e20:	e717      	b.n	8006c52 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e22:	4a14      	ldr	r2, [pc, #80]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006e2c:	f7fd fe84 	bl	8004b38 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e30:	4e10      	ldr	r6, [pc, #64]	; (8006e74 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8006e32:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e34:	e004      	b.n	8006e40 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e36:	f7fd fe7f 	bl	8004b38 <HAL_GetTick>
 8006e3a:	1b40      	subs	r0, r0, r5
 8006e3c:	2864      	cmp	r0, #100	; 0x64
 8006e3e:	d812      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	039b      	lsls	r3, r3, #14
 8006e44:	d5f7      	bpl.n	8006e36 <HAL_RCC_OscConfig+0x2ae>
 8006e46:	e6d6      	b.n	8006bf6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e50:	f7fd fe72 	bl	8004b38 <HAL_GetTick>
 8006e54:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e56:	682b      	ldr	r3, [r5, #0]
 8006e58:	0559      	lsls	r1, r3, #21
 8006e5a:	d5dd      	bpl.n	8006e18 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5c:	f7fd fe6c 	bl	8004b38 <HAL_GetTick>
 8006e60:	1b80      	subs	r0, r0, r6
 8006e62:	2802      	cmp	r0, #2
 8006e64:	d9f7      	bls.n	8006e56 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006e66:	2003      	movs	r0, #3
}
 8006e68:	b002      	add	sp, #8
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006e6e:	2500      	movs	r5, #0
 8006e70:	e71a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x120>
 8006e72:	bf00      	nop
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40007000 	.word	0x40007000
 8006e7c:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e80:	4a65      	ldr	r2, [pc, #404]	; (8007018 <HAL_RCC_OscConfig+0x490>)
 8006e82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006e8e:	f7fd fe53 	bl	8004b38 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e92:	4f61      	ldr	r7, [pc, #388]	; (8007018 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006e94:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fd fe4c 	bl	8004b38 <HAL_GetTick>
 8006ea0:	1b80      	subs	r0, r0, r6
 8006ea2:	4540      	cmp	r0, r8
 8006ea4:	d8df      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eaa:	0799      	lsls	r1, r3, #30
 8006eac:	d5f6      	bpl.n	8006e9c <HAL_RCC_OscConfig+0x314>
 8006eae:	e727      	b.n	8006d00 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006eb0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006ebc:	f7fd fe3c 	bl	8004b38 <HAL_GetTick>
 8006ec0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ec2:	e004      	b.n	8006ece <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ec4:	f7fd fe38 	bl	8004b38 <HAL_GetTick>
 8006ec8:	1b80      	subs	r0, r0, r6
 8006eca:	2802      	cmp	r0, #2
 8006ecc:	d8cb      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ece:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006ed2:	0798      	lsls	r0, r3, #30
 8006ed4:	d4f6      	bmi.n	8006ec4 <HAL_RCC_OscConfig+0x33c>
 8006ed6:	e735      	b.n	8006d44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ede:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006ee0:	f7fd fe2a 	bl	8004b38 <HAL_GetTick>
 8006ee4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ee6:	6833      	ldr	r3, [r6, #0]
 8006ee8:	05d8      	lsls	r0, r3, #23
 8006eea:	f53f aee2 	bmi.w	8006cb2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eee:	f7fd fe23 	bl	8004b38 <HAL_GetTick>
 8006ef2:	1bc0      	subs	r0, r0, r7
 8006ef4:	2802      	cmp	r0, #2
 8006ef6:	d9f6      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x35e>
 8006ef8:	e7b5      	b.n	8006e66 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006efe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f10:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f12:	e78b      	b.n	8006e2c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006f14:	2001      	movs	r0, #1
}
 8006f16:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006f18:	f7fd fe0e 	bl	8004b38 <HAL_GetTick>
 8006f1c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f1e:	e004      	b.n	8006f2a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fd fe0a 	bl	8004b38 <HAL_GetTick>
 8006f24:	1b80      	subs	r0, r0, r6
 8006f26:	2802      	cmp	r0, #2
 8006f28:	d89d      	bhi.n	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	0199      	lsls	r1, r3, #6
 8006f2e:	d4f7      	bmi.n	8006f20 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f30:	68e9      	ldr	r1, [r5, #12]
 8006f32:	4b3a      	ldr	r3, [pc, #232]	; (800701c <HAL_RCC_OscConfig+0x494>)
 8006f34:	6a22      	ldr	r2, [r4, #32]
 8006f36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f3c:	400b      	ands	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006f44:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006f48:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006f4c:	3801      	subs	r0, #1
 8006f4e:	0849      	lsrs	r1, r1, #1
 8006f50:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006f54:	3901      	subs	r1, #1
 8006f56:	0852      	lsrs	r2, r2, #1
 8006f58:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006f5c:	3a01      	subs	r2, #1
 8006f5e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006f62:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006f64:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f66:	4e2c      	ldr	r6, [pc, #176]	; (8007018 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f6c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f6e:	68eb      	ldr	r3, [r5, #12]
 8006f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f74:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006f76:	f7fd fddf 	bl	8004b38 <HAL_GetTick>
 8006f7a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7c:	e005      	b.n	8006f8a <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7e:	f7fd fddb 	bl	8004b38 <HAL_GetTick>
 8006f82:	1b00      	subs	r0, r0, r4
 8006f84:	2802      	cmp	r0, #2
 8006f86:	f63f af6e 	bhi.w	8006e66 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f8a:	6833      	ldr	r3, [r6, #0]
 8006f8c:	019a      	lsls	r2, r3, #6
 8006f8e:	d5f6      	bpl.n	8006f7e <HAL_RCC_OscConfig+0x3f6>
 8006f90:	e6fe      	b.n	8006d90 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <HAL_RCC_OscConfig+0x490>)
 8006f94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f98:	f042 0204 	orr.w	r2, r2, #4
 8006f9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006fa0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fac:	e76f      	b.n	8006e8e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fae:	2801      	cmp	r0, #1
 8006fb0:	f43f aeef 	beq.w	8006d92 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006fb4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb6:	6a22      	ldr	r2, [r4, #32]
 8006fb8:	f003 0103 	and.w	r1, r3, #3
 8006fbc:	4291      	cmp	r1, r2
 8006fbe:	f47f af0d 	bne.w	8006ddc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fc8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fca:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006fce:	f47f af05 	bne.w	8006ddc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006fd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fd8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006fdc:	f47f aefe 	bne.w	8006ddc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fe0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006fe2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fe6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006fea:	f47f aef7 	bne.w	8006ddc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006ff0:	0852      	lsrs	r2, r2, #1
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ff8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006ffc:	f47f aeee 	bne.w	8006ddc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007000:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007002:	0852      	lsrs	r2, r2, #1
 8007004:	3a01      	subs	r2, #1
 8007006:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800700a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800700e:	bf14      	ite	ne
 8007010:	2001      	movne	r0, #1
 8007012:	2000      	moveq	r0, #0
 8007014:	e6bd      	b.n	8006d92 <HAL_RCC_OscConfig+0x20a>
 8007016:	bf00      	nop
 8007018:	40021000 	.word	0x40021000
 800701c:	019f800c 	.word	0x019f800c

08007020 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <HAL_RCC_GetSysClockFreq+0x64>)
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	f002 020c 	and.w	r2, r2, #12
 8007028:	2a04      	cmp	r2, #4
 800702a:	d027      	beq.n	800707c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	f002 020c 	and.w	r2, r2, #12
 8007032:	2a08      	cmp	r2, #8
 8007034:	d024      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	f002 020c 	and.w	r2, r2, #12
 800703c:	2a0c      	cmp	r2, #12
 800703e:	d001      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007040:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007042:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007044:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007046:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007048:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800704a:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800704e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8007052:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007054:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007058:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800705c:	bf0c      	ite	eq
 800705e:	480a      	ldreq	r0, [pc, #40]	; (8007088 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007060:	480a      	ldrne	r0, [pc, #40]	; (800708c <HAL_RCC_GetSysClockFreq+0x6c>)
 8007062:	fbb0 f0f2 	udiv	r0, r0, r2
 8007066:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <HAL_RCC_GetSysClockFreq+0x64>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007072:	3301      	adds	r3, #1
 8007074:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007076:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800707a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800707c:	4803      	ldr	r0, [pc, #12]	; (800708c <HAL_RCC_GetSysClockFreq+0x6c>)
 800707e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <HAL_RCC_GetSysClockFreq+0x68>)
 8007082:	4770      	bx	lr
 8007084:	40021000 	.word	0x40021000
 8007088:	007a1200 	.word	0x007a1200
 800708c:	00f42400 	.word	0x00f42400

08007090 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007090:	2800      	cmp	r0, #0
 8007092:	f000 80ef 	beq.w	8007274 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007096:	4a7f      	ldr	r2, [pc, #508]	; (8007294 <HAL_RCC_ClockConfig+0x204>)
{
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800709c:	6813      	ldr	r3, [r2, #0]
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	428b      	cmp	r3, r1
 80070a4:	460d      	mov	r5, r1
 80070a6:	4604      	mov	r4, r0
 80070a8:	d20c      	bcs.n	80070c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	f023 030f 	bic.w	r3, r3, #15
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	428b      	cmp	r3, r1
 80070bc:	d002      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80070be:	2001      	movs	r0, #1
}
 80070c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07de      	lsls	r6, r3, #31
 80070c8:	d563      	bpl.n	8007192 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ca:	6862      	ldr	r2, [r4, #4]
 80070cc:	2a03      	cmp	r2, #3
 80070ce:	f000 809a 	beq.w	8007206 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d2:	4b71      	ldr	r3, [pc, #452]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d4:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d8:	f000 8091 	beq.w	80071fe <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070dc:	055b      	lsls	r3, r3, #21
 80070de:	d5ee      	bpl.n	80070be <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070e0:	f7ff ff9e 	bl	8007020 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80070e4:	4b6d      	ldr	r3, [pc, #436]	; (800729c <HAL_RCC_ClockConfig+0x20c>)
 80070e6:	4298      	cmp	r0, r3
 80070e8:	f200 80c6 	bhi.w	8007278 <HAL_RCC_ClockConfig+0x1e8>
 80070ec:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80070ee:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4e69      	ldr	r6, [pc, #420]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 80070f4:	68b3      	ldr	r3, [r6, #8]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	431a      	orrs	r2, r3
 80070fc:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80070fe:	f7fd fd1b 	bl	8004b38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007102:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007106:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007108:	e004      	b.n	8007114 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710a:	f7fd fd15 	bl	8004b38 <HAL_GetTick>
 800710e:	1bc0      	subs	r0, r0, r7
 8007110:	4540      	cmp	r0, r8
 8007112:	d871      	bhi.n	80071f8 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007114:	68b3      	ldr	r3, [r6, #8]
 8007116:	6862      	ldr	r2, [r4, #4]
 8007118:	f003 030c 	and.w	r3, r3, #12
 800711c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007120:	d1f3      	bne.n	800710a <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	079f      	lsls	r7, r3, #30
 8007126:	d436      	bmi.n	8007196 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8007128:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800712c:	d103      	bne.n	8007136 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800712e:	68b3      	ldr	r3, [r6, #8]
 8007130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007134:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007136:	4e57      	ldr	r6, [pc, #348]	; (8007294 <HAL_RCC_ClockConfig+0x204>)
 8007138:	6833      	ldr	r3, [r6, #0]
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	42ab      	cmp	r3, r5
 8007140:	d846      	bhi.n	80071d0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	075a      	lsls	r2, r3, #29
 8007146:	d506      	bpl.n	8007156 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007148:	4953      	ldr	r1, [pc, #332]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 800714a:	68e0      	ldr	r0, [r4, #12]
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007152:	4302      	orrs	r2, r0
 8007154:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007156:	071b      	lsls	r3, r3, #28
 8007158:	d507      	bpl.n	800716a <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800715a:	4a4f      	ldr	r2, [pc, #316]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 800715c:	6921      	ldr	r1, [r4, #16]
 800715e:	6893      	ldr	r3, [r2, #8]
 8007160:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007164:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007168:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800716a:	f7ff ff59 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800716e:	4a4a      	ldr	r2, [pc, #296]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 8007170:	4c4b      	ldr	r4, [pc, #300]	; (80072a0 <HAL_RCC_ClockConfig+0x210>)
 8007172:	6892      	ldr	r2, [r2, #8]
 8007174:	494b      	ldr	r1, [pc, #300]	; (80072a4 <HAL_RCC_ClockConfig+0x214>)
 8007176:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800717a:	4603      	mov	r3, r0
 800717c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800717e:	484a      	ldr	r0, [pc, #296]	; (80072a8 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007180:	f002 021f 	and.w	r2, r2, #31
 8007184:	40d3      	lsrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007188:	6800      	ldr	r0, [r0, #0]
}
 800718a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800718e:	f7fd bc91 	b.w	8004ab4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007192:	0798      	lsls	r0, r3, #30
 8007194:	d5cf      	bpl.n	8007136 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007196:	0758      	lsls	r0, r3, #29
 8007198:	d504      	bpl.n	80071a4 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800719a:	493f      	ldr	r1, [pc, #252]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80071a2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a4:	0719      	lsls	r1, r3, #28
 80071a6:	d506      	bpl.n	80071b6 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80071a8:	4a3b      	ldr	r2, [pc, #236]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 80071aa:	6893      	ldr	r3, [r2, #8]
 80071ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071b6:	4a38      	ldr	r2, [pc, #224]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 80071b8:	68a1      	ldr	r1, [r4, #8]
 80071ba:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071bc:	4e35      	ldr	r6, [pc, #212]	; (8007294 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c2:	430b      	orrs	r3, r1
 80071c4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071c6:	6833      	ldr	r3, [r6, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	d9b8      	bls.n	8007142 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	f023 030f 	bic.w	r3, r3, #15
 80071d6:	432b      	orrs	r3, r5
 80071d8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80071da:	f7fd fcad 	bl	8004b38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071de:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80071e2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	d0a9      	beq.n	8007142 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ee:	f7fd fca3 	bl	8004b38 <HAL_GetTick>
 80071f2:	1bc0      	subs	r0, r0, r7
 80071f4:	4540      	cmp	r0, r8
 80071f6:	d9f5      	bls.n	80071e4 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80071f8:	2003      	movs	r0, #3
}
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071fe:	039a      	lsls	r2, r3, #14
 8007200:	f53f af6e 	bmi.w	80070e0 <HAL_RCC_ClockConfig+0x50>
 8007204:	e75b      	b.n	80070be <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007206:	4824      	ldr	r0, [pc, #144]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 8007208:	6801      	ldr	r1, [r0, #0]
 800720a:	0189      	lsls	r1, r1, #6
 800720c:	f57f af57 	bpl.w	80070be <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007210:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007212:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007214:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007216:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800721a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 800721e:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007220:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007224:	bf0c      	ite	eq
 8007226:	4921      	ldreq	r1, [pc, #132]	; (80072ac <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007228:	4921      	ldrne	r1, [pc, #132]	; (80072b0 <HAL_RCC_ClockConfig+0x220>)
 800722a:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800722e:	4e1a      	ldr	r6, [pc, #104]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8007230:	4f1a      	ldr	r7, [pc, #104]	; (800729c <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007232:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007236:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800723a:	68f0      	ldr	r0, [r6, #12]
 800723c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8007240:	3001      	adds	r0, #1
 8007242:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8007244:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8007248:	42b9      	cmp	r1, r7
 800724a:	d920      	bls.n	800728e <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800724c:	68b1      	ldr	r1, [r6, #8]
 800724e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8007252:	d005      	beq.n	8007260 <HAL_RCC_ClockConfig+0x1d0>
 8007254:	f013 0902 	ands.w	r9, r3, #2
 8007258:	f43f af4b 	beq.w	80070f2 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	b9b3      	cbnz	r3, 800728e <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007260:	490d      	ldr	r1, [pc, #52]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 8007262:	688b      	ldr	r3, [r1, #8]
 8007264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 800726e:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007272:	e73e      	b.n	80070f2 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8007274:	2001      	movs	r0, #1
}
 8007276:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007278:	4a07      	ldr	r2, [pc, #28]	; (8007298 <HAL_RCC_ClockConfig+0x208>)
 800727a:	6893      	ldr	r3, [r2, #8]
 800727c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	f04f 0980 	mov.w	r9, #128	; 0x80
 800728c:	e731      	b.n	80070f2 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800728e:	f04f 0900 	mov.w	r9, #0
 8007292:	e72e      	b.n	80070f2 <HAL_RCC_ClockConfig+0x62>
 8007294:	40022000 	.word	0x40022000
 8007298:	40021000 	.word	0x40021000
 800729c:	04c4b400 	.word	0x04c4b400
 80072a0:	0800f684 	.word	0x0800f684
 80072a4:	20000000 	.word	0x20000000
 80072a8:	20000008 	.word	0x20000008
 80072ac:	007a1200 	.word	0x007a1200
 80072b0:	00f42400 	.word	0x00f42400

080072b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80072b6:	4a06      	ldr	r2, [pc, #24]	; (80072d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80072b8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80072ba:	4906      	ldr	r1, [pc, #24]	; (80072d4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80072c0:	6808      	ldr	r0, [r1, #0]
 80072c2:	5cd3      	ldrb	r3, [r2, r3]
 80072c4:	f003 031f 	and.w	r3, r3, #31
}
 80072c8:	40d8      	lsrs	r0, r3
 80072ca:	4770      	bx	lr
 80072cc:	40021000 	.word	0x40021000
 80072d0:	0800f694 	.word	0x0800f694
 80072d4:	20000000 	.word	0x20000000

080072d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80072da:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80072dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80072de:	4906      	ldr	r1, [pc, #24]	; (80072f8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80072e4:	6808      	ldr	r0, [r1, #0]
 80072e6:	5cd3      	ldrb	r3, [r2, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
}
 80072ec:	40d8      	lsrs	r0, r3
 80072ee:	4770      	bx	lr
 80072f0:	40021000 	.word	0x40021000
 80072f4:	0800f694 	.word	0x0800f694
 80072f8:	20000000 	.word	0x20000000

080072fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007300:	6803      	ldr	r3, [r0, #0]
{
 8007302:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007304:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007308:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800730a:	d056      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730c:	4bb6      	ldr	r3, [pc, #728]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800730e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007310:	00d5      	lsls	r5, r2, #3
 8007312:	f140 813e 	bpl.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8007316:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007318:	4db4      	ldr	r5, [pc, #720]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007320:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007322:	f7fd fc09 	bl	8004b38 <HAL_GetTick>
 8007326:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007328:	e005      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800732a:	f7fd fc05 	bl	8004b38 <HAL_GetTick>
 800732e:	1b83      	subs	r3, r0, r6
 8007330:	2b02      	cmp	r3, #2
 8007332:	f200 8139 	bhi.w	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	05d8      	lsls	r0, r3, #23
 800733a:	d5f6      	bpl.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800733c:	4daa      	ldr	r5, [pc, #680]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800733e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007342:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007346:	d027      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007348:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800734a:	429a      	cmp	r2, r3
 800734c:	d025      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800734e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007352:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800735e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007362:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800736a:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800736c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007370:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007374:	f140 8148 	bpl.w	8007608 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fd fbde 	bl	8004b38 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007380:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007382:	e005      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007384:	f7fd fbd8 	bl	8004b38 <HAL_GetTick>
 8007388:	1b80      	subs	r0, r0, r6
 800738a:	4540      	cmp	r0, r8
 800738c:	f200 810c 	bhi.w	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007390:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007394:	079b      	lsls	r3, r3, #30
 8007396:	d5f5      	bpl.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007398:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800739a:	4993      	ldr	r1, [pc, #588]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800739c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80073a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073aa:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073ac:	b127      	cbz	r7, 80073b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ae:	4a8e      	ldr	r2, [pc, #568]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80073b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073b6:	6593      	str	r3, [r2, #88]	; 0x58
 80073b8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073ba:	07dd      	lsls	r5, r3, #31
 80073bc:	d508      	bpl.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073be:	498a      	ldr	r1, [pc, #552]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073c0:	6865      	ldr	r5, [r4, #4]
 80073c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80073c6:	f022 0203 	bic.w	r2, r2, #3
 80073ca:	432a      	orrs	r2, r5
 80073cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d0:	0799      	lsls	r1, r3, #30
 80073d2:	d508      	bpl.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d4:	4984      	ldr	r1, [pc, #528]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073d6:	68a5      	ldr	r5, [r4, #8]
 80073d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80073dc:	f022 020c 	bic.w	r2, r2, #12
 80073e0:	432a      	orrs	r2, r5
 80073e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073e6:	075a      	lsls	r2, r3, #29
 80073e8:	d508      	bpl.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073ea:	497f      	ldr	r1, [pc, #508]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073ec:	68e5      	ldr	r5, [r4, #12]
 80073ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80073f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80073f6:	432a      	orrs	r2, r5
 80073f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073fc:	071f      	lsls	r7, r3, #28
 80073fe:	d508      	bpl.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007400:	4979      	ldr	r1, [pc, #484]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007402:	6925      	ldr	r5, [r4, #16]
 8007404:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007408:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800740c:	432a      	orrs	r2, r5
 800740e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007412:	06de      	lsls	r6, r3, #27
 8007414:	d508      	bpl.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007416:	4974      	ldr	r1, [pc, #464]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007418:	6965      	ldr	r5, [r4, #20]
 800741a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800741e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007422:	432a      	orrs	r2, r5
 8007424:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007428:	069d      	lsls	r5, r3, #26
 800742a:	d508      	bpl.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800742c:	496e      	ldr	r1, [pc, #440]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800742e:	69a5      	ldr	r5, [r4, #24]
 8007430:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007434:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007438:	432a      	orrs	r2, r5
 800743a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800743e:	0659      	lsls	r1, r3, #25
 8007440:	d508      	bpl.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007442:	4969      	ldr	r1, [pc, #420]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007444:	69e5      	ldr	r5, [r4, #28]
 8007446:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800744a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800744e:	432a      	orrs	r2, r5
 8007450:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007454:	061a      	lsls	r2, r3, #24
 8007456:	d508      	bpl.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007458:	4963      	ldr	r1, [pc, #396]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800745a:	6a25      	ldr	r5, [r4, #32]
 800745c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007460:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007464:	432a      	orrs	r2, r5
 8007466:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800746a:	05df      	lsls	r7, r3, #23
 800746c:	d508      	bpl.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800746e:	495e      	ldr	r1, [pc, #376]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007470:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007472:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007476:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800747a:	432a      	orrs	r2, r5
 800747c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007480:	039e      	lsls	r6, r3, #14
 8007482:	d508      	bpl.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007484:	4958      	ldr	r1, [pc, #352]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007486:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007488:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800748c:	f022 0203 	bic.w	r2, r2, #3
 8007490:	432a      	orrs	r2, r5
 8007492:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007496:	059d      	lsls	r5, r3, #22
 8007498:	d508      	bpl.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800749a:	4953      	ldr	r1, [pc, #332]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800749c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800749e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80074a6:	432a      	orrs	r2, r5
 80074a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074ac:	0559      	lsls	r1, r3, #21
 80074ae:	d50b      	bpl.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074b0:	494d      	ldr	r1, [pc, #308]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80074b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80074b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80074bc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074be:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074c6:	d071      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074c8:	051a      	lsls	r2, r3, #20
 80074ca:	d50b      	bpl.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074cc:	4946      	ldr	r1, [pc, #280]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80074ce:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80074d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074d4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80074d8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80074da:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80074e2:	d068      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074e4:	04df      	lsls	r7, r3, #19
 80074e6:	d50b      	bpl.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074e8:	493f      	ldr	r1, [pc, #252]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80074ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80074ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80074f4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074f6:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074fe:	d05f      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007500:	049e      	lsls	r6, r3, #18
 8007502:	d50b      	bpl.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007504:	4938      	ldr	r1, [pc, #224]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007506:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007508:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800750c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007510:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007512:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007516:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800751a:	d056      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800751c:	045d      	lsls	r5, r3, #17
 800751e:	d50b      	bpl.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007520:	4931      	ldr	r1, [pc, #196]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007522:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007524:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007528:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800752c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800752e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007532:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007536:	d04d      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007538:	0419      	lsls	r1, r3, #16
 800753a:	d50b      	bpl.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800753c:	492a      	ldr	r1, [pc, #168]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800753e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007540:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007548:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800754a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800754e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007552:	d044      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007554:	03da      	lsls	r2, r3, #15
 8007556:	d50b      	bpl.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007558:	4923      	ldr	r1, [pc, #140]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800755a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800755c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007560:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007564:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007566:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800756a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800756e:	d03f      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007570:	035b      	lsls	r3, r3, #13
 8007572:	d50b      	bpl.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007574:	4a1c      	ldr	r2, [pc, #112]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007576:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007578:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800757c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007580:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007582:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007586:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800758a:	d036      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800758c:	b002      	add	sp, #8
 800758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007594:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007598:	659a      	str	r2, [r3, #88]	; 0x58
 800759a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80075a4:	2701      	movs	r7, #1
 80075a6:	e6b7      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80075a8:	2003      	movs	r0, #3
 80075aa:	e6ff      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075ac:	68ca      	ldr	r2, [r1, #12]
 80075ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075b2:	60ca      	str	r2, [r1, #12]
 80075b4:	e788      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075b6:	68ca      	ldr	r2, [r1, #12]
 80075b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075bc:	60ca      	str	r2, [r1, #12]
 80075be:	e791      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c0:	68ca      	ldr	r2, [r1, #12]
 80075c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075c6:	60ca      	str	r2, [r1, #12]
 80075c8:	e79a      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075ca:	68ca      	ldr	r2, [r1, #12]
 80075cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075d0:	60ca      	str	r2, [r1, #12]
 80075d2:	e7a3      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d4:	68ca      	ldr	r2, [r1, #12]
 80075d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075da:	60ca      	str	r2, [r1, #12]
 80075dc:	e7ac      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075de:	68ca      	ldr	r2, [r1, #12]
 80075e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075e4:	60ca      	str	r2, [r1, #12]
 80075e6:	e7b5      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075f0:	68ca      	ldr	r2, [r1, #12]
 80075f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075f6:	60ca      	str	r2, [r1, #12]
 80075f8:	e7ba      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075fa:	68d3      	ldr	r3, [r2, #12]
 80075fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007600:	60d3      	str	r3, [r2, #12]
}
 8007602:	b002      	add	sp, #8
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	4613      	mov	r3, r2
 800760a:	e6c6      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x9e>

0800760c <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760e:	b083      	sub	sp, #12
 8007610:	460c      	mov	r4, r1
 8007612:	4617      	mov	r7, r2
 8007614:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007616:	f7fd fa8f 	bl	8004b38 <HAL_GetTick>
 800761a:	4427      	add	r7, r4
 800761c:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 800761e:	f7fd fa8b 	bl	8004b38 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800762a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800762e:	0d1b      	lsrs	r3, r3, #20
 8007630:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8007634:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007636:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007638:	682a      	ldr	r2, [r5, #0]
 800763a:	1c61      	adds	r1, r4, #1
 800763c:	6893      	ldr	r3, [r2, #8]
 800763e:	d10d      	bne.n	800765c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8007640:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007644:	d007      	beq.n	8007656 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007646:	7b13      	ldrb	r3, [r2, #12]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800764c:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800764e:	6893      	ldr	r3, [r2, #8]
 8007650:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007654:	d1f7      	bne.n	8007646 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8007656:	2000      	movs	r0, #0
}
 8007658:	b003      	add	sp, #12
 800765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800765c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007660:	d0f9      	beq.n	8007656 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007662:	7b13      	ldrb	r3, [r2, #12]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8007668:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800766a:	f7fd fa65 	bl	8004b38 <HAL_GetTick>
 800766e:	1bc0      	subs	r0, r0, r7
 8007670:	42b0      	cmp	r0, r6
 8007672:	d208      	bcs.n	8007686 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8007674:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007676:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007678:	2a00      	cmp	r2, #0
      count--;
 800767a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800767e:	bf08      	it	eq
 8007680:	2600      	moveq	r6, #0
      count--;
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	e7d8      	b.n	8007638 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007686:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800768a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800768c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007694:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007696:	d014      	beq.n	80076c2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007698:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800769a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800769e:	d007      	beq.n	80076b0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 80076a0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80076a2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80076a4:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80076a8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80076ac:	2003      	movs	r0, #3
 80076ae:	e7d3      	b.n	8007658 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e7ee      	b.n	80076a0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c2:	68aa      	ldr	r2, [r5, #8]
 80076c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80076c8:	d002      	beq.n	80076d0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80076ce:	d1e3      	bne.n	8007698 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e7de      	b.n	8007698 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 80076da:	bf00      	nop
 80076dc:	20000000 	.word	0x20000000

080076e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	eb01 0802 	add.w	r8, r1, r2
 80076ea:	460d      	mov	r5, r1
 80076ec:	4616      	mov	r6, r2
 80076ee:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076f0:	f7fd fa22 	bl	8004b38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076f4:	4f46      	ldr	r7, [pc, #280]	; (8007810 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076f6:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 80076fa:	f7fd fa1d 	bl	8004b38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007704:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800770e:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007710:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007712:	1c68      	adds	r0, r5, #1
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	d11f      	bne.n	8007758 <SPI_EndRxTxTransaction+0x78>
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800771e:	d1fb      	bne.n	8007718 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007720:	f7fd fa0a 	bl	8004b38 <HAL_GetTick>
 8007724:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8007728:	f7fd fa06 	bl	8004b38 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007732:	fb08 f303 	mul.w	r3, r8, r3
 8007736:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8007738:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800773a:	1c69      	adds	r1, r5, #1
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	d11f      	bne.n	8007780 <SPI_EndRxTxTransaction+0xa0>
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	0612      	lsls	r2, r2, #24
 8007744:	d4fc      	bmi.n	8007740 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007746:	4632      	mov	r2, r6
 8007748:	4629      	mov	r1, r5
 800774a:	4620      	mov	r0, r4
 800774c:	f7ff ff5e 	bl	800760c <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8007750:	bb40      	cbnz	r0, 80077a4 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007752:	b002      	add	sp, #8
 8007754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800775e:	d0df      	beq.n	8007720 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007760:	f7fd f9ea 	bl	8004b38 <HAL_GetTick>
 8007764:	eba0 000a 	sub.w	r0, r0, sl
 8007768:	4548      	cmp	r0, r9
 800776a:	d221      	bcs.n	80077b0 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 800776c:	9a00      	ldr	r2, [sp, #0]
      count--;
 800776e:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8007770:	2a00      	cmp	r2, #0
      count--;
 8007772:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007776:	bf08      	it	eq
 8007778:	f04f 0900 	moveq.w	r9, #0
      count--;
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	e7c8      	b.n	8007712 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	061b      	lsls	r3, r3, #24
 8007784:	d5df      	bpl.n	8007746 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007786:	f7fd f9d7 	bl	8004b38 <HAL_GetTick>
 800778a:	1bc3      	subs	r3, r0, r7
 800778c:	4543      	cmp	r3, r8
 800778e:	d20f      	bcs.n	80077b0 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8007790:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007792:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007794:	2a00      	cmp	r2, #0
      count--;
 8007796:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800779a:	bf08      	it	eq
 800779c:	f04f 0800 	moveq.w	r8, #0
      count--;
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	e7ca      	b.n	800773a <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80077a6:	f043 0320 	orr.w	r3, r3, #32
 80077aa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80077ac:	2003      	movs	r0, #3
 80077ae:	e7d0      	b.n	8007752 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b0:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077be:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c0:	d019      	beq.n	80077f6 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80077c4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80077c8:	d107      	bne.n	80077da <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077da:	2301      	movs	r3, #1
 80077dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80077e2:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e4:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80077e8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ea:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80077ec:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 80077f0:	b002      	add	sp, #8
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f6:	68a2      	ldr	r2, [r4, #8]
 80077f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80077fc:	d002      	beq.n	8007804 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007802:	d1de      	bne.n	80077c2 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e7d9      	b.n	80077c2 <SPI_EndRxTxTransaction+0xe2>
 800780e:	bf00      	nop
 8007810:	20000000 	.word	0x20000000

08007814 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007814:	2800      	cmp	r0, #0
 8007816:	d07f      	beq.n	8007918 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007818:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007822:	f1bc 0f00 	cmp.w	ip, #0
 8007826:	d05c      	beq.n	80078e2 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007828:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800782a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800782e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007832:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007834:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007838:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800783a:	2b00      	cmp	r3, #0
 800783c:	d05e      	beq.n	80078fc <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 800783e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007840:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007842:	2302      	movs	r3, #2
 8007844:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007848:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800784a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007854:	d94c      	bls.n	80078f0 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007856:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800785a:	d15f      	bne.n	800791c <HAL_SPI_Init+0x108>
 800785c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800785e:	2700      	movs	r7, #0
 8007860:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007864:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8007868:	6925      	ldr	r5, [r4, #16]
 800786a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800786e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8007872:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007876:	4333      	orrs	r3, r6
 8007878:	f005 0502 	and.w	r5, r5, #2
 800787c:	432b      	orrs	r3, r5
 800787e:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007880:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007884:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007888:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800788a:	432b      	orrs	r3, r5
 800788c:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007890:	f002 0208 	and.w	r2, r2, #8
 8007894:	ea42 0208 	orr.w	r2, r2, r8
 8007898:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800789c:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078a0:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a4:	ea43 030e 	orr.w	r3, r3, lr
 80078a8:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ac:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b0:	4333      	orrs	r3, r6
 80078b2:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078b6:	f00c 0c10 	and.w	ip, ip, #16
 80078ba:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078be:	432b      	orrs	r3, r5
 80078c0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078c2:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078c6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078c8:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ca:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078cc:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80078d2:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078d6:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078d8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 80078dc:	4610      	mov	r0, r2
}
 80078de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078e2:	6843      	ldr	r3, [r0, #4]
 80078e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e8:	d0a1      	beq.n	800782e <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078ea:	f8c0 c01c 	str.w	ip, [r0, #28]
 80078ee:	e79e      	b.n	800782e <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078f0:	d00c      	beq.n	800790c <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078f2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f6:	2000      	movs	r0, #0
 80078f8:	62a0      	str	r0, [r4, #40]	; 0x28
 80078fa:	e7b3      	b.n	8007864 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 80078fc:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007900:	4620      	mov	r0, r4
 8007902:	f7fc fd63 	bl	80043cc <HAL_SPI_MspInit>
 8007906:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800790a:	e798      	b.n	800783e <HAL_SPI_Init+0x2a>
 800790c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800790e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8007912:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8007916:	e7a5      	b.n	8007864 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8007918:	2001      	movs	r0, #1
}
 800791a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800791c:	2700      	movs	r7, #0
 800791e:	e7ea      	b.n	80078f6 <HAL_SPI_Init+0xe2>

08007920 <HAL_SPI_TransmitReceive>:
{
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007926:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800792a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800792c:	2801      	cmp	r0, #1
 800792e:	f000 809d 	beq.w	8007a6c <HAL_SPI_TransmitReceive+0x14c>
 8007932:	4698      	mov	r8, r3
 8007934:	2301      	movs	r3, #1
 8007936:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800793a:	468a      	mov	sl, r1
 800793c:	4691      	mov	r9, r2
 800793e:	f7fd f8fb 	bl	8004b38 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007942:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007946:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007948:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 800794a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800794c:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800794e:	d010      	beq.n	8007972 <HAL_SPI_TransmitReceive+0x52>
 8007950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007954:	d008      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007956:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007958:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800795a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800795c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007960:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007968:	68a2      	ldr	r2, [r4, #8]
 800796a:	2a00      	cmp	r2, #0
 800796c:	d1f3      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x36>
 800796e:	2904      	cmp	r1, #4
 8007970:	d1f1      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007972:	f1ba 0f00 	cmp.w	sl, #0
 8007976:	d07c      	beq.n	8007a72 <HAL_SPI_TransmitReceive+0x152>
 8007978:	f1b9 0f00 	cmp.w	r9, #0
 800797c:	d079      	beq.n	8007a72 <HAL_SPI_TransmitReceive+0x152>
 800797e:	f1b8 0f00 	cmp.w	r8, #0
 8007982:	d076      	beq.n	8007a72 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007984:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007988:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800798c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800798e:	bf1c      	itt	ne
 8007990:	2205      	movne	r2, #5
 8007992:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007996:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8007998:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800799c:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800799e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079a2:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a4:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80079a6:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80079aa:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079ae:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079b2:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079b6:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 80079b8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079bc:	d85b      	bhi.n	8007a76 <HAL_SPI_TransmitReceive+0x156>
 80079be:	f1b8 0f01 	cmp.w	r8, #1
 80079c2:	f240 80ea 	bls.w	8007b9a <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079c6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80079ca:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079cc:	6811      	ldr	r1, [r2, #0]
 80079ce:	0649      	lsls	r1, r1, #25
 80079d0:	f140 80ea 	bpl.w	8007ba8 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d4:	b96b      	cbnz	r3, 80079f2 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 80079d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	f240 8120 	bls.w	8007c20 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	4651      	mov	r1, sl
 80079e2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80079e6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80079e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ea:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80079ec:	3b02      	subs	r3, #2
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80079f2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	b92b      	cbnz	r3, 8007a06 <HAL_SPI_TransmitReceive+0xe6>
 80079fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8084 	beq.w	8007b0e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	6893      	ldr	r3, [r2, #8]
 8007a0a:	0799      	lsls	r1, r3, #30
 8007a0c:	d505      	bpl.n	8007a1a <HAL_SPI_TransmitReceive+0xfa>
 8007a0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	b113      	cbz	r3, 8007a1a <HAL_SPI_TransmitReceive+0xfa>
 8007a14:	2f00      	cmp	r7, #0
 8007a16:	f040 80e1 	bne.w	8007bdc <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a1a:	6893      	ldr	r3, [r2, #8]
 8007a1c:	f013 0301 	ands.w	r3, r3, #1
 8007a20:	d01b      	beq.n	8007a5a <HAL_SPI_TransmitReceive+0x13a>
 8007a22:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007a26:	b289      	uxth	r1, r1
 8007a28:	b1b9      	cbz	r1, 8007a5a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 8007a2a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007a2e:	b289      	uxth	r1, r1
 8007a30:	2901      	cmp	r1, #1
 8007a32:	f240 80c5 	bls.w	8007bc0 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007a38:	68d1      	ldr	r1, [r2, #12]
 8007a3a:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8007a3e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a42:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a44:	3902      	subs	r1, #2
 8007a46:	b289      	uxth	r1, r1
 8007a48:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a4c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007a50:	b289      	uxth	r1, r1
 8007a52:	2901      	cmp	r1, #1
 8007a54:	f240 80d1 	bls.w	8007bfa <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 8007a58:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a5a:	f7fd f86d 	bl	8004b38 <HAL_GetTick>
 8007a5e:	1b40      	subs	r0, r0, r5
 8007a60:	42b0      	cmp	r0, r6
 8007a62:	d3c7      	bcc.n	80079f4 <HAL_SPI_TransmitReceive+0xd4>
 8007a64:	1c73      	adds	r3, r6, #1
 8007a66:	d0c5      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8007a68:	2003      	movs	r0, #3
 8007a6a:	e775      	b.n	8007958 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8007a6c:	2002      	movs	r0, #2
}
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8007a72:	2001      	movs	r0, #1
 8007a74:	e770      	b.n	8007958 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a76:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007a7a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	0648      	lsls	r0, r1, #25
 8007a80:	d403      	bmi.n	8007a8a <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8007a82:	6811      	ldr	r1, [r2, #0]
 8007a84:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007a88:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f040 8081 	bne.w	8007b92 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a90:	4651      	mov	r1, sl
 8007a92:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007a96:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8007a98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9a:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007aa2:	1c72      	adds	r2, r6, #1
{
 8007aa4:	f04f 0701 	mov.w	r7, #1
 8007aa8:	d028      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x1dc>
 8007aaa:	e06d      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	6893      	ldr	r3, [r2, #8]
 8007ab0:	079b      	lsls	r3, r3, #30
 8007ab2:	d50d      	bpl.n	8007ad0 <HAL_SPI_TransmitReceive+0x1b0>
 8007ab4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	b153      	cbz	r3, 8007ad0 <HAL_SPI_TransmitReceive+0x1b0>
 8007aba:	b14f      	cbz	r7, 8007ad0 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007abc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007abe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007ac2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007ac4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007ace:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ad0:	6893      	ldr	r3, [r2, #8]
 8007ad2:	f013 0301 	ands.w	r3, r3, #1
 8007ad6:	d00f      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x1d8>
 8007ad8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007adc:	b289      	uxth	r1, r1
 8007ade:	b159      	cbz	r1, 8007af8 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ae0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ae2:	68d2      	ldr	r2, [r2, #12]
 8007ae4:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007ae8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aec:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007aee:	3a01      	subs	r2, #1
 8007af0:	b292      	uxth	r2, r2
        txallowed = 1U;
 8007af2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007af4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007af8:	f7fd f81e 	bl	8004b38 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1d3      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x18c>
 8007b04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1ce      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4631      	mov	r1, r6
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff fde4 	bl	80076e0 <SPI_EndRxTxTransaction>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	f43f af1d 	beq.w	8007958 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b1e:	2320      	movs	r3, #32
 8007b20:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007b22:	2001      	movs	r0, #1
 8007b24:	e718      	b.n	8007958 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0ee      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	6893      	ldr	r3, [r2, #8]
 8007b34:	0798      	lsls	r0, r3, #30
 8007b36:	d50d      	bpl.n	8007b54 <HAL_SPI_TransmitReceive+0x234>
 8007b38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	b153      	cbz	r3, 8007b54 <HAL_SPI_TransmitReceive+0x234>
 8007b3e:	b14f      	cbz	r7, 8007b54 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b42:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007b46:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007b48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007b52:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b54:	6893      	ldr	r3, [r2, #8]
 8007b56:	f013 0301 	ands.w	r3, r3, #1
 8007b5a:	d00f      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x25c>
 8007b5c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007b60:	b289      	uxth	r1, r1
 8007b62:	b159      	cbz	r1, 8007b7c <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b66:	68d2      	ldr	r2, [r2, #12]
 8007b68:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007b6c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b70:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007b72:	3a01      	subs	r2, #1
 8007b74:	b292      	uxth	r2, r2
        txallowed = 1U;
 8007b76:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007b78:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b7c:	f7fc ffdc 	bl	8004b38 <HAL_GetTick>
 8007b80:	1b40      	subs	r0, r0, r5
 8007b82:	42b0      	cmp	r0, r6
 8007b84:	f4bf af70 	bcs.w	8007a68 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1cf      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x210>
 8007b90:	e7c9      	b.n	8007b26 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b92:	f1b8 0f01 	cmp.w	r8, #1
 8007b96:	d184      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x182>
 8007b98:	e77a      	b.n	8007a90 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b9a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007b9e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	0649      	lsls	r1, r1, #25
 8007ba4:	f53f af17 	bmi.w	80079d6 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8007ba8:	6811      	ldr	r1, [r2, #0]
 8007baa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007bae:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f43f af10 	beq.w	80079d6 <HAL_SPI_TransmitReceive+0xb6>
 8007bb6:	f1b8 0f01 	cmp.w	r8, #1
 8007bba:	f47f af1a 	bne.w	80079f2 <HAL_SPI_TransmitReceive+0xd2>
 8007bbe:	e70a      	b.n	80079d6 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bc0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bc2:	7b12      	ldrb	r2, [r2, #12]
 8007bc4:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8007bc6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8007bca:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8007bd0:	3101      	adds	r1, #1
        txallowed = 1U;
 8007bd2:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8007bd4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8007bd8:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007bda:	e73e      	b.n	8007a5a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8007bdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d910      	bls.n	8007c06 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007be6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007bea:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8007bec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bee:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007bf0:	3b02      	subs	r3, #2
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007bf6:	2700      	movs	r7, #0
 8007bf8:	e70f      	b.n	8007a1a <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bfa:	6851      	ldr	r1, [r2, #4]
 8007bfc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8007c00:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c02:	6051      	str	r1, [r2, #4]
 8007c04:	e729      	b.n	8007a5a <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8007c0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c10:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8007c16:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8007c18:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007c1a:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8007c1c:	2700      	movs	r7, #0
 8007c1e:	e6fc      	b.n	8007a1a <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c20:	f89a 3000 	ldrb.w	r3, [sl]
 8007c24:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8007c26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8007c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8007c2e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007c30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8007c32:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007c34:	e6dd      	b.n	80079f2 <HAL_SPI_TransmitReceive+0xd2>
 8007c36:	bf00      	nop

08007c38 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c38:	6a03      	ldr	r3, [r0, #32]
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	6203      	str	r3, [r0, #32]
{
 8007c40:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c44:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c46:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c48:	4f1a      	ldr	r7, [pc, #104]	; (8007cb4 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8007c4a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8007c52:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c56:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c5a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8007c5c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8007c60:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c64:	d012      	beq.n	8007c8c <TIM_OC1_SetConfig+0x54>
 8007c66:	4c14      	ldr	r4, [pc, #80]	; (8007cb8 <TIM_OC1_SetConfig+0x80>)
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d00f      	beq.n	8007c8c <TIM_OC1_SetConfig+0x54>
 8007c6c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007c70:	42a0      	cmp	r0, r4
 8007c72:	d00b      	beq.n	8007c8c <TIM_OC1_SetConfig+0x54>
 8007c74:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d007      	beq.n	8007c8c <TIM_OC1_SetConfig+0x54>
 8007c7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d003      	beq.n	8007c8c <TIM_OC1_SetConfig+0x54>
 8007c84:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007c88:	42a0      	cmp	r0, r4
 8007c8a:	d10b      	bne.n	8007ca4 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c8c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c8e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007c92:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c94:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c98:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c9c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c9e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca2:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ca4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007ca6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007ca8:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007caa:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8007cac:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007cae:	6203      	str	r3, [r0, #32]
}
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40012c00 	.word	0x40012c00
 8007cb8:	40013400 	.word	0x40013400

08007cbc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cbc:	6a03      	ldr	r3, [r0, #32]
 8007cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc2:	6203      	str	r3, [r0, #32]
{
 8007cc4:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ccc:	4f21      	ldr	r7, [pc, #132]	; (8007d54 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cce:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007cd0:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8007cd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cda:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cde:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ce0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8007ce4:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce8:	d016      	beq.n	8007d18 <TIM_OC3_SetConfig+0x5c>
 8007cea:	4c1b      	ldr	r4, [pc, #108]	; (8007d58 <TIM_OC3_SetConfig+0x9c>)
 8007cec:	42a0      	cmp	r0, r4
 8007cee:	d013      	beq.n	8007d18 <TIM_OC3_SetConfig+0x5c>
 8007cf0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d024      	beq.n	8007d42 <TIM_OC3_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	4c18      	ldr	r4, [pc, #96]	; (8007d5c <TIM_OC3_SetConfig+0xa0>)
 8007cfa:	42a0      	cmp	r0, r4
 8007cfc:	d013      	beq.n	8007d26 <TIM_OC3_SetConfig+0x6a>
 8007cfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d02:	42a0      	cmp	r0, r4
 8007d04:	d00f      	beq.n	8007d26 <TIM_OC3_SetConfig+0x6a>
 8007d06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d0a:	42a0      	cmp	r0, r4
 8007d0c:	d00b      	beq.n	8007d26 <TIM_OC3_SetConfig+0x6a>
 8007d0e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d12:	42a0      	cmp	r0, r4
 8007d14:	d10e      	bne.n	8007d34 <TIM_OC3_SetConfig+0x78>
 8007d16:	e006      	b.n	8007d26 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d18:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d1e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d26:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d2a:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d2e:	432c      	orrs	r4, r5
 8007d30:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d34:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007d36:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007d38:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007d3a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007d3e:	6203      	str	r3, [r0, #32]
}
 8007d40:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d42:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d48:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d50:	e7d2      	b.n	8007cf8 <TIM_OC3_SetConfig+0x3c>
 8007d52:	bf00      	nop
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40013400 	.word	0x40013400
 8007d5c:	40014000 	.word	0x40014000

08007d60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d60:	6a03      	ldr	r3, [r0, #32]
 8007d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d66:	6203      	str	r3, [r0, #32]
{
 8007d68:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d70:	4f21      	ldr	r7, [pc, #132]	; (8007df8 <TIM_OC4_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d72:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d74:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8007d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d7e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d82:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d88:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d8c:	d016      	beq.n	8007dbc <TIM_OC4_SetConfig+0x5c>
 8007d8e:	4c1b      	ldr	r4, [pc, #108]	; (8007dfc <TIM_OC4_SetConfig+0x9c>)
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d013      	beq.n	8007dbc <TIM_OC4_SetConfig+0x5c>
 8007d94:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d024      	beq.n	8007de6 <TIM_OC4_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9c:	4c18      	ldr	r4, [pc, #96]	; (8007e00 <TIM_OC4_SetConfig+0xa0>)
 8007d9e:	42a0      	cmp	r0, r4
 8007da0:	d013      	beq.n	8007dca <TIM_OC4_SetConfig+0x6a>
 8007da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007da6:	42a0      	cmp	r0, r4
 8007da8:	d00f      	beq.n	8007dca <TIM_OC4_SetConfig+0x6a>
 8007daa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007dae:	42a0      	cmp	r0, r4
 8007db0:	d00b      	beq.n	8007dca <TIM_OC4_SetConfig+0x6a>
 8007db2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007db6:	42a0      	cmp	r0, r4
 8007db8:	d10e      	bne.n	8007dd8 <TIM_OC4_SetConfig+0x78>
 8007dba:	e006      	b.n	8007dca <TIM_OC4_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007dbc:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007dc2:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007dca:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007dce:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007dd2:	432c      	orrs	r4, r5
 8007dd4:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007dda:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007ddc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007dde:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007de2:	6203      	str	r3, [r0, #32]
}
 8007de4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007de6:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007dec:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df4:	e7d2      	b.n	8007d9c <TIM_OC4_SetConfig+0x3c>
 8007df6:	bf00      	nop
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40013400 	.word	0x40013400
 8007e00:	40014000 	.word	0x40014000

08007e04 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f000 8089 	beq.w	8007f1c <HAL_TIM_Base_Init+0x118>
{
 8007e0a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e10:	4604      	mov	r4, r0
 8007e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d078      	beq.n	8007f0c <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e1a:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e1c:	4a43      	ldr	r2, [pc, #268]	; (8007f2c <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e24:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8007e26:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e28:	d05c      	beq.n	8007ee4 <HAL_TIM_Base_Init+0xe0>
 8007e2a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007e2e:	d02c      	beq.n	8007e8a <HAL_TIM_Base_Init+0x86>
 8007e30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007e34:	4291      	cmp	r1, r2
 8007e36:	d028      	beq.n	8007e8a <HAL_TIM_Base_Init+0x86>
 8007e38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e3c:	4291      	cmp	r1, r2
 8007e3e:	d024      	beq.n	8007e8a <HAL_TIM_Base_Init+0x86>
 8007e40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e44:	4291      	cmp	r1, r2
 8007e46:	d020      	beq.n	8007e8a <HAL_TIM_Base_Init+0x86>
 8007e48:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007e4c:	4291      	cmp	r1, r2
 8007e4e:	d049      	beq.n	8007ee4 <HAL_TIM_Base_Init+0xe0>
 8007e50:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007e54:	4291      	cmp	r1, r2
 8007e56:	d063      	beq.n	8007f20 <HAL_TIM_Base_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e58:	4a35      	ldr	r2, [pc, #212]	; (8007f30 <HAL_TIM_Base_Init+0x12c>)
 8007e5a:	4291      	cmp	r1, r2
 8007e5c:	d05b      	beq.n	8007f16 <HAL_TIM_Base_Init+0x112>
 8007e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d057      	beq.n	8007f16 <HAL_TIM_Base_Init+0x112>
 8007e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	d053      	beq.n	8007f16 <HAL_TIM_Base_Init+0x112>
 8007e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e72:	4291      	cmp	r1, r2
 8007e74:	d04f      	beq.n	8007f16 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e76:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e78:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8007e7a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e80:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007e82:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e84:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e86:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	e010      	b.n	8007eac <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007e8a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e8e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e94:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e9a:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e9c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007ea4:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007ea6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ea8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007eaa:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007eac:	2301      	movs	r3, #1
 8007eae:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007eb8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007ebc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007ec0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ecc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ed0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ed4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007ed8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007edc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ee0:	2000      	movs	r0, #0
}
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007ee4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ee6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ee8:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007eee:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007efa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007efc:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007efe:	68e3      	ldr	r3, [r4, #12]
 8007f00:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007f06:	6963      	ldr	r3, [r4, #20]
 8007f08:	630b      	str	r3, [r1, #48]	; 0x30
 8007f0a:	e7cf      	b.n	8007eac <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007f10:	f7fc fcea 	bl	80048e8 <HAL_TIM_Base_MspInit>
 8007f14:	e781      	b.n	8007e1a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f16:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f18:	69a2      	ldr	r2, [r4, #24]
 8007f1a:	e7e9      	b.n	8007ef0 <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 8007f1c:	2001      	movs	r0, #1
}
 8007f1e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007f20:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f26:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f28:	e796      	b.n	8007e58 <HAL_TIM_Base_Init+0x54>
 8007f2a:	bf00      	nop
 8007f2c:	40012c00 	.word	0x40012c00
 8007f30:	40014000 	.word	0x40014000

08007f34 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007f34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d132      	bne.n	8007fa2 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3e:	491b      	ldr	r1, [pc, #108]	; (8007fac <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	2202      	movs	r2, #2
 8007f42:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f46:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f48:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f50:	d019      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f56:	d016      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f58:	4a15      	ldr	r2, [pc, #84]	; (8007fb0 <HAL_TIM_Base_Start_IT+0x7c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00f      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00b      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f6e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f76:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_Base_Start_IT+0x52>
 8007f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d107      	bne.n	8007f96 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f86:	6899      	ldr	r1, [r3, #8]
 8007f88:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <HAL_TIM_Base_Start_IT+0x80>)
 8007f8a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	2a06      	cmp	r2, #6
 8007f8e:	d00a      	beq.n	8007fa6 <HAL_TIM_Base_Start_IT+0x72>
 8007f90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007f94:	d007      	beq.n	8007fa6 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	f042 0201 	orr.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	4770      	bx	lr
    return HAL_ERROR;
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	4770      	bx	lr
  return HAL_OK;
 8007fa6:	2000      	movs	r0, #0
}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	00010007 	.word	0x00010007

08007fb8 <HAL_TIM_PWM_MspInit>:
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f000 8089 	beq.w	80080d4 <HAL_TIM_PWM_Init+0x118>
{
 8007fc2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007fc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007fc8:	4604      	mov	r4, r0
 8007fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d078      	beq.n	80080c4 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd2:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd4:	4a43      	ldr	r2, [pc, #268]	; (80080e4 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fdc:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8007fde:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe0:	d05c      	beq.n	800809c <HAL_TIM_PWM_Init+0xe0>
 8007fe2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007fe6:	d02c      	beq.n	8008042 <HAL_TIM_PWM_Init+0x86>
 8007fe8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007fec:	4291      	cmp	r1, r2
 8007fee:	d028      	beq.n	8008042 <HAL_TIM_PWM_Init+0x86>
 8007ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff4:	4291      	cmp	r1, r2
 8007ff6:	d024      	beq.n	8008042 <HAL_TIM_PWM_Init+0x86>
 8007ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ffc:	4291      	cmp	r1, r2
 8007ffe:	d020      	beq.n	8008042 <HAL_TIM_PWM_Init+0x86>
 8008000:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008004:	4291      	cmp	r1, r2
 8008006:	d049      	beq.n	800809c <HAL_TIM_PWM_Init+0xe0>
 8008008:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800800c:	4291      	cmp	r1, r2
 800800e:	d063      	beq.n	80080d8 <HAL_TIM_PWM_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008010:	4a35      	ldr	r2, [pc, #212]	; (80080e8 <HAL_TIM_PWM_Init+0x12c>)
 8008012:	4291      	cmp	r1, r2
 8008014:	d05b      	beq.n	80080ce <HAL_TIM_PWM_Init+0x112>
 8008016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800801a:	4291      	cmp	r1, r2
 800801c:	d057      	beq.n	80080ce <HAL_TIM_PWM_Init+0x112>
 800801e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008022:	4291      	cmp	r1, r2
 8008024:	d053      	beq.n	80080ce <HAL_TIM_PWM_Init+0x112>
 8008026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800802a:	4291      	cmp	r1, r2
 800802c:	d04f      	beq.n	80080ce <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800802e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8008032:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008038:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800803a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800803c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800803e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	e010      	b.n	8008064 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008042:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008044:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008046:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800804c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800804e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008052:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008054:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800805c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800805e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008060:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008062:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008064:	2301      	movs	r3, #1
 8008066:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008068:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008070:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008074:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008078:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800807c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008088:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800808c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008090:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008094:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008098:	2000      	movs	r0, #0
}
 800809a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800809c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80080a6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80080b4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80080ba:	6863      	ldr	r3, [r4, #4]
 80080bc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80080be:	6963      	ldr	r3, [r4, #20]
 80080c0:	630b      	str	r3, [r1, #48]	; 0x30
 80080c2:	e7cf      	b.n	8008064 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80080c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80080c8:	f7ff ff76 	bl	8007fb8 <HAL_TIM_PWM_MspInit>
 80080cc:	e781      	b.n	8007fd2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ce:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080d0:	69a2      	ldr	r2, [r4, #24]
 80080d2:	e7e9      	b.n	80080a8 <HAL_TIM_PWM_Init+0xec>
    return HAL_ERROR;
 80080d4:	2001      	movs	r0, #1
}
 80080d6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80080d8:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80080de:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e0:	e796      	b.n	8008010 <HAL_TIM_PWM_Init+0x54>
 80080e2:	bf00      	nop
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	40014000 	.word	0x40014000

080080ec <HAL_TIM_PWM_Start>:
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d158      	bne.n	80081a2 <HAL_TIM_PWM_Start+0xb6>
 80080f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d15e      	bne.n	80081b6 <HAL_TIM_PWM_Start+0xca>
 80080f8:	2302      	movs	r3, #2
 80080fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	2201      	movs	r2, #1
 8008102:	6a18      	ldr	r0, [r3, #32]
 8008104:	f001 011f 	and.w	r1, r1, #31
 8008108:	fa02 f101 	lsl.w	r1, r2, r1
 800810c:	ea20 0001 	bic.w	r0, r0, r1
 8008110:	b410      	push	{r4}
 8008112:	6218      	str	r0, [r3, #32]
 8008114:	6a1a      	ldr	r2, [r3, #32]
 8008116:	4c40      	ldr	r4, [pc, #256]	; (8008218 <HAL_TIM_PWM_Start+0x12c>)
 8008118:	4311      	orrs	r1, r2
 800811a:	42a3      	cmp	r3, r4
 800811c:	6219      	str	r1, [r3, #32]
 800811e:	d05a      	beq.n	80081d6 <HAL_TIM_PWM_Start+0xea>
 8008120:	4a3e      	ldr	r2, [pc, #248]	; (800821c <HAL_TIM_PWM_Start+0x130>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00f      	beq.n	8008146 <HAL_TIM_PWM_Start+0x5a>
 8008126:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <HAL_TIM_PWM_Start+0x5a>
 800812e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <HAL_TIM_PWM_Start+0x5a>
 8008136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <HAL_TIM_PWM_Start+0x5a>
 800813e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008142:	4293      	cmp	r3, r2
 8008144:	d103      	bne.n	800814e <HAL_TIM_PWM_Start+0x62>
 8008146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800814c:	645a      	str	r2, [r3, #68]	; 0x44
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008152:	d016      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 8008154:	4a32      	ldr	r2, [pc, #200]	; (8008220 <HAL_TIM_PWM_Start+0x134>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 800815a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 8008162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 800816a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 8008172:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <HAL_TIM_PWM_Start+0x96>
 800817a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800817e:	4293      	cmp	r3, r2
 8008180:	d107      	bne.n	8008192 <HAL_TIM_PWM_Start+0xa6>
 8008182:	6899      	ldr	r1, [r3, #8]
 8008184:	4a27      	ldr	r2, [pc, #156]	; (8008224 <HAL_TIM_PWM_Start+0x138>)
 8008186:	400a      	ands	r2, r1
 8008188:	2a06      	cmp	r2, #6
 800818a:	d016      	beq.n	80081ba <HAL_TIM_PWM_Start+0xce>
 800818c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008190:	d013      	beq.n	80081ba <HAL_TIM_PWM_Start+0xce>
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	2000      	movs	r0, #0
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	4770      	bx	lr
 80081a2:	2904      	cmp	r1, #4
 80081a4:	d01c      	beq.n	80081e0 <HAL_TIM_PWM_Start+0xf4>
 80081a6:	2908      	cmp	r1, #8
 80081a8:	d022      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x104>
 80081aa:	290c      	cmp	r1, #12
 80081ac:	d109      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xd6>
 80081ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d024      	beq.n	8008200 <HAL_TIM_PWM_Start+0x114>
 80081b6:	2001      	movs	r0, #1
 80081b8:	4770      	bx	lr
 80081ba:	2000      	movs	r0, #0
 80081bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	2910      	cmp	r1, #16
 80081c4:	d020      	beq.n	8008208 <HAL_TIM_PWM_Start+0x11c>
 80081c6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d1f3      	bne.n	80081b6 <HAL_TIM_PWM_Start+0xca>
 80081ce:	2302      	movs	r3, #2
 80081d0:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80081d4:	e793      	b.n	80080fe <HAL_TIM_PWM_Start+0x12>
 80081d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081dc:	645a      	str	r2, [r3, #68]	; 0x44
 80081de:	e7d0      	b.n	8008182 <HAL_TIM_PWM_Start+0x96>
 80081e0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d1e6      	bne.n	80081b6 <HAL_TIM_PWM_Start+0xca>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80081ee:	e786      	b.n	80080fe <HAL_TIM_PWM_Start+0x12>
 80081f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d1de      	bne.n	80081b6 <HAL_TIM_PWM_Start+0xca>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80081fe:	e77e      	b.n	80080fe <HAL_TIM_PWM_Start+0x12>
 8008200:	2302      	movs	r3, #2
 8008202:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008206:	e77a      	b.n	80080fe <HAL_TIM_PWM_Start+0x12>
 8008208:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800820c:	2b01      	cmp	r3, #1
 800820e:	d1d2      	bne.n	80081b6 <HAL_TIM_PWM_Start+0xca>
 8008210:	2302      	movs	r3, #2
 8008212:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008216:	e772      	b.n	80080fe <HAL_TIM_PWM_Start+0x12>
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40013400 	.word	0x40013400
 8008220:	40000400 	.word	0x40000400
 8008224:	00010007 	.word	0x00010007

08008228 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800822c:	2b01      	cmp	r3, #1
 800822e:	f000 808c 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x122>
{
 8008232:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8008234:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8008236:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008238:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800823a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800823e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008242:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008244:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008246:	4c5c      	ldr	r4, [pc, #368]	; (80083b8 <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 8008248:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800824a:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800824e:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008250:	d07d      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x126>
 8008252:	d921      	bls.n	8008298 <HAL_TIM_ConfigClockSource+0x70>
 8008254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008258:	d067      	beq.n	800832a <HAL_TIM_ConfigClockSource+0x102>
 800825a:	d94a      	bls.n	80082f2 <HAL_TIM_ConfigClockSource+0xca>
 800825c:	4957      	ldr	r1, [pc, #348]	; (80083bc <HAL_TIM_ConfigClockSource+0x194>)
 800825e:	428b      	cmp	r3, r1
 8008260:	d008      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 8008262:	d93e      	bls.n	80082e2 <HAL_TIM_ConfigClockSource+0xba>
 8008264:	4956      	ldr	r1, [pc, #344]	; (80083c0 <HAL_TIM_ConfigClockSource+0x198>)
 8008266:	428b      	cmp	r3, r1
 8008268:	d004      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 800826a:	3910      	subs	r1, #16
 800826c:	f023 0420 	bic.w	r4, r3, #32
 8008270:	428c      	cmp	r4, r1
 8008272:	d108      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008274:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008276:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800827a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800827e:	430b      	orrs	r3, r1
 8008280:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008284:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8008286:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008288:	2201      	movs	r2, #1
 800828a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800828e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008292:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8008294:	4618      	mov	r0, r3
}
 8008296:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d073      	beq.n	8008384 <HAL_TIM_ConfigClockSource+0x15c>
 800829c:	d91b      	bls.n	80082d6 <HAL_TIM_ConfigClockSource+0xae>
 800829e:	2b50      	cmp	r3, #80	; 0x50
 80082a0:	d1f1      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 80082a2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a4:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	684c      	ldr	r4, [r1, #4]
 80082a8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082aa:	f026 0601 	bic.w	r6, r6, #1
 80082ae:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082b2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082ba:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80082be:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80082c0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80082c2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80082c4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80082c6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80082d2:	6093      	str	r3, [r2, #8]
}
 80082d4:	e7d7      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d0cc      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 80082da:	d91c      	bls.n	8008316 <HAL_TIM_ConfigClockSource+0xee>
 80082dc:	2b30      	cmp	r3, #48	; 0x30
 80082de:	d1d2      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
 80082e0:	e7c8      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 80082e2:	3920      	subs	r1, #32
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d0c5      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 80082e8:	d919      	bls.n	800831e <HAL_TIM_ConfigClockSource+0xf6>
 80082ea:	4936      	ldr	r1, [pc, #216]	; (80083c4 <HAL_TIM_ConfigClockSource+0x19c>)
 80082ec:	428b      	cmp	r3, r1
 80082ee:	d0c1      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 80082f0:	e7c9      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
 80082f2:	2b70      	cmp	r3, #112	; 0x70
 80082f4:	d1c7      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80082fa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80082fc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082fe:	432b      	orrs	r3, r5
 8008300:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008304:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008308:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800830a:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800830c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800830e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008312:	6093      	str	r3, [r2, #8]
      break;
 8008314:	e7b7      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8008316:	f033 0110 	bics.w	r1, r3, #16
 800831a:	d1b4      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
 800831c:	e7aa      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
 800831e:	f023 0110 	bic.w	r1, r3, #16
 8008322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008326:	d1ae      	bne.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
 8008328:	e7a4      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x4c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800832a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800832e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8008330:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008332:	432b      	orrs	r3, r5
 8008334:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008338:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800833c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800833e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008340:	6893      	ldr	r3, [r2, #8]
 8008342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008346:	6093      	str	r3, [r2, #8]
      break;
 8008348:	e79d      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 800834a:	2002      	movs	r0, #2
}
 800834c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834e:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008350:	684d      	ldr	r5, [r1, #4]
 8008352:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008354:	f024 0410 	bic.w	r4, r4, #16
 8008358:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800835a:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800835c:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800835e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008366:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800836a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800836e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008370:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008372:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008374:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800837c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8008380:	6093      	str	r3, [r2, #8]
}
 8008382:	e780      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8008384:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008386:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008388:	684c      	ldr	r4, [r1, #4]
 800838a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800838c:	f026 0601 	bic.w	r6, r6, #1
 8008390:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008392:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008394:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800839c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80083a0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80083a2:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80083a4:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80083a6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80083a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083b0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80083b4:	6093      	str	r3, [r2, #8]
}
 80083b6:	e766      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x5e>
 80083b8:	ffce0088 	.word	0xffce0088
 80083bc:	00100040 	.word	0x00100040
 80083c0:	00100060 	.word	0x00100060
 80083c4:	00100030 	.word	0x00100030

080083c8 <HAL_TIM_PeriodElapsedCallback>:
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <HAL_TIM_OC_DelayElapsedCallback>:
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <HAL_TIM_IC_CaptureCallback>:
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop

080083d8 <HAL_TIM_TriggerCallback>:
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop

080083dc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	0791      	lsls	r1, r2, #30
{
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083e6:	d503      	bpl.n	80083f0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	0792      	lsls	r2, r2, #30
 80083ec:	f100 808a 	bmi.w	8008504 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	0752      	lsls	r2, r2, #29
 80083f4:	d502      	bpl.n	80083fc <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	0750      	lsls	r0, r2, #29
 80083fa:	d470      	bmi.n	80084de <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	0711      	lsls	r1, r2, #28
 8008400:	d502      	bpl.n	8008408 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	0712      	lsls	r2, r2, #28
 8008406:	d458      	bmi.n	80084ba <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	06d1      	lsls	r1, r2, #27
 800840c:	d502      	bpl.n	8008414 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	06d2      	lsls	r2, r2, #27
 8008412:	d43e      	bmi.n	8008492 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	07d0      	lsls	r0, r2, #31
 8008418:	d503      	bpl.n	8008422 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	07d1      	lsls	r1, r2, #31
 800841e:	f100 808a 	bmi.w	8008536 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	0612      	lsls	r2, r2, #24
 8008426:	d503      	bpl.n	8008430 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	0610      	lsls	r0, r2, #24
 800842c:	f100 808b 	bmi.w	8008546 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	05d1      	lsls	r1, r2, #23
 8008434:	d503      	bpl.n	800843e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	0612      	lsls	r2, r2, #24
 800843a:	f100 808c 	bmi.w	8008556 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	0650      	lsls	r0, r2, #25
 8008442:	d503      	bpl.n	800844c <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	0651      	lsls	r1, r2, #25
 8008448:	f100 808d 	bmi.w	8008566 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	0692      	lsls	r2, r2, #26
 8008450:	d503      	bpl.n	800845a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	0690      	lsls	r0, r2, #26
 8008456:	f100 808e 	bmi.w	8008576 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	02d1      	lsls	r1, r2, #11
 800845e:	d503      	bpl.n	8008468 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	02d2      	lsls	r2, r2, #11
 8008464:	f100 808f 	bmi.w	8008586 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	0290      	lsls	r0, r2, #10
 800846c:	d503      	bpl.n	8008476 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	0291      	lsls	r1, r2, #10
 8008472:	f100 8090 	bmi.w	8008596 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008476:	691a      	ldr	r2, [r3, #16]
 8008478:	0252      	lsls	r2, r2, #9
 800847a:	d503      	bpl.n	8008484 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	0250      	lsls	r0, r2, #9
 8008480:	f100 8091 	bmi.w	80085a6 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	0211      	lsls	r1, r2, #8
 8008488:	d502      	bpl.n	8008490 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	0212      	lsls	r2, r2, #8
 800848e:	d44a      	bmi.n	8008526 <HAL_TIM_IRQHandler+0x14a>
}
 8008490:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008492:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008496:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008498:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800849a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084a4:	f040 8090 	bne.w	80085c8 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a8:	f7ff ff90 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ff91 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	2200      	movs	r2, #0
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	7722      	strb	r2, [r4, #28]
 80084b8:	e7ac      	b.n	8008414 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084ba:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084be:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084c0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80084c8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084ca:	d17a      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084cc:	f7ff ff7e 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7ff ff7f 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	2200      	movs	r2, #0
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	7722      	strb	r2, [r4, #28]
 80084dc:	e794      	b.n	8008408 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084de:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084e2:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084e6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f0:	d164      	bne.n	80085bc <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	f7ff ff6b 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f6:	4620      	mov	r0, r4
 80084f8:	f7ff ff6c 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fc:	2200      	movs	r2, #0
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	7722      	strb	r2, [r4, #28]
 8008502:	e77b      	b.n	80083fc <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008504:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008508:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800850a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800850c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	0799      	lsls	r1, r3, #30
 8008512:	d150      	bne.n	80085b6 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008514:	f7ff ff5a 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff ff5b 	bl	80083d4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851e:	2200      	movs	r2, #0
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	7722      	strb	r2, [r4, #28]
 8008524:	e764      	b.n	80083f0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008526:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800852a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800852c:	611a      	str	r2, [r3, #16]
}
 800852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008532:	f000 ba61 	b.w	80089f8 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008536:	f06f 0201 	mvn.w	r2, #1
 800853a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800853c:	4620      	mov	r0, r4
 800853e:	f7ff ff43 	bl	80083c8 <HAL_TIM_PeriodElapsedCallback>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	e76d      	b.n	8008422 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008546:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800854a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fa49 	bl	80089e4 <HAL_TIMEx_BreakCallback>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	e76c      	b.n	8008430 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800855a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fa43 	bl	80089e8 <HAL_TIMEx_Break2Callback>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	e76b      	b.n	800843e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800856a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff ff33 	bl	80083d8 <HAL_TIM_TriggerCallback>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	e76a      	b.n	800844c <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008576:	f06f 0220 	mvn.w	r2, #32
 800857a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fa2f 	bl	80089e0 <HAL_TIMEx_CommutCallback>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	e769      	b.n	800845a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008586:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800858a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fa2d 	bl	80089ec <HAL_TIMEx_EncoderIndexCallback>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	e768      	b.n	8008468 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008596:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800859a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fa27 	bl	80089f0 <HAL_TIMEx_DirectionChangeCallback>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	e767      	b.n	8008476 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80085a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80085aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fa21 	bl	80089f4 <HAL_TIMEx_IndexErrorCallback>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	e766      	b.n	8008484 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80085b6:	f7ff ff0b 	bl	80083d0 <HAL_TIM_IC_CaptureCallback>
 80085ba:	e7b0      	b.n	800851e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80085bc:	f7ff ff08 	bl	80083d0 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e79c      	b.n	80084fc <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80085c2:	f7ff ff05 	bl	80083d0 <HAL_TIM_IC_CaptureCallback>
 80085c6:	e786      	b.n	80084d6 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80085c8:	f7ff ff02 	bl	80083d0 <HAL_TIM_IC_CaptureCallback>
 80085cc:	e771      	b.n	80084b2 <HAL_TIM_IRQHandler+0xd6>
 80085ce:	bf00      	nop

080085d0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	f023 0310 	bic.w	r3, r3, #16
 80085d6:	6203      	str	r3, [r0, #32]
{
 80085d8:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 80085da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80085dc:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80085de:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085e0:	4f21      	ldr	r7, [pc, #132]	; (8008668 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085e2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80085ea:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085ee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085f2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085fc:	d016      	beq.n	800862c <TIM_OC2_SetConfig+0x5c>
 80085fe:	4c1b      	ldr	r4, [pc, #108]	; (800866c <TIM_OC2_SetConfig+0x9c>)
 8008600:	42a0      	cmp	r0, r4
 8008602:	d013      	beq.n	800862c <TIM_OC2_SetConfig+0x5c>
 8008604:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008608:	42a0      	cmp	r0, r4
 800860a:	d024      	beq.n	8008656 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800860c:	4c18      	ldr	r4, [pc, #96]	; (8008670 <TIM_OC2_SetConfig+0xa0>)
 800860e:	42a0      	cmp	r0, r4
 8008610:	d013      	beq.n	800863a <TIM_OC2_SetConfig+0x6a>
 8008612:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008616:	42a0      	cmp	r0, r4
 8008618:	d00f      	beq.n	800863a <TIM_OC2_SetConfig+0x6a>
 800861a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800861e:	42a0      	cmp	r0, r4
 8008620:	d00b      	beq.n	800863a <TIM_OC2_SetConfig+0x6a>
 8008622:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008626:	42a0      	cmp	r0, r4
 8008628:	d10e      	bne.n	8008648 <TIM_OC2_SetConfig+0x78>
 800862a:	e006      	b.n	800863a <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800862c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800862e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008632:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800863a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800863e:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008642:	432c      	orrs	r4, r5
 8008644:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008648:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800864a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800864c:	6182      	str	r2, [r0, #24]
}
 800864e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8008650:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008652:	6203      	str	r3, [r0, #32]
}
 8008654:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008656:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800865c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008664:	e7d2      	b.n	800860c <TIM_OC2_SetConfig+0x3c>
 8008666:	bf00      	nop
 8008668:	40012c00 	.word	0x40012c00
 800866c:	40013400 	.word	0x40013400
 8008670:	40014000 	.word	0x40014000

08008674 <HAL_TIM_PWM_ConfigChannel>:
{
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8008676:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800867a:	2b01      	cmp	r3, #1
 800867c:	f000 80e8 	beq.w	8008850 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 8008680:	2301      	movs	r3, #1
 8008682:	4604      	mov	r4, r0
 8008684:	460d      	mov	r5, r1
 8008686:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800868a:	2a14      	cmp	r2, #20
 800868c:	d844      	bhi.n	8008718 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800868e:	e8df f002 	tbb	[pc, r2]
 8008692:	4347      	.short	0x4347
 8008694:	435b4343 	.word	0x435b4343
 8008698:	43704343 	.word	0x43704343
 800869c:	43844343 	.word	0x43844343
 80086a0:	43994343 	.word	0x43994343
 80086a4:	4343      	.short	0x4343
 80086a6:	0b          	.byte	0x0b
 80086a7:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086a8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086ae:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086b0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b2:	4e70      	ldr	r6, [pc, #448]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086b4:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80086b8:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80086ba:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80086bc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80086be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086cc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086ce:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d6:	d008      	beq.n	80086ea <HAL_TIM_PWM_ConfigChannel+0x76>
 80086d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80086dc:	42b3      	cmp	r3, r6
 80086de:	d004      	beq.n	80086ea <HAL_TIM_PWM_ConfigChannel+0x76>
 80086e0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80086e4:	42b3      	cmp	r3, r6
 80086e6:	f040 80b5 	bne.w	8008854 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086ea:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086ec:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086f0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 80086f4:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80086f6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80086f8:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80086fa:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 80086fc:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008700:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008702:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008706:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008708:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800870a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800870e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008712:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008716:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008718:	2000      	movs	r0, #0
 800871a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800871e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008720:	6800      	ldr	r0, [r0, #0]
 8008722:	f7ff fa89 	bl	8007c38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008726:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008728:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800872a:	6999      	ldr	r1, [r3, #24]
 800872c:	f041 0108 	orr.w	r1, r1, #8
 8008730:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008732:	6999      	ldr	r1, [r3, #24]
 8008734:	f021 0104 	bic.w	r1, r1, #4
 8008738:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800873e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008740:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008742:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008746:	e7ea      	b.n	800871e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008748:	6800      	ldr	r0, [r0, #0]
 800874a:	f7ff ff41 	bl	80085d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800874e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008750:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008752:	6999      	ldr	r1, [r3, #24]
 8008754:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008758:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800875a:	6999      	ldr	r1, [r3, #24]
 800875c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008760:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8008768:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800876a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800876c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008770:	e7d5      	b.n	800871e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008772:	6800      	ldr	r0, [r0, #0]
 8008774:	f7ff faa2 	bl	8007cbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008778:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800877a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800877c:	69d9      	ldr	r1, [r3, #28]
 800877e:	f041 0108 	orr.w	r1, r1, #8
 8008782:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008784:	69d9      	ldr	r1, [r3, #28]
 8008786:	f021 0104 	bic.w	r1, r1, #4
 800878a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8008790:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008792:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008794:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008798:	e7c1      	b.n	800871e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	f7ff fae0 	bl	8007d60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087a0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087a2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087a4:	69d9      	ldr	r1, [r3, #28]
 80087a6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80087aa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ac:	69d9      	ldr	r1, [r3, #28]
 80087ae:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80087b2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087b4:	69da      	ldr	r2, [r3, #28]
 80087b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80087ba:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087bc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80087be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80087c2:	e7ac      	b.n	800871e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087c4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087c6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087ca:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80087cc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ce:	4e29      	ldr	r6, [pc, #164]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087d0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80087d4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80087d6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80087d8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80087da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80087e0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80087ee:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f2:	d013      	beq.n	800881c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80087f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80087f8:	42b3      	cmp	r3, r6
 80087fa:	d00f      	beq.n	800881c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80087fc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008800:	42b3      	cmp	r3, r6
 8008802:	d00b      	beq.n	800881c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8008804:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008808:	42b3      	cmp	r3, r6
 800880a:	d007      	beq.n	800881c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800880c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008810:	42b3      	cmp	r3, r6
 8008812:	d003      	beq.n	800881c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8008814:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008818:	42b3      	cmp	r3, r6
 800881a:	d104      	bne.n	8008826 <HAL_TIM_PWM_ConfigChannel+0x1b2>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800881c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800881e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008822:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8008826:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8008828:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800882a:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800882c:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800882e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008830:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008832:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008834:	f041 0108 	orr.w	r1, r1, #8
 8008838:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800883a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800883c:	f021 0104 	bic.w	r1, r1, #4
 8008840:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008844:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8008846:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008848:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800884a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800884e:	e766      	b.n	800871e <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8008850:	2002      	movs	r0, #2
}
 8008852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008854:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008858:	42b3      	cmp	r3, r6
 800885a:	f43f af46 	beq.w	80086ea <HAL_TIM_PWM_ConfigChannel+0x76>
 800885e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008862:	42b3      	cmp	r3, r6
 8008864:	f43f af41 	beq.w	80086ea <HAL_TIM_PWM_ConfigChannel+0x76>
 8008868:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800886c:	42b3      	cmp	r3, r6
 800886e:	f47f af41 	bne.w	80086f4 <HAL_TIM_PWM_ConfigChannel+0x80>
 8008872:	e73a      	b.n	80086ea <HAL_TIM_PWM_ConfigChannel+0x76>
 8008874:	40012c00 	.word	0x40012c00

08008878 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008878:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d058      	beq.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8008880:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008882:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008884:	4c2c      	ldr	r4, [pc, #176]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008886:	2302      	movs	r3, #2
 8008888:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800888c:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800888e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008890:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008892:	d042      	beq.n	800891a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008894:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008898:	42a2      	cmp	r2, r4
 800889a:	d032      	beq.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800889c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80088a0:	42a2      	cmp	r2, r4
 80088a2:	d02e      	beq.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a4:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80088a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80088aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ae:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088b0:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80088b6:	d016      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088b8:	4b20      	ldr	r3, [pc, #128]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d013      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d00f      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d00b      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088ce:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d007      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088d6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80088da:	429a      	cmp	r2, r3
 80088dc:	d003      	beq.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80088de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d104      	bne.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088e6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ec:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ee:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80088f0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80088f2:	2201      	movs	r2, #1
 80088f4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80088f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80088fc:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80088fe:	4618      	mov	r0, r3
}
 8008900:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008902:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800890a:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800890c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008914:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8008916:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008918:	e7cb      	b.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800891a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800891e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008922:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008924:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800892c:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800892e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008930:	e7d9      	b.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008932:	2002      	movs	r0, #2
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40000400 	.word	0x40000400

08008940 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008940:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d047      	beq.n	80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 8008948:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800894a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800894e:	4602      	mov	r2, r0
 8008950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008954:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008958:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800895a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800895e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008964:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008968:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800896a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800896e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008974:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008976:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008978:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800897a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897e:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008980:	4c16      	ldr	r4, [pc, #88]	; (80089dc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8008982:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008984:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008988:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800898a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800898e:	d007      	beq.n	80089a0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008990:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008994:	42a0      	cmp	r0, r4
 8008996:	d003      	beq.n	80089a0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008998:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800899c:	42a0      	cmp	r0, r4
 800899e:	d114      	bne.n	80089ca <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089a0:	69cd      	ldr	r5, [r1, #28]
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089a2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a8:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089ae:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089b2:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ba:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089c2:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089c8:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80089ca:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80089cc:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80089ce:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80089d2:	4608      	mov	r0, r1
}
 80089d4:	bc30      	pop	{r4, r5}
 80089d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80089d8:	2002      	movs	r0, #2
}
 80089da:	4770      	bx	lr
 80089dc:	40012c00 	.word	0x40012c00

080089e0 <HAL_TIMEx_CommutCallback>:
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop

080089e4 <HAL_TIMEx_BreakCallback>:
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop

080089e8 <HAL_TIMEx_Break2Callback>:
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop

080089ec <HAL_TIMEx_EncoderIndexCallback>:
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop

080089f0 <HAL_TIMEx_DirectionChangeCallback>:
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop

080089f4 <HAL_TIMEx_IndexErrorCallback>:
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop

080089f8 <HAL_TIMEx_TransitionErrorCallback>:
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop

080089fc <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089fc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d149      	bne.n	8008a98 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d045      	beq.n	8008a94 <HAL_UART_Receive_IT+0x98>
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d043      	beq.n	8008a94 <HAL_UART_Receive_IT+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008a0c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d041      	beq.n	8008a98 <HAL_UART_Receive_IT+0x9c>
{
 8008a14:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a16:	4b49      	ldr	r3, [pc, #292]	; (8008b3c <HAL_UART_Receive_IT+0x140>)
 8008a18:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8008a1a:	2501      	movs	r5, #1
 8008a1c:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a20:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a22:	f04f 0500 	mov.w	r5, #0
 8008a26:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a28:	d006      	beq.n	8008a38 <HAL_UART_Receive_IT+0x3c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	d503      	bpl.n	8008a38 <HAL_UART_Receive_IT+0x3c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a36:	6023      	str	r3, [r4, #0]
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a38:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8008a3a:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8008a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8008a40:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 8008a44:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a48:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a4c:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008a4e:	d025      	beq.n	8008a9c <HAL_UART_Receive_IT+0xa0>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d138      	bne.n	8008ac6 <HAL_UART_Receive_IT+0xca>
 8008a54:	6903      	ldr	r3, [r0, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05e      	beq.n	8008b18 <HAL_UART_Receive_IT+0x11c>
 8008a5a:	237f      	movs	r3, #127	; 0x7f
 8008a5c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a60:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a62:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a64:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a68:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6c:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a6e:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a70:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a74:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a78:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a7a:	d03a      	beq.n	8008af2 <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a7c:	4b30      	ldr	r3, [pc, #192]	; (8008b40 <HAL_UART_Receive_IT+0x144>)
 8008a7e:	6703      	str	r3, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a80:	2300      	movs	r3, #0
 8008a82:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a86:	6822      	ldr	r2, [r4, #0]
 8008a88:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a8c:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a8e:	6022      	str	r2, [r4, #0]
}
 8008a90:	bc30      	pop	{r4, r5}
 8008a92:	4770      	bx	lr
      return HAL_ERROR;
 8008a94:	2001      	movs	r0, #1
 8008a96:	4770      	bx	lr
    return HAL_BUSY;
 8008a98:	2002      	movs	r0, #2
}
 8008a9a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008a9c:	6903      	ldr	r3, [r0, #16]
 8008a9e:	b9c3      	cbnz	r3, 8008ad2 <HAL_UART_Receive_IT+0xd6>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa0:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008aac:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	f240 15ff 	movw	r5, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ab6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008aba:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abe:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ac0:	d035      	beq.n	8008b2e <HAL_UART_Receive_IT+0x132>
      huart->RxISR = UART_RxISR_16BIT;
 8008ac2:	4b20      	ldr	r3, [pc, #128]	; (8008b44 <HAL_UART_Receive_IT+0x148>)
 8008ac4:	e7db      	b.n	8008a7e <HAL_UART_Receive_IT+0x82>
  UART_MASK_COMPUTATION(huart);
 8008ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aca:	d029      	beq.n	8008b20 <HAL_UART_Receive_IT+0x124>
 8008acc:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8008ad0:	e7c6      	b.n	8008a60 <HAL_UART_Receive_IT+0x64>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ad2:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad4:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ad8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008adc:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ade:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	25ff      	movs	r5, #255	; 0xff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ae6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008aea:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008af0:	d1c4      	bne.n	8008a7c <HAL_UART_Receive_IT+0x80>
 8008af2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d8c0      	bhi.n	8008a7c <HAL_UART_Receive_IT+0x80>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008afa:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <HAL_UART_Receive_IT+0x14c>)
 8008afc:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008afe:	2300      	movs	r3, #0
 8008b00:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b0a:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b0c:	68a2      	ldr	r2, [r4, #8]
 8008b0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b12:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b14:	60a2      	str	r2, [r4, #8]
 8008b16:	e7bb      	b.n	8008a90 <HAL_UART_Receive_IT+0x94>
  UART_MASK_COMPUTATION(huart);
 8008b18:	23ff      	movs	r3, #255	; 0xff
 8008b1a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b1e:	e79f      	b.n	8008a60 <HAL_UART_Receive_IT+0x64>
 8008b20:	6903      	ldr	r3, [r0, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d099      	beq.n	8008a5a <HAL_UART_Receive_IT+0x5e>
 8008b26:	233f      	movs	r3, #63	; 0x3f
 8008b28:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008b2c:	e798      	b.n	8008a60 <HAL_UART_Receive_IT+0x64>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b2e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d8c5      	bhi.n	8008ac2 <HAL_UART_Receive_IT+0xc6>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <HAL_UART_Receive_IT+0x150>)
 8008b38:	e7e0      	b.n	8008afc <HAL_UART_Receive_IT+0x100>
 8008b3a:	bf00      	nop
 8008b3c:	40008000 	.word	0x40008000
 8008b40:	08008e3d 	.word	0x08008e3d
 8008b44:	08008ebd 	.word	0x08008ebd
 8008b48:	08008f35 	.word	0x08008f35
 8008b4c:	080090a9 	.word	0x080090a9

08008b50 <HAL_UART_TxCpltCallback>:
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop

08008b54 <HAL_UART_ErrorCallback>:
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop

08008b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b58:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b62:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b66:	f7ff fff5 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6a:	bd08      	pop	{r3, pc}

08008b6c <HAL_UARTEx_RxEventCallback>:
}
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop

08008b70 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b70:	6802      	ldr	r2, [r0, #0]
 8008b72:	69d3      	ldr	r3, [r2, #28]
{
 8008b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b78:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 8008b7c:	4233      	tst	r3, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b7e:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b80:	6891      	ldr	r1, [r2, #8]
{
 8008b82:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008b84:	d027      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b86:	48aa      	ldr	r0, [pc, #680]	; (8008e30 <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b88:	4eaa      	ldr	r6, [pc, #680]	; (8008e34 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b8a:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b8c:	402e      	ands	r6, r5
 8008b8e:	4306      	orrs	r6, r0
 8008b90:	d153      	bne.n	8008c3a <HAL_UART_IRQHandler+0xca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008b94:	2801      	cmp	r0, #1
 8008b96:	d02c      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b98:	02de      	lsls	r6, r3, #11
 8008b9a:	d502      	bpl.n	8008ba2 <HAL_UART_IRQHandler+0x32>
 8008b9c:	0248      	lsls	r0, r1, #9
 8008b9e:	f100 80d7 	bmi.w	8008d50 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ba2:	061f      	lsls	r7, r3, #24
 8008ba4:	d506      	bpl.n	8008bb4 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ba6:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008baa:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bae:	4301      	orrs	r1, r0
 8008bb0:	f040 80c6 	bne.w	8008d40 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bb4:	065e      	lsls	r6, r3, #25
 8008bb6:	d502      	bpl.n	8008bbe <HAL_UART_IRQHandler+0x4e>
 8008bb8:	0668      	lsls	r0, r5, #25
 8008bba:	f100 80d5 	bmi.w	8008d68 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008bbe:	0219      	lsls	r1, r3, #8
 8008bc0:	d502      	bpl.n	8008bc8 <HAL_UART_IRQHandler+0x58>
 8008bc2:	006a      	lsls	r2, r5, #1
 8008bc4:	f100 80dd 	bmi.w	8008d82 <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bc8:	01db      	lsls	r3, r3, #7
 8008bca:	d502      	bpl.n	8008bd2 <HAL_UART_IRQHandler+0x62>
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	f2c0 810b 	blt.w	8008de8 <HAL_UART_IRQHandler+0x278>
}
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd6:	069e      	lsls	r6, r3, #26
 8008bd8:	d5db      	bpl.n	8008b92 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bda:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bde:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8008be2:	433e      	orrs	r6, r7
 8008be4:	d0d5      	beq.n	8008b92 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 8008be6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f2      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x62>
}
 8008bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bf0:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bf2:	06d8      	lsls	r0, r3, #27
 8008bf4:	d5d0      	bpl.n	8008b98 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bf6:	06ef      	lsls	r7, r5, #27
 8008bf8:	d5ce      	bpl.n	8008b98 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfe:	6893      	ldr	r3, [r2, #8]
 8008c00:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008c04:	f000 80c9 	beq.w	8008d9a <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c08:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008c0a:	6801      	ldr	r1, [r0, #0]
 8008c0c:	684b      	ldr	r3, [r1, #4]
 8008c0e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0de      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c14:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	d9da      	bls.n	8008bd2 <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 8008c1c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c20:	680b      	ldr	r3, [r1, #0]
 8008c22:	f013 0320 	ands.w	r3, r3, #32
 8008c26:	f000 80ea 	beq.w	8008dfe <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c2a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008c2e:	1a69      	subs	r1, r5, r1
 8008c30:	b289      	uxth	r1, r1
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff ff9a 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 8008c38:	e7cb      	b.n	8008bd2 <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c3a:	07df      	lsls	r7, r3, #31
 8008c3c:	d509      	bpl.n	8008c52 <HAL_UART_IRQHandler+0xe2>
 8008c3e:	05ee      	lsls	r6, r5, #23
 8008c40:	d507      	bpl.n	8008c52 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c42:	2601      	movs	r6, #1
 8008c44:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c46:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008c4a:	f046 0601 	orr.w	r6, r6, #1
 8008c4e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c52:	079f      	lsls	r7, r3, #30
 8008c54:	d567      	bpl.n	8008d26 <HAL_UART_IRQHandler+0x1b6>
 8008c56:	07ce      	lsls	r6, r1, #31
 8008c58:	d509      	bpl.n	8008c6e <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c5a:	2602      	movs	r6, #2
 8008c5c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c5e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c62:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c64:	f046 0604 	orr.w	r6, r6, #4
 8008c68:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c6c:	d45f      	bmi.n	8008d2e <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c6e:	071e      	lsls	r6, r3, #28
 8008c70:	d50b      	bpl.n	8008c8a <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c72:	f005 0620 	and.w	r6, r5, #32
 8008c76:	4330      	orrs	r0, r6
 8008c78:	d007      	beq.n	8008c8a <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c7a:	2008      	movs	r0, #8
 8008c7c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c7e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008c82:	f040 0008 	orr.w	r0, r0, #8
 8008c86:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c8a:	0518      	lsls	r0, r3, #20
 8008c8c:	d50a      	bpl.n	8008ca4 <HAL_UART_IRQHandler+0x134>
 8008c8e:	016f      	lsls	r7, r5, #5
 8008c90:	d508      	bpl.n	8008ca4 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c96:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c98:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008c9c:	f040 0020 	orr.w	r0, r0, #32
 8008ca0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ca4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d092      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cac:	069e      	lsls	r6, r3, #26
 8008cae:	d506      	bpl.n	8008cbe <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cb0:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cb4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8008cb8:	ea55 0301 	orrs.w	r3, r5, r1
 8008cbc:	d166      	bne.n	8008d8c <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 8008cbe:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cc2:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cc4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ccc:	431d      	orrs	r5, r3
 8008cce:	f000 8090 	beq.w	8008df2 <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd2:	6813      	ldr	r3, [r2, #0]
 8008cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cd8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cda:	6893      	ldr	r3, [r2, #8]
 8008cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	f023 0301 	bic.w	r3, r3, #1
 8008ce4:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d103      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	6813      	ldr	r3, [r2, #0]
 8008cee:	f023 0310 	bic.w	r3, r3, #16
 8008cf2:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfc:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfe:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 8008d00:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d02:	064d      	lsls	r5, r1, #25
 8008d04:	d52c      	bpl.n	8008d60 <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d06:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008d08:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d0e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008d10:	b330      	cbz	r0, 8008d60 <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d12:	4b49      	ldr	r3, [pc, #292]	; (8008e38 <HAL_UART_IRQHandler+0x2c8>)
 8008d14:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d16:	f7fc ffcd 	bl	8005cb4 <HAL_DMA_Abort_IT>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f43f af59 	beq.w	8008bd2 <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d20:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008d22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d24:	e762      	b.n	8008bec <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d26:	075e      	lsls	r6, r3, #29
 8008d28:	d5a1      	bpl.n	8008c6e <HAL_UART_IRQHandler+0xfe>
 8008d2a:	07cf      	lsls	r7, r1, #31
 8008d2c:	d59f      	bpl.n	8008c6e <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d2e:	2604      	movs	r6, #4
 8008d30:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d32:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008d36:	f046 0602 	orr.w	r6, r6, #2
 8008d3a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8008d3e:	e796      	b.n	8008c6e <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 8008d40:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f43f af45 	beq.w	8008bd2 <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8008d48:	4620      	mov	r0, r4
}
 8008d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008d4e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008d54:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d56:	6213      	str	r3, [r2, #32]
}
 8008d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008d5c:	f000 bdee 	b.w	800993c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8008d60:	4620      	mov	r0, r4
 8008d62:	f7ff fef7 	bl	8008b54 <HAL_UART_ErrorCallback>
 8008d66:	e734      	b.n	8008bd2 <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d68:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d6a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d70:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d72:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d74:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008d76:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008d7a:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8008d7c:	f7ff fee8 	bl	8008b50 <HAL_UART_TxCpltCallback>
    return;
 8008d80:	e727      	b.n	8008bd2 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d82:	4620      	mov	r0, r4
}
 8008d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d88:	f000 bddc 	b.w	8009944 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8008d8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d095      	beq.n	8008cbe <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 8008d92:	4620      	mov	r0, r4
 8008d94:	4798      	blx	r3
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	e791      	b.n	8008cbe <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d9a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8008d9e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008da2:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008da4:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8008da6:	2900      	cmp	r1, #0
 8008da8:	f43f af13 	beq.w	8008bd2 <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008db0:	1a08      	subs	r0, r1, r0
 8008db2:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8008db4:	2900      	cmp	r1, #0
 8008db6:	f43f af0c 	beq.w	8008bd2 <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dba:	6810      	ldr	r0, [r2, #0]
 8008dbc:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8008dc0:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dc2:	6890      	ldr	r0, [r2, #8]
 8008dc4:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8008dc8:	f020 0001 	bic.w	r0, r0, #1
        huart->RxState = HAL_UART_STATE_READY;
 8008dcc:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dce:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008dd0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd6:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8008dd8:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dda:	f020 0310 	bic.w	r3, r0, #16
 8008dde:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fec3 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 8008de6:	e6f4      	b.n	8008bd2 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008de8:	4620      	mov	r0, r4
}
 8008dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008dee:	f000 bda7 	b.w	8009940 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8008df2:	4620      	mov	r0, r4
 8008df4:	f7ff feae 	bl	8008b54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008dfc:	e6e9      	b.n	8008bd2 <HAL_UART_IRQHandler+0x62>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dfe:	6811      	ldr	r1, [r2, #0]
 8008e00:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008e04:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e06:	6891      	ldr	r1, [r2, #8]
 8008e08:	f021 0101 	bic.w	r1, r1, #1
 8008e0c:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e0e:	6891      	ldr	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8008e10:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e12:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008e16:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8008e18:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e1c:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	f023 0310 	bic.w	r3, r3, #16
 8008e24:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e26:	f7fc ff0b 	bl	8005c40 <HAL_DMA_Abort>
 8008e2a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008e2e:	e6fc      	b.n	8008c2a <HAL_UART_IRQHandler+0xba>
 8008e30:	10000001 	.word	0x10000001
 8008e34:	04000120 	.word	0x04000120
 8008e38:	08008b59 	.word	0x08008b59

08008e3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e3c:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008e42:	2b22      	cmp	r3, #34	; 0x22
{
 8008e44:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e46:	d005      	beq.n	8008e54 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e48:	6802      	ldr	r2, [r0, #0]
 8008e4a:	6993      	ldr	r3, [r2, #24]
 8008e4c:	f043 0308 	orr.w	r3, r3, #8
 8008e50:	6193      	str	r3, [r2, #24]
  }
}
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e54:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e56:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e5c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008e5e:	400b      	ands	r3, r1
 8008e60:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8008e62:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008e66:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008e70:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008e74:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8008e76:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8008e78:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e9      	bne.n	8008e52 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7e:	6802      	ldr	r2, [r0, #0]
 8008e80:	6811      	ldr	r1, [r2, #0]
 8008e82:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008e86:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e88:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8c:	f021 0101 	bic.w	r1, r1, #1
 8008e90:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008e92:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e96:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008e98:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9a:	2901      	cmp	r1, #1
 8008e9c:	d004      	beq.n	8008ea8 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 8008e9e:	f7fb fdd5 	bl	8004a4c <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea8:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eaa:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb4:	f7ff fe5a 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 8008eb8:	e7f3      	b.n	8008ea2 <UART_RxISR_8BIT+0x66>
 8008eba:	bf00      	nop

08008ebc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ebc:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ebe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ec2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec4:	2b22      	cmp	r3, #34	; 0x22
{
 8008ec6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec8:	d004      	beq.n	8008ed4 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eca:	6993      	ldr	r3, [r2, #24]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	6193      	str	r3, [r2, #24]
  }
}
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ed4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ed6:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8008eda:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008edc:	402b      	ands	r3, r5
 8008ede:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 8008ee2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008ee6:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008ef0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1eb      	bne.n	8008ed2 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008efa:	6811      	ldr	r1, [r2, #0]
 8008efc:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008f00:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f02:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008f04:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	f021 0101 	bic.w	r1, r1, #1
 8008f0a:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008f12:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	2901      	cmp	r1, #1
 8008f16:	d004      	beq.n	8008f22 <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 8008f18:	f7fb fd98 	bl	8004a4c <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f22:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f24:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f28:	f023 0310 	bic.w	r3, r3, #16
 8008f2c:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f2e:	f7ff fe1d 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 8008f32:	e7f3      	b.n	8008f1c <UART_RxISR_16BIT+0x60>

08008f34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f38:	6803      	ldr	r3, [r0, #0]
 8008f3a:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f3c:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f3e:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f40:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008f44:	2a22      	cmp	r2, #34	; 0x22
 8008f46:	d005      	beq.n	8008f54 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	f042 0208 	orr.w	r2, r2, #8
 8008f4e:	619a      	str	r2, [r3, #24]
  }
}
 8008f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f54:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008f58:	4604      	mov	r4, r0
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	f000 809c 	beq.w	8009098 <UART_RxISR_8BIT_FIFOEN+0x164>
 8008f60:	068a      	lsls	r2, r1, #26
 8008f62:	f140 8082 	bpl.w	800906a <UART_RxISR_8BIT_FIFOEN+0x136>
 8008f66:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f6a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80090a4 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f6e:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f72:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f76:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f7a:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f80:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008f82:	402b      	ands	r3, r5
 8008f84:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008f86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f8a:	6821      	ldr	r1, [r4, #0]
      huart->pRxBuffPtr++;
 8008f8c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f96:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 8008f9a:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f9c:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 8008fa0:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fa2:	d026      	beq.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fa4:	f01b 0f01 	tst.w	fp, #1
 8008fa8:	d008      	beq.n	8008fbc <UART_RxISR_8BIT_FIFOEN+0x88>
 8008faa:	b13f      	cbz	r7, 8008fbc <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fac:	2301      	movs	r3, #1
 8008fae:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fb4:	f043 0301 	orr.w	r3, r3, #1
 8008fb8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fbc:	f01b 0f02 	tst.w	fp, #2
 8008fc0:	d035      	beq.n	800902e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008fc2:	b196      	cbz	r6, 8008fea <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fcc:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd0:	f043 0304 	orr.w	r3, r3, #4
 8008fd4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fd8:	d007      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fda:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fde:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fe2:	f043 0302 	orr.w	r3, r3, #2
 8008fe6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d135      	bne.n	800905e <UART_RxISR_8BIT_FIFOEN+0x12a>
      if (huart->RxXferCount == 0U)
 8008ff2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	b9a3      	cbnz	r3, 8009024 <UART_RxISR_8BIT_FIFOEN+0xf0>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	6811      	ldr	r1, [r2, #0]
 8008ffe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009002:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009004:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8009006:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009008:	ea01 0109 	and.w	r1, r1, r9
 800900c:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800900e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009012:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009014:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009016:	2901      	cmp	r1, #1
 8009018:	d017      	beq.n	800904a <UART_RxISR_8BIT_FIFOEN+0x116>
          HAL_UART_RxCpltCallback(huart);
 800901a:	4620      	mov	r0, r4
 800901c:	f7fb fd16 	bl	8004a4c <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009024:	f01b 0f20 	tst.w	fp, #32
 8009028:	d01f      	beq.n	800906a <UART_RxISR_8BIT_FIFOEN+0x136>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	e7a7      	b.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800902e:	f01b 0f04 	tst.w	fp, #4
 8009032:	d0da      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xb6>
 8009034:	2e00      	cmp	r6, #0
 8009036:	d0d8      	beq.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009038:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009048:	e7cf      	b.n	8008fea <UART_RxISR_8BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904a:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009050:	f023 0310 	bic.w	r3, r3, #16
 8009054:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff fd88 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 800905c:	e7e0      	b.n	8009020 <UART_RxISR_8BIT_FIFOEN+0xec>
          HAL_UART_ErrorCallback(huart);
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff fd78 	bl	8008b54 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009064:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8009068:	e7c3      	b.n	8008ff2 <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 800906a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800906e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009070:	2b00      	cmp	r3, #0
 8009072:	f43f af6d 	beq.w	8008f50 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8009076:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800907a:	429a      	cmp	r2, r3
 800907c:	f67f af68 	bls.w	8008f50 <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009080:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8009082:	4907      	ldr	r1, [pc, #28]	; (80090a0 <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800908a:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800908c:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800908e:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009090:	f042 0220 	orr.w	r2, r2, #32
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e75b      	b.n	8008f50 <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8009098:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800909c:	e758      	b.n	8008f50 <UART_RxISR_8BIT_FIFOEN+0x1c>
 800909e:	bf00      	nop
 80090a0:	08008e3d 	.word	0x08008e3d
 80090a4:	effffffe 	.word	0xeffffffe

080090a8 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090a8:	6802      	ldr	r2, [r0, #0]
{
 80090aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090ae:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090b0:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090b2:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80090b8:	2b22      	cmp	r3, #34	; 0x22
 80090ba:	d005      	beq.n	80090c8 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090bc:	6993      	ldr	r3, [r2, #24]
 80090be:	f043 0308 	orr.w	r3, r3, #8
 80090c2:	6193      	str	r3, [r2, #24]
  }
}
 80090c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090c8:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80090cc:	4604      	mov	r4, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 8099 	beq.w	8009206 <UART_RxISR_16BIT_FIFOEN+0x15e>
 80090d4:	068b      	lsls	r3, r1, #26
 80090d6:	d57f      	bpl.n	80091d8 <UART_RxISR_16BIT_FIFOEN+0x130>
  uint16_t  uhMask = huart->Mask;
 80090d8:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090dc:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009210 <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090e0:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090e4:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e8:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ec:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80090f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80090f4:	402b      	ands	r3, r5
 80090f6:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 80090fa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80090fe:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8009100:	3b01      	subs	r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009108:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800910c:	f01b 0f07 	tst.w	fp, #7
 8009110:	d026      	beq.n	8009160 <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009112:	f01b 0f01 	tst.w	fp, #1
 8009116:	d008      	beq.n	800912a <UART_RxISR_16BIT_FIFOEN+0x82>
 8009118:	b13f      	cbz	r7, 800912a <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800911a:	2301      	movs	r3, #1
 800911c:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800911e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800912a:	f01b 0f02 	tst.w	fp, #2
 800912e:	d035      	beq.n	800919c <UART_RxISR_16BIT_FIFOEN+0xf4>
 8009130:	b196      	cbz	r6, 8009158 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009132:	2302      	movs	r3, #2
 8009134:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009136:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800913a:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800913e:	f043 0304 	orr.w	r3, r3, #4
 8009142:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009146:	d007      	beq.n	8009158 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009148:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800914c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009150:	f043 0302 	orr.w	r3, r3, #2
 8009154:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009158:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d135      	bne.n	80091cc <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 8009160:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009164:	b29b      	uxth	r3, r3
 8009166:	b9a3      	cbnz	r3, 8009192 <UART_RxISR_16BIT_FIFOEN+0xea>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	6811      	ldr	r1, [r2, #0]
 800916c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009170:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009172:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8009174:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009176:	ea01 0109 	and.w	r1, r1, r9
 800917a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800917c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009180:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009182:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009184:	2901      	cmp	r1, #1
 8009186:	d017      	beq.n	80091b8 <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8009188:	4620      	mov	r0, r4
 800918a:	f7fb fc5f 	bl	8004a4c <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009192:	f01b 0f20 	tst.w	fp, #32
 8009196:	d01f      	beq.n	80091d8 <UART_RxISR_16BIT_FIFOEN+0x130>
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	e7a9      	b.n	80090f0 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800919c:	f01b 0f04 	tst.w	fp, #4
 80091a0:	d0da      	beq.n	8009158 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d0d8      	beq.n	8009158 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091a6:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80091ae:	f043 0302 	orr.w	r3, r3, #2
 80091b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80091b6:	e7cf      	b.n	8009158 <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b8:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091be:	f023 0310 	bic.w	r3, r3, #16
 80091c2:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7ff fcd1 	bl	8008b6c <HAL_UARTEx_RxEventCallback>
 80091ca:	e7e0      	b.n	800918e <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 80091cc:	4620      	mov	r0, r4
 80091ce:	f7ff fcc1 	bl	8008b54 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d2:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 80091d6:	e7c3      	b.n	8009160 <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 80091d8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80091dc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f43f af70 	beq.w	80090c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80091e4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80091e8:	429a      	cmp	r2, r3
 80091ea:	f67f af6b 	bls.w	80090c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091ee:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80091f0:	4906      	ldr	r1, [pc, #24]	; (800920c <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091f8:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fa:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80091fc:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fe:	f042 0220 	orr.w	r2, r2, #32
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e75e      	b.n	80090c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8009206:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800920a:	e75b      	b.n	80090c4 <UART_RxISR_16BIT_FIFOEN+0x1c>
 800920c:	08008ebd 	.word	0x08008ebd
 8009210:	effffffe 	.word	0xeffffffe

08009214 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009214:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009216:	07da      	lsls	r2, r3, #31
{
 8009218:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800921a:	d506      	bpl.n	800922a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800921c:	6801      	ldr	r1, [r0, #0]
 800921e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009220:	684a      	ldr	r2, [r1, #4]
 8009222:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009226:	4322      	orrs	r2, r4
 8009228:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922a:	079c      	lsls	r4, r3, #30
 800922c:	d506      	bpl.n	800923c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800922e:	6801      	ldr	r1, [r0, #0]
 8009230:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009232:	684a      	ldr	r2, [r1, #4]
 8009234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009238:	4322      	orrs	r2, r4
 800923a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800923c:	0759      	lsls	r1, r3, #29
 800923e:	d506      	bpl.n	800924e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009240:	6801      	ldr	r1, [r0, #0]
 8009242:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009244:	684a      	ldr	r2, [r1, #4]
 8009246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800924a:	4322      	orrs	r2, r4
 800924c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800924e:	071a      	lsls	r2, r3, #28
 8009250:	d506      	bpl.n	8009260 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009252:	6801      	ldr	r1, [r0, #0]
 8009254:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009256:	684a      	ldr	r2, [r1, #4]
 8009258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800925c:	4322      	orrs	r2, r4
 800925e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009260:	06dc      	lsls	r4, r3, #27
 8009262:	d506      	bpl.n	8009272 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009264:	6801      	ldr	r1, [r0, #0]
 8009266:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009268:	688a      	ldr	r2, [r1, #8]
 800926a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800926e:	4322      	orrs	r2, r4
 8009270:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009272:	0699      	lsls	r1, r3, #26
 8009274:	d506      	bpl.n	8009284 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009276:	6801      	ldr	r1, [r0, #0]
 8009278:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800927a:	688a      	ldr	r2, [r1, #8]
 800927c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009280:	4322      	orrs	r2, r4
 8009282:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009284:	065a      	lsls	r2, r3, #25
 8009286:	d509      	bpl.n	800929c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009288:	6801      	ldr	r1, [r0, #0]
 800928a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800928c:	684a      	ldr	r2, [r1, #4]
 800928e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009292:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009294:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009298:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800929a:	d00b      	beq.n	80092b4 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800929c:	061b      	lsls	r3, r3, #24
 800929e:	d506      	bpl.n	80092ae <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092a0:	6802      	ldr	r2, [r0, #0]
 80092a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80092a4:	6853      	ldr	r3, [r2, #4]
 80092a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80092aa:	430b      	orrs	r3, r1
 80092ac:	6053      	str	r3, [r2, #4]
}
 80092ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092b4:	684a      	ldr	r2, [r1, #4]
 80092b6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80092b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80092bc:	4322      	orrs	r2, r4
 80092be:	604a      	str	r2, [r1, #4]
 80092c0:	e7ec      	b.n	800929c <UART_AdvFeatureConfig+0x88>
 80092c2:	bf00      	nop

080092c4 <UART_CheckIdleState>:
{
 80092c4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c6:	2300      	movs	r3, #0
{
 80092c8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80092ce:	f7fb fc33 	bl	8004b38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80092d8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092da:	d40d      	bmi.n	80092f8 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	0752      	lsls	r2, r2, #29
 80092e0:	d431      	bmi.n	8009346 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80092e4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80092e6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80092ea:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 80092ee:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80092f0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092f8:	69da      	ldr	r2, [r3, #28]
 80092fa:	0292      	lsls	r2, r2, #10
 80092fc:	d4ee      	bmi.n	80092dc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092fe:	f7fb fc1b 	bl	8004b38 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009302:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009304:	1b40      	subs	r0, r0, r5
 8009306:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800930a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800930c:	d22c      	bcs.n	8009368 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800930e:	0750      	lsls	r0, r2, #29
 8009310:	d5f2      	bpl.n	80092f8 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	0511      	lsls	r1, r2, #20
 8009316:	d5ef      	bpl.n	80092f8 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800931c:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009324:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8009328:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	f021 0101 	bic.w	r1, r1, #1
 800932e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009330:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8009332:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8009336:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800933a:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 800933c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009340:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009344:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	0258      	lsls	r0, r3, #9
 800934a:	d4ca      	bmi.n	80092e2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800934c:	f7fb fbf4 	bl	8004b38 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009350:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009352:	1b40      	subs	r0, r0, r5
 8009354:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009358:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935a:	d205      	bcs.n	8009368 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800935c:	0751      	lsls	r1, r2, #29
 800935e:	d5f2      	bpl.n	8009346 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	0512      	lsls	r2, r2, #20
 8009364:	d5ef      	bpl.n	8009346 <UART_CheckIdleState+0x82>
 8009366:	e7d7      	b.n	8009318 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800936c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8009370:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009372:	f022 0201 	bic.w	r2, r2, #1
 8009376:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009378:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800937a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800937e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8009382:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8009384:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8009388:	bd38      	pop	{r3, r4, r5, pc}
 800938a:	bf00      	nop

0800938c <HAL_UART_Init>:
  if (huart == NULL)
 800938c:	2800      	cmp	r0, #0
 800938e:	f000 81b5 	beq.w	80096fc <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009392:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009396:	b570      	push	{r4, r5, r6, lr}
 8009398:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800939a:	2b00      	cmp	r3, #0
 800939c:	d06c      	beq.n	8009478 <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 800939e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093a0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093a2:	49c0      	ldr	r1, [pc, #768]	; (80096a4 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 80093a4:	2224      	movs	r2, #36	; 0x24
 80093a6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80093aa:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093ac:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80093ae:	f020 0001 	bic.w	r0, r0, #1
 80093b2:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093b4:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093b6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093b8:	4332      	orrs	r2, r6
 80093ba:	4302      	orrs	r2, r0
 80093bc:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093be:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093c2:	430a      	orrs	r2, r1
 80093c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093ca:	49b7      	ldr	r1, [pc, #732]	; (80096a8 <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80093d0:	432a      	orrs	r2, r5
 80093d2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093d4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093d6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093d8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093da:	d052      	beq.n	8009482 <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093dc:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093e0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80093e4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80093e8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f0:	49ae      	ldr	r1, [pc, #696]	; (80096ac <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093f2:	f022 020f 	bic.w	r2, r2, #15
 80093f6:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093fa:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093fc:	d028      	beq.n	8009450 <HAL_UART_Init+0xc4>
 80093fe:	4aac      	ldr	r2, [pc, #688]	; (80096b0 <HAL_UART_Init+0x324>)
 8009400:	4293      	cmp	r3, r2
 8009402:	f000 8091 	beq.w	8009528 <HAL_UART_Init+0x19c>
 8009406:	4aab      	ldr	r2, [pc, #684]	; (80096b4 <HAL_UART_Init+0x328>)
 8009408:	4293      	cmp	r3, r2
 800940a:	f000 8165 	beq.w	80096d8 <HAL_UART_Init+0x34c>
 800940e:	4aaa      	ldr	r2, [pc, #680]	; (80096b8 <HAL_UART_Init+0x32c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	f000 80e4 	beq.w	80095de <HAL_UART_Init+0x252>
 8009416:	4aa9      	ldr	r2, [pc, #676]	; (80096bc <HAL_UART_Init+0x330>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d111      	bne.n	8009440 <HAL_UART_Init+0xb4>
 800941c:	4ba8      	ldr	r3, [pc, #672]	; (80096c0 <HAL_UART_Init+0x334>)
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800942a:	f000 817d 	beq.w	8009728 <HAL_UART_Init+0x39c>
 800942e:	f200 8101 	bhi.w	8009634 <HAL_UART_Init+0x2a8>
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80e7 	beq.w	8009606 <HAL_UART_Init+0x27a>
 8009438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800943c:	f000 80dd 	beq.w	80095fa <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 8009440:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009444:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8009446:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800944a:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800944c:	2001      	movs	r0, #1
 800944e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009450:	4b9b      	ldr	r3, [pc, #620]	; (80096c0 <HAL_UART_Init+0x334>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	3b01      	subs	r3, #1
 800945c:	2b02      	cmp	r3, #2
 800945e:	f240 80d9 	bls.w	8009614 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009462:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009466:	f000 8151 	beq.w	800970c <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 800946a:	f7fd ff35 	bl	80072d8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800946e:	2800      	cmp	r0, #0
 8009470:	f000 80d3 	beq.w	800961a <HAL_UART_Init+0x28e>
 8009474:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009476:	e081      	b.n	800957c <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 8009478:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800947c:	f7fb fa98 	bl	80049b0 <HAL_UART_MspInit>
 8009480:	e78d      	b.n	800939e <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009482:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009486:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800948a:	430a      	orrs	r2, r1
 800948c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009492:	488b      	ldr	r0, [pc, #556]	; (80096c0 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009494:	f022 020f 	bic.w	r2, r2, #15
 8009498:	430a      	orrs	r2, r1
 800949a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800949c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80094a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a8:	f000 813c 	beq.w	8009724 <HAL_UART_Init+0x398>
 80094ac:	d80c      	bhi.n	80094c8 <HAL_UART_Init+0x13c>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8132 	beq.w	8009718 <HAL_UART_Init+0x38c>
 80094b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b8:	d1c2      	bne.n	8009440 <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fd fdb1 	bl	8007020 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 80ab 	beq.w	800961a <HAL_UART_Init+0x28e>
 80094c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094c6:	e004      	b.n	80094d2 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094cc:	d1b8      	bne.n	8009440 <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094d2:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d4:	4b7b      	ldr	r3, [pc, #492]	; (80096c4 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094d6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094da:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80094de:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e2:	42b3      	cmp	r3, r6
 80094e4:	d3ac      	bcc.n	8009440 <HAL_UART_Init+0xb4>
 80094e6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80094ea:	d8a9      	bhi.n	8009440 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ec:	2600      	movs	r6, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	4631      	mov	r1, r6
 80094f2:	f7f7 fbf1 	bl	8000cd8 <__aeabi_uldivmod>
 80094f6:	020b      	lsls	r3, r1, #8
 80094f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094fc:	0202      	lsls	r2, r0, #8
 80094fe:	0868      	lsrs	r0, r5, #1
 8009500:	1810      	adds	r0, r2, r0
 8009502:	f143 0100 	adc.w	r1, r3, #0
 8009506:	462a      	mov	r2, r5
 8009508:	4633      	mov	r3, r6
 800950a:	f7f7 fbe5 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800950e:	4b6e      	ldr	r3, [pc, #440]	; (80096c8 <HAL_UART_Init+0x33c>)
 8009510:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009514:	429a      	cmp	r2, r3
 8009516:	d893      	bhi.n	8009440 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 8009518:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800951a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800951e:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8009520:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009524:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8009526:	e043      	b.n	80095b0 <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009528:	4b65      	ldr	r3, [pc, #404]	; (80096c0 <HAL_UART_Init+0x334>)
 800952a:	4a68      	ldr	r2, [pc, #416]	; (80096cc <HAL_UART_Init+0x340>)
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009530:	f003 030c 	and.w	r3, r3, #12
 8009534:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009536:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800953a:	d07f      	beq.n	800963c <HAL_UART_Init+0x2b0>
    switch (clocksource)
 800953c:	2b08      	cmp	r3, #8
 800953e:	f63f af7f 	bhi.w	8009440 <HAL_UART_Init+0xb4>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <HAL_UART_Init+0x1bc>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	0800960f 	.word	0x0800960f
 800954c:	0800946b 	.word	0x0800946b
 8009550:	080095db 	.word	0x080095db
 8009554:	08009441 	.word	0x08009441
 8009558:	08009601 	.word	0x08009601
 800955c:	08009441 	.word	0x08009441
 8009560:	08009441 	.word	0x08009441
 8009564:	08009441 	.word	0x08009441
 8009568:	08009579 	.word	0x08009579
  UART_GETCLOCKSOURCE(huart, clocksource);
 800956c:	2b30      	cmp	r3, #48	; 0x30
 800956e:	f47f af67 	bne.w	8009440 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009572:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009576:	d07a      	beq.n	800966e <HAL_UART_Init+0x2e2>
 8009578:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800957c:	6862      	ldr	r2, [r4, #4]
 800957e:	4b51      	ldr	r3, [pc, #324]	; (80096c4 <HAL_UART_Init+0x338>)
 8009580:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8009584:	fbb0 f3f3 	udiv	r3, r0, r3
 8009588:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800958c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009590:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009592:	f1a3 0110 	sub.w	r1, r3, #16
 8009596:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800959a:	4291      	cmp	r1, r2
 800959c:	f63f af50 	bhi.w	8009440 <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80095a4:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80095a6:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80095aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095ae:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d13a      	bne.n	800962c <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095c6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80095ce:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80095d0:	601a      	str	r2, [r3, #0]
}
 80095d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80095d6:	f7ff be75 	b.w	80092c4 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 80095da:	483d      	ldr	r0, [pc, #244]	; (80096d0 <HAL_UART_Init+0x344>)
 80095dc:	e7ce      	b.n	800957c <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095de:	4b38      	ldr	r3, [pc, #224]	; (80096c0 <HAL_UART_Init+0x334>)
 80095e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095e8:	2b80      	cmp	r3, #128	; 0x80
 80095ea:	f000 809d 	beq.w	8009728 <HAL_UART_Init+0x39c>
 80095ee:	f200 8081 	bhi.w	80096f4 <HAL_UART_Init+0x368>
 80095f2:	b143      	cbz	r3, 8009606 <HAL_UART_Init+0x27a>
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	f47f af23 	bne.w	8009440 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80095fe:	d07f      	beq.n	8009700 <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 8009600:	f7fd fd0e 	bl	8007020 <HAL_RCC_GetSysClockFreq>
        break;
 8009604:	e733      	b.n	800946e <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009606:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800960a:	f000 8082 	beq.w	8009712 <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 800960e:	f7fd fe51 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
        break;
 8009612:	e72c      	b.n	800946e <HAL_UART_Init+0xe2>
 8009614:	4a2f      	ldr	r2, [pc, #188]	; (80096d4 <HAL_UART_Init+0x348>)
 8009616:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8009618:	e78d      	b.n	8009536 <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 800961a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800961c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8009622:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009626:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0c4      	beq.n	80095b6 <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff fdf1 	bl	8009214 <UART_AdvFeatureConfig>
 8009632:	e7c0      	b.n	80095b6 <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009638:	d09b      	beq.n	8009572 <HAL_UART_Init+0x1e6>
 800963a:	e701      	b.n	8009440 <HAL_UART_Init+0xb4>
    switch (clocksource)
 800963c:	2b08      	cmp	r3, #8
 800963e:	f63f aeff 	bhi.w	8009440 <HAL_UART_Init+0xb4>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <HAL_UART_Init+0x2bc>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009713 	.word	0x08009713
 800964c:	0800970d 	.word	0x0800970d
 8009650:	0800966d 	.word	0x0800966d
 8009654:	08009441 	.word	0x08009441
 8009658:	08009701 	.word	0x08009701
 800965c:	08009441 	.word	0x08009441
 8009660:	08009441 	.word	0x08009441
 8009664:	08009441 	.word	0x08009441
 8009668:	0800966f 	.word	0x0800966f
        pclk = (uint32_t) HSI_VALUE;
 800966c:	4818      	ldr	r0, [pc, #96]	; (80096d0 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800966e:	6862      	ldr	r2, [r4, #4]
 8009670:	4914      	ldr	r1, [pc, #80]	; (80096c4 <HAL_UART_Init+0x338>)
 8009672:	0853      	lsrs	r3, r2, #1
 8009674:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8009678:	fbb0 f0f1 	udiv	r0, r0, r1
 800967c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009680:	fbb0 f0f2 	udiv	r0, r0, r2
 8009684:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009686:	f1a2 0110 	sub.w	r1, r2, #16
 800968a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800968e:	4299      	cmp	r1, r3
 8009690:	f63f aed6 	bhi.w	8009440 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009694:	f020 030f 	bic.w	r3, r0, #15
 8009698:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800969a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	e77e      	b.n	80095a2 <HAL_UART_Init+0x216>
 80096a4:	cfff69f3 	.word	0xcfff69f3
 80096a8:	40008000 	.word	0x40008000
 80096ac:	40013800 	.word	0x40013800
 80096b0:	40004400 	.word	0x40004400
 80096b4:	40004800 	.word	0x40004800
 80096b8:	40004c00 	.word	0x40004c00
 80096bc:	40005000 	.word	0x40005000
 80096c0:	40021000 	.word	0x40021000
 80096c4:	0800f6c0 	.word	0x0800f6c0
 80096c8:	000ffcff 	.word	0x000ffcff
 80096cc:	0800f6b0 	.word	0x0800f6b0
 80096d0:	00f42400 	.word	0x00f42400
 80096d4:	0800f6ac 	.word	0x0800f6ac
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096d8:	4b16      	ldr	r3, [pc, #88]	; (8009734 <HAL_UART_Init+0x3a8>)
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d020      	beq.n	8009728 <HAL_UART_Init+0x39c>
 80096e6:	f63f af41 	bhi.w	800956c <HAL_UART_Init+0x1e0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d08b      	beq.n	8009606 <HAL_UART_Init+0x27a>
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d083      	beq.n	80095fa <HAL_UART_Init+0x26e>
 80096f2:	e6a5      	b.n	8009440 <HAL_UART_Init+0xb4>
 80096f4:	2bc0      	cmp	r3, #192	; 0xc0
 80096f6:	f43f af3c 	beq.w	8009572 <HAL_UART_Init+0x1e6>
 80096fa:	e6a1      	b.n	8009440 <HAL_UART_Init+0xb4>
}
 80096fc:	2001      	movs	r0, #1
 80096fe:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8009700:	f7fd fc8e 	bl	8007020 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009704:	2800      	cmp	r0, #0
 8009706:	d088      	beq.n	800961a <HAL_UART_Init+0x28e>
 8009708:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800970a:	e7b0      	b.n	800966e <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800970c:	f7fd fde4 	bl	80072d8 <HAL_RCC_GetPCLK2Freq>
        break;
 8009710:	e7f8      	b.n	8009704 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009712:	f7fd fdcf 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
        break;
 8009716:	e7f5      	b.n	8009704 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009718:	f7fd fdcc 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800971c:	2800      	cmp	r0, #0
 800971e:	f43f af7c 	beq.w	800961a <HAL_UART_Init+0x28e>
 8009722:	e6cf      	b.n	80094c4 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009724:	4804      	ldr	r0, [pc, #16]	; (8009738 <HAL_UART_Init+0x3ac>)
 8009726:	e6d4      	b.n	80094d2 <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009728:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800972c:	4802      	ldr	r0, [pc, #8]	; (8009738 <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800972e:	f47f af25 	bne.w	800957c <HAL_UART_Init+0x1f0>
 8009732:	e79c      	b.n	800966e <HAL_UART_Init+0x2e2>
 8009734:	40021000 	.word	0x40021000
 8009738:	00f42400 	.word	0x00f42400

0800973c <UART_WaitOnFlagUntilTimeout>:
{
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009744:	6804      	ldr	r4, [r0, #0]
 8009746:	4607      	mov	r7, r0
 8009748:	460e      	mov	r6, r1
 800974a:	4615      	mov	r5, r2
 800974c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009752:	d10a      	bne.n	800976a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009754:	69e3      	ldr	r3, [r4, #28]
 8009756:	ea36 0303 	bics.w	r3, r6, r3
 800975a:	bf0c      	ite	eq
 800975c:	2301      	moveq	r3, #1
 800975e:	2300      	movne	r3, #0
 8009760:	429d      	cmp	r5, r3
 8009762:	d0f7      	beq.n	8009754 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8009764:	2000      	movs	r0, #0
}
 8009766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976a:	69e3      	ldr	r3, [r4, #28]
 800976c:	ea36 0303 	bics.w	r3, r6, r3
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	429d      	cmp	r5, r3
 8009778:	d1f4      	bne.n	8009764 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800977a:	f7fb f9dd 	bl	8004b38 <HAL_GetTick>
 800977e:	eba0 0009 	sub.w	r0, r0, r9
 8009782:	4540      	cmp	r0, r8
 8009784:	d820      	bhi.n	80097c8 <UART_WaitOnFlagUntilTimeout+0x8c>
 8009786:	f1b8 0f00 	cmp.w	r8, #0
 800978a:	d01d      	beq.n	80097c8 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800978c:	683c      	ldr	r4, [r7, #0]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	075a      	lsls	r2, r3, #29
 8009792:	d5dc      	bpl.n	800974e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009794:	69e3      	ldr	r3, [r4, #28]
 8009796:	051b      	lsls	r3, r3, #20
 8009798:	d5d9      	bpl.n	800974e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800979a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800979e:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097a6:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a8:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80097aa:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ac:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 80097b0:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b2:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 80097b4:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80097b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80097ba:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80097be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80097c6:	e7ce      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d2:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80097d4:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d6:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80097da:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097dc:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80097de:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80097e0:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80097e4:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80097e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80097ec:	e7bb      	b.n	8009766 <UART_WaitOnFlagUntilTimeout+0x2a>
 80097ee:	bf00      	nop

080097f0 <HAL_UART_Transmit>:
{
 80097f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80097f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80097fa:	2820      	cmp	r0, #32
{
 80097fc:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80097fe:	d17b      	bne.n	80098f8 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8009800:	4688      	mov	r8, r1
 8009802:	2900      	cmp	r1, #0
 8009804:	d048      	beq.n	8009898 <HAL_UART_Transmit+0xa8>
 8009806:	4617      	mov	r7, r2
 8009808:	2a00      	cmp	r2, #0
 800980a:	d045      	beq.n	8009898 <HAL_UART_Transmit+0xa8>
 800980c:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800980e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009812:	2b01      	cmp	r3, #1
 8009814:	d070      	beq.n	80098f8 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009816:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8009818:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800981a:	f04f 0900 	mov.w	r9, #0
 800981e:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8009822:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009826:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 800982a:	f7fb f985 	bl	8004b38 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8009830:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8009838:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800983a:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800983e:	d05f      	beq.n	8009900 <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8009840:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8009842:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8009846:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8009848:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800984a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800984e:	b1b3      	cbz	r3, 800987e <HAL_UART_Transmit+0x8e>
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	1c69      	adds	r1, r5, #1
 8009854:	d124      	bne.n	80098a0 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009856:	69d3      	ldr	r3, [r2, #28]
 8009858:	061b      	lsls	r3, r3, #24
 800985a:	d5fc      	bpl.n	8009856 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800985c:	f1b8 0f00 	cmp.w	r8, #0
 8009860:	d045      	beq.n	80098ee <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009862:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009866:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8009868:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800986c:	3b01      	subs	r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009874:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e9      	bne.n	8009852 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800987e:	9500      	str	r5, [sp, #0]
 8009880:	4633      	mov	r3, r6
 8009882:	2200      	movs	r2, #0
 8009884:	2140      	movs	r1, #64	; 0x40
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff ff58 	bl	800973c <UART_WaitOnFlagUntilTimeout>
 800988c:	2800      	cmp	r0, #0
 800988e:	d152      	bne.n	8009936 <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 8009890:	2320      	movs	r3, #32
 8009892:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8009896:	e000      	b.n	800989a <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 8009898:	2001      	movs	r0, #1
}
 800989a:	b003      	add	sp, #12
 800989c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a0:	69d3      	ldr	r3, [r2, #28]
 80098a2:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 80098a6:	d1d9      	bne.n	800985c <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a8:	f7fb f946 	bl	8004b38 <HAL_GetTick>
 80098ac:	1b80      	subs	r0, r0, r6
 80098ae:	4285      	cmp	r5, r0
 80098b0:	d32c      	bcc.n	800990c <HAL_UART_Transmit+0x11c>
 80098b2:	b35d      	cbz	r5, 800990c <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	075b      	lsls	r3, r3, #29
 80098ba:	d5ca      	bpl.n	8009852 <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098bc:	69d3      	ldr	r3, [r2, #28]
 80098be:	0518      	lsls	r0, r3, #20
 80098c0:	d5c7      	bpl.n	8009852 <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098c6:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098c8:	6813      	ldr	r3, [r2, #0]
 80098ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098ce:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d0:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80098d2:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d4:	f021 0101 	bic.w	r1, r1, #1
 80098d8:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 80098da:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80098dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80098e0:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80098e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098e8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 80098ec:	e7d5      	b.n	800989a <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098ee:	f837 3b02 	ldrh.w	r3, [r7], #2
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	e7b6      	b.n	8009866 <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 80098f8:	2002      	movs	r0, #2
}
 80098fa:	b003      	add	sp, #12
 80098fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d19c      	bne.n	8009840 <HAL_UART_Transmit+0x50>
 8009906:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8009908:	4698      	mov	r8, r3
 800990a:	e79a      	b.n	8009842 <HAL_UART_Transmit+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009914:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009916:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009918:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991a:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 800991e:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8009920:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009922:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009924:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009928:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800992c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8009936:	2003      	movs	r0, #3
 8009938:	e7af      	b.n	800989a <HAL_UART_Transmit+0xaa>
 800993a:	bf00      	nop

0800993c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop

08009940 <HAL_UARTEx_RxFifoFullCallback>:
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop

08009944 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop

08009948 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009948:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800994c:	2a01      	cmp	r2, #1
 800994e:	d017      	beq.n	8009980 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009950:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009952:	2124      	movs	r1, #36	; 0x24
{
 8009954:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8009956:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 800995a:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995c:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800995e:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009960:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009962:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009966:	f024 0401 	bic.w	r4, r4, #1
 800996a:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800996c:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800996e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009970:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009972:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8009976:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009978:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800997c:	bc30      	pop	{r4, r5}
 800997e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009980:	2002      	movs	r0, #2
}
 8009982:	4770      	bx	lr

08009984 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009988:	2a01      	cmp	r2, #1
 800998a:	d033      	beq.n	80099f4 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800998c:	4603      	mov	r3, r0
 800998e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009990:	681a      	ldr	r2, [r3, #0]
{
 8009992:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009994:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009998:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800999a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800999c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800999e:	f020 0001 	bic.w	r0, r0, #1
 80099a2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099a4:	6890      	ldr	r0, [r2, #8]
 80099a6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80099aa:	4301      	orrs	r1, r0
 80099ac:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099ae:	b1f5      	cbz	r5, 80099ee <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099b0:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099b2:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099b4:	4810      	ldr	r0, [pc, #64]	; (80099f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80099b6:	4f11      	ldr	r7, [pc, #68]	; (80099fc <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099b8:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099bc:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099be:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099c0:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80099c2:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80099c4:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099c6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099c8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099ca:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099ce:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099d2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80099d6:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80099d8:	2520      	movs	r5, #32
 80099da:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099de:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80099e0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80099e4:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80099ea:	bcf0      	pop	{r4, r5, r6, r7}
 80099ec:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80099ee:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80099f0:	4608      	mov	r0, r1
 80099f2:	e7ee      	b.n	80099d2 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80099f4:	2002      	movs	r0, #2
}
 80099f6:	4770      	bx	lr
 80099f8:	0800f6e0 	.word	0x0800f6e0
 80099fc:	0800f6d8 	.word	0x0800f6d8

08009a00 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009a00:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009a04:	2a01      	cmp	r2, #1
 8009a06:	d033      	beq.n	8009a70 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a0c:	681a      	ldr	r2, [r3, #0]
{
 8009a0e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009a10:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a14:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009a16:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a18:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009a1a:	f020 0001 	bic.w	r0, r0, #1
 8009a1e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a20:	6890      	ldr	r0, [r2, #8]
 8009a22:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8009a26:	4301      	orrs	r1, r0
 8009a28:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a2a:	b1f5      	cbz	r5, 8009a6a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a2c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a30:	4810      	ldr	r0, [pc, #64]	; (8009a74 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a32:	4f11      	ldr	r7, [pc, #68]	; (8009a78 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a34:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a38:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a3a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a3e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a40:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a42:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a44:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a46:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a4a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a4e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009a52:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009a54:	2520      	movs	r5, #32
 8009a56:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a5a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009a5c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009a60:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009a62:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009a66:	bcf0      	pop	{r4, r5, r6, r7}
 8009a68:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009a6a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	e7ee      	b.n	8009a4e <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8009a70:	2002      	movs	r0, #2
}
 8009a72:	4770      	bx	lr
 8009a74:	0800f6e0 	.word	0x0800f6e0
 8009a78:	0800f6d8 	.word	0x0800f6d8

08009a7c <atof>:
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	f001 bb7d 	b.w	800b17c <strtod>

08009a82 <atoi>:
 8009a82:	220a      	movs	r2, #10
 8009a84:	2100      	movs	r1, #0
 8009a86:	f001 bc09 	b.w	800b29c <strtol>
	...

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	; (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	2000002c 	.word	0x2000002c

08009a98 <__libc_init_array>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ad0 <__libc_init_array+0x38>)
 8009a9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ad4 <__libc_init_array+0x3c>)
 8009a9e:	1b64      	subs	r4, r4, r5
 8009aa0:	10a4      	asrs	r4, r4, #2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	42a6      	cmp	r6, r4
 8009aa6:	d109      	bne.n	8009abc <__libc_init_array+0x24>
 8009aa8:	4d0b      	ldr	r5, [pc, #44]	; (8009ad8 <__libc_init_array+0x40>)
 8009aaa:	4c0c      	ldr	r4, [pc, #48]	; (8009adc <__libc_init_array+0x44>)
 8009aac:	f004 fbe8 	bl	800e280 <_init>
 8009ab0:	1b64      	subs	r4, r4, r5
 8009ab2:	10a4      	asrs	r4, r4, #2
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d105      	bne.n	8009ac6 <__libc_init_array+0x2e>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac0:	4798      	blx	r3
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__libc_init_array+0xc>
 8009ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aca:	4798      	blx	r3
 8009acc:	3601      	adds	r6, #1
 8009ace:	e7f2      	b.n	8009ab6 <__libc_init_array+0x1e>
 8009ad0:	0800fbd8 	.word	0x0800fbd8
 8009ad4:	0800fbd8 	.word	0x0800fbd8
 8009ad8:	0800fbd8 	.word	0x0800fbd8
 8009adc:	0800fbdc 	.word	0x0800fbdc

08009ae0 <memcpy>:
 8009ae0:	440a      	add	r2, r1
 8009ae2:	4291      	cmp	r1, r2
 8009ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae8:	d100      	bne.n	8009aec <memcpy+0xc>
 8009aea:	4770      	bx	lr
 8009aec:	b510      	push	{r4, lr}
 8009aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af6:	4291      	cmp	r1, r2
 8009af8:	d1f9      	bne.n	8009aee <memcpy+0xe>
 8009afa:	bd10      	pop	{r4, pc}

08009afc <memmove>:
 8009afc:	4288      	cmp	r0, r1
 8009afe:	b510      	push	{r4, lr}
 8009b00:	eb01 0402 	add.w	r4, r1, r2
 8009b04:	d902      	bls.n	8009b0c <memmove+0x10>
 8009b06:	4284      	cmp	r4, r0
 8009b08:	4623      	mov	r3, r4
 8009b0a:	d807      	bhi.n	8009b1c <memmove+0x20>
 8009b0c:	1e43      	subs	r3, r0, #1
 8009b0e:	42a1      	cmp	r1, r4
 8009b10:	d008      	beq.n	8009b24 <memmove+0x28>
 8009b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b1a:	e7f8      	b.n	8009b0e <memmove+0x12>
 8009b1c:	4402      	add	r2, r0
 8009b1e:	4601      	mov	r1, r0
 8009b20:	428a      	cmp	r2, r1
 8009b22:	d100      	bne.n	8009b26 <memmove+0x2a>
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b2e:	e7f7      	b.n	8009b20 <memmove+0x24>

08009b30 <memset>:
 8009b30:	4402      	add	r2, r0
 8009b32:	4603      	mov	r3, r0
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d100      	bne.n	8009b3a <memset+0xa>
 8009b38:	4770      	bx	lr
 8009b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3e:	e7f9      	b.n	8009b34 <memset+0x4>

08009b40 <__cvt>:
 8009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	ec55 4b10 	vmov	r4, r5, d0
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	460e      	mov	r6, r1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	462b      	mov	r3, r5
 8009b50:	bfbb      	ittet	lt
 8009b52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b56:	461d      	movlt	r5, r3
 8009b58:	2300      	movge	r3, #0
 8009b5a:	232d      	movlt	r3, #45	; 0x2d
 8009b5c:	700b      	strb	r3, [r1, #0]
 8009b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b64:	4691      	mov	r9, r2
 8009b66:	f023 0820 	bic.w	r8, r3, #32
 8009b6a:	bfbc      	itt	lt
 8009b6c:	4622      	movlt	r2, r4
 8009b6e:	4614      	movlt	r4, r2
 8009b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b74:	d005      	beq.n	8009b82 <__cvt+0x42>
 8009b76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b7a:	d100      	bne.n	8009b7e <__cvt+0x3e>
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	2102      	movs	r1, #2
 8009b80:	e000      	b.n	8009b84 <__cvt+0x44>
 8009b82:	2103      	movs	r1, #3
 8009b84:	ab03      	add	r3, sp, #12
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	ab02      	add	r3, sp, #8
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	ec45 4b10 	vmov	d0, r4, r5
 8009b90:	4653      	mov	r3, sl
 8009b92:	4632      	mov	r2, r6
 8009b94:	f001 fcd8 	bl	800b548 <_dtoa_r>
 8009b98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	d102      	bne.n	8009ba6 <__cvt+0x66>
 8009ba0:	f019 0f01 	tst.w	r9, #1
 8009ba4:	d022      	beq.n	8009bec <__cvt+0xac>
 8009ba6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009baa:	eb07 0906 	add.w	r9, r7, r6
 8009bae:	d110      	bne.n	8009bd2 <__cvt+0x92>
 8009bb0:	783b      	ldrb	r3, [r7, #0]
 8009bb2:	2b30      	cmp	r3, #48	; 0x30
 8009bb4:	d10a      	bne.n	8009bcc <__cvt+0x8c>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 ffab 	bl	8000b18 <__aeabi_dcmpeq>
 8009bc2:	b918      	cbnz	r0, 8009bcc <__cvt+0x8c>
 8009bc4:	f1c6 0601 	rsb	r6, r6, #1
 8009bc8:	f8ca 6000 	str.w	r6, [sl]
 8009bcc:	f8da 3000 	ldr.w	r3, [sl]
 8009bd0:	4499      	add	r9, r3
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 ff9d 	bl	8000b18 <__aeabi_dcmpeq>
 8009bde:	b108      	cbz	r0, 8009be4 <__cvt+0xa4>
 8009be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009be4:	2230      	movs	r2, #48	; 0x30
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	454b      	cmp	r3, r9
 8009bea:	d307      	bcc.n	8009bfc <__cvt+0xbc>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf0:	1bdb      	subs	r3, r3, r7
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	b004      	add	sp, #16
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e7f0      	b.n	8009be6 <__cvt+0xa6>

08009c04 <__exponent>:
 8009c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c06:	4603      	mov	r3, r0
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	4249      	neglt	r1, r1
 8009c0e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c12:	bfb4      	ite	lt
 8009c14:	222d      	movlt	r2, #45	; 0x2d
 8009c16:	222b      	movge	r2, #43	; 0x2b
 8009c18:	2909      	cmp	r1, #9
 8009c1a:	7042      	strb	r2, [r0, #1]
 8009c1c:	dd2a      	ble.n	8009c74 <__exponent+0x70>
 8009c1e:	f10d 0407 	add.w	r4, sp, #7
 8009c22:	46a4      	mov	ip, r4
 8009c24:	270a      	movs	r7, #10
 8009c26:	46a6      	mov	lr, r4
 8009c28:	460a      	mov	r2, r1
 8009c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c2e:	fb07 1516 	mls	r5, r7, r6, r1
 8009c32:	3530      	adds	r5, #48	; 0x30
 8009c34:	2a63      	cmp	r2, #99	; 0x63
 8009c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c3e:	4631      	mov	r1, r6
 8009c40:	dcf1      	bgt.n	8009c26 <__exponent+0x22>
 8009c42:	3130      	adds	r1, #48	; 0x30
 8009c44:	f1ae 0502 	sub.w	r5, lr, #2
 8009c48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c4c:	1c44      	adds	r4, r0, #1
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4561      	cmp	r1, ip
 8009c52:	d30a      	bcc.n	8009c6a <__exponent+0x66>
 8009c54:	f10d 0209 	add.w	r2, sp, #9
 8009c58:	eba2 020e 	sub.w	r2, r2, lr
 8009c5c:	4565      	cmp	r5, ip
 8009c5e:	bf88      	it	hi
 8009c60:	2200      	movhi	r2, #0
 8009c62:	4413      	add	r3, r2
 8009c64:	1a18      	subs	r0, r3, r0
 8009c66:	b003      	add	sp, #12
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c72:	e7ed      	b.n	8009c50 <__exponent+0x4c>
 8009c74:	2330      	movs	r3, #48	; 0x30
 8009c76:	3130      	adds	r1, #48	; 0x30
 8009c78:	7083      	strb	r3, [r0, #2]
 8009c7a:	70c1      	strb	r1, [r0, #3]
 8009c7c:	1d03      	adds	r3, r0, #4
 8009c7e:	e7f1      	b.n	8009c64 <__exponent+0x60>

08009c80 <_printf_float>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	ed2d 8b02 	vpush	{d8}
 8009c88:	b08d      	sub	sp, #52	; 0x34
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c90:	4616      	mov	r6, r2
 8009c92:	461f      	mov	r7, r3
 8009c94:	4605      	mov	r5, r0
 8009c96:	f002 ff69 	bl	800cb6c <_localeconv_r>
 8009c9a:	f8d0 a000 	ldr.w	sl, [r0]
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f7f6 fabe 	bl	8000220 <strlen>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cb4:	3307      	adds	r3, #7
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	f103 0208 	add.w	r2, r3, #8
 8009cbe:	f8c8 2000 	str.w	r2, [r8]
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cd2:	9307      	str	r3, [sp, #28]
 8009cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cd8:	ee08 0a10 	vmov	s16, r0
 8009cdc:	4b9f      	ldr	r3, [pc, #636]	; (8009f5c <_printf_float+0x2dc>)
 8009cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce6:	f7f6 ff49 	bl	8000b7c <__aeabi_dcmpun>
 8009cea:	bb88      	cbnz	r0, 8009d50 <_printf_float+0xd0>
 8009cec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf0:	4b9a      	ldr	r3, [pc, #616]	; (8009f5c <_printf_float+0x2dc>)
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	f7f6 ff23 	bl	8000b40 <__aeabi_dcmple>
 8009cfa:	bb48      	cbnz	r0, 8009d50 <_printf_float+0xd0>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4640      	mov	r0, r8
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 ff12 	bl	8000b2c <__aeabi_dcmplt>
 8009d08:	b110      	cbz	r0, 8009d10 <_printf_float+0x90>
 8009d0a:	232d      	movs	r3, #45	; 0x2d
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	4b93      	ldr	r3, [pc, #588]	; (8009f60 <_printf_float+0x2e0>)
 8009d12:	4894      	ldr	r0, [pc, #592]	; (8009f64 <_printf_float+0x2e4>)
 8009d14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d18:	bf94      	ite	ls
 8009d1a:	4698      	movls	r8, r3
 8009d1c:	4680      	movhi	r8, r0
 8009d1e:	2303      	movs	r3, #3
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	9b05      	ldr	r3, [sp, #20]
 8009d24:	f023 0204 	bic.w	r2, r3, #4
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	9700      	str	r7, [sp, #0]
 8009d30:	4633      	mov	r3, r6
 8009d32:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 f9d8 	bl	800a0ec <_printf_common>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f040 8090 	bne.w	8009e62 <_printf_float+0x1e2>
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	b00d      	add	sp, #52	; 0x34
 8009d48:	ecbd 8b02 	vpop	{d8}
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	4649      	mov	r1, r9
 8009d58:	f7f6 ff10 	bl	8000b7c <__aeabi_dcmpun>
 8009d5c:	b140      	cbz	r0, 8009d70 <_printf_float+0xf0>
 8009d5e:	464b      	mov	r3, r9
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfbc      	itt	lt
 8009d64:	232d      	movlt	r3, #45	; 0x2d
 8009d66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d6a:	487f      	ldr	r0, [pc, #508]	; (8009f68 <_printf_float+0x2e8>)
 8009d6c:	4b7f      	ldr	r3, [pc, #508]	; (8009f6c <_printf_float+0x2ec>)
 8009d6e:	e7d1      	b.n	8009d14 <_printf_float+0x94>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d76:	9206      	str	r2, [sp, #24]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	d13f      	bne.n	8009dfc <_printf_float+0x17c>
 8009d7c:	2306      	movs	r3, #6
 8009d7e:	6063      	str	r3, [r4, #4]
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	6861      	ldr	r1, [r4, #4]
 8009d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d92:	ab09      	add	r3, sp, #36	; 0x24
 8009d94:	ec49 8b10 	vmov	d0, r8, r9
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	6022      	str	r2, [r4, #0]
 8009d9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009da0:	4628      	mov	r0, r5
 8009da2:	f7ff fecd 	bl	8009b40 <__cvt>
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009daa:	2b47      	cmp	r3, #71	; 0x47
 8009dac:	4680      	mov	r8, r0
 8009dae:	d108      	bne.n	8009dc2 <_printf_float+0x142>
 8009db0:	1cc8      	adds	r0, r1, #3
 8009db2:	db02      	blt.n	8009dba <_printf_float+0x13a>
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	4299      	cmp	r1, r3
 8009db8:	dd41      	ble.n	8009e3e <_printf_float+0x1be>
 8009dba:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dbe:	fa5f fb8b 	uxtb.w	fp, fp
 8009dc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dc6:	d820      	bhi.n	8009e0a <_printf_float+0x18a>
 8009dc8:	3901      	subs	r1, #1
 8009dca:	465a      	mov	r2, fp
 8009dcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8009dd2:	f7ff ff17 	bl	8009c04 <__exponent>
 8009dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd8:	1813      	adds	r3, r2, r0
 8009dda:	2a01      	cmp	r2, #1
 8009ddc:	4681      	mov	r9, r0
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	dc02      	bgt.n	8009de8 <_printf_float+0x168>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	07d2      	lsls	r2, r2, #31
 8009de6:	d501      	bpl.n	8009dec <_printf_float+0x16c>
 8009de8:	3301      	adds	r3, #1
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d09c      	beq.n	8009d2e <_printf_float+0xae>
 8009df4:	232d      	movs	r3, #45	; 0x2d
 8009df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dfa:	e798      	b.n	8009d2e <_printf_float+0xae>
 8009dfc:	9a06      	ldr	r2, [sp, #24]
 8009dfe:	2a47      	cmp	r2, #71	; 0x47
 8009e00:	d1be      	bne.n	8009d80 <_printf_float+0x100>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1bc      	bne.n	8009d80 <_printf_float+0x100>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7b9      	b.n	8009d7e <_printf_float+0xfe>
 8009e0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e0e:	d118      	bne.n	8009e42 <_printf_float+0x1c2>
 8009e10:	2900      	cmp	r1, #0
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	dd0b      	ble.n	8009e2e <_printf_float+0x1ae>
 8009e16:	6121      	str	r1, [r4, #16]
 8009e18:	b913      	cbnz	r3, 8009e20 <_printf_float+0x1a0>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	07d0      	lsls	r0, r2, #31
 8009e1e:	d502      	bpl.n	8009e26 <_printf_float+0x1a6>
 8009e20:	3301      	adds	r3, #1
 8009e22:	440b      	add	r3, r1
 8009e24:	6123      	str	r3, [r4, #16]
 8009e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e28:	f04f 0900 	mov.w	r9, #0
 8009e2c:	e7de      	b.n	8009dec <_printf_float+0x16c>
 8009e2e:	b913      	cbnz	r3, 8009e36 <_printf_float+0x1b6>
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	07d2      	lsls	r2, r2, #31
 8009e34:	d501      	bpl.n	8009e3a <_printf_float+0x1ba>
 8009e36:	3302      	adds	r3, #2
 8009e38:	e7f4      	b.n	8009e24 <_printf_float+0x1a4>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e7f2      	b.n	8009e24 <_printf_float+0x1a4>
 8009e3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e44:	4299      	cmp	r1, r3
 8009e46:	db05      	blt.n	8009e54 <_printf_float+0x1d4>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	6121      	str	r1, [r4, #16]
 8009e4c:	07d8      	lsls	r0, r3, #31
 8009e4e:	d5ea      	bpl.n	8009e26 <_printf_float+0x1a6>
 8009e50:	1c4b      	adds	r3, r1, #1
 8009e52:	e7e7      	b.n	8009e24 <_printf_float+0x1a4>
 8009e54:	2900      	cmp	r1, #0
 8009e56:	bfd4      	ite	le
 8009e58:	f1c1 0202 	rsble	r2, r1, #2
 8009e5c:	2201      	movgt	r2, #1
 8009e5e:	4413      	add	r3, r2
 8009e60:	e7e0      	b.n	8009e24 <_printf_float+0x1a4>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	055a      	lsls	r2, r3, #21
 8009e66:	d407      	bmi.n	8009e78 <_printf_float+0x1f8>
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	d12c      	bne.n	8009ed0 <_printf_float+0x250>
 8009e76:	e764      	b.n	8009d42 <_printf_float+0xc2>
 8009e78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e7c:	f240 80e0 	bls.w	800a040 <_printf_float+0x3c0>
 8009e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	f7f6 fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d034      	beq.n	8009efa <_printf_float+0x27a>
 8009e90:	4a37      	ldr	r2, [pc, #220]	; (8009f70 <_printf_float+0x2f0>)
 8009e92:	2301      	movs	r3, #1
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f af51 	beq.w	8009d42 <_printf_float+0xc2>
 8009ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	db02      	blt.n	8009eae <_printf_float+0x22e>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	07d8      	lsls	r0, r3, #31
 8009eac:	d510      	bpl.n	8009ed0 <_printf_float+0x250>
 8009eae:	ee18 3a10 	vmov	r3, s16
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b8      	blx	r7
 8009eba:	3001      	adds	r0, #1
 8009ebc:	f43f af41 	beq.w	8009d42 <_printf_float+0xc2>
 8009ec0:	f04f 0800 	mov.w	r8, #0
 8009ec4:	f104 091a 	add.w	r9, r4, #26
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	dc09      	bgt.n	8009ee4 <_printf_float+0x264>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	079b      	lsls	r3, r3, #30
 8009ed4:	f100 8105 	bmi.w	800a0e2 <_printf_float+0x462>
 8009ed8:	68e0      	ldr	r0, [r4, #12]
 8009eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009edc:	4298      	cmp	r0, r3
 8009ede:	bfb8      	it	lt
 8009ee0:	4618      	movlt	r0, r3
 8009ee2:	e730      	b.n	8009d46 <_printf_float+0xc6>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	464a      	mov	r2, r9
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f43f af27 	beq.w	8009d42 <_printf_float+0xc2>
 8009ef4:	f108 0801 	add.w	r8, r8, #1
 8009ef8:	e7e6      	b.n	8009ec8 <_printf_float+0x248>
 8009efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dc39      	bgt.n	8009f74 <_printf_float+0x2f4>
 8009f00:	4a1b      	ldr	r2, [pc, #108]	; (8009f70 <_printf_float+0x2f0>)
 8009f02:	2301      	movs	r3, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af19 	beq.w	8009d42 <_printf_float+0xc2>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	4313      	orrs	r3, r2
 8009f16:	d102      	bne.n	8009f1e <_printf_float+0x29e>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	d5d8      	bpl.n	8009ed0 <_printf_float+0x250>
 8009f1e:	ee18 3a10 	vmov	r3, s16
 8009f22:	4652      	mov	r2, sl
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af09 	beq.w	8009d42 <_printf_float+0xc2>
 8009f30:	f04f 0900 	mov.w	r9, #0
 8009f34:	f104 0a1a 	add.w	sl, r4, #26
 8009f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3a:	425b      	negs	r3, r3
 8009f3c:	454b      	cmp	r3, r9
 8009f3e:	dc01      	bgt.n	8009f44 <_printf_float+0x2c4>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	e792      	b.n	8009e6a <_printf_float+0x1ea>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4652      	mov	r2, sl
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f aef7 	beq.w	8009d42 <_printf_float+0xc2>
 8009f54:	f109 0901 	add.w	r9, r9, #1
 8009f58:	e7ee      	b.n	8009f38 <_printf_float+0x2b8>
 8009f5a:	bf00      	nop
 8009f5c:	7fefffff 	.word	0x7fefffff
 8009f60:	0800f6ec 	.word	0x0800f6ec
 8009f64:	0800f6f0 	.word	0x0800f6f0
 8009f68:	0800f6f8 	.word	0x0800f6f8
 8009f6c:	0800f6f4 	.word	0x0800f6f4
 8009f70:	0800f6fc 	.word	0x0800f6fc
 8009f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	bfa8      	it	ge
 8009f7c:	461a      	movge	r2, r3
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	4691      	mov	r9, r2
 8009f82:	dc37      	bgt.n	8009ff4 <_printf_float+0x374>
 8009f84:	f04f 0b00 	mov.w	fp, #0
 8009f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f8c:	f104 021a 	add.w	r2, r4, #26
 8009f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f92:	9305      	str	r3, [sp, #20]
 8009f94:	eba3 0309 	sub.w	r3, r3, r9
 8009f98:	455b      	cmp	r3, fp
 8009f9a:	dc33      	bgt.n	800a004 <_printf_float+0x384>
 8009f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	db3b      	blt.n	800a01c <_printf_float+0x39c>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	07da      	lsls	r2, r3, #31
 8009fa8:	d438      	bmi.n	800a01c <_printf_float+0x39c>
 8009faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fac:	9b05      	ldr	r3, [sp, #20]
 8009fae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	eba2 0901 	sub.w	r9, r2, r1
 8009fb6:	4599      	cmp	r9, r3
 8009fb8:	bfa8      	it	ge
 8009fba:	4699      	movge	r9, r3
 8009fbc:	f1b9 0f00 	cmp.w	r9, #0
 8009fc0:	dc35      	bgt.n	800a02e <_printf_float+0x3ae>
 8009fc2:	f04f 0800 	mov.w	r8, #0
 8009fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fca:	f104 0a1a 	add.w	sl, r4, #26
 8009fce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	eba3 0309 	sub.w	r3, r3, r9
 8009fd8:	4543      	cmp	r3, r8
 8009fda:	f77f af79 	ble.w	8009ed0 <_printf_float+0x250>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b8      	blx	r7
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f43f aeaa 	beq.w	8009d42 <_printf_float+0xc2>
 8009fee:	f108 0801 	add.w	r8, r8, #1
 8009ff2:	e7ec      	b.n	8009fce <_printf_float+0x34e>
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	d1c0      	bne.n	8009f84 <_printf_float+0x304>
 800a002:	e69e      	b.n	8009d42 <_printf_float+0xc2>
 800a004:	2301      	movs	r3, #1
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	9205      	str	r2, [sp, #20]
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	f43f ae97 	beq.w	8009d42 <_printf_float+0xc2>
 800a014:	9a05      	ldr	r2, [sp, #20]
 800a016:	f10b 0b01 	add.w	fp, fp, #1
 800a01a:	e7b9      	b.n	8009f90 <_printf_float+0x310>
 800a01c:	ee18 3a10 	vmov	r3, s16
 800a020:	4652      	mov	r2, sl
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	d1be      	bne.n	8009faa <_printf_float+0x32a>
 800a02c:	e689      	b.n	8009d42 <_printf_float+0xc2>
 800a02e:	9a05      	ldr	r2, [sp, #20]
 800a030:	464b      	mov	r3, r9
 800a032:	4442      	add	r2, r8
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c1      	bne.n	8009fc2 <_printf_float+0x342>
 800a03e:	e680      	b.n	8009d42 <_printf_float+0xc2>
 800a040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a042:	2a01      	cmp	r2, #1
 800a044:	dc01      	bgt.n	800a04a <_printf_float+0x3ca>
 800a046:	07db      	lsls	r3, r3, #31
 800a048:	d538      	bpl.n	800a0bc <_printf_float+0x43c>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4642      	mov	r2, r8
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	f43f ae74 	beq.w	8009d42 <_printf_float+0xc2>
 800a05a:	ee18 3a10 	vmov	r3, s16
 800a05e:	4652      	mov	r2, sl
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f ae6b 	beq.w	8009d42 <_printf_float+0xc2>
 800a06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	f7f6 fd50 	bl	8000b18 <__aeabi_dcmpeq>
 800a078:	b9d8      	cbnz	r0, 800a0b2 <_printf_float+0x432>
 800a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07c:	f108 0201 	add.w	r2, r8, #1
 800a080:	3b01      	subs	r3, #1
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	d10e      	bne.n	800a0aa <_printf_float+0x42a>
 800a08c:	e659      	b.n	8009d42 <_printf_float+0xc2>
 800a08e:	2301      	movs	r3, #1
 800a090:	4652      	mov	r2, sl
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	f43f ae52 	beq.w	8009d42 <_printf_float+0xc2>
 800a09e:	f108 0801 	add.w	r8, r8, #1
 800a0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	4543      	cmp	r3, r8
 800a0a8:	dcf1      	bgt.n	800a08e <_printf_float+0x40e>
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0b0:	e6dc      	b.n	8009e6c <_printf_float+0x1ec>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ba:	e7f2      	b.n	800a0a2 <_printf_float+0x422>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4642      	mov	r2, r8
 800a0c0:	e7df      	b.n	800a082 <_printf_float+0x402>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae38 	beq.w	8009d42 <_printf_float+0xc2>
 800a0d2:	f108 0801 	add.w	r8, r8, #1
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0da:	1a5b      	subs	r3, r3, r1
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	dcf0      	bgt.n	800a0c2 <_printf_float+0x442>
 800a0e0:	e6fa      	b.n	8009ed8 <_printf_float+0x258>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	f104 0919 	add.w	r9, r4, #25
 800a0ea:	e7f4      	b.n	800a0d6 <_printf_float+0x456>

0800a0ec <_printf_common>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	4616      	mov	r6, r2
 800a0f2:	4699      	mov	r9, r3
 800a0f4:	688a      	ldr	r2, [r1, #8]
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	bfb8      	it	lt
 800a100:	4613      	movlt	r3, r2
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a108:	4607      	mov	r7, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b10a      	cbz	r2, 800a112 <_printf_common+0x26>
 800a10e:	3301      	adds	r3, #1
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0699      	lsls	r1, r3, #26
 800a116:	bf42      	ittt	mi
 800a118:	6833      	ldrmi	r3, [r6, #0]
 800a11a:	3302      	addmi	r3, #2
 800a11c:	6033      	strmi	r3, [r6, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	f015 0506 	ands.w	r5, r5, #6
 800a124:	d106      	bne.n	800a134 <_printf_common+0x48>
 800a126:	f104 0a19 	add.w	sl, r4, #25
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	6832      	ldr	r2, [r6, #0]
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dc26      	bgt.n	800a182 <_printf_common+0x96>
 800a134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a138:	1e13      	subs	r3, r2, #0
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	bf18      	it	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	0692      	lsls	r2, r2, #26
 800a142:	d42b      	bmi.n	800a19c <_printf_common+0xb0>
 800a144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a148:	4649      	mov	r1, r9
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	3001      	adds	r0, #1
 800a150:	d01e      	beq.n	800a190 <_printf_common+0xa4>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	68e5      	ldr	r5, [r4, #12]
 800a156:	6832      	ldr	r2, [r6, #0]
 800a158:	f003 0306 	and.w	r3, r3, #6
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	bf08      	it	eq
 800a160:	1aad      	subeq	r5, r5, r2
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	bf0c      	ite	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	2500      	movne	r5, #0
 800a16e:	4293      	cmp	r3, r2
 800a170:	bfc4      	itt	gt
 800a172:	1a9b      	subgt	r3, r3, r2
 800a174:	18ed      	addgt	r5, r5, r3
 800a176:	2600      	movs	r6, #0
 800a178:	341a      	adds	r4, #26
 800a17a:	42b5      	cmp	r5, r6
 800a17c:	d11a      	bne.n	800a1b4 <_printf_common+0xc8>
 800a17e:	2000      	movs	r0, #0
 800a180:	e008      	b.n	800a194 <_printf_common+0xa8>
 800a182:	2301      	movs	r3, #1
 800a184:	4652      	mov	r2, sl
 800a186:	4649      	mov	r1, r9
 800a188:	4638      	mov	r0, r7
 800a18a:	47c0      	blx	r8
 800a18c:	3001      	adds	r0, #1
 800a18e:	d103      	bne.n	800a198 <_printf_common+0xac>
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	3501      	adds	r5, #1
 800a19a:	e7c6      	b.n	800a12a <_printf_common+0x3e>
 800a19c:	18e1      	adds	r1, r4, r3
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	2030      	movs	r0, #48	; 0x30
 800a1a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a6:	4422      	add	r2, r4
 800a1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7c7      	b.n	800a144 <_printf_common+0x58>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d0e6      	beq.n	800a190 <_printf_common+0xa4>
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	e7d9      	b.n	800a17a <_printf_common+0x8e>
	...

0800a1c8 <_printf_i>:
 800a1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	7e27      	ldrb	r7, [r4, #24]
 800a1d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1d4:	2f78      	cmp	r7, #120	; 0x78
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	469a      	mov	sl, r3
 800a1da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1de:	d807      	bhi.n	800a1f0 <_printf_i+0x28>
 800a1e0:	2f62      	cmp	r7, #98	; 0x62
 800a1e2:	d80a      	bhi.n	800a1fa <_printf_i+0x32>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	f000 80d8 	beq.w	800a39a <_printf_i+0x1d2>
 800a1ea:	2f58      	cmp	r7, #88	; 0x58
 800a1ec:	f000 80a3 	beq.w	800a336 <_printf_i+0x16e>
 800a1f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f8:	e03a      	b.n	800a270 <_printf_i+0xa8>
 800a1fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fe:	2b15      	cmp	r3, #21
 800a200:	d8f6      	bhi.n	800a1f0 <_printf_i+0x28>
 800a202:	a001      	add	r0, pc, #4	; (adr r0, 800a208 <_printf_i+0x40>)
 800a204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a1f1 	.word	0x0800a1f1
 800a214:	0800a1f1 	.word	0x0800a1f1
 800a218:	0800a1f1 	.word	0x0800a1f1
 800a21c:	0800a1f1 	.word	0x0800a1f1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1f1 	.word	0x0800a1f1
 800a228:	0800a1f1 	.word	0x0800a1f1
 800a22c:	0800a1f1 	.word	0x0800a1f1
 800a230:	0800a1f1 	.word	0x0800a1f1
 800a234:	0800a381 	.word	0x0800a381
 800a238:	0800a2a5 	.word	0x0800a2a5
 800a23c:	0800a363 	.word	0x0800a363
 800a240:	0800a1f1 	.word	0x0800a1f1
 800a244:	0800a1f1 	.word	0x0800a1f1
 800a248:	0800a3a3 	.word	0x0800a3a3
 800a24c:	0800a1f1 	.word	0x0800a1f1
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a1f1 	.word	0x0800a1f1
 800a258:	0800a1f1 	.word	0x0800a1f1
 800a25c:	0800a36b 	.word	0x0800a36b
 800a260:	680b      	ldr	r3, [r1, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	600a      	str	r2, [r1, #0]
 800a268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a270:	2301      	movs	r3, #1
 800a272:	e0a3      	b.n	800a3bc <_printf_i+0x1f4>
 800a274:	6825      	ldr	r5, [r4, #0]
 800a276:	6808      	ldr	r0, [r1, #0]
 800a278:	062e      	lsls	r6, r5, #24
 800a27a:	f100 0304 	add.w	r3, r0, #4
 800a27e:	d50a      	bpl.n	800a296 <_printf_i+0xce>
 800a280:	6805      	ldr	r5, [r0, #0]
 800a282:	600b      	str	r3, [r1, #0]
 800a284:	2d00      	cmp	r5, #0
 800a286:	da03      	bge.n	800a290 <_printf_i+0xc8>
 800a288:	232d      	movs	r3, #45	; 0x2d
 800a28a:	426d      	negs	r5, r5
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	485e      	ldr	r0, [pc, #376]	; (800a40c <_printf_i+0x244>)
 800a292:	230a      	movs	r3, #10
 800a294:	e019      	b.n	800a2ca <_printf_i+0x102>
 800a296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a29a:	6805      	ldr	r5, [r0, #0]
 800a29c:	600b      	str	r3, [r1, #0]
 800a29e:	bf18      	it	ne
 800a2a0:	b22d      	sxthne	r5, r5
 800a2a2:	e7ef      	b.n	800a284 <_printf_i+0xbc>
 800a2a4:	680b      	ldr	r3, [r1, #0]
 800a2a6:	6825      	ldr	r5, [r4, #0]
 800a2a8:	1d18      	adds	r0, r3, #4
 800a2aa:	6008      	str	r0, [r1, #0]
 800a2ac:	0628      	lsls	r0, r5, #24
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_i+0xec>
 800a2b0:	681d      	ldr	r5, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <_printf_i+0xf2>
 800a2b4:	0669      	lsls	r1, r5, #25
 800a2b6:	d5fb      	bpl.n	800a2b0 <_printf_i+0xe8>
 800a2b8:	881d      	ldrh	r5, [r3, #0]
 800a2ba:	4854      	ldr	r0, [pc, #336]	; (800a40c <_printf_i+0x244>)
 800a2bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2be:	bf0c      	ite	eq
 800a2c0:	2308      	moveq	r3, #8
 800a2c2:	230a      	movne	r3, #10
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2ca:	6866      	ldr	r6, [r4, #4]
 800a2cc:	60a6      	str	r6, [r4, #8]
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	bfa2      	ittt	ge
 800a2d2:	6821      	ldrge	r1, [r4, #0]
 800a2d4:	f021 0104 	bicge.w	r1, r1, #4
 800a2d8:	6021      	strge	r1, [r4, #0]
 800a2da:	b90d      	cbnz	r5, 800a2e0 <_printf_i+0x118>
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	d04d      	beq.n	800a37c <_printf_i+0x1b4>
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2e6:	fb03 5711 	mls	r7, r3, r1, r5
 800a2ea:	5dc7      	ldrb	r7, [r0, r7]
 800a2ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2f0:	462f      	mov	r7, r5
 800a2f2:	42bb      	cmp	r3, r7
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	d9f4      	bls.n	800a2e2 <_printf_i+0x11a>
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d10b      	bne.n	800a314 <_printf_i+0x14c>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	07df      	lsls	r7, r3, #31
 800a300:	d508      	bpl.n	800a314 <_printf_i+0x14c>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6861      	ldr	r1, [r4, #4]
 800a306:	4299      	cmp	r1, r3
 800a308:	bfde      	ittt	le
 800a30a:	2330      	movle	r3, #48	; 0x30
 800a30c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a310:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a314:	1b92      	subs	r2, r2, r6
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	f8cd a000 	str.w	sl, [sp]
 800a31c:	464b      	mov	r3, r9
 800a31e:	aa03      	add	r2, sp, #12
 800a320:	4621      	mov	r1, r4
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fee2 	bl	800a0ec <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	d14c      	bne.n	800a3c6 <_printf_i+0x1fe>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b004      	add	sp, #16
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	4835      	ldr	r0, [pc, #212]	; (800a40c <_printf_i+0x244>)
 800a338:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	680e      	ldr	r6, [r1, #0]
 800a340:	061f      	lsls	r7, r3, #24
 800a342:	f856 5b04 	ldr.w	r5, [r6], #4
 800a346:	600e      	str	r6, [r1, #0]
 800a348:	d514      	bpl.n	800a374 <_printf_i+0x1ac>
 800a34a:	07d9      	lsls	r1, r3, #31
 800a34c:	bf44      	itt	mi
 800a34e:	f043 0320 	orrmi.w	r3, r3, #32
 800a352:	6023      	strmi	r3, [r4, #0]
 800a354:	b91d      	cbnz	r5, 800a35e <_printf_i+0x196>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	f023 0320 	bic.w	r3, r3, #32
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	2310      	movs	r3, #16
 800a360:	e7b0      	b.n	800a2c4 <_printf_i+0xfc>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	f043 0320 	orr.w	r3, r3, #32
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	2378      	movs	r3, #120	; 0x78
 800a36c:	4828      	ldr	r0, [pc, #160]	; (800a410 <_printf_i+0x248>)
 800a36e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a372:	e7e3      	b.n	800a33c <_printf_i+0x174>
 800a374:	065e      	lsls	r6, r3, #25
 800a376:	bf48      	it	mi
 800a378:	b2ad      	uxthmi	r5, r5
 800a37a:	e7e6      	b.n	800a34a <_printf_i+0x182>
 800a37c:	4616      	mov	r6, r2
 800a37e:	e7bb      	b.n	800a2f8 <_printf_i+0x130>
 800a380:	680b      	ldr	r3, [r1, #0]
 800a382:	6826      	ldr	r6, [r4, #0]
 800a384:	6960      	ldr	r0, [r4, #20]
 800a386:	1d1d      	adds	r5, r3, #4
 800a388:	600d      	str	r5, [r1, #0]
 800a38a:	0635      	lsls	r5, r6, #24
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	d501      	bpl.n	800a394 <_printf_i+0x1cc>
 800a390:	6018      	str	r0, [r3, #0]
 800a392:	e002      	b.n	800a39a <_printf_i+0x1d2>
 800a394:	0671      	lsls	r1, r6, #25
 800a396:	d5fb      	bpl.n	800a390 <_printf_i+0x1c8>
 800a398:	8018      	strh	r0, [r3, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	4616      	mov	r6, r2
 800a3a0:	e7ba      	b.n	800a318 <_printf_i+0x150>
 800a3a2:	680b      	ldr	r3, [r1, #0]
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	600a      	str	r2, [r1, #0]
 800a3a8:	681e      	ldr	r6, [r3, #0]
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7f5 ff3e 	bl	8000230 <memchr>
 800a3b4:	b108      	cbz	r0, 800a3ba <_printf_i+0x1f2>
 800a3b6:	1b80      	subs	r0, r0, r6
 800a3b8:	6060      	str	r0, [r4, #4]
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c4:	e7a8      	b.n	800a318 <_printf_i+0x150>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	47d0      	blx	sl
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d0ab      	beq.n	800a32c <_printf_i+0x164>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	079b      	lsls	r3, r3, #30
 800a3d8:	d413      	bmi.n	800a402 <_printf_i+0x23a>
 800a3da:	68e0      	ldr	r0, [r4, #12]
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	4298      	cmp	r0, r3
 800a3e0:	bfb8      	it	lt
 800a3e2:	4618      	movlt	r0, r3
 800a3e4:	e7a4      	b.n	800a330 <_printf_i+0x168>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	47d0      	blx	sl
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d09b      	beq.n	800a32c <_printf_i+0x164>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	9903      	ldr	r1, [sp, #12]
 800a3fa:	1a5b      	subs	r3, r3, r1
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dcf2      	bgt.n	800a3e6 <_printf_i+0x21e>
 800a400:	e7eb      	b.n	800a3da <_printf_i+0x212>
 800a402:	2500      	movs	r5, #0
 800a404:	f104 0619 	add.w	r6, r4, #25
 800a408:	e7f5      	b.n	800a3f6 <_printf_i+0x22e>
 800a40a:	bf00      	nop
 800a40c:	0800f6fe 	.word	0x0800f6fe
 800a410:	0800f70f 	.word	0x0800f70f

0800a414 <iprintf>:
 800a414:	b40f      	push	{r0, r1, r2, r3}
 800a416:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <iprintf+0x2c>)
 800a418:	b513      	push	{r0, r1, r4, lr}
 800a41a:	681c      	ldr	r4, [r3, #0]
 800a41c:	b124      	cbz	r4, 800a428 <iprintf+0x14>
 800a41e:	69a3      	ldr	r3, [r4, #24]
 800a420:	b913      	cbnz	r3, 800a428 <iprintf+0x14>
 800a422:	4620      	mov	r0, r4
 800a424:	f001 ff96 	bl	800c354 <__sinit>
 800a428:	ab05      	add	r3, sp, #20
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	68a1      	ldr	r1, [r4, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	4620      	mov	r0, r4
 800a432:	f003 f9bf 	bl	800d7b4 <_vfiprintf_r>
 800a436:	b002      	add	sp, #8
 800a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43c:	b004      	add	sp, #16
 800a43e:	4770      	bx	lr
 800a440:	2000002c 	.word	0x2000002c

0800a444 <_puts_r>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	460e      	mov	r6, r1
 800a448:	4605      	mov	r5, r0
 800a44a:	b118      	cbz	r0, 800a454 <_puts_r+0x10>
 800a44c:	6983      	ldr	r3, [r0, #24]
 800a44e:	b90b      	cbnz	r3, 800a454 <_puts_r+0x10>
 800a450:	f001 ff80 	bl	800c354 <__sinit>
 800a454:	69ab      	ldr	r3, [r5, #24]
 800a456:	68ac      	ldr	r4, [r5, #8]
 800a458:	b913      	cbnz	r3, 800a460 <_puts_r+0x1c>
 800a45a:	4628      	mov	r0, r5
 800a45c:	f001 ff7a 	bl	800c354 <__sinit>
 800a460:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <_puts_r+0xd0>)
 800a462:	429c      	cmp	r4, r3
 800a464:	d120      	bne.n	800a4a8 <_puts_r+0x64>
 800a466:	686c      	ldr	r4, [r5, #4]
 800a468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46a:	07db      	lsls	r3, r3, #31
 800a46c:	d405      	bmi.n	800a47a <_puts_r+0x36>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	0598      	lsls	r0, r3, #22
 800a472:	d402      	bmi.n	800a47a <_puts_r+0x36>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f002 fb7e 	bl	800cb76 <__retarget_lock_acquire_recursive>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	0719      	lsls	r1, r3, #28
 800a47e:	d51d      	bpl.n	800a4bc <_puts_r+0x78>
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	b1db      	cbz	r3, 800a4bc <_puts_r+0x78>
 800a484:	3e01      	subs	r6, #1
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a48c:	3b01      	subs	r3, #1
 800a48e:	60a3      	str	r3, [r4, #8]
 800a490:	bb39      	cbnz	r1, 800a4e2 <_puts_r+0x9e>
 800a492:	2b00      	cmp	r3, #0
 800a494:	da38      	bge.n	800a508 <_puts_r+0xc4>
 800a496:	4622      	mov	r2, r4
 800a498:	210a      	movs	r1, #10
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 ff08 	bl	800b2b0 <__swbuf_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d011      	beq.n	800a4c8 <_puts_r+0x84>
 800a4a4:	250a      	movs	r5, #10
 800a4a6:	e011      	b.n	800a4cc <_puts_r+0x88>
 800a4a8:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <_puts_r+0xd4>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <_puts_r+0x6e>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7da      	b.n	800a468 <_puts_r+0x24>
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <_puts_r+0xd8>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	bf08      	it	eq
 800a4b8:	68ec      	ldreq	r4, [r5, #12]
 800a4ba:	e7d5      	b.n	800a468 <_puts_r+0x24>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 ff48 	bl	800b354 <__swsetup_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0dd      	beq.n	800a484 <_puts_r+0x40>
 800a4c8:	f04f 35ff 	mov.w	r5, #4294967295
 800a4cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ce:	07da      	lsls	r2, r3, #31
 800a4d0:	d405      	bmi.n	800a4de <_puts_r+0x9a>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d402      	bmi.n	800a4de <_puts_r+0x9a>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f002 fb4d 	bl	800cb78 <__retarget_lock_release_recursive>
 800a4de:	4628      	mov	r0, r5
 800a4e0:	bd70      	pop	{r4, r5, r6, pc}
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	da04      	bge.n	800a4f0 <_puts_r+0xac>
 800a4e6:	69a2      	ldr	r2, [r4, #24]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	dc06      	bgt.n	800a4fa <_puts_r+0xb6>
 800a4ec:	290a      	cmp	r1, #10
 800a4ee:	d004      	beq.n	800a4fa <_puts_r+0xb6>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	7019      	strb	r1, [r3, #0]
 800a4f8:	e7c5      	b.n	800a486 <_puts_r+0x42>
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 fed7 	bl	800b2b0 <__swbuf_r>
 800a502:	3001      	adds	r0, #1
 800a504:	d1bf      	bne.n	800a486 <_puts_r+0x42>
 800a506:	e7df      	b.n	800a4c8 <_puts_r+0x84>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	250a      	movs	r5, #10
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	701d      	strb	r5, [r3, #0]
 800a512:	e7db      	b.n	800a4cc <_puts_r+0x88>
 800a514:	0800f928 	.word	0x0800f928
 800a518:	0800f948 	.word	0x0800f948
 800a51c:	0800f908 	.word	0x0800f908

0800a520 <puts>:
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <puts+0xc>)
 800a522:	4601      	mov	r1, r0
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	f7ff bf8d 	b.w	800a444 <_puts_r>
 800a52a:	bf00      	nop
 800a52c:	2000002c 	.word	0x2000002c

0800a530 <sulp>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	460d      	mov	r5, r1
 800a536:	ec45 4b10 	vmov	d0, r4, r5
 800a53a:	4616      	mov	r6, r2
 800a53c:	f002 ff08 	bl	800d350 <__ulp>
 800a540:	ec51 0b10 	vmov	r0, r1, d0
 800a544:	b17e      	cbz	r6, 800a566 <sulp+0x36>
 800a546:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a54a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd09      	ble.n	800a566 <sulp+0x36>
 800a552:	051b      	lsls	r3, r3, #20
 800a554:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a558:	2400      	movs	r4, #0
 800a55a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a55e:	4622      	mov	r2, r4
 800a560:	462b      	mov	r3, r5
 800a562:	f7f6 f871 	bl	8000648 <__aeabi_dmul>
 800a566:	bd70      	pop	{r4, r5, r6, pc}

0800a568 <_strtod_l>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	b0a3      	sub	sp, #140	; 0x8c
 800a56e:	461f      	mov	r7, r3
 800a570:	2300      	movs	r3, #0
 800a572:	931e      	str	r3, [sp, #120]	; 0x78
 800a574:	4ba4      	ldr	r3, [pc, #656]	; (800a808 <_strtod_l+0x2a0>)
 800a576:	9219      	str	r2, [sp, #100]	; 0x64
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	9307      	str	r3, [sp, #28]
 800a57c:	4604      	mov	r4, r0
 800a57e:	4618      	mov	r0, r3
 800a580:	4688      	mov	r8, r1
 800a582:	f7f5 fe4d 	bl	8000220 <strlen>
 800a586:	f04f 0a00 	mov.w	sl, #0
 800a58a:	4605      	mov	r5, r0
 800a58c:	f04f 0b00 	mov.w	fp, #0
 800a590:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a596:	781a      	ldrb	r2, [r3, #0]
 800a598:	2a2b      	cmp	r2, #43	; 0x2b
 800a59a:	d04c      	beq.n	800a636 <_strtod_l+0xce>
 800a59c:	d839      	bhi.n	800a612 <_strtod_l+0xaa>
 800a59e:	2a0d      	cmp	r2, #13
 800a5a0:	d832      	bhi.n	800a608 <_strtod_l+0xa0>
 800a5a2:	2a08      	cmp	r2, #8
 800a5a4:	d832      	bhi.n	800a60c <_strtod_l+0xa4>
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d03c      	beq.n	800a624 <_strtod_l+0xbc>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a5b0:	7833      	ldrb	r3, [r6, #0]
 800a5b2:	2b30      	cmp	r3, #48	; 0x30
 800a5b4:	f040 80b4 	bne.w	800a720 <_strtod_l+0x1b8>
 800a5b8:	7873      	ldrb	r3, [r6, #1]
 800a5ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5be:	2b58      	cmp	r3, #88	; 0x58
 800a5c0:	d16c      	bne.n	800a69c <_strtod_l+0x134>
 800a5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	ab1e      	add	r3, sp, #120	; 0x78
 800a5c8:	9702      	str	r7, [sp, #8]
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	4a8f      	ldr	r2, [pc, #572]	; (800a80c <_strtod_l+0x2a4>)
 800a5ce:	ab1f      	add	r3, sp, #124	; 0x7c
 800a5d0:	a91d      	add	r1, sp, #116	; 0x74
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f001 ffc2 	bl	800c55c <__gethex>
 800a5d8:	f010 0707 	ands.w	r7, r0, #7
 800a5dc:	4605      	mov	r5, r0
 800a5de:	d005      	beq.n	800a5ec <_strtod_l+0x84>
 800a5e0:	2f06      	cmp	r7, #6
 800a5e2:	d12a      	bne.n	800a63a <_strtod_l+0xd2>
 800a5e4:	3601      	adds	r6, #1
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	961d      	str	r6, [sp, #116]	; 0x74
 800a5ea:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f040 8596 	bne.w	800b120 <_strtod_l+0xbb8>
 800a5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f6:	b1db      	cbz	r3, 800a630 <_strtod_l+0xc8>
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5fe:	ec43 2b10 	vmov	d0, r2, r3
 800a602:	b023      	add	sp, #140	; 0x8c
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	2a20      	cmp	r2, #32
 800a60a:	d1ce      	bne.n	800a5aa <_strtod_l+0x42>
 800a60c:	3301      	adds	r3, #1
 800a60e:	931d      	str	r3, [sp, #116]	; 0x74
 800a610:	e7c0      	b.n	800a594 <_strtod_l+0x2c>
 800a612:	2a2d      	cmp	r2, #45	; 0x2d
 800a614:	d1c9      	bne.n	800a5aa <_strtod_l+0x42>
 800a616:	2201      	movs	r2, #1
 800a618:	920e      	str	r2, [sp, #56]	; 0x38
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	921d      	str	r2, [sp, #116]	; 0x74
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1c4      	bne.n	800a5ae <_strtod_l+0x46>
 800a624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a626:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f040 8576 	bne.w	800b11c <_strtod_l+0xbb4>
 800a630:	4652      	mov	r2, sl
 800a632:	465b      	mov	r3, fp
 800a634:	e7e3      	b.n	800a5fe <_strtod_l+0x96>
 800a636:	2200      	movs	r2, #0
 800a638:	e7ee      	b.n	800a618 <_strtod_l+0xb0>
 800a63a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a63c:	b13a      	cbz	r2, 800a64e <_strtod_l+0xe6>
 800a63e:	2135      	movs	r1, #53	; 0x35
 800a640:	a820      	add	r0, sp, #128	; 0x80
 800a642:	f002 ff90 	bl	800d566 <__copybits>
 800a646:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a648:	4620      	mov	r0, r4
 800a64a:	f002 fb55 	bl	800ccf8 <_Bfree>
 800a64e:	3f01      	subs	r7, #1
 800a650:	2f05      	cmp	r7, #5
 800a652:	d807      	bhi.n	800a664 <_strtod_l+0xfc>
 800a654:	e8df f007 	tbb	[pc, r7]
 800a658:	1d180b0e 	.word	0x1d180b0e
 800a65c:	030e      	.short	0x030e
 800a65e:	f04f 0b00 	mov.w	fp, #0
 800a662:	46da      	mov	sl, fp
 800a664:	0728      	lsls	r0, r5, #28
 800a666:	d5c1      	bpl.n	800a5ec <_strtod_l+0x84>
 800a668:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a66c:	e7be      	b.n	800a5ec <_strtod_l+0x84>
 800a66e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a672:	e7f7      	b.n	800a664 <_strtod_l+0xfc>
 800a674:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a678:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a67a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a67e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a686:	e7ed      	b.n	800a664 <_strtod_l+0xfc>
 800a688:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a810 <_strtod_l+0x2a8>
 800a68c:	f04f 0a00 	mov.w	sl, #0
 800a690:	e7e8      	b.n	800a664 <_strtod_l+0xfc>
 800a692:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a696:	f04f 3aff 	mov.w	sl, #4294967295
 800a69a:	e7e3      	b.n	800a664 <_strtod_l+0xfc>
 800a69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	921d      	str	r2, [sp, #116]	; 0x74
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	2b30      	cmp	r3, #48	; 0x30
 800a6a6:	d0f9      	beq.n	800a69c <_strtod_l+0x134>
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d09f      	beq.n	800a5ec <_strtod_l+0x84>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f04f 0900 	mov.w	r9, #0
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a6bc:	464f      	mov	r7, r9
 800a6be:	220a      	movs	r2, #10
 800a6c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a6c2:	7806      	ldrb	r6, [r0, #0]
 800a6c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6c8:	b2d9      	uxtb	r1, r3
 800a6ca:	2909      	cmp	r1, #9
 800a6cc:	d92a      	bls.n	800a724 <_strtod_l+0x1bc>
 800a6ce:	9907      	ldr	r1, [sp, #28]
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	f003 f9fc 	bl	800dace <strncmp>
 800a6d6:	b398      	cbz	r0, 800a740 <_strtod_l+0x1d8>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	4633      	mov	r3, r6
 800a6dc:	463d      	mov	r5, r7
 800a6de:	9007      	str	r0, [sp, #28]
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	2b65      	cmp	r3, #101	; 0x65
 800a6e4:	d001      	beq.n	800a6ea <_strtod_l+0x182>
 800a6e6:	2b45      	cmp	r3, #69	; 0x45
 800a6e8:	d118      	bne.n	800a71c <_strtod_l+0x1b4>
 800a6ea:	b91d      	cbnz	r5, 800a6f4 <_strtod_l+0x18c>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	4303      	orrs	r3, r0
 800a6f0:	d098      	beq.n	800a624 <_strtod_l+0xbc>
 800a6f2:	2500      	movs	r5, #0
 800a6f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a6f8:	f108 0301 	add.w	r3, r8, #1
 800a6fc:	931d      	str	r3, [sp, #116]	; 0x74
 800a6fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a702:	2b2b      	cmp	r3, #43	; 0x2b
 800a704:	d075      	beq.n	800a7f2 <_strtod_l+0x28a>
 800a706:	2b2d      	cmp	r3, #45	; 0x2d
 800a708:	d07b      	beq.n	800a802 <_strtod_l+0x29a>
 800a70a:	f04f 0c00 	mov.w	ip, #0
 800a70e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a712:	2909      	cmp	r1, #9
 800a714:	f240 8082 	bls.w	800a81c <_strtod_l+0x2b4>
 800a718:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a71c:	2600      	movs	r6, #0
 800a71e:	e09d      	b.n	800a85c <_strtod_l+0x2f4>
 800a720:	2300      	movs	r3, #0
 800a722:	e7c4      	b.n	800a6ae <_strtod_l+0x146>
 800a724:	2f08      	cmp	r7, #8
 800a726:	bfd8      	it	le
 800a728:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a72a:	f100 0001 	add.w	r0, r0, #1
 800a72e:	bfda      	itte	le
 800a730:	fb02 3301 	mlale	r3, r2, r1, r3
 800a734:	9309      	strle	r3, [sp, #36]	; 0x24
 800a736:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a73a:	3701      	adds	r7, #1
 800a73c:	901d      	str	r0, [sp, #116]	; 0x74
 800a73e:	e7bf      	b.n	800a6c0 <_strtod_l+0x158>
 800a740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a742:	195a      	adds	r2, r3, r5
 800a744:	921d      	str	r2, [sp, #116]	; 0x74
 800a746:	5d5b      	ldrb	r3, [r3, r5]
 800a748:	2f00      	cmp	r7, #0
 800a74a:	d037      	beq.n	800a7bc <_strtod_l+0x254>
 800a74c:	9007      	str	r0, [sp, #28]
 800a74e:	463d      	mov	r5, r7
 800a750:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a754:	2a09      	cmp	r2, #9
 800a756:	d912      	bls.n	800a77e <_strtod_l+0x216>
 800a758:	2201      	movs	r2, #1
 800a75a:	e7c2      	b.n	800a6e2 <_strtod_l+0x17a>
 800a75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	921d      	str	r2, [sp, #116]	; 0x74
 800a762:	785b      	ldrb	r3, [r3, #1]
 800a764:	3001      	adds	r0, #1
 800a766:	2b30      	cmp	r3, #48	; 0x30
 800a768:	d0f8      	beq.n	800a75c <_strtod_l+0x1f4>
 800a76a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a76e:	2a08      	cmp	r2, #8
 800a770:	f200 84db 	bhi.w	800b12a <_strtod_l+0xbc2>
 800a774:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a776:	9007      	str	r0, [sp, #28]
 800a778:	2000      	movs	r0, #0
 800a77a:	920a      	str	r2, [sp, #40]	; 0x28
 800a77c:	4605      	mov	r5, r0
 800a77e:	3b30      	subs	r3, #48	; 0x30
 800a780:	f100 0201 	add.w	r2, r0, #1
 800a784:	d014      	beq.n	800a7b0 <_strtod_l+0x248>
 800a786:	9907      	ldr	r1, [sp, #28]
 800a788:	4411      	add	r1, r2
 800a78a:	9107      	str	r1, [sp, #28]
 800a78c:	462a      	mov	r2, r5
 800a78e:	eb00 0e05 	add.w	lr, r0, r5
 800a792:	210a      	movs	r1, #10
 800a794:	4572      	cmp	r2, lr
 800a796:	d113      	bne.n	800a7c0 <_strtod_l+0x258>
 800a798:	182a      	adds	r2, r5, r0
 800a79a:	2a08      	cmp	r2, #8
 800a79c:	f105 0501 	add.w	r5, r5, #1
 800a7a0:	4405      	add	r5, r0
 800a7a2:	dc1c      	bgt.n	800a7de <_strtod_l+0x276>
 800a7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7a6:	220a      	movs	r2, #10
 800a7a8:	fb02 3301 	mla	r3, r2, r1, r3
 800a7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	911d      	str	r1, [sp, #116]	; 0x74
 800a7b6:	785b      	ldrb	r3, [r3, #1]
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	e7c9      	b.n	800a750 <_strtod_l+0x1e8>
 800a7bc:	4638      	mov	r0, r7
 800a7be:	e7d2      	b.n	800a766 <_strtod_l+0x1fe>
 800a7c0:	2a08      	cmp	r2, #8
 800a7c2:	dc04      	bgt.n	800a7ce <_strtod_l+0x266>
 800a7c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a7c6:	434e      	muls	r6, r1
 800a7c8:	9609      	str	r6, [sp, #36]	; 0x24
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	e7e2      	b.n	800a794 <_strtod_l+0x22c>
 800a7ce:	f102 0c01 	add.w	ip, r2, #1
 800a7d2:	f1bc 0f10 	cmp.w	ip, #16
 800a7d6:	bfd8      	it	le
 800a7d8:	fb01 f909 	mulle.w	r9, r1, r9
 800a7dc:	e7f5      	b.n	800a7ca <_strtod_l+0x262>
 800a7de:	2d10      	cmp	r5, #16
 800a7e0:	bfdc      	itt	le
 800a7e2:	220a      	movle	r2, #10
 800a7e4:	fb02 3909 	mlale	r9, r2, r9, r3
 800a7e8:	e7e1      	b.n	800a7ae <_strtod_l+0x246>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9307      	str	r3, [sp, #28]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	e77c      	b.n	800a6ec <_strtod_l+0x184>
 800a7f2:	f04f 0c00 	mov.w	ip, #0
 800a7f6:	f108 0302 	add.w	r3, r8, #2
 800a7fa:	931d      	str	r3, [sp, #116]	; 0x74
 800a7fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a800:	e785      	b.n	800a70e <_strtod_l+0x1a6>
 800a802:	f04f 0c01 	mov.w	ip, #1
 800a806:	e7f6      	b.n	800a7f6 <_strtod_l+0x28e>
 800a808:	0800f9d4 	.word	0x0800f9d4
 800a80c:	0800f720 	.word	0x0800f720
 800a810:	7ff00000 	.word	0x7ff00000
 800a814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a816:	1c59      	adds	r1, r3, #1
 800a818:	911d      	str	r1, [sp, #116]	; 0x74
 800a81a:	785b      	ldrb	r3, [r3, #1]
 800a81c:	2b30      	cmp	r3, #48	; 0x30
 800a81e:	d0f9      	beq.n	800a814 <_strtod_l+0x2ac>
 800a820:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a824:	2908      	cmp	r1, #8
 800a826:	f63f af79 	bhi.w	800a71c <_strtod_l+0x1b4>
 800a82a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a82e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a834:	1c59      	adds	r1, r3, #1
 800a836:	911d      	str	r1, [sp, #116]	; 0x74
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a83e:	2e09      	cmp	r6, #9
 800a840:	d937      	bls.n	800a8b2 <_strtod_l+0x34a>
 800a842:	9e08      	ldr	r6, [sp, #32]
 800a844:	1b89      	subs	r1, r1, r6
 800a846:	2908      	cmp	r1, #8
 800a848:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a84c:	dc02      	bgt.n	800a854 <_strtod_l+0x2ec>
 800a84e:	4576      	cmp	r6, lr
 800a850:	bfa8      	it	ge
 800a852:	4676      	movge	r6, lr
 800a854:	f1bc 0f00 	cmp.w	ip, #0
 800a858:	d000      	beq.n	800a85c <_strtod_l+0x2f4>
 800a85a:	4276      	negs	r6, r6
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	d14f      	bne.n	800a900 <_strtod_l+0x398>
 800a860:	9904      	ldr	r1, [sp, #16]
 800a862:	4301      	orrs	r1, r0
 800a864:	f47f aec2 	bne.w	800a5ec <_strtod_l+0x84>
 800a868:	2a00      	cmp	r2, #0
 800a86a:	f47f aedb 	bne.w	800a624 <_strtod_l+0xbc>
 800a86e:	2b69      	cmp	r3, #105	; 0x69
 800a870:	d027      	beq.n	800a8c2 <_strtod_l+0x35a>
 800a872:	dc24      	bgt.n	800a8be <_strtod_l+0x356>
 800a874:	2b49      	cmp	r3, #73	; 0x49
 800a876:	d024      	beq.n	800a8c2 <_strtod_l+0x35a>
 800a878:	2b4e      	cmp	r3, #78	; 0x4e
 800a87a:	f47f aed3 	bne.w	800a624 <_strtod_l+0xbc>
 800a87e:	499e      	ldr	r1, [pc, #632]	; (800aaf8 <_strtod_l+0x590>)
 800a880:	a81d      	add	r0, sp, #116	; 0x74
 800a882:	f002 f8c3 	bl	800ca0c <__match>
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f aecc 	beq.w	800a624 <_strtod_l+0xbc>
 800a88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b28      	cmp	r3, #40	; 0x28
 800a892:	d12d      	bne.n	800a8f0 <_strtod_l+0x388>
 800a894:	4999      	ldr	r1, [pc, #612]	; (800aafc <_strtod_l+0x594>)
 800a896:	aa20      	add	r2, sp, #128	; 0x80
 800a898:	a81d      	add	r0, sp, #116	; 0x74
 800a89a:	f002 f8cb 	bl	800ca34 <__hexnan>
 800a89e:	2805      	cmp	r0, #5
 800a8a0:	d126      	bne.n	800a8f0 <_strtod_l+0x388>
 800a8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a8a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a8ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a8b0:	e69c      	b.n	800a5ec <_strtod_l+0x84>
 800a8b2:	210a      	movs	r1, #10
 800a8b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a8b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8bc:	e7b9      	b.n	800a832 <_strtod_l+0x2ca>
 800a8be:	2b6e      	cmp	r3, #110	; 0x6e
 800a8c0:	e7db      	b.n	800a87a <_strtod_l+0x312>
 800a8c2:	498f      	ldr	r1, [pc, #572]	; (800ab00 <_strtod_l+0x598>)
 800a8c4:	a81d      	add	r0, sp, #116	; 0x74
 800a8c6:	f002 f8a1 	bl	800ca0c <__match>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f43f aeaa 	beq.w	800a624 <_strtod_l+0xbc>
 800a8d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8d2:	498c      	ldr	r1, [pc, #560]	; (800ab04 <_strtod_l+0x59c>)
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	a81d      	add	r0, sp, #116	; 0x74
 800a8d8:	931d      	str	r3, [sp, #116]	; 0x74
 800a8da:	f002 f897 	bl	800ca0c <__match>
 800a8de:	b910      	cbnz	r0, 800a8e6 <_strtod_l+0x37e>
 800a8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	931d      	str	r3, [sp, #116]	; 0x74
 800a8e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ab14 <_strtod_l+0x5ac>
 800a8ea:	f04f 0a00 	mov.w	sl, #0
 800a8ee:	e67d      	b.n	800a5ec <_strtod_l+0x84>
 800a8f0:	4885      	ldr	r0, [pc, #532]	; (800ab08 <_strtod_l+0x5a0>)
 800a8f2:	f003 f891 	bl	800da18 <nan>
 800a8f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a8fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a8fe:	e675      	b.n	800a5ec <_strtod_l+0x84>
 800a900:	9b07      	ldr	r3, [sp, #28]
 800a902:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a904:	1af3      	subs	r3, r6, r3
 800a906:	2f00      	cmp	r7, #0
 800a908:	bf08      	it	eq
 800a90a:	462f      	moveq	r7, r5
 800a90c:	2d10      	cmp	r5, #16
 800a90e:	9308      	str	r3, [sp, #32]
 800a910:	46a8      	mov	r8, r5
 800a912:	bfa8      	it	ge
 800a914:	f04f 0810 	movge.w	r8, #16
 800a918:	f7f5 fe1c 	bl	8000554 <__aeabi_ui2d>
 800a91c:	2d09      	cmp	r5, #9
 800a91e:	4682      	mov	sl, r0
 800a920:	468b      	mov	fp, r1
 800a922:	dd13      	ble.n	800a94c <_strtod_l+0x3e4>
 800a924:	4b79      	ldr	r3, [pc, #484]	; (800ab0c <_strtod_l+0x5a4>)
 800a926:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a92a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a92e:	f7f5 fe8b 	bl	8000648 <__aeabi_dmul>
 800a932:	4682      	mov	sl, r0
 800a934:	4648      	mov	r0, r9
 800a936:	468b      	mov	fp, r1
 800a938:	f7f5 fe0c 	bl	8000554 <__aeabi_ui2d>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4650      	mov	r0, sl
 800a942:	4659      	mov	r1, fp
 800a944:	f7f5 fcca 	bl	80002dc <__adddf3>
 800a948:	4682      	mov	sl, r0
 800a94a:	468b      	mov	fp, r1
 800a94c:	2d0f      	cmp	r5, #15
 800a94e:	dc38      	bgt.n	800a9c2 <_strtod_l+0x45a>
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f43f ae4a 	beq.w	800a5ec <_strtod_l+0x84>
 800a958:	dd24      	ble.n	800a9a4 <_strtod_l+0x43c>
 800a95a:	2b16      	cmp	r3, #22
 800a95c:	dc0b      	bgt.n	800a976 <_strtod_l+0x40e>
 800a95e:	4d6b      	ldr	r5, [pc, #428]	; (800ab0c <_strtod_l+0x5a4>)
 800a960:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a964:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a968:	4652      	mov	r2, sl
 800a96a:	465b      	mov	r3, fp
 800a96c:	f7f5 fe6c 	bl	8000648 <__aeabi_dmul>
 800a970:	4682      	mov	sl, r0
 800a972:	468b      	mov	fp, r1
 800a974:	e63a      	b.n	800a5ec <_strtod_l+0x84>
 800a976:	9a08      	ldr	r2, [sp, #32]
 800a978:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a97c:	4293      	cmp	r3, r2
 800a97e:	db20      	blt.n	800a9c2 <_strtod_l+0x45a>
 800a980:	4c62      	ldr	r4, [pc, #392]	; (800ab0c <_strtod_l+0x5a4>)
 800a982:	f1c5 050f 	rsb	r5, r5, #15
 800a986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a98a:	4652      	mov	r2, sl
 800a98c:	465b      	mov	r3, fp
 800a98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a992:	f7f5 fe59 	bl	8000648 <__aeabi_dmul>
 800a996:	9b08      	ldr	r3, [sp, #32]
 800a998:	1b5d      	subs	r5, r3, r5
 800a99a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a99e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9a2:	e7e3      	b.n	800a96c <_strtod_l+0x404>
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	3316      	adds	r3, #22
 800a9a8:	db0b      	blt.n	800a9c2 <_strtod_l+0x45a>
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	4a57      	ldr	r2, [pc, #348]	; (800ab0c <_strtod_l+0x5a4>)
 800a9ae:	1b9e      	subs	r6, r3, r6
 800a9b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a9b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9b8:	4650      	mov	r0, sl
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	f7f5 ff6e 	bl	800089c <__aeabi_ddiv>
 800a9c0:	e7d6      	b.n	800a970 <_strtod_l+0x408>
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	eba5 0808 	sub.w	r8, r5, r8
 800a9c8:	4498      	add	r8, r3
 800a9ca:	f1b8 0f00 	cmp.w	r8, #0
 800a9ce:	dd71      	ble.n	800aab4 <_strtod_l+0x54c>
 800a9d0:	f018 030f 	ands.w	r3, r8, #15
 800a9d4:	d00a      	beq.n	800a9ec <_strtod_l+0x484>
 800a9d6:	494d      	ldr	r1, [pc, #308]	; (800ab0c <_strtod_l+0x5a4>)
 800a9d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9dc:	4652      	mov	r2, sl
 800a9de:	465b      	mov	r3, fp
 800a9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e4:	f7f5 fe30 	bl	8000648 <__aeabi_dmul>
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	f038 080f 	bics.w	r8, r8, #15
 800a9f0:	d04d      	beq.n	800aa8e <_strtod_l+0x526>
 800a9f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a9f6:	dd22      	ble.n	800aa3e <_strtod_l+0x4d6>
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	462e      	mov	r6, r5
 800a9fc:	9509      	str	r5, [sp, #36]	; 0x24
 800a9fe:	9507      	str	r5, [sp, #28]
 800aa00:	2322      	movs	r3, #34	; 0x22
 800aa02:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ab14 <_strtod_l+0x5ac>
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	f04f 0a00 	mov.w	sl, #0
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f43f adec 	beq.w	800a5ec <_strtod_l+0x84>
 800aa14:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aa16:	4620      	mov	r0, r4
 800aa18:	f002 f96e 	bl	800ccf8 <_Bfree>
 800aa1c:	9907      	ldr	r1, [sp, #28]
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f002 f96a 	bl	800ccf8 <_Bfree>
 800aa24:	4631      	mov	r1, r6
 800aa26:	4620      	mov	r0, r4
 800aa28:	f002 f966 	bl	800ccf8 <_Bfree>
 800aa2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f002 f962 	bl	800ccf8 <_Bfree>
 800aa34:	4629      	mov	r1, r5
 800aa36:	4620      	mov	r0, r4
 800aa38:	f002 f95e 	bl	800ccf8 <_Bfree>
 800aa3c:	e5d6      	b.n	800a5ec <_strtod_l+0x84>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	4699      	mov	r9, r3
 800aa4a:	f1b8 0f01 	cmp.w	r8, #1
 800aa4e:	dc21      	bgt.n	800aa94 <_strtod_l+0x52c>
 800aa50:	b10b      	cbz	r3, 800aa56 <_strtod_l+0x4ee>
 800aa52:	4682      	mov	sl, r0
 800aa54:	468b      	mov	fp, r1
 800aa56:	4b2e      	ldr	r3, [pc, #184]	; (800ab10 <_strtod_l+0x5a8>)
 800aa58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa68:	f7f5 fdee 	bl	8000648 <__aeabi_dmul>
 800aa6c:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <_strtod_l+0x5ac>)
 800aa6e:	460a      	mov	r2, r1
 800aa70:	400b      	ands	r3, r1
 800aa72:	4929      	ldr	r1, [pc, #164]	; (800ab18 <_strtod_l+0x5b0>)
 800aa74:	428b      	cmp	r3, r1
 800aa76:	4682      	mov	sl, r0
 800aa78:	d8be      	bhi.n	800a9f8 <_strtod_l+0x490>
 800aa7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa7e:	428b      	cmp	r3, r1
 800aa80:	bf86      	itte	hi
 800aa82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ab1c <_strtod_l+0x5b4>
 800aa86:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	e081      	b.n	800ab98 <_strtod_l+0x630>
 800aa94:	f018 0f01 	tst.w	r8, #1
 800aa98:	d007      	beq.n	800aaaa <_strtod_l+0x542>
 800aa9a:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <_strtod_l+0x5a8>)
 800aa9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7f5 fdd0 	bl	8000648 <__aeabi_dmul>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f109 0901 	add.w	r9, r9, #1
 800aaae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aab2:	e7ca      	b.n	800aa4a <_strtod_l+0x4e2>
 800aab4:	d0eb      	beq.n	800aa8e <_strtod_l+0x526>
 800aab6:	f1c8 0800 	rsb	r8, r8, #0
 800aaba:	f018 020f 	ands.w	r2, r8, #15
 800aabe:	d00a      	beq.n	800aad6 <_strtod_l+0x56e>
 800aac0:	4b12      	ldr	r3, [pc, #72]	; (800ab0c <_strtod_l+0x5a4>)
 800aac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac6:	4650      	mov	r0, sl
 800aac8:	4659      	mov	r1, fp
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fee5 	bl	800089c <__aeabi_ddiv>
 800aad2:	4682      	mov	sl, r0
 800aad4:	468b      	mov	fp, r1
 800aad6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aada:	d0d8      	beq.n	800aa8e <_strtod_l+0x526>
 800aadc:	f1b8 0f1f 	cmp.w	r8, #31
 800aae0:	dd1e      	ble.n	800ab20 <_strtod_l+0x5b8>
 800aae2:	2500      	movs	r5, #0
 800aae4:	462e      	mov	r6, r5
 800aae6:	9509      	str	r5, [sp, #36]	; 0x24
 800aae8:	9507      	str	r5, [sp, #28]
 800aaea:	2322      	movs	r3, #34	; 0x22
 800aaec:	f04f 0a00 	mov.w	sl, #0
 800aaf0:	f04f 0b00 	mov.w	fp, #0
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	e789      	b.n	800aa0c <_strtod_l+0x4a4>
 800aaf8:	0800f6f9 	.word	0x0800f6f9
 800aafc:	0800f734 	.word	0x0800f734
 800ab00:	0800f6f1 	.word	0x0800f6f1
 800ab04:	0800f874 	.word	0x0800f874
 800ab08:	0800fb90 	.word	0x0800fb90
 800ab0c:	0800fa70 	.word	0x0800fa70
 800ab10:	0800fa48 	.word	0x0800fa48
 800ab14:	7ff00000 	.word	0x7ff00000
 800ab18:	7ca00000 	.word	0x7ca00000
 800ab1c:	7fefffff 	.word	0x7fefffff
 800ab20:	f018 0310 	ands.w	r3, r8, #16
 800ab24:	bf18      	it	ne
 800ab26:	236a      	movne	r3, #106	; 0x6a
 800ab28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800aee0 <_strtod_l+0x978>
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	2300      	movs	r3, #0
 800ab34:	f018 0f01 	tst.w	r8, #1
 800ab38:	d004      	beq.n	800ab44 <_strtod_l+0x5dc>
 800ab3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab3e:	f7f5 fd83 	bl	8000648 <__aeabi_dmul>
 800ab42:	2301      	movs	r3, #1
 800ab44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab48:	f109 0908 	add.w	r9, r9, #8
 800ab4c:	d1f2      	bne.n	800ab34 <_strtod_l+0x5cc>
 800ab4e:	b10b      	cbz	r3, 800ab54 <_strtod_l+0x5ec>
 800ab50:	4682      	mov	sl, r0
 800ab52:	468b      	mov	fp, r1
 800ab54:	9b04      	ldr	r3, [sp, #16]
 800ab56:	b1bb      	cbz	r3, 800ab88 <_strtod_l+0x620>
 800ab58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ab5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	4659      	mov	r1, fp
 800ab64:	dd10      	ble.n	800ab88 <_strtod_l+0x620>
 800ab66:	2b1f      	cmp	r3, #31
 800ab68:	f340 8128 	ble.w	800adbc <_strtod_l+0x854>
 800ab6c:	2b34      	cmp	r3, #52	; 0x34
 800ab6e:	bfde      	ittt	le
 800ab70:	3b20      	suble	r3, #32
 800ab72:	f04f 32ff 	movle.w	r2, #4294967295
 800ab76:	fa02 f303 	lslle.w	r3, r2, r3
 800ab7a:	f04f 0a00 	mov.w	sl, #0
 800ab7e:	bfcc      	ite	gt
 800ab80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab84:	ea03 0b01 	andle.w	fp, r3, r1
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	4659      	mov	r1, fp
 800ab90:	f7f5 ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d1a4      	bne.n	800aae2 <_strtod_l+0x57a>
 800ab98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab9e:	462b      	mov	r3, r5
 800aba0:	463a      	mov	r2, r7
 800aba2:	4620      	mov	r0, r4
 800aba4:	f002 f914 	bl	800cdd0 <__s2b>
 800aba8:	9009      	str	r0, [sp, #36]	; 0x24
 800abaa:	2800      	cmp	r0, #0
 800abac:	f43f af24 	beq.w	800a9f8 <_strtod_l+0x490>
 800abb0:	9b07      	ldr	r3, [sp, #28]
 800abb2:	1b9e      	subs	r6, r3, r6
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfb4      	ite	lt
 800abba:	4633      	movlt	r3, r6
 800abbc:	2300      	movge	r3, #0
 800abbe:	9310      	str	r3, [sp, #64]	; 0x40
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	2500      	movs	r5, #0
 800abc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abc8:	9318      	str	r3, [sp, #96]	; 0x60
 800abca:	462e      	mov	r6, r5
 800abcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abce:	4620      	mov	r0, r4
 800abd0:	6859      	ldr	r1, [r3, #4]
 800abd2:	f002 f851 	bl	800cc78 <_Balloc>
 800abd6:	9007      	str	r0, [sp, #28]
 800abd8:	2800      	cmp	r0, #0
 800abda:	f43f af11 	beq.w	800aa00 <_strtod_l+0x498>
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	3202      	adds	r2, #2
 800abe4:	f103 010c 	add.w	r1, r3, #12
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	300c      	adds	r0, #12
 800abec:	f7fe ff78 	bl	8009ae0 <memcpy>
 800abf0:	ec4b ab10 	vmov	d0, sl, fp
 800abf4:	aa20      	add	r2, sp, #128	; 0x80
 800abf6:	a91f      	add	r1, sp, #124	; 0x7c
 800abf8:	4620      	mov	r0, r4
 800abfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800abfe:	f002 fc23 	bl	800d448 <__d2b>
 800ac02:	901e      	str	r0, [sp, #120]	; 0x78
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f43f aefb 	beq.w	800aa00 <_strtod_l+0x498>
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f002 f979 	bl	800cf04 <__i2b>
 800ac12:	4606      	mov	r6, r0
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f aef3 	beq.w	800aa00 <_strtod_l+0x498>
 800ac1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac1c:	9904      	ldr	r1, [sp, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bfab      	itete	ge
 800ac22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ac24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ac26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ac28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ac2c:	bfac      	ite	ge
 800ac2e:	eb03 0902 	addge.w	r9, r3, r2
 800ac32:	1ad7      	sublt	r7, r2, r3
 800ac34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac36:	eba3 0801 	sub.w	r8, r3, r1
 800ac3a:	4490      	add	r8, r2
 800ac3c:	4ba3      	ldr	r3, [pc, #652]	; (800aecc <_strtod_l+0x964>)
 800ac3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac42:	4598      	cmp	r8, r3
 800ac44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac48:	f280 80cc 	bge.w	800ade4 <_strtod_l+0x87c>
 800ac4c:	eba3 0308 	sub.w	r3, r3, r8
 800ac50:	2b1f      	cmp	r3, #31
 800ac52:	eba2 0203 	sub.w	r2, r2, r3
 800ac56:	f04f 0101 	mov.w	r1, #1
 800ac5a:	f300 80b6 	bgt.w	800adca <_strtod_l+0x862>
 800ac5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac62:	9311      	str	r3, [sp, #68]	; 0x44
 800ac64:	2300      	movs	r3, #0
 800ac66:	930c      	str	r3, [sp, #48]	; 0x30
 800ac68:	eb09 0802 	add.w	r8, r9, r2
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	45c1      	cmp	r9, r8
 800ac70:	4417      	add	r7, r2
 800ac72:	441f      	add	r7, r3
 800ac74:	464b      	mov	r3, r9
 800ac76:	bfa8      	it	ge
 800ac78:	4643      	movge	r3, r8
 800ac7a:	42bb      	cmp	r3, r7
 800ac7c:	bfa8      	it	ge
 800ac7e:	463b      	movge	r3, r7
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bfc2      	ittt	gt
 800ac84:	eba8 0803 	subgt.w	r8, r8, r3
 800ac88:	1aff      	subgt	r7, r7, r3
 800ac8a:	eba9 0903 	subgt.w	r9, r9, r3
 800ac8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dd17      	ble.n	800acc4 <_strtod_l+0x75c>
 800ac94:	4631      	mov	r1, r6
 800ac96:	461a      	mov	r2, r3
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f002 f9ef 	bl	800d07c <__pow5mult>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f43f aead 	beq.w	800aa00 <_strtod_l+0x498>
 800aca6:	4601      	mov	r1, r0
 800aca8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acaa:	4620      	mov	r0, r4
 800acac:	f002 f940 	bl	800cf30 <__multiply>
 800acb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f43f aea4 	beq.w	800aa00 <_strtod_l+0x498>
 800acb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800acba:	4620      	mov	r0, r4
 800acbc:	f002 f81c 	bl	800ccf8 <_Bfree>
 800acc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acc2:	931e      	str	r3, [sp, #120]	; 0x78
 800acc4:	f1b8 0f00 	cmp.w	r8, #0
 800acc8:	f300 8091 	bgt.w	800adee <_strtod_l+0x886>
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dd08      	ble.n	800ace4 <_strtod_l+0x77c>
 800acd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acd4:	9907      	ldr	r1, [sp, #28]
 800acd6:	4620      	mov	r0, r4
 800acd8:	f002 f9d0 	bl	800d07c <__pow5mult>
 800acdc:	9007      	str	r0, [sp, #28]
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f ae8e 	beq.w	800aa00 <_strtod_l+0x498>
 800ace4:	2f00      	cmp	r7, #0
 800ace6:	dd08      	ble.n	800acfa <_strtod_l+0x792>
 800ace8:	9907      	ldr	r1, [sp, #28]
 800acea:	463a      	mov	r2, r7
 800acec:	4620      	mov	r0, r4
 800acee:	f002 fa1f 	bl	800d130 <__lshift>
 800acf2:	9007      	str	r0, [sp, #28]
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f43f ae83 	beq.w	800aa00 <_strtod_l+0x498>
 800acfa:	f1b9 0f00 	cmp.w	r9, #0
 800acfe:	dd08      	ble.n	800ad12 <_strtod_l+0x7aa>
 800ad00:	4631      	mov	r1, r6
 800ad02:	464a      	mov	r2, r9
 800ad04:	4620      	mov	r0, r4
 800ad06:	f002 fa13 	bl	800d130 <__lshift>
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f43f ae77 	beq.w	800aa00 <_strtod_l+0x498>
 800ad12:	9a07      	ldr	r2, [sp, #28]
 800ad14:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad16:	4620      	mov	r0, r4
 800ad18:	f002 fa92 	bl	800d240 <__mdiff>
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f ae6e 	beq.w	800aa00 <_strtod_l+0x498>
 800ad24:	68c3      	ldr	r3, [r0, #12]
 800ad26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60c3      	str	r3, [r0, #12]
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	f002 fa6b 	bl	800d208 <__mcmp>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	da65      	bge.n	800ae02 <_strtod_l+0x89a>
 800ad36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad38:	ea53 030a 	orrs.w	r3, r3, sl
 800ad3c:	f040 8087 	bne.w	800ae4e <_strtod_l+0x8e6>
 800ad40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f040 8082 	bne.w	800ae4e <_strtod_l+0x8e6>
 800ad4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad4e:	0d1b      	lsrs	r3, r3, #20
 800ad50:	051b      	lsls	r3, r3, #20
 800ad52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad56:	d97a      	bls.n	800ae4e <_strtod_l+0x8e6>
 800ad58:	696b      	ldr	r3, [r5, #20]
 800ad5a:	b913      	cbnz	r3, 800ad62 <_strtod_l+0x7fa>
 800ad5c:	692b      	ldr	r3, [r5, #16]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	dd75      	ble.n	800ae4e <_strtod_l+0x8e6>
 800ad62:	4629      	mov	r1, r5
 800ad64:	2201      	movs	r2, #1
 800ad66:	4620      	mov	r0, r4
 800ad68:	f002 f9e2 	bl	800d130 <__lshift>
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4605      	mov	r5, r0
 800ad70:	f002 fa4a 	bl	800d208 <__mcmp>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	dd6a      	ble.n	800ae4e <_strtod_l+0x8e6>
 800ad78:	9904      	ldr	r1, [sp, #16]
 800ad7a:	4a55      	ldr	r2, [pc, #340]	; (800aed0 <_strtod_l+0x968>)
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	f000 8085 	beq.w	800ae8e <_strtod_l+0x926>
 800ad84:	ea02 010b 	and.w	r1, r2, fp
 800ad88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad8c:	dc7f      	bgt.n	800ae8e <_strtod_l+0x926>
 800ad8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad92:	f77f aeaa 	ble.w	800aaea <_strtod_l+0x582>
 800ad96:	4a4f      	ldr	r2, [pc, #316]	; (800aed4 <_strtod_l+0x96c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ad9e:	4650      	mov	r0, sl
 800ada0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fc4f 	bl	8000648 <__aeabi_dmul>
 800adaa:	460b      	mov	r3, r1
 800adac:	4303      	orrs	r3, r0
 800adae:	bf08      	it	eq
 800adb0:	2322      	moveq	r3, #34	; 0x22
 800adb2:	4682      	mov	sl, r0
 800adb4:	468b      	mov	fp, r1
 800adb6:	bf08      	it	eq
 800adb8:	6023      	streq	r3, [r4, #0]
 800adba:	e62b      	b.n	800aa14 <_strtod_l+0x4ac>
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	fa02 f303 	lsl.w	r3, r2, r3
 800adc4:	ea03 0a0a 	and.w	sl, r3, sl
 800adc8:	e6de      	b.n	800ab88 <_strtod_l+0x620>
 800adca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800adce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800add2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800add6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800adda:	fa01 f308 	lsl.w	r3, r1, r8
 800adde:	930c      	str	r3, [sp, #48]	; 0x30
 800ade0:	9111      	str	r1, [sp, #68]	; 0x44
 800ade2:	e741      	b.n	800ac68 <_strtod_l+0x700>
 800ade4:	2300      	movs	r3, #0
 800ade6:	930c      	str	r3, [sp, #48]	; 0x30
 800ade8:	2301      	movs	r3, #1
 800adea:	9311      	str	r3, [sp, #68]	; 0x44
 800adec:	e73c      	b.n	800ac68 <_strtod_l+0x700>
 800adee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800adf0:	4642      	mov	r2, r8
 800adf2:	4620      	mov	r0, r4
 800adf4:	f002 f99c 	bl	800d130 <__lshift>
 800adf8:	901e      	str	r0, [sp, #120]	; 0x78
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f47f af66 	bne.w	800accc <_strtod_l+0x764>
 800ae00:	e5fe      	b.n	800aa00 <_strtod_l+0x498>
 800ae02:	465f      	mov	r7, fp
 800ae04:	d16e      	bne.n	800aee4 <_strtod_l+0x97c>
 800ae06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae0c:	b342      	cbz	r2, 800ae60 <_strtod_l+0x8f8>
 800ae0e:	4a32      	ldr	r2, [pc, #200]	; (800aed8 <_strtod_l+0x970>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d128      	bne.n	800ae66 <_strtod_l+0x8fe>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4650      	mov	r0, sl
 800ae18:	b1eb      	cbz	r3, 800ae56 <_strtod_l+0x8ee>
 800ae1a:	4a2d      	ldr	r2, [pc, #180]	; (800aed0 <_strtod_l+0x968>)
 800ae1c:	403a      	ands	r2, r7
 800ae1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae22:	f04f 31ff 	mov.w	r1, #4294967295
 800ae26:	d819      	bhi.n	800ae5c <_strtod_l+0x8f4>
 800ae28:	0d12      	lsrs	r2, r2, #20
 800ae2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae32:	4298      	cmp	r0, r3
 800ae34:	d117      	bne.n	800ae66 <_strtod_l+0x8fe>
 800ae36:	4b29      	ldr	r3, [pc, #164]	; (800aedc <_strtod_l+0x974>)
 800ae38:	429f      	cmp	r7, r3
 800ae3a:	d102      	bne.n	800ae42 <_strtod_l+0x8da>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f addf 	beq.w	800aa00 <_strtod_l+0x498>
 800ae42:	4b23      	ldr	r3, [pc, #140]	; (800aed0 <_strtod_l+0x968>)
 800ae44:	403b      	ands	r3, r7
 800ae46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae4a:	f04f 0a00 	mov.w	sl, #0
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1a0      	bne.n	800ad96 <_strtod_l+0x82e>
 800ae54:	e5de      	b.n	800aa14 <_strtod_l+0x4ac>
 800ae56:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5a:	e7ea      	b.n	800ae32 <_strtod_l+0x8ca>
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	e7e8      	b.n	800ae32 <_strtod_l+0x8ca>
 800ae60:	ea53 030a 	orrs.w	r3, r3, sl
 800ae64:	d088      	beq.n	800ad78 <_strtod_l+0x810>
 800ae66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae68:	b1db      	cbz	r3, 800aea2 <_strtod_l+0x93a>
 800ae6a:	423b      	tst	r3, r7
 800ae6c:	d0ef      	beq.n	800ae4e <_strtod_l+0x8e6>
 800ae6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae70:	9a04      	ldr	r2, [sp, #16]
 800ae72:	4650      	mov	r0, sl
 800ae74:	4659      	mov	r1, fp
 800ae76:	b1c3      	cbz	r3, 800aeaa <_strtod_l+0x942>
 800ae78:	f7ff fb5a 	bl	800a530 <sulp>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae84:	f7f5 fa2a 	bl	80002dc <__adddf3>
 800ae88:	4682      	mov	sl, r0
 800ae8a:	468b      	mov	fp, r1
 800ae8c:	e7df      	b.n	800ae4e <_strtod_l+0x8e6>
 800ae8e:	4013      	ands	r3, r2
 800ae90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae9c:	f04f 3aff 	mov.w	sl, #4294967295
 800aea0:	e7d5      	b.n	800ae4e <_strtod_l+0x8e6>
 800aea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aea4:	ea13 0f0a 	tst.w	r3, sl
 800aea8:	e7e0      	b.n	800ae6c <_strtod_l+0x904>
 800aeaa:	f7ff fb41 	bl	800a530 <sulp>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aeb6:	f7f5 fa0f 	bl	80002d8 <__aeabi_dsub>
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	4682      	mov	sl, r0
 800aec0:	468b      	mov	fp, r1
 800aec2:	f7f5 fe29 	bl	8000b18 <__aeabi_dcmpeq>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0c1      	beq.n	800ae4e <_strtod_l+0x8e6>
 800aeca:	e60e      	b.n	800aaea <_strtod_l+0x582>
 800aecc:	fffffc02 	.word	0xfffffc02
 800aed0:	7ff00000 	.word	0x7ff00000
 800aed4:	39500000 	.word	0x39500000
 800aed8:	000fffff 	.word	0x000fffff
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	0800f748 	.word	0x0800f748
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	f002 fb0a 	bl	800d500 <__ratio>
 800aeec:	ec59 8b10 	vmov	r8, r9, d0
 800aef0:	ee10 0a10 	vmov	r0, s0
 800aef4:	2200      	movs	r2, #0
 800aef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aefa:	4649      	mov	r1, r9
 800aefc:	f7f5 fe20 	bl	8000b40 <__aeabi_dcmple>
 800af00:	2800      	cmp	r0, #0
 800af02:	d07c      	beq.n	800affe <_strtod_l+0xa96>
 800af04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d04c      	beq.n	800afa4 <_strtod_l+0xa3c>
 800af0a:	4b95      	ldr	r3, [pc, #596]	; (800b160 <_strtod_l+0xbf8>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b160 <_strtod_l+0xbf8>
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	4b92      	ldr	r3, [pc, #584]	; (800b164 <_strtod_l+0xbfc>)
 800af1c:	403b      	ands	r3, r7
 800af1e:	9311      	str	r3, [sp, #68]	; 0x44
 800af20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af22:	4b91      	ldr	r3, [pc, #580]	; (800b168 <_strtod_l+0xc00>)
 800af24:	429a      	cmp	r2, r3
 800af26:	f040 80b2 	bne.w	800b08e <_strtod_l+0xb26>
 800af2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af36:	ec4b ab10 	vmov	d0, sl, fp
 800af3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800af3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af42:	f002 fa05 	bl	800d350 <__ulp>
 800af46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af4a:	ec53 2b10 	vmov	r2, r3, d0
 800af4e:	f7f5 fb7b 	bl	8000648 <__aeabi_dmul>
 800af52:	4652      	mov	r2, sl
 800af54:	465b      	mov	r3, fp
 800af56:	f7f5 f9c1 	bl	80002dc <__adddf3>
 800af5a:	460b      	mov	r3, r1
 800af5c:	4981      	ldr	r1, [pc, #516]	; (800b164 <_strtod_l+0xbfc>)
 800af5e:	4a83      	ldr	r2, [pc, #524]	; (800b16c <_strtod_l+0xc04>)
 800af60:	4019      	ands	r1, r3
 800af62:	4291      	cmp	r1, r2
 800af64:	4682      	mov	sl, r0
 800af66:	d95e      	bls.n	800b026 <_strtod_l+0xabe>
 800af68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af6e:	4293      	cmp	r3, r2
 800af70:	d103      	bne.n	800af7a <_strtod_l+0xa12>
 800af72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af74:	3301      	adds	r3, #1
 800af76:	f43f ad43 	beq.w	800aa00 <_strtod_l+0x498>
 800af7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b178 <_strtod_l+0xc10>
 800af7e:	f04f 3aff 	mov.w	sl, #4294967295
 800af82:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af84:	4620      	mov	r0, r4
 800af86:	f001 feb7 	bl	800ccf8 <_Bfree>
 800af8a:	9907      	ldr	r1, [sp, #28]
 800af8c:	4620      	mov	r0, r4
 800af8e:	f001 feb3 	bl	800ccf8 <_Bfree>
 800af92:	4631      	mov	r1, r6
 800af94:	4620      	mov	r0, r4
 800af96:	f001 feaf 	bl	800ccf8 <_Bfree>
 800af9a:	4629      	mov	r1, r5
 800af9c:	4620      	mov	r0, r4
 800af9e:	f001 feab 	bl	800ccf8 <_Bfree>
 800afa2:	e613      	b.n	800abcc <_strtod_l+0x664>
 800afa4:	f1ba 0f00 	cmp.w	sl, #0
 800afa8:	d11b      	bne.n	800afe2 <_strtod_l+0xa7a>
 800afaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afae:	b9f3      	cbnz	r3, 800afee <_strtod_l+0xa86>
 800afb0:	4b6b      	ldr	r3, [pc, #428]	; (800b160 <_strtod_l+0xbf8>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	4640      	mov	r0, r8
 800afb6:	4649      	mov	r1, r9
 800afb8:	f7f5 fdb8 	bl	8000b2c <__aeabi_dcmplt>
 800afbc:	b9d0      	cbnz	r0, 800aff4 <_strtod_l+0xa8c>
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	4b6b      	ldr	r3, [pc, #428]	; (800b170 <_strtod_l+0xc08>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	f7f5 fb3f 	bl	8000648 <__aeabi_dmul>
 800afca:	4680      	mov	r8, r0
 800afcc:	4689      	mov	r9, r1
 800afce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afd2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800afd6:	931b      	str	r3, [sp, #108]	; 0x6c
 800afd8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800afdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800afe0:	e79b      	b.n	800af1a <_strtod_l+0x9b2>
 800afe2:	f1ba 0f01 	cmp.w	sl, #1
 800afe6:	d102      	bne.n	800afee <_strtod_l+0xa86>
 800afe8:	2f00      	cmp	r7, #0
 800afea:	f43f ad7e 	beq.w	800aaea <_strtod_l+0x582>
 800afee:	4b61      	ldr	r3, [pc, #388]	; (800b174 <_strtod_l+0xc0c>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	e78c      	b.n	800af0e <_strtod_l+0x9a6>
 800aff4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b170 <_strtod_l+0xc08>
 800aff8:	f04f 0800 	mov.w	r8, #0
 800affc:	e7e7      	b.n	800afce <_strtod_l+0xa66>
 800affe:	4b5c      	ldr	r3, [pc, #368]	; (800b170 <_strtod_l+0xc08>)
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	2200      	movs	r2, #0
 800b006:	f7f5 fb1f 	bl	8000648 <__aeabi_dmul>
 800b00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b00c:	4680      	mov	r8, r0
 800b00e:	4689      	mov	r9, r1
 800b010:	b933      	cbnz	r3, 800b020 <_strtod_l+0xab8>
 800b012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b016:	9012      	str	r0, [sp, #72]	; 0x48
 800b018:	9313      	str	r3, [sp, #76]	; 0x4c
 800b01a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b01e:	e7dd      	b.n	800afdc <_strtod_l+0xa74>
 800b020:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b024:	e7f9      	b.n	800b01a <_strtod_l+0xab2>
 800b026:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1a8      	bne.n	800af82 <_strtod_l+0xa1a>
 800b030:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b034:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b036:	0d1b      	lsrs	r3, r3, #20
 800b038:	051b      	lsls	r3, r3, #20
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d1a1      	bne.n	800af82 <_strtod_l+0xa1a>
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	f7f5 fe61 	bl	8000d08 <__aeabi_d2lz>
 800b046:	f7f5 fad1 	bl	80005ec <__aeabi_l2d>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4640      	mov	r0, r8
 800b050:	4649      	mov	r1, r9
 800b052:	f7f5 f941 	bl	80002d8 <__aeabi_dsub>
 800b056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b05c:	ea43 030a 	orr.w	r3, r3, sl
 800b060:	4313      	orrs	r3, r2
 800b062:	4680      	mov	r8, r0
 800b064:	4689      	mov	r9, r1
 800b066:	d053      	beq.n	800b110 <_strtod_l+0xba8>
 800b068:	a335      	add	r3, pc, #212	; (adr r3, 800b140 <_strtod_l+0xbd8>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 fd5d 	bl	8000b2c <__aeabi_dcmplt>
 800b072:	2800      	cmp	r0, #0
 800b074:	f47f acce 	bne.w	800aa14 <_strtod_l+0x4ac>
 800b078:	a333      	add	r3, pc, #204	; (adr r3, 800b148 <_strtod_l+0xbe0>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 fd71 	bl	8000b68 <__aeabi_dcmpgt>
 800b086:	2800      	cmp	r0, #0
 800b088:	f43f af7b 	beq.w	800af82 <_strtod_l+0xa1a>
 800b08c:	e4c2      	b.n	800aa14 <_strtod_l+0x4ac>
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	b333      	cbz	r3, 800b0e0 <_strtod_l+0xb78>
 800b092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b094:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b098:	d822      	bhi.n	800b0e0 <_strtod_l+0xb78>
 800b09a:	a32d      	add	r3, pc, #180	; (adr r3, 800b150 <_strtod_l+0xbe8>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	f7f5 fd4c 	bl	8000b40 <__aeabi_dcmple>
 800b0a8:	b1a0      	cbz	r0, 800b0d4 <_strtod_l+0xb6c>
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	f7f5 fda3 	bl	8000bf8 <__aeabi_d2uiz>
 800b0b2:	2801      	cmp	r0, #1
 800b0b4:	bf38      	it	cc
 800b0b6:	2001      	movcc	r0, #1
 800b0b8:	f7f5 fa4c 	bl	8000554 <__aeabi_ui2d>
 800b0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0be:	4680      	mov	r8, r0
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	bb13      	cbnz	r3, 800b10a <_strtod_l+0xba2>
 800b0c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0c8:	9014      	str	r0, [sp, #80]	; 0x50
 800b0ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b0cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b0d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0dc:	1a9b      	subs	r3, r3, r2
 800b0de:	930d      	str	r3, [sp, #52]	; 0x34
 800b0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b0e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0ec:	f002 f930 	bl	800d350 <__ulp>
 800b0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0f4:	ec53 2b10 	vmov	r2, r3, d0
 800b0f8:	f7f5 faa6 	bl	8000648 <__aeabi_dmul>
 800b0fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b100:	f7f5 f8ec 	bl	80002dc <__adddf3>
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	e78f      	b.n	800b02a <_strtod_l+0xac2>
 800b10a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b10e:	e7dd      	b.n	800b0cc <_strtod_l+0xb64>
 800b110:	a311      	add	r3, pc, #68	; (adr r3, 800b158 <_strtod_l+0xbf0>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 fd09 	bl	8000b2c <__aeabi_dcmplt>
 800b11a:	e7b4      	b.n	800b086 <_strtod_l+0xb1e>
 800b11c:	2300      	movs	r3, #0
 800b11e:	930e      	str	r3, [sp, #56]	; 0x38
 800b120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	f7ff ba65 	b.w	800a5f4 <_strtod_l+0x8c>
 800b12a:	2b65      	cmp	r3, #101	; 0x65
 800b12c:	f43f ab5d 	beq.w	800a7ea <_strtod_l+0x282>
 800b130:	2b45      	cmp	r3, #69	; 0x45
 800b132:	f43f ab5a 	beq.w	800a7ea <_strtod_l+0x282>
 800b136:	2201      	movs	r2, #1
 800b138:	f7ff bb92 	b.w	800a860 <_strtod_l+0x2f8>
 800b13c:	f3af 8000 	nop.w
 800b140:	94a03595 	.word	0x94a03595
 800b144:	3fdfffff 	.word	0x3fdfffff
 800b148:	35afe535 	.word	0x35afe535
 800b14c:	3fe00000 	.word	0x3fe00000
 800b150:	ffc00000 	.word	0xffc00000
 800b154:	41dfffff 	.word	0x41dfffff
 800b158:	94a03595 	.word	0x94a03595
 800b15c:	3fcfffff 	.word	0x3fcfffff
 800b160:	3ff00000 	.word	0x3ff00000
 800b164:	7ff00000 	.word	0x7ff00000
 800b168:	7fe00000 	.word	0x7fe00000
 800b16c:	7c9fffff 	.word	0x7c9fffff
 800b170:	3fe00000 	.word	0x3fe00000
 800b174:	bff00000 	.word	0xbff00000
 800b178:	7fefffff 	.word	0x7fefffff

0800b17c <strtod>:
 800b17c:	460a      	mov	r2, r1
 800b17e:	4601      	mov	r1, r0
 800b180:	4802      	ldr	r0, [pc, #8]	; (800b18c <strtod+0x10>)
 800b182:	4b03      	ldr	r3, [pc, #12]	; (800b190 <strtod+0x14>)
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	f7ff b9ef 	b.w	800a568 <_strtod_l>
 800b18a:	bf00      	nop
 800b18c:	2000002c 	.word	0x2000002c
 800b190:	20000094 	.word	0x20000094

0800b194 <_strtol_l.isra.0>:
 800b194:	2b01      	cmp	r3, #1
 800b196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b19a:	d001      	beq.n	800b1a0 <_strtol_l.isra.0+0xc>
 800b19c:	2b24      	cmp	r3, #36	; 0x24
 800b19e:	d906      	bls.n	800b1ae <_strtol_l.isra.0+0x1a>
 800b1a0:	f7fe fc74 	bl	8009a8c <__errno>
 800b1a4:	2316      	movs	r3, #22
 800b1a6:	6003      	str	r3, [r0, #0]
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	4f3a      	ldr	r7, [pc, #232]	; (800b298 <_strtol_l.isra.0+0x104>)
 800b1b0:	468e      	mov	lr, r1
 800b1b2:	4676      	mov	r6, lr
 800b1b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b1b8:	5de5      	ldrb	r5, [r4, r7]
 800b1ba:	f015 0508 	ands.w	r5, r5, #8
 800b1be:	d1f8      	bne.n	800b1b2 <_strtol_l.isra.0+0x1e>
 800b1c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b1c2:	d134      	bne.n	800b22e <_strtol_l.isra.0+0x9a>
 800b1c4:	f89e 4000 	ldrb.w	r4, [lr]
 800b1c8:	f04f 0801 	mov.w	r8, #1
 800b1cc:	f106 0e02 	add.w	lr, r6, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d05c      	beq.n	800b28e <_strtol_l.isra.0+0xfa>
 800b1d4:	2b10      	cmp	r3, #16
 800b1d6:	d10c      	bne.n	800b1f2 <_strtol_l.isra.0+0x5e>
 800b1d8:	2c30      	cmp	r4, #48	; 0x30
 800b1da:	d10a      	bne.n	800b1f2 <_strtol_l.isra.0+0x5e>
 800b1dc:	f89e 4000 	ldrb.w	r4, [lr]
 800b1e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b1e4:	2c58      	cmp	r4, #88	; 0x58
 800b1e6:	d14d      	bne.n	800b284 <_strtol_l.isra.0+0xf0>
 800b1e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b1ec:	2310      	movs	r3, #16
 800b1ee:	f10e 0e02 	add.w	lr, lr, #2
 800b1f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b1f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	fbbc f9f3 	udiv	r9, ip, r3
 800b200:	4635      	mov	r5, r6
 800b202:	fb03 ca19 	mls	sl, r3, r9, ip
 800b206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b20a:	2f09      	cmp	r7, #9
 800b20c:	d818      	bhi.n	800b240 <_strtol_l.isra.0+0xac>
 800b20e:	463c      	mov	r4, r7
 800b210:	42a3      	cmp	r3, r4
 800b212:	dd24      	ble.n	800b25e <_strtol_l.isra.0+0xca>
 800b214:	2e00      	cmp	r6, #0
 800b216:	db1f      	blt.n	800b258 <_strtol_l.isra.0+0xc4>
 800b218:	45a9      	cmp	r9, r5
 800b21a:	d31d      	bcc.n	800b258 <_strtol_l.isra.0+0xc4>
 800b21c:	d101      	bne.n	800b222 <_strtol_l.isra.0+0x8e>
 800b21e:	45a2      	cmp	sl, r4
 800b220:	db1a      	blt.n	800b258 <_strtol_l.isra.0+0xc4>
 800b222:	fb05 4503 	mla	r5, r5, r3, r4
 800b226:	2601      	movs	r6, #1
 800b228:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b22c:	e7eb      	b.n	800b206 <_strtol_l.isra.0+0x72>
 800b22e:	2c2b      	cmp	r4, #43	; 0x2b
 800b230:	bf08      	it	eq
 800b232:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b236:	46a8      	mov	r8, r5
 800b238:	bf08      	it	eq
 800b23a:	f106 0e02 	addeq.w	lr, r6, #2
 800b23e:	e7c7      	b.n	800b1d0 <_strtol_l.isra.0+0x3c>
 800b240:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b244:	2f19      	cmp	r7, #25
 800b246:	d801      	bhi.n	800b24c <_strtol_l.isra.0+0xb8>
 800b248:	3c37      	subs	r4, #55	; 0x37
 800b24a:	e7e1      	b.n	800b210 <_strtol_l.isra.0+0x7c>
 800b24c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b250:	2f19      	cmp	r7, #25
 800b252:	d804      	bhi.n	800b25e <_strtol_l.isra.0+0xca>
 800b254:	3c57      	subs	r4, #87	; 0x57
 800b256:	e7db      	b.n	800b210 <_strtol_l.isra.0+0x7c>
 800b258:	f04f 36ff 	mov.w	r6, #4294967295
 800b25c:	e7e4      	b.n	800b228 <_strtol_l.isra.0+0x94>
 800b25e:	2e00      	cmp	r6, #0
 800b260:	da05      	bge.n	800b26e <_strtol_l.isra.0+0xda>
 800b262:	2322      	movs	r3, #34	; 0x22
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	4665      	mov	r5, ip
 800b268:	b942      	cbnz	r2, 800b27c <_strtol_l.isra.0+0xe8>
 800b26a:	4628      	mov	r0, r5
 800b26c:	e79d      	b.n	800b1aa <_strtol_l.isra.0+0x16>
 800b26e:	f1b8 0f00 	cmp.w	r8, #0
 800b272:	d000      	beq.n	800b276 <_strtol_l.isra.0+0xe2>
 800b274:	426d      	negs	r5, r5
 800b276:	2a00      	cmp	r2, #0
 800b278:	d0f7      	beq.n	800b26a <_strtol_l.isra.0+0xd6>
 800b27a:	b10e      	cbz	r6, 800b280 <_strtol_l.isra.0+0xec>
 800b27c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b280:	6011      	str	r1, [r2, #0]
 800b282:	e7f2      	b.n	800b26a <_strtol_l.isra.0+0xd6>
 800b284:	2430      	movs	r4, #48	; 0x30
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1b3      	bne.n	800b1f2 <_strtol_l.isra.0+0x5e>
 800b28a:	2308      	movs	r3, #8
 800b28c:	e7b1      	b.n	800b1f2 <_strtol_l.isra.0+0x5e>
 800b28e:	2c30      	cmp	r4, #48	; 0x30
 800b290:	d0a4      	beq.n	800b1dc <_strtol_l.isra.0+0x48>
 800b292:	230a      	movs	r3, #10
 800b294:	e7ad      	b.n	800b1f2 <_strtol_l.isra.0+0x5e>
 800b296:	bf00      	nop
 800b298:	0800f771 	.word	0x0800f771

0800b29c <strtol>:
 800b29c:	4613      	mov	r3, r2
 800b29e:	460a      	mov	r2, r1
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4802      	ldr	r0, [pc, #8]	; (800b2ac <strtol+0x10>)
 800b2a4:	6800      	ldr	r0, [r0, #0]
 800b2a6:	f7ff bf75 	b.w	800b194 <_strtol_l.isra.0>
 800b2aa:	bf00      	nop
 800b2ac:	2000002c 	.word	0x2000002c

0800b2b0 <__swbuf_r>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	460e      	mov	r6, r1
 800b2b4:	4614      	mov	r4, r2
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b118      	cbz	r0, 800b2c2 <__swbuf_r+0x12>
 800b2ba:	6983      	ldr	r3, [r0, #24]
 800b2bc:	b90b      	cbnz	r3, 800b2c2 <__swbuf_r+0x12>
 800b2be:	f001 f849 	bl	800c354 <__sinit>
 800b2c2:	4b21      	ldr	r3, [pc, #132]	; (800b348 <__swbuf_r+0x98>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d12b      	bne.n	800b320 <__swbuf_r+0x70>
 800b2c8:	686c      	ldr	r4, [r5, #4]
 800b2ca:	69a3      	ldr	r3, [r4, #24]
 800b2cc:	60a3      	str	r3, [r4, #8]
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	071a      	lsls	r2, r3, #28
 800b2d2:	d52f      	bpl.n	800b334 <__swbuf_r+0x84>
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	b36b      	cbz	r3, 800b334 <__swbuf_r+0x84>
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	6820      	ldr	r0, [r4, #0]
 800b2dc:	1ac0      	subs	r0, r0, r3
 800b2de:	6963      	ldr	r3, [r4, #20]
 800b2e0:	b2f6      	uxtb	r6, r6
 800b2e2:	4283      	cmp	r3, r0
 800b2e4:	4637      	mov	r7, r6
 800b2e6:	dc04      	bgt.n	800b2f2 <__swbuf_r+0x42>
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 ff9e 	bl	800c22c <_fflush_r>
 800b2f0:	bb30      	cbnz	r0, 800b340 <__swbuf_r+0x90>
 800b2f2:	68a3      	ldr	r3, [r4, #8]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	60a3      	str	r3, [r4, #8]
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	6022      	str	r2, [r4, #0]
 800b2fe:	701e      	strb	r6, [r3, #0]
 800b300:	6963      	ldr	r3, [r4, #20]
 800b302:	3001      	adds	r0, #1
 800b304:	4283      	cmp	r3, r0
 800b306:	d004      	beq.n	800b312 <__swbuf_r+0x62>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	07db      	lsls	r3, r3, #31
 800b30c:	d506      	bpl.n	800b31c <__swbuf_r+0x6c>
 800b30e:	2e0a      	cmp	r6, #10
 800b310:	d104      	bne.n	800b31c <__swbuf_r+0x6c>
 800b312:	4621      	mov	r1, r4
 800b314:	4628      	mov	r0, r5
 800b316:	f000 ff89 	bl	800c22c <_fflush_r>
 800b31a:	b988      	cbnz	r0, 800b340 <__swbuf_r+0x90>
 800b31c:	4638      	mov	r0, r7
 800b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <__swbuf_r+0x9c>)
 800b322:	429c      	cmp	r4, r3
 800b324:	d101      	bne.n	800b32a <__swbuf_r+0x7a>
 800b326:	68ac      	ldr	r4, [r5, #8]
 800b328:	e7cf      	b.n	800b2ca <__swbuf_r+0x1a>
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <__swbuf_r+0xa0>)
 800b32c:	429c      	cmp	r4, r3
 800b32e:	bf08      	it	eq
 800b330:	68ec      	ldreq	r4, [r5, #12]
 800b332:	e7ca      	b.n	800b2ca <__swbuf_r+0x1a>
 800b334:	4621      	mov	r1, r4
 800b336:	4628      	mov	r0, r5
 800b338:	f000 f80c 	bl	800b354 <__swsetup_r>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d0cb      	beq.n	800b2d8 <__swbuf_r+0x28>
 800b340:	f04f 37ff 	mov.w	r7, #4294967295
 800b344:	e7ea      	b.n	800b31c <__swbuf_r+0x6c>
 800b346:	bf00      	nop
 800b348:	0800f928 	.word	0x0800f928
 800b34c:	0800f948 	.word	0x0800f948
 800b350:	0800f908 	.word	0x0800f908

0800b354 <__swsetup_r>:
 800b354:	4b32      	ldr	r3, [pc, #200]	; (800b420 <__swsetup_r+0xcc>)
 800b356:	b570      	push	{r4, r5, r6, lr}
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	4606      	mov	r6, r0
 800b35c:	460c      	mov	r4, r1
 800b35e:	b125      	cbz	r5, 800b36a <__swsetup_r+0x16>
 800b360:	69ab      	ldr	r3, [r5, #24]
 800b362:	b913      	cbnz	r3, 800b36a <__swsetup_r+0x16>
 800b364:	4628      	mov	r0, r5
 800b366:	f000 fff5 	bl	800c354 <__sinit>
 800b36a:	4b2e      	ldr	r3, [pc, #184]	; (800b424 <__swsetup_r+0xd0>)
 800b36c:	429c      	cmp	r4, r3
 800b36e:	d10f      	bne.n	800b390 <__swsetup_r+0x3c>
 800b370:	686c      	ldr	r4, [r5, #4]
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b378:	0719      	lsls	r1, r3, #28
 800b37a:	d42c      	bmi.n	800b3d6 <__swsetup_r+0x82>
 800b37c:	06dd      	lsls	r5, r3, #27
 800b37e:	d411      	bmi.n	800b3a4 <__swsetup_r+0x50>
 800b380:	2309      	movs	r3, #9
 800b382:	6033      	str	r3, [r6, #0]
 800b384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b388:	81a3      	strh	r3, [r4, #12]
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	e03e      	b.n	800b40e <__swsetup_r+0xba>
 800b390:	4b25      	ldr	r3, [pc, #148]	; (800b428 <__swsetup_r+0xd4>)
 800b392:	429c      	cmp	r4, r3
 800b394:	d101      	bne.n	800b39a <__swsetup_r+0x46>
 800b396:	68ac      	ldr	r4, [r5, #8]
 800b398:	e7eb      	b.n	800b372 <__swsetup_r+0x1e>
 800b39a:	4b24      	ldr	r3, [pc, #144]	; (800b42c <__swsetup_r+0xd8>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	bf08      	it	eq
 800b3a0:	68ec      	ldreq	r4, [r5, #12]
 800b3a2:	e7e6      	b.n	800b372 <__swsetup_r+0x1e>
 800b3a4:	0758      	lsls	r0, r3, #29
 800b3a6:	d512      	bpl.n	800b3ce <__swsetup_r+0x7a>
 800b3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3aa:	b141      	cbz	r1, 800b3be <__swsetup_r+0x6a>
 800b3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d002      	beq.n	800b3ba <__swsetup_r+0x66>
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f002 f929 	bl	800d60c <_free_r>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f043 0308 	orr.w	r3, r3, #8
 800b3d4:	81a3      	strh	r3, [r4, #12]
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	b94b      	cbnz	r3, 800b3ee <__swsetup_r+0x9a>
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3e4:	d003      	beq.n	800b3ee <__swsetup_r+0x9a>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f001 fbeb 	bl	800cbc4 <__smakebuf_r>
 800b3ee:	89a0      	ldrh	r0, [r4, #12]
 800b3f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f4:	f010 0301 	ands.w	r3, r0, #1
 800b3f8:	d00a      	beq.n	800b410 <__swsetup_r+0xbc>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60a3      	str	r3, [r4, #8]
 800b3fe:	6963      	ldr	r3, [r4, #20]
 800b400:	425b      	negs	r3, r3
 800b402:	61a3      	str	r3, [r4, #24]
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	b943      	cbnz	r3, 800b41a <__swsetup_r+0xc6>
 800b408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b40c:	d1ba      	bne.n	800b384 <__swsetup_r+0x30>
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	0781      	lsls	r1, r0, #30
 800b412:	bf58      	it	pl
 800b414:	6963      	ldrpl	r3, [r4, #20]
 800b416:	60a3      	str	r3, [r4, #8]
 800b418:	e7f4      	b.n	800b404 <__swsetup_r+0xb0>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e7f7      	b.n	800b40e <__swsetup_r+0xba>
 800b41e:	bf00      	nop
 800b420:	2000002c 	.word	0x2000002c
 800b424:	0800f928 	.word	0x0800f928
 800b428:	0800f948 	.word	0x0800f948
 800b42c:	0800f908 	.word	0x0800f908

0800b430 <quorem>:
 800b430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	6903      	ldr	r3, [r0, #16]
 800b436:	690c      	ldr	r4, [r1, #16]
 800b438:	42a3      	cmp	r3, r4
 800b43a:	4607      	mov	r7, r0
 800b43c:	f2c0 8081 	blt.w	800b542 <quorem+0x112>
 800b440:	3c01      	subs	r4, #1
 800b442:	f101 0814 	add.w	r8, r1, #20
 800b446:	f100 0514 	add.w	r5, r0, #20
 800b44a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b458:	3301      	adds	r3, #1
 800b45a:	429a      	cmp	r2, r3
 800b45c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b464:	fbb2 f6f3 	udiv	r6, r2, r3
 800b468:	d331      	bcc.n	800b4ce <quorem+0x9e>
 800b46a:	f04f 0e00 	mov.w	lr, #0
 800b46e:	4640      	mov	r0, r8
 800b470:	46ac      	mov	ip, r5
 800b472:	46f2      	mov	sl, lr
 800b474:	f850 2b04 	ldr.w	r2, [r0], #4
 800b478:	b293      	uxth	r3, r2
 800b47a:	fb06 e303 	mla	r3, r6, r3, lr
 800b47e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b482:	b29b      	uxth	r3, r3
 800b484:	ebaa 0303 	sub.w	r3, sl, r3
 800b488:	0c12      	lsrs	r2, r2, #16
 800b48a:	f8dc a000 	ldr.w	sl, [ip]
 800b48e:	fb06 e202 	mla	r2, r6, r2, lr
 800b492:	fa13 f38a 	uxtah	r3, r3, sl
 800b496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b49a:	fa1f fa82 	uxth.w	sl, r2
 800b49e:	f8dc 2000 	ldr.w	r2, [ip]
 800b4a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b0:	4581      	cmp	r9, r0
 800b4b2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4ba:	d2db      	bcs.n	800b474 <quorem+0x44>
 800b4bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4c0:	b92b      	cbnz	r3, 800b4ce <quorem+0x9e>
 800b4c2:	9b01      	ldr	r3, [sp, #4]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	429d      	cmp	r5, r3
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	d32e      	bcc.n	800b52a <quorem+0xfa>
 800b4cc:	613c      	str	r4, [r7, #16]
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f001 fe9a 	bl	800d208 <__mcmp>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	db24      	blt.n	800b522 <quorem+0xf2>
 800b4d8:	3601      	adds	r6, #1
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f04f 0c00 	mov.w	ip, #0
 800b4e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4e4:	f8d0 e000 	ldr.w	lr, [r0]
 800b4e8:	b293      	uxth	r3, r2
 800b4ea:	ebac 0303 	sub.w	r3, ip, r3
 800b4ee:	0c12      	lsrs	r2, r2, #16
 800b4f0:	fa13 f38e 	uxtah	r3, r3, lr
 800b4f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b4f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b502:	45c1      	cmp	r9, r8
 800b504:	f840 3b04 	str.w	r3, [r0], #4
 800b508:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b50c:	d2e8      	bcs.n	800b4e0 <quorem+0xb0>
 800b50e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b516:	b922      	cbnz	r2, 800b522 <quorem+0xf2>
 800b518:	3b04      	subs	r3, #4
 800b51a:	429d      	cmp	r5, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	d30a      	bcc.n	800b536 <quorem+0x106>
 800b520:	613c      	str	r4, [r7, #16]
 800b522:	4630      	mov	r0, r6
 800b524:	b003      	add	sp, #12
 800b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	3b04      	subs	r3, #4
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d1cc      	bne.n	800b4cc <quorem+0x9c>
 800b532:	3c01      	subs	r4, #1
 800b534:	e7c7      	b.n	800b4c6 <quorem+0x96>
 800b536:	6812      	ldr	r2, [r2, #0]
 800b538:	3b04      	subs	r3, #4
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	d1f0      	bne.n	800b520 <quorem+0xf0>
 800b53e:	3c01      	subs	r4, #1
 800b540:	e7eb      	b.n	800b51a <quorem+0xea>
 800b542:	2000      	movs	r0, #0
 800b544:	e7ee      	b.n	800b524 <quorem+0xf4>
	...

0800b548 <_dtoa_r>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	ed2d 8b02 	vpush	{d8}
 800b550:	ec57 6b10 	vmov	r6, r7, d0
 800b554:	b095      	sub	sp, #84	; 0x54
 800b556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b558:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b562:	4604      	mov	r4, r0
 800b564:	9209      	str	r2, [sp, #36]	; 0x24
 800b566:	930f      	str	r3, [sp, #60]	; 0x3c
 800b568:	b975      	cbnz	r5, 800b588 <_dtoa_r+0x40>
 800b56a:	2010      	movs	r0, #16
 800b56c:	f001 fb6a 	bl	800cc44 <malloc>
 800b570:	4602      	mov	r2, r0
 800b572:	6260      	str	r0, [r4, #36]	; 0x24
 800b574:	b920      	cbnz	r0, 800b580 <_dtoa_r+0x38>
 800b576:	4bb2      	ldr	r3, [pc, #712]	; (800b840 <_dtoa_r+0x2f8>)
 800b578:	21ea      	movs	r1, #234	; 0xea
 800b57a:	48b2      	ldr	r0, [pc, #712]	; (800b844 <_dtoa_r+0x2fc>)
 800b57c:	f002 fad8 	bl	800db30 <__assert_func>
 800b580:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b584:	6005      	str	r5, [r0, #0]
 800b586:	60c5      	str	r5, [r0, #12]
 800b588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b58a:	6819      	ldr	r1, [r3, #0]
 800b58c:	b151      	cbz	r1, 800b5a4 <_dtoa_r+0x5c>
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	604a      	str	r2, [r1, #4]
 800b592:	2301      	movs	r3, #1
 800b594:	4093      	lsls	r3, r2
 800b596:	608b      	str	r3, [r1, #8]
 800b598:	4620      	mov	r0, r4
 800b59a:	f001 fbad 	bl	800ccf8 <_Bfree>
 800b59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	1e3b      	subs	r3, r7, #0
 800b5a6:	bfb9      	ittee	lt
 800b5a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5ac:	9303      	strlt	r3, [sp, #12]
 800b5ae:	2300      	movge	r3, #0
 800b5b0:	f8c8 3000 	strge.w	r3, [r8]
 800b5b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b5b8:	4ba3      	ldr	r3, [pc, #652]	; (800b848 <_dtoa_r+0x300>)
 800b5ba:	bfbc      	itt	lt
 800b5bc:	2201      	movlt	r2, #1
 800b5be:	f8c8 2000 	strlt.w	r2, [r8]
 800b5c2:	ea33 0309 	bics.w	r3, r3, r9
 800b5c6:	d11b      	bne.n	800b600 <_dtoa_r+0xb8>
 800b5c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5d4:	4333      	orrs	r3, r6
 800b5d6:	f000 857a 	beq.w	800c0ce <_dtoa_r+0xb86>
 800b5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5dc:	b963      	cbnz	r3, 800b5f8 <_dtoa_r+0xb0>
 800b5de:	4b9b      	ldr	r3, [pc, #620]	; (800b84c <_dtoa_r+0x304>)
 800b5e0:	e024      	b.n	800b62c <_dtoa_r+0xe4>
 800b5e2:	4b9b      	ldr	r3, [pc, #620]	; (800b850 <_dtoa_r+0x308>)
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	9800      	ldr	r0, [sp, #0]
 800b5ee:	b015      	add	sp, #84	; 0x54
 800b5f0:	ecbd 8b02 	vpop	{d8}
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	4b94      	ldr	r3, [pc, #592]	; (800b84c <_dtoa_r+0x304>)
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	3303      	adds	r3, #3
 800b5fe:	e7f3      	b.n	800b5e8 <_dtoa_r+0xa0>
 800b600:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b604:	2200      	movs	r2, #0
 800b606:	ec51 0b17 	vmov	r0, r1, d7
 800b60a:	2300      	movs	r3, #0
 800b60c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b610:	f7f5 fa82 	bl	8000b18 <__aeabi_dcmpeq>
 800b614:	4680      	mov	r8, r0
 800b616:	b158      	cbz	r0, 800b630 <_dtoa_r+0xe8>
 800b618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b61a:	2301      	movs	r3, #1
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8551 	beq.w	800c0c8 <_dtoa_r+0xb80>
 800b626:	488b      	ldr	r0, [pc, #556]	; (800b854 <_dtoa_r+0x30c>)
 800b628:	6018      	str	r0, [r3, #0]
 800b62a:	1e43      	subs	r3, r0, #1
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	e7dd      	b.n	800b5ec <_dtoa_r+0xa4>
 800b630:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b634:	aa12      	add	r2, sp, #72	; 0x48
 800b636:	a913      	add	r1, sp, #76	; 0x4c
 800b638:	4620      	mov	r0, r4
 800b63a:	f001 ff05 	bl	800d448 <__d2b>
 800b63e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b642:	4683      	mov	fp, r0
 800b644:	2d00      	cmp	r5, #0
 800b646:	d07c      	beq.n	800b742 <_dtoa_r+0x1fa>
 800b648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b64e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b652:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b656:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b65a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b662:	4b7d      	ldr	r3, [pc, #500]	; (800b858 <_dtoa_r+0x310>)
 800b664:	2200      	movs	r2, #0
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f4 fe35 	bl	80002d8 <__aeabi_dsub>
 800b66e:	a36e      	add	r3, pc, #440	; (adr r3, 800b828 <_dtoa_r+0x2e0>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 ffe8 	bl	8000648 <__aeabi_dmul>
 800b678:	a36d      	add	r3, pc, #436	; (adr r3, 800b830 <_dtoa_r+0x2e8>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f7f4 fe2d 	bl	80002dc <__adddf3>
 800b682:	4606      	mov	r6, r0
 800b684:	4628      	mov	r0, r5
 800b686:	460f      	mov	r7, r1
 800b688:	f7f4 ff74 	bl	8000574 <__aeabi_i2d>
 800b68c:	a36a      	add	r3, pc, #424	; (adr r3, 800b838 <_dtoa_r+0x2f0>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 ffd9 	bl	8000648 <__aeabi_dmul>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4630      	mov	r0, r6
 800b69c:	4639      	mov	r1, r7
 800b69e:	f7f4 fe1d 	bl	80002dc <__adddf3>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460f      	mov	r7, r1
 800b6a6:	f7f5 fa7f 	bl	8000ba8 <__aeabi_d2iz>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	4639      	mov	r1, r7
 800b6b4:	f7f5 fa3a 	bl	8000b2c <__aeabi_dcmplt>
 800b6b8:	b148      	cbz	r0, 800b6ce <_dtoa_r+0x186>
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	f7f4 ff5a 	bl	8000574 <__aeabi_i2d>
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	f7f5 fa28 	bl	8000b18 <__aeabi_dcmpeq>
 800b6c8:	b908      	cbnz	r0, 800b6ce <_dtoa_r+0x186>
 800b6ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6ce:	f1ba 0f16 	cmp.w	sl, #22
 800b6d2:	d854      	bhi.n	800b77e <_dtoa_r+0x236>
 800b6d4:	4b61      	ldr	r3, [pc, #388]	; (800b85c <_dtoa_r+0x314>)
 800b6d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6e2:	f7f5 fa23 	bl	8000b2c <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d04b      	beq.n	800b782 <_dtoa_r+0x23a>
 800b6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b6f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6f4:	1b5d      	subs	r5, r3, r5
 800b6f6:	1e6b      	subs	r3, r5, #1
 800b6f8:	9304      	str	r3, [sp, #16]
 800b6fa:	bf43      	ittte	mi
 800b6fc:	2300      	movmi	r3, #0
 800b6fe:	f1c5 0801 	rsbmi	r8, r5, #1
 800b702:	9304      	strmi	r3, [sp, #16]
 800b704:	f04f 0800 	movpl.w	r8, #0
 800b708:	f1ba 0f00 	cmp.w	sl, #0
 800b70c:	db3b      	blt.n	800b786 <_dtoa_r+0x23e>
 800b70e:	9b04      	ldr	r3, [sp, #16]
 800b710:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b714:	4453      	add	r3, sl
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	2300      	movs	r3, #0
 800b71a:	9306      	str	r3, [sp, #24]
 800b71c:	9b05      	ldr	r3, [sp, #20]
 800b71e:	2b09      	cmp	r3, #9
 800b720:	d869      	bhi.n	800b7f6 <_dtoa_r+0x2ae>
 800b722:	2b05      	cmp	r3, #5
 800b724:	bfc4      	itt	gt
 800b726:	3b04      	subgt	r3, #4
 800b728:	9305      	strgt	r3, [sp, #20]
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	f1a3 0302 	sub.w	r3, r3, #2
 800b730:	bfcc      	ite	gt
 800b732:	2500      	movgt	r5, #0
 800b734:	2501      	movle	r5, #1
 800b736:	2b03      	cmp	r3, #3
 800b738:	d869      	bhi.n	800b80e <_dtoa_r+0x2c6>
 800b73a:	e8df f003 	tbb	[pc, r3]
 800b73e:	4e2c      	.short	0x4e2c
 800b740:	5a4c      	.short	0x5a4c
 800b742:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b746:	441d      	add	r5, r3
 800b748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	bfc1      	itttt	gt
 800b750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b754:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b758:	fa09 f303 	lslgt.w	r3, r9, r3
 800b75c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b760:	bfda      	itte	le
 800b762:	f1c3 0320 	rsble	r3, r3, #32
 800b766:	fa06 f003 	lslle.w	r0, r6, r3
 800b76a:	4318      	orrgt	r0, r3
 800b76c:	f7f4 fef2 	bl	8000554 <__aeabi_ui2d>
 800b770:	2301      	movs	r3, #1
 800b772:	4606      	mov	r6, r0
 800b774:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b778:	3d01      	subs	r5, #1
 800b77a:	9310      	str	r3, [sp, #64]	; 0x40
 800b77c:	e771      	b.n	800b662 <_dtoa_r+0x11a>
 800b77e:	2301      	movs	r3, #1
 800b780:	e7b6      	b.n	800b6f0 <_dtoa_r+0x1a8>
 800b782:	900e      	str	r0, [sp, #56]	; 0x38
 800b784:	e7b5      	b.n	800b6f2 <_dtoa_r+0x1aa>
 800b786:	f1ca 0300 	rsb	r3, sl, #0
 800b78a:	9306      	str	r3, [sp, #24]
 800b78c:	2300      	movs	r3, #0
 800b78e:	eba8 080a 	sub.w	r8, r8, sl
 800b792:	930d      	str	r3, [sp, #52]	; 0x34
 800b794:	e7c2      	b.n	800b71c <_dtoa_r+0x1d4>
 800b796:	2300      	movs	r3, #0
 800b798:	9308      	str	r3, [sp, #32]
 800b79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dc39      	bgt.n	800b814 <_dtoa_r+0x2cc>
 800b7a0:	f04f 0901 	mov.w	r9, #1
 800b7a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7a8:	464b      	mov	r3, r9
 800b7aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b7ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	6042      	str	r2, [r0, #4]
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	f102 0614 	add.w	r6, r2, #20
 800b7ba:	429e      	cmp	r6, r3
 800b7bc:	6841      	ldr	r1, [r0, #4]
 800b7be:	d92f      	bls.n	800b820 <_dtoa_r+0x2d8>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f001 fa59 	bl	800cc78 <_Balloc>
 800b7c6:	9000      	str	r0, [sp, #0]
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d14b      	bne.n	800b864 <_dtoa_r+0x31c>
 800b7cc:	4b24      	ldr	r3, [pc, #144]	; (800b860 <_dtoa_r+0x318>)
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7d4:	e6d1      	b.n	800b57a <_dtoa_r+0x32>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7de      	b.n	800b798 <_dtoa_r+0x250>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9308      	str	r3, [sp, #32]
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	eb0a 0903 	add.w	r9, sl, r3
 800b7e4:	f109 0301 	add.w	r3, r9, #1
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	bfb8      	it	lt
 800b7ee:	2301      	movlt	r3, #1
 800b7f0:	e7dd      	b.n	800b7ae <_dtoa_r+0x266>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e7f2      	b.n	800b7dc <_dtoa_r+0x294>
 800b7f6:	2501      	movs	r5, #1
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	9508      	str	r5, [sp, #32]
 800b7fe:	f04f 39ff 	mov.w	r9, #4294967295
 800b802:	2200      	movs	r2, #0
 800b804:	f8cd 9004 	str.w	r9, [sp, #4]
 800b808:	2312      	movs	r3, #18
 800b80a:	9209      	str	r2, [sp, #36]	; 0x24
 800b80c:	e7cf      	b.n	800b7ae <_dtoa_r+0x266>
 800b80e:	2301      	movs	r3, #1
 800b810:	9308      	str	r3, [sp, #32]
 800b812:	e7f4      	b.n	800b7fe <_dtoa_r+0x2b6>
 800b814:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b818:	f8cd 9004 	str.w	r9, [sp, #4]
 800b81c:	464b      	mov	r3, r9
 800b81e:	e7c6      	b.n	800b7ae <_dtoa_r+0x266>
 800b820:	3101      	adds	r1, #1
 800b822:	6041      	str	r1, [r0, #4]
 800b824:	0052      	lsls	r2, r2, #1
 800b826:	e7c6      	b.n	800b7b6 <_dtoa_r+0x26e>
 800b828:	636f4361 	.word	0x636f4361
 800b82c:	3fd287a7 	.word	0x3fd287a7
 800b830:	8b60c8b3 	.word	0x8b60c8b3
 800b834:	3fc68a28 	.word	0x3fc68a28
 800b838:	509f79fb 	.word	0x509f79fb
 800b83c:	3fd34413 	.word	0x3fd34413
 800b840:	0800f87e 	.word	0x0800f87e
 800b844:	0800f895 	.word	0x0800f895
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	0800f87a 	.word	0x0800f87a
 800b850:	0800f871 	.word	0x0800f871
 800b854:	0800f6fd 	.word	0x0800f6fd
 800b858:	3ff80000 	.word	0x3ff80000
 800b85c:	0800fa70 	.word	0x0800fa70
 800b860:	0800f8f4 	.word	0x0800f8f4
 800b864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b866:	9a00      	ldr	r2, [sp, #0]
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	2b0e      	cmp	r3, #14
 800b86e:	f200 80ad 	bhi.w	800b9cc <_dtoa_r+0x484>
 800b872:	2d00      	cmp	r5, #0
 800b874:	f000 80aa 	beq.w	800b9cc <_dtoa_r+0x484>
 800b878:	f1ba 0f00 	cmp.w	sl, #0
 800b87c:	dd36      	ble.n	800b8ec <_dtoa_r+0x3a4>
 800b87e:	4ac3      	ldr	r2, [pc, #780]	; (800bb8c <_dtoa_r+0x644>)
 800b880:	f00a 030f 	and.w	r3, sl, #15
 800b884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b888:	ed93 7b00 	vldr	d7, [r3]
 800b88c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b890:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b894:	eeb0 8a47 	vmov.f32	s16, s14
 800b898:	eef0 8a67 	vmov.f32	s17, s15
 800b89c:	d016      	beq.n	800b8cc <_dtoa_r+0x384>
 800b89e:	4bbc      	ldr	r3, [pc, #752]	; (800bb90 <_dtoa_r+0x648>)
 800b8a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8a8:	f7f4 fff8 	bl	800089c <__aeabi_ddiv>
 800b8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b0:	f007 070f 	and.w	r7, r7, #15
 800b8b4:	2503      	movs	r5, #3
 800b8b6:	4eb6      	ldr	r6, [pc, #728]	; (800bb90 <_dtoa_r+0x648>)
 800b8b8:	b957      	cbnz	r7, 800b8d0 <_dtoa_r+0x388>
 800b8ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8be:	ec53 2b18 	vmov	r2, r3, d8
 800b8c2:	f7f4 ffeb 	bl	800089c <__aeabi_ddiv>
 800b8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ca:	e029      	b.n	800b920 <_dtoa_r+0x3d8>
 800b8cc:	2502      	movs	r5, #2
 800b8ce:	e7f2      	b.n	800b8b6 <_dtoa_r+0x36e>
 800b8d0:	07f9      	lsls	r1, r7, #31
 800b8d2:	d508      	bpl.n	800b8e6 <_dtoa_r+0x39e>
 800b8d4:	ec51 0b18 	vmov	r0, r1, d8
 800b8d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8dc:	f7f4 feb4 	bl	8000648 <__aeabi_dmul>
 800b8e0:	ec41 0b18 	vmov	d8, r0, r1
 800b8e4:	3501      	adds	r5, #1
 800b8e6:	107f      	asrs	r7, r7, #1
 800b8e8:	3608      	adds	r6, #8
 800b8ea:	e7e5      	b.n	800b8b8 <_dtoa_r+0x370>
 800b8ec:	f000 80a6 	beq.w	800ba3c <_dtoa_r+0x4f4>
 800b8f0:	f1ca 0600 	rsb	r6, sl, #0
 800b8f4:	4ba5      	ldr	r3, [pc, #660]	; (800bb8c <_dtoa_r+0x644>)
 800b8f6:	4fa6      	ldr	r7, [pc, #664]	; (800bb90 <_dtoa_r+0x648>)
 800b8f8:	f006 020f 	and.w	r2, r6, #15
 800b8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b908:	f7f4 fe9e 	bl	8000648 <__aeabi_dmul>
 800b90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b910:	1136      	asrs	r6, r6, #4
 800b912:	2300      	movs	r3, #0
 800b914:	2502      	movs	r5, #2
 800b916:	2e00      	cmp	r6, #0
 800b918:	f040 8085 	bne.w	800ba26 <_dtoa_r+0x4de>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1d2      	bne.n	800b8c6 <_dtoa_r+0x37e>
 800b920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 808c 	beq.w	800ba40 <_dtoa_r+0x4f8>
 800b928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b92c:	4b99      	ldr	r3, [pc, #612]	; (800bb94 <_dtoa_r+0x64c>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f5 f8fa 	bl	8000b2c <__aeabi_dcmplt>
 800b938:	2800      	cmp	r0, #0
 800b93a:	f000 8081 	beq.w	800ba40 <_dtoa_r+0x4f8>
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d07d      	beq.n	800ba40 <_dtoa_r+0x4f8>
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	dd3c      	ble.n	800b9c4 <_dtoa_r+0x47c>
 800b94a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b94e:	9307      	str	r3, [sp, #28]
 800b950:	2200      	movs	r2, #0
 800b952:	4b91      	ldr	r3, [pc, #580]	; (800bb98 <_dtoa_r+0x650>)
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f4 fe76 	bl	8000648 <__aeabi_dmul>
 800b95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b960:	3501      	adds	r5, #1
 800b962:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b96a:	4628      	mov	r0, r5
 800b96c:	f7f4 fe02 	bl	8000574 <__aeabi_i2d>
 800b970:	4632      	mov	r2, r6
 800b972:	463b      	mov	r3, r7
 800b974:	f7f4 fe68 	bl	8000648 <__aeabi_dmul>
 800b978:	4b88      	ldr	r3, [pc, #544]	; (800bb9c <_dtoa_r+0x654>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	f7f4 fcae 	bl	80002dc <__adddf3>
 800b980:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b988:	9303      	str	r3, [sp, #12]
 800b98a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d15c      	bne.n	800ba4a <_dtoa_r+0x502>
 800b990:	4b83      	ldr	r3, [pc, #524]	; (800bba0 <_dtoa_r+0x658>)
 800b992:	2200      	movs	r2, #0
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f4 fc9e 	bl	80002d8 <__aeabi_dsub>
 800b99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	460f      	mov	r7, r1
 800b9a4:	f7f5 f8e0 	bl	8000b68 <__aeabi_dcmpgt>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	f040 8296 	bne.w	800beda <_dtoa_r+0x992>
 800b9ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	f7f5 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f040 8288 	bne.w	800bed4 <_dtoa_r+0x98c>
 800b9c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f2c0 8158 	blt.w	800bc84 <_dtoa_r+0x73c>
 800b9d4:	f1ba 0f0e 	cmp.w	sl, #14
 800b9d8:	f300 8154 	bgt.w	800bc84 <_dtoa_r+0x73c>
 800b9dc:	4b6b      	ldr	r3, [pc, #428]	; (800bb8c <_dtoa_r+0x644>)
 800b9de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f280 80e3 	bge.w	800bbb4 <_dtoa_r+0x66c>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f300 80df 	bgt.w	800bbb4 <_dtoa_r+0x66c>
 800b9f6:	f040 826d 	bne.w	800bed4 <_dtoa_r+0x98c>
 800b9fa:	4b69      	ldr	r3, [pc, #420]	; (800bba0 <_dtoa_r+0x658>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4649      	mov	r1, r9
 800ba02:	f7f4 fe21 	bl	8000648 <__aeabi_dmul>
 800ba06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba0a:	f7f5 f8a3 	bl	8000b54 <__aeabi_dcmpge>
 800ba0e:	9e01      	ldr	r6, [sp, #4]
 800ba10:	4637      	mov	r7, r6
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f040 8243 	bne.w	800be9e <_dtoa_r+0x956>
 800ba18:	9d00      	ldr	r5, [sp, #0]
 800ba1a:	2331      	movs	r3, #49	; 0x31
 800ba1c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba20:	f10a 0a01 	add.w	sl, sl, #1
 800ba24:	e23f      	b.n	800bea6 <_dtoa_r+0x95e>
 800ba26:	07f2      	lsls	r2, r6, #31
 800ba28:	d505      	bpl.n	800ba36 <_dtoa_r+0x4ee>
 800ba2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba2e:	f7f4 fe0b 	bl	8000648 <__aeabi_dmul>
 800ba32:	3501      	adds	r5, #1
 800ba34:	2301      	movs	r3, #1
 800ba36:	1076      	asrs	r6, r6, #1
 800ba38:	3708      	adds	r7, #8
 800ba3a:	e76c      	b.n	800b916 <_dtoa_r+0x3ce>
 800ba3c:	2502      	movs	r5, #2
 800ba3e:	e76f      	b.n	800b920 <_dtoa_r+0x3d8>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba46:	930c      	str	r3, [sp, #48]	; 0x30
 800ba48:	e78d      	b.n	800b966 <_dtoa_r+0x41e>
 800ba4a:	9900      	ldr	r1, [sp, #0]
 800ba4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba50:	4b4e      	ldr	r3, [pc, #312]	; (800bb8c <_dtoa_r+0x644>)
 800ba52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba56:	4401      	add	r1, r0
 800ba58:	9102      	str	r1, [sp, #8]
 800ba5a:	9908      	ldr	r1, [sp, #32]
 800ba5c:	eeb0 8a47 	vmov.f32	s16, s14
 800ba60:	eef0 8a67 	vmov.f32	s17, s15
 800ba64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	d045      	beq.n	800bafc <_dtoa_r+0x5b4>
 800ba70:	494c      	ldr	r1, [pc, #304]	; (800bba4 <_dtoa_r+0x65c>)
 800ba72:	2000      	movs	r0, #0
 800ba74:	f7f4 ff12 	bl	800089c <__aeabi_ddiv>
 800ba78:	ec53 2b18 	vmov	r2, r3, d8
 800ba7c:	f7f4 fc2c 	bl	80002d8 <__aeabi_dsub>
 800ba80:	9d00      	ldr	r5, [sp, #0]
 800ba82:	ec41 0b18 	vmov	d8, r0, r1
 800ba86:	4639      	mov	r1, r7
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7f5 f88d 	bl	8000ba8 <__aeabi_d2iz>
 800ba8e:	900c      	str	r0, [sp, #48]	; 0x30
 800ba90:	f7f4 fd70 	bl	8000574 <__aeabi_i2d>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f4 fc1c 	bl	80002d8 <__aeabi_dsub>
 800baa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baa2:	3330      	adds	r3, #48	; 0x30
 800baa4:	f805 3b01 	strb.w	r3, [r5], #1
 800baa8:	ec53 2b18 	vmov	r2, r3, d8
 800baac:	4606      	mov	r6, r0
 800baae:	460f      	mov	r7, r1
 800bab0:	f7f5 f83c 	bl	8000b2c <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d165      	bne.n	800bb84 <_dtoa_r+0x63c>
 800bab8:	4632      	mov	r2, r6
 800baba:	463b      	mov	r3, r7
 800babc:	4935      	ldr	r1, [pc, #212]	; (800bb94 <_dtoa_r+0x64c>)
 800babe:	2000      	movs	r0, #0
 800bac0:	f7f4 fc0a 	bl	80002d8 <__aeabi_dsub>
 800bac4:	ec53 2b18 	vmov	r2, r3, d8
 800bac8:	f7f5 f830 	bl	8000b2c <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 80b9 	bne.w	800bc44 <_dtoa_r+0x6fc>
 800bad2:	9b02      	ldr	r3, [sp, #8]
 800bad4:	429d      	cmp	r5, r3
 800bad6:	f43f af75 	beq.w	800b9c4 <_dtoa_r+0x47c>
 800bada:	4b2f      	ldr	r3, [pc, #188]	; (800bb98 <_dtoa_r+0x650>)
 800badc:	ec51 0b18 	vmov	r0, r1, d8
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7f4 fdb1 	bl	8000648 <__aeabi_dmul>
 800bae6:	4b2c      	ldr	r3, [pc, #176]	; (800bb98 <_dtoa_r+0x650>)
 800bae8:	ec41 0b18 	vmov	d8, r0, r1
 800baec:	2200      	movs	r2, #0
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fda9 	bl	8000648 <__aeabi_dmul>
 800baf6:	4606      	mov	r6, r0
 800baf8:	460f      	mov	r7, r1
 800bafa:	e7c4      	b.n	800ba86 <_dtoa_r+0x53e>
 800bafc:	ec51 0b17 	vmov	r0, r1, d7
 800bb00:	f7f4 fda2 	bl	8000648 <__aeabi_dmul>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	9d00      	ldr	r5, [sp, #0]
 800bb08:	930c      	str	r3, [sp, #48]	; 0x30
 800bb0a:	ec41 0b18 	vmov	d8, r0, r1
 800bb0e:	4639      	mov	r1, r7
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7f5 f849 	bl	8000ba8 <__aeabi_d2iz>
 800bb16:	9011      	str	r0, [sp, #68]	; 0x44
 800bb18:	f7f4 fd2c 	bl	8000574 <__aeabi_i2d>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4630      	mov	r0, r6
 800bb22:	4639      	mov	r1, r7
 800bb24:	f7f4 fbd8 	bl	80002d8 <__aeabi_dsub>
 800bb28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb2a:	3330      	adds	r3, #48	; 0x30
 800bb2c:	f805 3b01 	strb.w	r3, [r5], #1
 800bb30:	9b02      	ldr	r3, [sp, #8]
 800bb32:	429d      	cmp	r5, r3
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	f04f 0200 	mov.w	r2, #0
 800bb3c:	d134      	bne.n	800bba8 <_dtoa_r+0x660>
 800bb3e:	4b19      	ldr	r3, [pc, #100]	; (800bba4 <_dtoa_r+0x65c>)
 800bb40:	ec51 0b18 	vmov	r0, r1, d8
 800bb44:	f7f4 fbca 	bl	80002dc <__adddf3>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f7f5 f80a 	bl	8000b68 <__aeabi_dcmpgt>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d175      	bne.n	800bc44 <_dtoa_r+0x6fc>
 800bb58:	ec53 2b18 	vmov	r2, r3, d8
 800bb5c:	4911      	ldr	r1, [pc, #68]	; (800bba4 <_dtoa_r+0x65c>)
 800bb5e:	2000      	movs	r0, #0
 800bb60:	f7f4 fbba 	bl	80002d8 <__aeabi_dsub>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 ffde 	bl	8000b2c <__aeabi_dcmplt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	f43f af27 	beq.w	800b9c4 <_dtoa_r+0x47c>
 800bb76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb78:	1e6b      	subs	r3, r5, #1
 800bb7a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb80:	2b30      	cmp	r3, #48	; 0x30
 800bb82:	d0f8      	beq.n	800bb76 <_dtoa_r+0x62e>
 800bb84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bb88:	e04a      	b.n	800bc20 <_dtoa_r+0x6d8>
 800bb8a:	bf00      	nop
 800bb8c:	0800fa70 	.word	0x0800fa70
 800bb90:	0800fa48 	.word	0x0800fa48
 800bb94:	3ff00000 	.word	0x3ff00000
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	401c0000 	.word	0x401c0000
 800bba0:	40140000 	.word	0x40140000
 800bba4:	3fe00000 	.word	0x3fe00000
 800bba8:	4baf      	ldr	r3, [pc, #700]	; (800be68 <_dtoa_r+0x920>)
 800bbaa:	f7f4 fd4d 	bl	8000648 <__aeabi_dmul>
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	e7ac      	b.n	800bb0e <_dtoa_r+0x5c6>
 800bbb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbb8:	9d00      	ldr	r5, [sp, #0]
 800bbba:	4642      	mov	r2, r8
 800bbbc:	464b      	mov	r3, r9
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	f7f4 fe6b 	bl	800089c <__aeabi_ddiv>
 800bbc6:	f7f4 ffef 	bl	8000ba8 <__aeabi_d2iz>
 800bbca:	9002      	str	r0, [sp, #8]
 800bbcc:	f7f4 fcd2 	bl	8000574 <__aeabi_i2d>
 800bbd0:	4642      	mov	r2, r8
 800bbd2:	464b      	mov	r3, r9
 800bbd4:	f7f4 fd38 	bl	8000648 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4630      	mov	r0, r6
 800bbde:	4639      	mov	r1, r7
 800bbe0:	f7f4 fb7a 	bl	80002d8 <__aeabi_dsub>
 800bbe4:	9e02      	ldr	r6, [sp, #8]
 800bbe6:	9f01      	ldr	r7, [sp, #4]
 800bbe8:	3630      	adds	r6, #48	; 0x30
 800bbea:	f805 6b01 	strb.w	r6, [r5], #1
 800bbee:	9e00      	ldr	r6, [sp, #0]
 800bbf0:	1bae      	subs	r6, r5, r6
 800bbf2:	42b7      	cmp	r7, r6
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	d137      	bne.n	800bc6a <_dtoa_r+0x722>
 800bbfa:	f7f4 fb6f 	bl	80002dc <__adddf3>
 800bbfe:	4642      	mov	r2, r8
 800bc00:	464b      	mov	r3, r9
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	f7f4 ffaf 	bl	8000b68 <__aeabi_dcmpgt>
 800bc0a:	b9c8      	cbnz	r0, 800bc40 <_dtoa_r+0x6f8>
 800bc0c:	4642      	mov	r2, r8
 800bc0e:	464b      	mov	r3, r9
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 800bc18:	b110      	cbz	r0, 800bc20 <_dtoa_r+0x6d8>
 800bc1a:	9b02      	ldr	r3, [sp, #8]
 800bc1c:	07d9      	lsls	r1, r3, #31
 800bc1e:	d40f      	bmi.n	800bc40 <_dtoa_r+0x6f8>
 800bc20:	4620      	mov	r0, r4
 800bc22:	4659      	mov	r1, fp
 800bc24:	f001 f868 	bl	800ccf8 <_Bfree>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	702b      	strb	r3, [r5, #0]
 800bc2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc2e:	f10a 0001 	add.w	r0, sl, #1
 800bc32:	6018      	str	r0, [r3, #0]
 800bc34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f43f acd8 	beq.w	800b5ec <_dtoa_r+0xa4>
 800bc3c:	601d      	str	r5, [r3, #0]
 800bc3e:	e4d5      	b.n	800b5ec <_dtoa_r+0xa4>
 800bc40:	f8cd a01c 	str.w	sl, [sp, #28]
 800bc44:	462b      	mov	r3, r5
 800bc46:	461d      	mov	r5, r3
 800bc48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc4c:	2a39      	cmp	r2, #57	; 0x39
 800bc4e:	d108      	bne.n	800bc62 <_dtoa_r+0x71a>
 800bc50:	9a00      	ldr	r2, [sp, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d1f7      	bne.n	800bc46 <_dtoa_r+0x6fe>
 800bc56:	9a07      	ldr	r2, [sp, #28]
 800bc58:	9900      	ldr	r1, [sp, #0]
 800bc5a:	3201      	adds	r2, #1
 800bc5c:	9207      	str	r2, [sp, #28]
 800bc5e:	2230      	movs	r2, #48	; 0x30
 800bc60:	700a      	strb	r2, [r1, #0]
 800bc62:	781a      	ldrb	r2, [r3, #0]
 800bc64:	3201      	adds	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	e78c      	b.n	800bb84 <_dtoa_r+0x63c>
 800bc6a:	4b7f      	ldr	r3, [pc, #508]	; (800be68 <_dtoa_r+0x920>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f7f4 fceb 	bl	8000648 <__aeabi_dmul>
 800bc72:	2200      	movs	r2, #0
 800bc74:	2300      	movs	r3, #0
 800bc76:	4606      	mov	r6, r0
 800bc78:	460f      	mov	r7, r1
 800bc7a:	f7f4 ff4d 	bl	8000b18 <__aeabi_dcmpeq>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d09b      	beq.n	800bbba <_dtoa_r+0x672>
 800bc82:	e7cd      	b.n	800bc20 <_dtoa_r+0x6d8>
 800bc84:	9a08      	ldr	r2, [sp, #32]
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	f000 80c4 	beq.w	800be14 <_dtoa_r+0x8cc>
 800bc8c:	9a05      	ldr	r2, [sp, #20]
 800bc8e:	2a01      	cmp	r2, #1
 800bc90:	f300 80a8 	bgt.w	800bde4 <_dtoa_r+0x89c>
 800bc94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	f000 80a0 	beq.w	800bddc <_dtoa_r+0x894>
 800bc9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bca0:	9e06      	ldr	r6, [sp, #24]
 800bca2:	4645      	mov	r5, r8
 800bca4:	9a04      	ldr	r2, [sp, #16]
 800bca6:	2101      	movs	r1, #1
 800bca8:	441a      	add	r2, r3
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4498      	add	r8, r3
 800bcae:	9204      	str	r2, [sp, #16]
 800bcb0:	f001 f928 	bl	800cf04 <__i2b>
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	2d00      	cmp	r5, #0
 800bcb8:	dd0b      	ble.n	800bcd2 <_dtoa_r+0x78a>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dd08      	ble.n	800bcd2 <_dtoa_r+0x78a>
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	9a04      	ldr	r2, [sp, #16]
 800bcc4:	bfa8      	it	ge
 800bcc6:	462b      	movge	r3, r5
 800bcc8:	eba8 0803 	sub.w	r8, r8, r3
 800bccc:	1aed      	subs	r5, r5, r3
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9b06      	ldr	r3, [sp, #24]
 800bcd4:	b1fb      	cbz	r3, 800bd16 <_dtoa_r+0x7ce>
 800bcd6:	9b08      	ldr	r3, [sp, #32]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 809f 	beq.w	800be1c <_dtoa_r+0x8d4>
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	dd11      	ble.n	800bd06 <_dtoa_r+0x7be>
 800bce2:	4639      	mov	r1, r7
 800bce4:	4632      	mov	r2, r6
 800bce6:	4620      	mov	r0, r4
 800bce8:	f001 f9c8 	bl	800d07c <__pow5mult>
 800bcec:	465a      	mov	r2, fp
 800bcee:	4601      	mov	r1, r0
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f001 f91c 	bl	800cf30 <__multiply>
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	9007      	str	r0, [sp, #28]
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 fffb 	bl	800ccf8 <_Bfree>
 800bd02:	9b07      	ldr	r3, [sp, #28]
 800bd04:	469b      	mov	fp, r3
 800bd06:	9b06      	ldr	r3, [sp, #24]
 800bd08:	1b9a      	subs	r2, r3, r6
 800bd0a:	d004      	beq.n	800bd16 <_dtoa_r+0x7ce>
 800bd0c:	4659      	mov	r1, fp
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f001 f9b4 	bl	800d07c <__pow5mult>
 800bd14:	4683      	mov	fp, r0
 800bd16:	2101      	movs	r1, #1
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f001 f8f3 	bl	800cf04 <__i2b>
 800bd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	4606      	mov	r6, r0
 800bd24:	dd7c      	ble.n	800be20 <_dtoa_r+0x8d8>
 800bd26:	461a      	mov	r2, r3
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f001 f9a6 	bl	800d07c <__pow5mult>
 800bd30:	9b05      	ldr	r3, [sp, #20]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	4606      	mov	r6, r0
 800bd36:	dd76      	ble.n	800be26 <_dtoa_r+0x8de>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	9306      	str	r3, [sp, #24]
 800bd3c:	6933      	ldr	r3, [r6, #16]
 800bd3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd42:	6918      	ldr	r0, [r3, #16]
 800bd44:	f001 f88e 	bl	800ce64 <__hi0bits>
 800bd48:	f1c0 0020 	rsb	r0, r0, #32
 800bd4c:	9b04      	ldr	r3, [sp, #16]
 800bd4e:	4418      	add	r0, r3
 800bd50:	f010 001f 	ands.w	r0, r0, #31
 800bd54:	f000 8086 	beq.w	800be64 <_dtoa_r+0x91c>
 800bd58:	f1c0 0320 	rsb	r3, r0, #32
 800bd5c:	2b04      	cmp	r3, #4
 800bd5e:	dd7f      	ble.n	800be60 <_dtoa_r+0x918>
 800bd60:	f1c0 001c 	rsb	r0, r0, #28
 800bd64:	9b04      	ldr	r3, [sp, #16]
 800bd66:	4403      	add	r3, r0
 800bd68:	4480      	add	r8, r0
 800bd6a:	4405      	add	r5, r0
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	f1b8 0f00 	cmp.w	r8, #0
 800bd72:	dd05      	ble.n	800bd80 <_dtoa_r+0x838>
 800bd74:	4659      	mov	r1, fp
 800bd76:	4642      	mov	r2, r8
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f001 f9d9 	bl	800d130 <__lshift>
 800bd7e:	4683      	mov	fp, r0
 800bd80:	9b04      	ldr	r3, [sp, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd05      	ble.n	800bd92 <_dtoa_r+0x84a>
 800bd86:	4631      	mov	r1, r6
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f001 f9d0 	bl	800d130 <__lshift>
 800bd90:	4606      	mov	r6, r0
 800bd92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d069      	beq.n	800be6c <_dtoa_r+0x924>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f001 fa34 	bl	800d208 <__mcmp>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	da63      	bge.n	800be6c <_dtoa_r+0x924>
 800bda4:	2300      	movs	r3, #0
 800bda6:	4659      	mov	r1, fp
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 ffc6 	bl	800cd3c <__multadd>
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdb6:	4683      	mov	fp, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 818f 	beq.w	800c0dc <_dtoa_r+0xb94>
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 ffb9 	bl	800cd3c <__multadd>
 800bdca:	f1b9 0f00 	cmp.w	r9, #0
 800bdce:	4607      	mov	r7, r0
 800bdd0:	f300 808e 	bgt.w	800bef0 <_dtoa_r+0x9a8>
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	dc50      	bgt.n	800be7c <_dtoa_r+0x934>
 800bdda:	e089      	b.n	800bef0 <_dtoa_r+0x9a8>
 800bddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bde2:	e75d      	b.n	800bca0 <_dtoa_r+0x758>
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	1e5e      	subs	r6, r3, #1
 800bde8:	9b06      	ldr	r3, [sp, #24]
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	bfbf      	itttt	lt
 800bdee:	9b06      	ldrlt	r3, [sp, #24]
 800bdf0:	9606      	strlt	r6, [sp, #24]
 800bdf2:	1af2      	sublt	r2, r6, r3
 800bdf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bdf6:	bfb6      	itet	lt
 800bdf8:	189b      	addlt	r3, r3, r2
 800bdfa:	1b9e      	subge	r6, r3, r6
 800bdfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	bfb8      	it	lt
 800be02:	2600      	movlt	r6, #0
 800be04:	2b00      	cmp	r3, #0
 800be06:	bfb5      	itete	lt
 800be08:	eba8 0503 	sublt.w	r5, r8, r3
 800be0c:	9b01      	ldrge	r3, [sp, #4]
 800be0e:	2300      	movlt	r3, #0
 800be10:	4645      	movge	r5, r8
 800be12:	e747      	b.n	800bca4 <_dtoa_r+0x75c>
 800be14:	9e06      	ldr	r6, [sp, #24]
 800be16:	9f08      	ldr	r7, [sp, #32]
 800be18:	4645      	mov	r5, r8
 800be1a:	e74c      	b.n	800bcb6 <_dtoa_r+0x76e>
 800be1c:	9a06      	ldr	r2, [sp, #24]
 800be1e:	e775      	b.n	800bd0c <_dtoa_r+0x7c4>
 800be20:	9b05      	ldr	r3, [sp, #20]
 800be22:	2b01      	cmp	r3, #1
 800be24:	dc18      	bgt.n	800be58 <_dtoa_r+0x910>
 800be26:	9b02      	ldr	r3, [sp, #8]
 800be28:	b9b3      	cbnz	r3, 800be58 <_dtoa_r+0x910>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be30:	b9a3      	cbnz	r3, 800be5c <_dtoa_r+0x914>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be38:	0d1b      	lsrs	r3, r3, #20
 800be3a:	051b      	lsls	r3, r3, #20
 800be3c:	b12b      	cbz	r3, 800be4a <_dtoa_r+0x902>
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	3301      	adds	r3, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f108 0801 	add.w	r8, r8, #1
 800be48:	2301      	movs	r3, #1
 800be4a:	9306      	str	r3, [sp, #24]
 800be4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f47f af74 	bne.w	800bd3c <_dtoa_r+0x7f4>
 800be54:	2001      	movs	r0, #1
 800be56:	e779      	b.n	800bd4c <_dtoa_r+0x804>
 800be58:	2300      	movs	r3, #0
 800be5a:	e7f6      	b.n	800be4a <_dtoa_r+0x902>
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	e7f4      	b.n	800be4a <_dtoa_r+0x902>
 800be60:	d085      	beq.n	800bd6e <_dtoa_r+0x826>
 800be62:	4618      	mov	r0, r3
 800be64:	301c      	adds	r0, #28
 800be66:	e77d      	b.n	800bd64 <_dtoa_r+0x81c>
 800be68:	40240000 	.word	0x40240000
 800be6c:	9b01      	ldr	r3, [sp, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc38      	bgt.n	800bee4 <_dtoa_r+0x99c>
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	2b02      	cmp	r3, #2
 800be76:	dd35      	ble.n	800bee4 <_dtoa_r+0x99c>
 800be78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800be7c:	f1b9 0f00 	cmp.w	r9, #0
 800be80:	d10d      	bne.n	800be9e <_dtoa_r+0x956>
 800be82:	4631      	mov	r1, r6
 800be84:	464b      	mov	r3, r9
 800be86:	2205      	movs	r2, #5
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 ff57 	bl	800cd3c <__multadd>
 800be8e:	4601      	mov	r1, r0
 800be90:	4606      	mov	r6, r0
 800be92:	4658      	mov	r0, fp
 800be94:	f001 f9b8 	bl	800d208 <__mcmp>
 800be98:	2800      	cmp	r0, #0
 800be9a:	f73f adbd 	bgt.w	800ba18 <_dtoa_r+0x4d0>
 800be9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea0:	9d00      	ldr	r5, [sp, #0]
 800bea2:	ea6f 0a03 	mvn.w	sl, r3
 800bea6:	f04f 0800 	mov.w	r8, #0
 800beaa:	4631      	mov	r1, r6
 800beac:	4620      	mov	r0, r4
 800beae:	f000 ff23 	bl	800ccf8 <_Bfree>
 800beb2:	2f00      	cmp	r7, #0
 800beb4:	f43f aeb4 	beq.w	800bc20 <_dtoa_r+0x6d8>
 800beb8:	f1b8 0f00 	cmp.w	r8, #0
 800bebc:	d005      	beq.n	800beca <_dtoa_r+0x982>
 800bebe:	45b8      	cmp	r8, r7
 800bec0:	d003      	beq.n	800beca <_dtoa_r+0x982>
 800bec2:	4641      	mov	r1, r8
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 ff17 	bl	800ccf8 <_Bfree>
 800beca:	4639      	mov	r1, r7
 800becc:	4620      	mov	r0, r4
 800bece:	f000 ff13 	bl	800ccf8 <_Bfree>
 800bed2:	e6a5      	b.n	800bc20 <_dtoa_r+0x6d8>
 800bed4:	2600      	movs	r6, #0
 800bed6:	4637      	mov	r7, r6
 800bed8:	e7e1      	b.n	800be9e <_dtoa_r+0x956>
 800beda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bedc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bee0:	4637      	mov	r7, r6
 800bee2:	e599      	b.n	800ba18 <_dtoa_r+0x4d0>
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 80fd 	beq.w	800c0ea <_dtoa_r+0xba2>
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	dd05      	ble.n	800bf00 <_dtoa_r+0x9b8>
 800bef4:	4639      	mov	r1, r7
 800bef6:	462a      	mov	r2, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	f001 f919 	bl	800d130 <__lshift>
 800befe:	4607      	mov	r7, r0
 800bf00:	9b06      	ldr	r3, [sp, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d05c      	beq.n	800bfc0 <_dtoa_r+0xa78>
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 feb5 	bl	800cc78 <_Balloc>
 800bf0e:	4605      	mov	r5, r0
 800bf10:	b928      	cbnz	r0, 800bf1e <_dtoa_r+0x9d6>
 800bf12:	4b80      	ldr	r3, [pc, #512]	; (800c114 <_dtoa_r+0xbcc>)
 800bf14:	4602      	mov	r2, r0
 800bf16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf1a:	f7ff bb2e 	b.w	800b57a <_dtoa_r+0x32>
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	3202      	adds	r2, #2
 800bf22:	0092      	lsls	r2, r2, #2
 800bf24:	f107 010c 	add.w	r1, r7, #12
 800bf28:	300c      	adds	r0, #12
 800bf2a:	f7fd fdd9 	bl	8009ae0 <memcpy>
 800bf2e:	2201      	movs	r2, #1
 800bf30:	4629      	mov	r1, r5
 800bf32:	4620      	mov	r0, r4
 800bf34:	f001 f8fc 	bl	800d130 <__lshift>
 800bf38:	9b00      	ldr	r3, [sp, #0]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	444b      	add	r3, r9
 800bf42:	9307      	str	r3, [sp, #28]
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	46b8      	mov	r8, r7
 800bf4c:	9306      	str	r3, [sp, #24]
 800bf4e:	4607      	mov	r7, r0
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	4631      	mov	r1, r6
 800bf54:	3b01      	subs	r3, #1
 800bf56:	4658      	mov	r0, fp
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	f7ff fa69 	bl	800b430 <quorem>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	3330      	adds	r3, #48	; 0x30
 800bf62:	9004      	str	r0, [sp, #16]
 800bf64:	4641      	mov	r1, r8
 800bf66:	4658      	mov	r0, fp
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	f001 f94d 	bl	800d208 <__mcmp>
 800bf6e:	463a      	mov	r2, r7
 800bf70:	4681      	mov	r9, r0
 800bf72:	4631      	mov	r1, r6
 800bf74:	4620      	mov	r0, r4
 800bf76:	f001 f963 	bl	800d240 <__mdiff>
 800bf7a:	68c2      	ldr	r2, [r0, #12]
 800bf7c:	9b08      	ldr	r3, [sp, #32]
 800bf7e:	4605      	mov	r5, r0
 800bf80:	bb02      	cbnz	r2, 800bfc4 <_dtoa_r+0xa7c>
 800bf82:	4601      	mov	r1, r0
 800bf84:	4658      	mov	r0, fp
 800bf86:	f001 f93f 	bl	800d208 <__mcmp>
 800bf8a:	9b08      	ldr	r3, [sp, #32]
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4620      	mov	r0, r4
 800bf92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bf96:	f000 feaf 	bl	800ccf8 <_Bfree>
 800bf9a:	9b05      	ldr	r3, [sp, #20]
 800bf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf9e:	9d01      	ldr	r5, [sp, #4]
 800bfa0:	ea43 0102 	orr.w	r1, r3, r2
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	430b      	orrs	r3, r1
 800bfa8:	9b08      	ldr	r3, [sp, #32]
 800bfaa:	d10d      	bne.n	800bfc8 <_dtoa_r+0xa80>
 800bfac:	2b39      	cmp	r3, #57	; 0x39
 800bfae:	d029      	beq.n	800c004 <_dtoa_r+0xabc>
 800bfb0:	f1b9 0f00 	cmp.w	r9, #0
 800bfb4:	dd01      	ble.n	800bfba <_dtoa_r+0xa72>
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	3331      	adds	r3, #49	; 0x31
 800bfba:	9a02      	ldr	r2, [sp, #8]
 800bfbc:	7013      	strb	r3, [r2, #0]
 800bfbe:	e774      	b.n	800beaa <_dtoa_r+0x962>
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	e7b9      	b.n	800bf38 <_dtoa_r+0x9f0>
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	e7e2      	b.n	800bf8e <_dtoa_r+0xa46>
 800bfc8:	f1b9 0f00 	cmp.w	r9, #0
 800bfcc:	db06      	blt.n	800bfdc <_dtoa_r+0xa94>
 800bfce:	9905      	ldr	r1, [sp, #20]
 800bfd0:	ea41 0909 	orr.w	r9, r1, r9
 800bfd4:	9906      	ldr	r1, [sp, #24]
 800bfd6:	ea59 0101 	orrs.w	r1, r9, r1
 800bfda:	d120      	bne.n	800c01e <_dtoa_r+0xad6>
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	ddec      	ble.n	800bfba <_dtoa_r+0xa72>
 800bfe0:	4659      	mov	r1, fp
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	f001 f8a2 	bl	800d130 <__lshift>
 800bfec:	4631      	mov	r1, r6
 800bfee:	4683      	mov	fp, r0
 800bff0:	f001 f90a 	bl	800d208 <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	9b01      	ldr	r3, [sp, #4]
 800bff8:	dc02      	bgt.n	800c000 <_dtoa_r+0xab8>
 800bffa:	d1de      	bne.n	800bfba <_dtoa_r+0xa72>
 800bffc:	07da      	lsls	r2, r3, #31
 800bffe:	d5dc      	bpl.n	800bfba <_dtoa_r+0xa72>
 800c000:	2b39      	cmp	r3, #57	; 0x39
 800c002:	d1d8      	bne.n	800bfb6 <_dtoa_r+0xa6e>
 800c004:	9a02      	ldr	r2, [sp, #8]
 800c006:	2339      	movs	r3, #57	; 0x39
 800c008:	7013      	strb	r3, [r2, #0]
 800c00a:	462b      	mov	r3, r5
 800c00c:	461d      	mov	r5, r3
 800c00e:	3b01      	subs	r3, #1
 800c010:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c014:	2a39      	cmp	r2, #57	; 0x39
 800c016:	d050      	beq.n	800c0ba <_dtoa_r+0xb72>
 800c018:	3201      	adds	r2, #1
 800c01a:	701a      	strb	r2, [r3, #0]
 800c01c:	e745      	b.n	800beaa <_dtoa_r+0x962>
 800c01e:	2a00      	cmp	r2, #0
 800c020:	dd03      	ble.n	800c02a <_dtoa_r+0xae2>
 800c022:	2b39      	cmp	r3, #57	; 0x39
 800c024:	d0ee      	beq.n	800c004 <_dtoa_r+0xabc>
 800c026:	3301      	adds	r3, #1
 800c028:	e7c7      	b.n	800bfba <_dtoa_r+0xa72>
 800c02a:	9a01      	ldr	r2, [sp, #4]
 800c02c:	9907      	ldr	r1, [sp, #28]
 800c02e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c032:	428a      	cmp	r2, r1
 800c034:	d02a      	beq.n	800c08c <_dtoa_r+0xb44>
 800c036:	4659      	mov	r1, fp
 800c038:	2300      	movs	r3, #0
 800c03a:	220a      	movs	r2, #10
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 fe7d 	bl	800cd3c <__multadd>
 800c042:	45b8      	cmp	r8, r7
 800c044:	4683      	mov	fp, r0
 800c046:	f04f 0300 	mov.w	r3, #0
 800c04a:	f04f 020a 	mov.w	r2, #10
 800c04e:	4641      	mov	r1, r8
 800c050:	4620      	mov	r0, r4
 800c052:	d107      	bne.n	800c064 <_dtoa_r+0xb1c>
 800c054:	f000 fe72 	bl	800cd3c <__multadd>
 800c058:	4680      	mov	r8, r0
 800c05a:	4607      	mov	r7, r0
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	3301      	adds	r3, #1
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	e775      	b.n	800bf50 <_dtoa_r+0xa08>
 800c064:	f000 fe6a 	bl	800cd3c <__multadd>
 800c068:	4639      	mov	r1, r7
 800c06a:	4680      	mov	r8, r0
 800c06c:	2300      	movs	r3, #0
 800c06e:	220a      	movs	r2, #10
 800c070:	4620      	mov	r0, r4
 800c072:	f000 fe63 	bl	800cd3c <__multadd>
 800c076:	4607      	mov	r7, r0
 800c078:	e7f0      	b.n	800c05c <_dtoa_r+0xb14>
 800c07a:	f1b9 0f00 	cmp.w	r9, #0
 800c07e:	9a00      	ldr	r2, [sp, #0]
 800c080:	bfcc      	ite	gt
 800c082:	464d      	movgt	r5, r9
 800c084:	2501      	movle	r5, #1
 800c086:	4415      	add	r5, r2
 800c088:	f04f 0800 	mov.w	r8, #0
 800c08c:	4659      	mov	r1, fp
 800c08e:	2201      	movs	r2, #1
 800c090:	4620      	mov	r0, r4
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	f001 f84c 	bl	800d130 <__lshift>
 800c098:	4631      	mov	r1, r6
 800c09a:	4683      	mov	fp, r0
 800c09c:	f001 f8b4 	bl	800d208 <__mcmp>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	dcb2      	bgt.n	800c00a <_dtoa_r+0xac2>
 800c0a4:	d102      	bne.n	800c0ac <_dtoa_r+0xb64>
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	07db      	lsls	r3, r3, #31
 800c0aa:	d4ae      	bmi.n	800c00a <_dtoa_r+0xac2>
 800c0ac:	462b      	mov	r3, r5
 800c0ae:	461d      	mov	r5, r3
 800c0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0b4:	2a30      	cmp	r2, #48	; 0x30
 800c0b6:	d0fa      	beq.n	800c0ae <_dtoa_r+0xb66>
 800c0b8:	e6f7      	b.n	800beaa <_dtoa_r+0x962>
 800c0ba:	9a00      	ldr	r2, [sp, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d1a5      	bne.n	800c00c <_dtoa_r+0xac4>
 800c0c0:	f10a 0a01 	add.w	sl, sl, #1
 800c0c4:	2331      	movs	r3, #49	; 0x31
 800c0c6:	e779      	b.n	800bfbc <_dtoa_r+0xa74>
 800c0c8:	4b13      	ldr	r3, [pc, #76]	; (800c118 <_dtoa_r+0xbd0>)
 800c0ca:	f7ff baaf 	b.w	800b62c <_dtoa_r+0xe4>
 800c0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f47f aa86 	bne.w	800b5e2 <_dtoa_r+0x9a>
 800c0d6:	4b11      	ldr	r3, [pc, #68]	; (800c11c <_dtoa_r+0xbd4>)
 800c0d8:	f7ff baa8 	b.w	800b62c <_dtoa_r+0xe4>
 800c0dc:	f1b9 0f00 	cmp.w	r9, #0
 800c0e0:	dc03      	bgt.n	800c0ea <_dtoa_r+0xba2>
 800c0e2:	9b05      	ldr	r3, [sp, #20]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	f73f aec9 	bgt.w	800be7c <_dtoa_r+0x934>
 800c0ea:	9d00      	ldr	r5, [sp, #0]
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	4658      	mov	r0, fp
 800c0f0:	f7ff f99e 	bl	800b430 <quorem>
 800c0f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c0f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c0fc:	9a00      	ldr	r2, [sp, #0]
 800c0fe:	1aaa      	subs	r2, r5, r2
 800c100:	4591      	cmp	r9, r2
 800c102:	ddba      	ble.n	800c07a <_dtoa_r+0xb32>
 800c104:	4659      	mov	r1, fp
 800c106:	2300      	movs	r3, #0
 800c108:	220a      	movs	r2, #10
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fe16 	bl	800cd3c <__multadd>
 800c110:	4683      	mov	fp, r0
 800c112:	e7eb      	b.n	800c0ec <_dtoa_r+0xba4>
 800c114:	0800f8f4 	.word	0x0800f8f4
 800c118:	0800f6fc 	.word	0x0800f6fc
 800c11c:	0800f871 	.word	0x0800f871

0800c120 <__sflush_r>:
 800c120:	898a      	ldrh	r2, [r1, #12]
 800c122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	4605      	mov	r5, r0
 800c128:	0710      	lsls	r0, r2, #28
 800c12a:	460c      	mov	r4, r1
 800c12c:	d458      	bmi.n	800c1e0 <__sflush_r+0xc0>
 800c12e:	684b      	ldr	r3, [r1, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	dc05      	bgt.n	800c140 <__sflush_r+0x20>
 800c134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c136:	2b00      	cmp	r3, #0
 800c138:	dc02      	bgt.n	800c140 <__sflush_r+0x20>
 800c13a:	2000      	movs	r0, #0
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c142:	2e00      	cmp	r6, #0
 800c144:	d0f9      	beq.n	800c13a <__sflush_r+0x1a>
 800c146:	2300      	movs	r3, #0
 800c148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c14c:	682f      	ldr	r7, [r5, #0]
 800c14e:	602b      	str	r3, [r5, #0]
 800c150:	d032      	beq.n	800c1b8 <__sflush_r+0x98>
 800c152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	075a      	lsls	r2, r3, #29
 800c158:	d505      	bpl.n	800c166 <__sflush_r+0x46>
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	1ac0      	subs	r0, r0, r3
 800c15e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c160:	b10b      	cbz	r3, 800c166 <__sflush_r+0x46>
 800c162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c164:	1ac0      	subs	r0, r0, r3
 800c166:	2300      	movs	r3, #0
 800c168:	4602      	mov	r2, r0
 800c16a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c16c:	6a21      	ldr	r1, [r4, #32]
 800c16e:	4628      	mov	r0, r5
 800c170:	47b0      	blx	r6
 800c172:	1c43      	adds	r3, r0, #1
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	d106      	bne.n	800c186 <__sflush_r+0x66>
 800c178:	6829      	ldr	r1, [r5, #0]
 800c17a:	291d      	cmp	r1, #29
 800c17c:	d82c      	bhi.n	800c1d8 <__sflush_r+0xb8>
 800c17e:	4a2a      	ldr	r2, [pc, #168]	; (800c228 <__sflush_r+0x108>)
 800c180:	40ca      	lsrs	r2, r1
 800c182:	07d6      	lsls	r6, r2, #31
 800c184:	d528      	bpl.n	800c1d8 <__sflush_r+0xb8>
 800c186:	2200      	movs	r2, #0
 800c188:	6062      	str	r2, [r4, #4]
 800c18a:	04d9      	lsls	r1, r3, #19
 800c18c:	6922      	ldr	r2, [r4, #16]
 800c18e:	6022      	str	r2, [r4, #0]
 800c190:	d504      	bpl.n	800c19c <__sflush_r+0x7c>
 800c192:	1c42      	adds	r2, r0, #1
 800c194:	d101      	bne.n	800c19a <__sflush_r+0x7a>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	b903      	cbnz	r3, 800c19c <__sflush_r+0x7c>
 800c19a:	6560      	str	r0, [r4, #84]	; 0x54
 800c19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c19e:	602f      	str	r7, [r5, #0]
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	d0ca      	beq.n	800c13a <__sflush_r+0x1a>
 800c1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d002      	beq.n	800c1b2 <__sflush_r+0x92>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f001 fa2d 	bl	800d60c <_free_r>
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c1b6:	e7c1      	b.n	800c13c <__sflush_r+0x1c>
 800c1b8:	6a21      	ldr	r1, [r4, #32]
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4628      	mov	r0, r5
 800c1be:	47b0      	blx	r6
 800c1c0:	1c41      	adds	r1, r0, #1
 800c1c2:	d1c7      	bne.n	800c154 <__sflush_r+0x34>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0c4      	beq.n	800c154 <__sflush_r+0x34>
 800c1ca:	2b1d      	cmp	r3, #29
 800c1cc:	d001      	beq.n	800c1d2 <__sflush_r+0xb2>
 800c1ce:	2b16      	cmp	r3, #22
 800c1d0:	d101      	bne.n	800c1d6 <__sflush_r+0xb6>
 800c1d2:	602f      	str	r7, [r5, #0]
 800c1d4:	e7b1      	b.n	800c13a <__sflush_r+0x1a>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	e7ad      	b.n	800c13c <__sflush_r+0x1c>
 800c1e0:	690f      	ldr	r7, [r1, #16]
 800c1e2:	2f00      	cmp	r7, #0
 800c1e4:	d0a9      	beq.n	800c13a <__sflush_r+0x1a>
 800c1e6:	0793      	lsls	r3, r2, #30
 800c1e8:	680e      	ldr	r6, [r1, #0]
 800c1ea:	bf08      	it	eq
 800c1ec:	694b      	ldreq	r3, [r1, #20]
 800c1ee:	600f      	str	r7, [r1, #0]
 800c1f0:	bf18      	it	ne
 800c1f2:	2300      	movne	r3, #0
 800c1f4:	eba6 0807 	sub.w	r8, r6, r7
 800c1f8:	608b      	str	r3, [r1, #8]
 800c1fa:	f1b8 0f00 	cmp.w	r8, #0
 800c1fe:	dd9c      	ble.n	800c13a <__sflush_r+0x1a>
 800c200:	6a21      	ldr	r1, [r4, #32]
 800c202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c204:	4643      	mov	r3, r8
 800c206:	463a      	mov	r2, r7
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	2800      	cmp	r0, #0
 800c20e:	dc06      	bgt.n	800c21e <__sflush_r+0xfe>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c216:	81a3      	strh	r3, [r4, #12]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	e78e      	b.n	800c13c <__sflush_r+0x1c>
 800c21e:	4407      	add	r7, r0
 800c220:	eba8 0800 	sub.w	r8, r8, r0
 800c224:	e7e9      	b.n	800c1fa <__sflush_r+0xda>
 800c226:	bf00      	nop
 800c228:	20400001 	.word	0x20400001

0800c22c <_fflush_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	690b      	ldr	r3, [r1, #16]
 800c230:	4605      	mov	r5, r0
 800c232:	460c      	mov	r4, r1
 800c234:	b913      	cbnz	r3, 800c23c <_fflush_r+0x10>
 800c236:	2500      	movs	r5, #0
 800c238:	4628      	mov	r0, r5
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	b118      	cbz	r0, 800c246 <_fflush_r+0x1a>
 800c23e:	6983      	ldr	r3, [r0, #24]
 800c240:	b90b      	cbnz	r3, 800c246 <_fflush_r+0x1a>
 800c242:	f000 f887 	bl	800c354 <__sinit>
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <_fflush_r+0x6c>)
 800c248:	429c      	cmp	r4, r3
 800c24a:	d11b      	bne.n	800c284 <_fflush_r+0x58>
 800c24c:	686c      	ldr	r4, [r5, #4]
 800c24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d0ef      	beq.n	800c236 <_fflush_r+0xa>
 800c256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c258:	07d0      	lsls	r0, r2, #31
 800c25a:	d404      	bmi.n	800c266 <_fflush_r+0x3a>
 800c25c:	0599      	lsls	r1, r3, #22
 800c25e:	d402      	bmi.n	800c266 <_fflush_r+0x3a>
 800c260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c262:	f000 fc88 	bl	800cb76 <__retarget_lock_acquire_recursive>
 800c266:	4628      	mov	r0, r5
 800c268:	4621      	mov	r1, r4
 800c26a:	f7ff ff59 	bl	800c120 <__sflush_r>
 800c26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c270:	07da      	lsls	r2, r3, #31
 800c272:	4605      	mov	r5, r0
 800c274:	d4e0      	bmi.n	800c238 <_fflush_r+0xc>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	059b      	lsls	r3, r3, #22
 800c27a:	d4dd      	bmi.n	800c238 <_fflush_r+0xc>
 800c27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c27e:	f000 fc7b 	bl	800cb78 <__retarget_lock_release_recursive>
 800c282:	e7d9      	b.n	800c238 <_fflush_r+0xc>
 800c284:	4b05      	ldr	r3, [pc, #20]	; (800c29c <_fflush_r+0x70>)
 800c286:	429c      	cmp	r4, r3
 800c288:	d101      	bne.n	800c28e <_fflush_r+0x62>
 800c28a:	68ac      	ldr	r4, [r5, #8]
 800c28c:	e7df      	b.n	800c24e <_fflush_r+0x22>
 800c28e:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <_fflush_r+0x74>)
 800c290:	429c      	cmp	r4, r3
 800c292:	bf08      	it	eq
 800c294:	68ec      	ldreq	r4, [r5, #12]
 800c296:	e7da      	b.n	800c24e <_fflush_r+0x22>
 800c298:	0800f928 	.word	0x0800f928
 800c29c:	0800f948 	.word	0x0800f948
 800c2a0:	0800f908 	.word	0x0800f908

0800c2a4 <std>:
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800c2ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2b2:	6083      	str	r3, [r0, #8]
 800c2b4:	8181      	strh	r1, [r0, #12]
 800c2b6:	6643      	str	r3, [r0, #100]	; 0x64
 800c2b8:	81c2      	strh	r2, [r0, #14]
 800c2ba:	6183      	str	r3, [r0, #24]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	2208      	movs	r2, #8
 800c2c0:	305c      	adds	r0, #92	; 0x5c
 800c2c2:	f7fd fc35 	bl	8009b30 <memset>
 800c2c6:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <std+0x38>)
 800c2c8:	6263      	str	r3, [r4, #36]	; 0x24
 800c2ca:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <std+0x3c>)
 800c2cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2ce:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <std+0x40>)
 800c2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2d2:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <std+0x44>)
 800c2d4:	6224      	str	r4, [r4, #32]
 800c2d6:	6323      	str	r3, [r4, #48]	; 0x30
 800c2d8:	bd10      	pop	{r4, pc}
 800c2da:	bf00      	nop
 800c2dc:	0800da49 	.word	0x0800da49
 800c2e0:	0800da6b 	.word	0x0800da6b
 800c2e4:	0800daa3 	.word	0x0800daa3
 800c2e8:	0800dac7 	.word	0x0800dac7

0800c2ec <_cleanup_r>:
 800c2ec:	4901      	ldr	r1, [pc, #4]	; (800c2f4 <_cleanup_r+0x8>)
 800c2ee:	f000 b8af 	b.w	800c450 <_fwalk_reent>
 800c2f2:	bf00      	nop
 800c2f4:	0800c22d 	.word	0x0800c22d

0800c2f8 <__sfmoreglue>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	1e4a      	subs	r2, r1, #1
 800c2fc:	2568      	movs	r5, #104	; 0x68
 800c2fe:	4355      	muls	r5, r2
 800c300:	460e      	mov	r6, r1
 800c302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c306:	f001 f9d1 	bl	800d6ac <_malloc_r>
 800c30a:	4604      	mov	r4, r0
 800c30c:	b140      	cbz	r0, 800c320 <__sfmoreglue+0x28>
 800c30e:	2100      	movs	r1, #0
 800c310:	e9c0 1600 	strd	r1, r6, [r0]
 800c314:	300c      	adds	r0, #12
 800c316:	60a0      	str	r0, [r4, #8]
 800c318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c31c:	f7fd fc08 	bl	8009b30 <memset>
 800c320:	4620      	mov	r0, r4
 800c322:	bd70      	pop	{r4, r5, r6, pc}

0800c324 <__sfp_lock_acquire>:
 800c324:	4801      	ldr	r0, [pc, #4]	; (800c32c <__sfp_lock_acquire+0x8>)
 800c326:	f000 bc26 	b.w	800cb76 <__retarget_lock_acquire_recursive>
 800c32a:	bf00      	nop
 800c32c:	2000c488 	.word	0x2000c488

0800c330 <__sfp_lock_release>:
 800c330:	4801      	ldr	r0, [pc, #4]	; (800c338 <__sfp_lock_release+0x8>)
 800c332:	f000 bc21 	b.w	800cb78 <__retarget_lock_release_recursive>
 800c336:	bf00      	nop
 800c338:	2000c488 	.word	0x2000c488

0800c33c <__sinit_lock_acquire>:
 800c33c:	4801      	ldr	r0, [pc, #4]	; (800c344 <__sinit_lock_acquire+0x8>)
 800c33e:	f000 bc1a 	b.w	800cb76 <__retarget_lock_acquire_recursive>
 800c342:	bf00      	nop
 800c344:	2000c483 	.word	0x2000c483

0800c348 <__sinit_lock_release>:
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__sinit_lock_release+0x8>)
 800c34a:	f000 bc15 	b.w	800cb78 <__retarget_lock_release_recursive>
 800c34e:	bf00      	nop
 800c350:	2000c483 	.word	0x2000c483

0800c354 <__sinit>:
 800c354:	b510      	push	{r4, lr}
 800c356:	4604      	mov	r4, r0
 800c358:	f7ff fff0 	bl	800c33c <__sinit_lock_acquire>
 800c35c:	69a3      	ldr	r3, [r4, #24]
 800c35e:	b11b      	cbz	r3, 800c368 <__sinit+0x14>
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c364:	f7ff bff0 	b.w	800c348 <__sinit_lock_release>
 800c368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c36c:	6523      	str	r3, [r4, #80]	; 0x50
 800c36e:	4b13      	ldr	r3, [pc, #76]	; (800c3bc <__sinit+0x68>)
 800c370:	4a13      	ldr	r2, [pc, #76]	; (800c3c0 <__sinit+0x6c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	62a2      	str	r2, [r4, #40]	; 0x28
 800c376:	42a3      	cmp	r3, r4
 800c378:	bf04      	itt	eq
 800c37a:	2301      	moveq	r3, #1
 800c37c:	61a3      	streq	r3, [r4, #24]
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f820 	bl	800c3c4 <__sfp>
 800c384:	6060      	str	r0, [r4, #4]
 800c386:	4620      	mov	r0, r4
 800c388:	f000 f81c 	bl	800c3c4 <__sfp>
 800c38c:	60a0      	str	r0, [r4, #8]
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 f818 	bl	800c3c4 <__sfp>
 800c394:	2200      	movs	r2, #0
 800c396:	60e0      	str	r0, [r4, #12]
 800c398:	2104      	movs	r1, #4
 800c39a:	6860      	ldr	r0, [r4, #4]
 800c39c:	f7ff ff82 	bl	800c2a4 <std>
 800c3a0:	68a0      	ldr	r0, [r4, #8]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	2109      	movs	r1, #9
 800c3a6:	f7ff ff7d 	bl	800c2a4 <std>
 800c3aa:	68e0      	ldr	r0, [r4, #12]
 800c3ac:	2202      	movs	r2, #2
 800c3ae:	2112      	movs	r1, #18
 800c3b0:	f7ff ff78 	bl	800c2a4 <std>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	61a3      	str	r3, [r4, #24]
 800c3b8:	e7d2      	b.n	800c360 <__sinit+0xc>
 800c3ba:	bf00      	nop
 800c3bc:	0800f6e8 	.word	0x0800f6e8
 800c3c0:	0800c2ed 	.word	0x0800c2ed

0800c3c4 <__sfp>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	f7ff ffac 	bl	800c324 <__sfp_lock_acquire>
 800c3cc:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <__sfp+0x84>)
 800c3ce:	681e      	ldr	r6, [r3, #0]
 800c3d0:	69b3      	ldr	r3, [r6, #24]
 800c3d2:	b913      	cbnz	r3, 800c3da <__sfp+0x16>
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff ffbd 	bl	800c354 <__sinit>
 800c3da:	3648      	adds	r6, #72	; 0x48
 800c3dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	d503      	bpl.n	800c3ec <__sfp+0x28>
 800c3e4:	6833      	ldr	r3, [r6, #0]
 800c3e6:	b30b      	cbz	r3, 800c42c <__sfp+0x68>
 800c3e8:	6836      	ldr	r6, [r6, #0]
 800c3ea:	e7f7      	b.n	800c3dc <__sfp+0x18>
 800c3ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3f0:	b9d5      	cbnz	r5, 800c428 <__sfp+0x64>
 800c3f2:	4b16      	ldr	r3, [pc, #88]	; (800c44c <__sfp+0x88>)
 800c3f4:	60e3      	str	r3, [r4, #12]
 800c3f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3fa:	6665      	str	r5, [r4, #100]	; 0x64
 800c3fc:	f000 fbba 	bl	800cb74 <__retarget_lock_init_recursive>
 800c400:	f7ff ff96 	bl	800c330 <__sfp_lock_release>
 800c404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c40c:	6025      	str	r5, [r4, #0]
 800c40e:	61a5      	str	r5, [r4, #24]
 800c410:	2208      	movs	r2, #8
 800c412:	4629      	mov	r1, r5
 800c414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c418:	f7fd fb8a 	bl	8009b30 <memset>
 800c41c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c424:	4620      	mov	r0, r4
 800c426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c428:	3468      	adds	r4, #104	; 0x68
 800c42a:	e7d9      	b.n	800c3e0 <__sfp+0x1c>
 800c42c:	2104      	movs	r1, #4
 800c42e:	4638      	mov	r0, r7
 800c430:	f7ff ff62 	bl	800c2f8 <__sfmoreglue>
 800c434:	4604      	mov	r4, r0
 800c436:	6030      	str	r0, [r6, #0]
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1d5      	bne.n	800c3e8 <__sfp+0x24>
 800c43c:	f7ff ff78 	bl	800c330 <__sfp_lock_release>
 800c440:	230c      	movs	r3, #12
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	e7ee      	b.n	800c424 <__sfp+0x60>
 800c446:	bf00      	nop
 800c448:	0800f6e8 	.word	0x0800f6e8
 800c44c:	ffff0001 	.word	0xffff0001

0800c450 <_fwalk_reent>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	4606      	mov	r6, r0
 800c456:	4688      	mov	r8, r1
 800c458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c45c:	2700      	movs	r7, #0
 800c45e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c462:	f1b9 0901 	subs.w	r9, r9, #1
 800c466:	d505      	bpl.n	800c474 <_fwalk_reent+0x24>
 800c468:	6824      	ldr	r4, [r4, #0]
 800c46a:	2c00      	cmp	r4, #0
 800c46c:	d1f7      	bne.n	800c45e <_fwalk_reent+0xe>
 800c46e:	4638      	mov	r0, r7
 800c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c474:	89ab      	ldrh	r3, [r5, #12]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d907      	bls.n	800c48a <_fwalk_reent+0x3a>
 800c47a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c47e:	3301      	adds	r3, #1
 800c480:	d003      	beq.n	800c48a <_fwalk_reent+0x3a>
 800c482:	4629      	mov	r1, r5
 800c484:	4630      	mov	r0, r6
 800c486:	47c0      	blx	r8
 800c488:	4307      	orrs	r7, r0
 800c48a:	3568      	adds	r5, #104	; 0x68
 800c48c:	e7e9      	b.n	800c462 <_fwalk_reent+0x12>

0800c48e <rshift>:
 800c48e:	6903      	ldr	r3, [r0, #16]
 800c490:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c498:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c49c:	f100 0414 	add.w	r4, r0, #20
 800c4a0:	dd45      	ble.n	800c52e <rshift+0xa0>
 800c4a2:	f011 011f 	ands.w	r1, r1, #31
 800c4a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4ae:	d10c      	bne.n	800c4ca <rshift+0x3c>
 800c4b0:	f100 0710 	add.w	r7, r0, #16
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	42b1      	cmp	r1, r6
 800c4b8:	d334      	bcc.n	800c524 <rshift+0x96>
 800c4ba:	1a9b      	subs	r3, r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	1eea      	subs	r2, r5, #3
 800c4c0:	4296      	cmp	r6, r2
 800c4c2:	bf38      	it	cc
 800c4c4:	2300      	movcc	r3, #0
 800c4c6:	4423      	add	r3, r4
 800c4c8:	e015      	b.n	800c4f6 <rshift+0x68>
 800c4ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4ce:	f1c1 0820 	rsb	r8, r1, #32
 800c4d2:	40cf      	lsrs	r7, r1
 800c4d4:	f105 0e04 	add.w	lr, r5, #4
 800c4d8:	46a1      	mov	r9, r4
 800c4da:	4576      	cmp	r6, lr
 800c4dc:	46f4      	mov	ip, lr
 800c4de:	d815      	bhi.n	800c50c <rshift+0x7e>
 800c4e0:	1a9b      	subs	r3, r3, r2
 800c4e2:	009a      	lsls	r2, r3, #2
 800c4e4:	3a04      	subs	r2, #4
 800c4e6:	3501      	adds	r5, #1
 800c4e8:	42ae      	cmp	r6, r5
 800c4ea:	bf38      	it	cc
 800c4ec:	2200      	movcc	r2, #0
 800c4ee:	18a3      	adds	r3, r4, r2
 800c4f0:	50a7      	str	r7, [r4, r2]
 800c4f2:	b107      	cbz	r7, 800c4f6 <rshift+0x68>
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	1b1a      	subs	r2, r3, r4
 800c4f8:	42a3      	cmp	r3, r4
 800c4fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4fe:	bf08      	it	eq
 800c500:	2300      	moveq	r3, #0
 800c502:	6102      	str	r2, [r0, #16]
 800c504:	bf08      	it	eq
 800c506:	6143      	streq	r3, [r0, #20]
 800c508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c50c:	f8dc c000 	ldr.w	ip, [ip]
 800c510:	fa0c fc08 	lsl.w	ip, ip, r8
 800c514:	ea4c 0707 	orr.w	r7, ip, r7
 800c518:	f849 7b04 	str.w	r7, [r9], #4
 800c51c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c520:	40cf      	lsrs	r7, r1
 800c522:	e7da      	b.n	800c4da <rshift+0x4c>
 800c524:	f851 cb04 	ldr.w	ip, [r1], #4
 800c528:	f847 cf04 	str.w	ip, [r7, #4]!
 800c52c:	e7c3      	b.n	800c4b6 <rshift+0x28>
 800c52e:	4623      	mov	r3, r4
 800c530:	e7e1      	b.n	800c4f6 <rshift+0x68>

0800c532 <__hexdig_fun>:
 800c532:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c536:	2b09      	cmp	r3, #9
 800c538:	d802      	bhi.n	800c540 <__hexdig_fun+0xe>
 800c53a:	3820      	subs	r0, #32
 800c53c:	b2c0      	uxtb	r0, r0
 800c53e:	4770      	bx	lr
 800c540:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c544:	2b05      	cmp	r3, #5
 800c546:	d801      	bhi.n	800c54c <__hexdig_fun+0x1a>
 800c548:	3847      	subs	r0, #71	; 0x47
 800c54a:	e7f7      	b.n	800c53c <__hexdig_fun+0xa>
 800c54c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c550:	2b05      	cmp	r3, #5
 800c552:	d801      	bhi.n	800c558 <__hexdig_fun+0x26>
 800c554:	3827      	subs	r0, #39	; 0x27
 800c556:	e7f1      	b.n	800c53c <__hexdig_fun+0xa>
 800c558:	2000      	movs	r0, #0
 800c55a:	4770      	bx	lr

0800c55c <__gethex>:
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	ed2d 8b02 	vpush	{d8}
 800c564:	b089      	sub	sp, #36	; 0x24
 800c566:	ee08 0a10 	vmov	s16, r0
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	4bbc      	ldr	r3, [pc, #752]	; (800c860 <__gethex+0x304>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	4618      	mov	r0, r3
 800c574:	468b      	mov	fp, r1
 800c576:	4690      	mov	r8, r2
 800c578:	f7f3 fe52 	bl	8000220 <strlen>
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	f8db 2000 	ldr.w	r2, [fp]
 800c582:	4403      	add	r3, r0
 800c584:	4682      	mov	sl, r0
 800c586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c58a:	9305      	str	r3, [sp, #20]
 800c58c:	1c93      	adds	r3, r2, #2
 800c58e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c596:	32fe      	adds	r2, #254	; 0xfe
 800c598:	18d1      	adds	r1, r2, r3
 800c59a:	461f      	mov	r7, r3
 800c59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5a0:	9100      	str	r1, [sp, #0]
 800c5a2:	2830      	cmp	r0, #48	; 0x30
 800c5a4:	d0f8      	beq.n	800c598 <__gethex+0x3c>
 800c5a6:	f7ff ffc4 	bl	800c532 <__hexdig_fun>
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d13a      	bne.n	800c626 <__gethex+0xca>
 800c5b0:	9901      	ldr	r1, [sp, #4]
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	f001 fa8a 	bl	800dace <strncmp>
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d168      	bne.n	800c692 <__gethex+0x136>
 800c5c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c5c4:	eb07 060a 	add.w	r6, r7, sl
 800c5c8:	f7ff ffb3 	bl	800c532 <__hexdig_fun>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d062      	beq.n	800c696 <__gethex+0x13a>
 800c5d0:	4633      	mov	r3, r6
 800c5d2:	7818      	ldrb	r0, [r3, #0]
 800c5d4:	2830      	cmp	r0, #48	; 0x30
 800c5d6:	461f      	mov	r7, r3
 800c5d8:	f103 0301 	add.w	r3, r3, #1
 800c5dc:	d0f9      	beq.n	800c5d2 <__gethex+0x76>
 800c5de:	f7ff ffa8 	bl	800c532 <__hexdig_fun>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	fab0 f480 	clz	r4, r0
 800c5e8:	0964      	lsrs	r4, r4, #5
 800c5ea:	4635      	mov	r5, r6
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	463a      	mov	r2, r7
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	3201      	adds	r2, #1
 800c5f4:	7830      	ldrb	r0, [r6, #0]
 800c5f6:	f7ff ff9c 	bl	800c532 <__hexdig_fun>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f8      	bne.n	800c5f0 <__gethex+0x94>
 800c5fe:	9901      	ldr	r1, [sp, #4]
 800c600:	4652      	mov	r2, sl
 800c602:	4630      	mov	r0, r6
 800c604:	f001 fa63 	bl	800dace <strncmp>
 800c608:	b980      	cbnz	r0, 800c62c <__gethex+0xd0>
 800c60a:	b94d      	cbnz	r5, 800c620 <__gethex+0xc4>
 800c60c:	eb06 050a 	add.w	r5, r6, sl
 800c610:	462a      	mov	r2, r5
 800c612:	4616      	mov	r6, r2
 800c614:	3201      	adds	r2, #1
 800c616:	7830      	ldrb	r0, [r6, #0]
 800c618:	f7ff ff8b 	bl	800c532 <__hexdig_fun>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d1f8      	bne.n	800c612 <__gethex+0xb6>
 800c620:	1bad      	subs	r5, r5, r6
 800c622:	00ad      	lsls	r5, r5, #2
 800c624:	e004      	b.n	800c630 <__gethex+0xd4>
 800c626:	2400      	movs	r4, #0
 800c628:	4625      	mov	r5, r4
 800c62a:	e7e0      	b.n	800c5ee <__gethex+0x92>
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	d1f7      	bne.n	800c620 <__gethex+0xc4>
 800c630:	7833      	ldrb	r3, [r6, #0]
 800c632:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c636:	2b50      	cmp	r3, #80	; 0x50
 800c638:	d13b      	bne.n	800c6b2 <__gethex+0x156>
 800c63a:	7873      	ldrb	r3, [r6, #1]
 800c63c:	2b2b      	cmp	r3, #43	; 0x2b
 800c63e:	d02c      	beq.n	800c69a <__gethex+0x13e>
 800c640:	2b2d      	cmp	r3, #45	; 0x2d
 800c642:	d02e      	beq.n	800c6a2 <__gethex+0x146>
 800c644:	1c71      	adds	r1, r6, #1
 800c646:	f04f 0900 	mov.w	r9, #0
 800c64a:	7808      	ldrb	r0, [r1, #0]
 800c64c:	f7ff ff71 	bl	800c532 <__hexdig_fun>
 800c650:	1e43      	subs	r3, r0, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b18      	cmp	r3, #24
 800c656:	d82c      	bhi.n	800c6b2 <__gethex+0x156>
 800c658:	f1a0 0210 	sub.w	r2, r0, #16
 800c65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c660:	f7ff ff67 	bl	800c532 <__hexdig_fun>
 800c664:	1e43      	subs	r3, r0, #1
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b18      	cmp	r3, #24
 800c66a:	d91d      	bls.n	800c6a8 <__gethex+0x14c>
 800c66c:	f1b9 0f00 	cmp.w	r9, #0
 800c670:	d000      	beq.n	800c674 <__gethex+0x118>
 800c672:	4252      	negs	r2, r2
 800c674:	4415      	add	r5, r2
 800c676:	f8cb 1000 	str.w	r1, [fp]
 800c67a:	b1e4      	cbz	r4, 800c6b6 <__gethex+0x15a>
 800c67c:	9b00      	ldr	r3, [sp, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	bf14      	ite	ne
 800c682:	2700      	movne	r7, #0
 800c684:	2706      	moveq	r7, #6
 800c686:	4638      	mov	r0, r7
 800c688:	b009      	add	sp, #36	; 0x24
 800c68a:	ecbd 8b02 	vpop	{d8}
 800c68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c692:	463e      	mov	r6, r7
 800c694:	4625      	mov	r5, r4
 800c696:	2401      	movs	r4, #1
 800c698:	e7ca      	b.n	800c630 <__gethex+0xd4>
 800c69a:	f04f 0900 	mov.w	r9, #0
 800c69e:	1cb1      	adds	r1, r6, #2
 800c6a0:	e7d3      	b.n	800c64a <__gethex+0xee>
 800c6a2:	f04f 0901 	mov.w	r9, #1
 800c6a6:	e7fa      	b.n	800c69e <__gethex+0x142>
 800c6a8:	230a      	movs	r3, #10
 800c6aa:	fb03 0202 	mla	r2, r3, r2, r0
 800c6ae:	3a10      	subs	r2, #16
 800c6b0:	e7d4      	b.n	800c65c <__gethex+0x100>
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	e7df      	b.n	800c676 <__gethex+0x11a>
 800c6b6:	1bf3      	subs	r3, r6, r7
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	2b07      	cmp	r3, #7
 800c6be:	dc0b      	bgt.n	800c6d8 <__gethex+0x17c>
 800c6c0:	ee18 0a10 	vmov	r0, s16
 800c6c4:	f000 fad8 	bl	800cc78 <_Balloc>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	b940      	cbnz	r0, 800c6de <__gethex+0x182>
 800c6cc:	4b65      	ldr	r3, [pc, #404]	; (800c864 <__gethex+0x308>)
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	21de      	movs	r1, #222	; 0xde
 800c6d2:	4865      	ldr	r0, [pc, #404]	; (800c868 <__gethex+0x30c>)
 800c6d4:	f001 fa2c 	bl	800db30 <__assert_func>
 800c6d8:	3101      	adds	r1, #1
 800c6da:	105b      	asrs	r3, r3, #1
 800c6dc:	e7ee      	b.n	800c6bc <__gethex+0x160>
 800c6de:	f100 0914 	add.w	r9, r0, #20
 800c6e2:	f04f 0b00 	mov.w	fp, #0
 800c6e6:	f1ca 0301 	rsb	r3, sl, #1
 800c6ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800c6ee:	f8cd b000 	str.w	fp, [sp]
 800c6f2:	9306      	str	r3, [sp, #24]
 800c6f4:	42b7      	cmp	r7, r6
 800c6f6:	d340      	bcc.n	800c77a <__gethex+0x21e>
 800c6f8:	9802      	ldr	r0, [sp, #8]
 800c6fa:	9b00      	ldr	r3, [sp, #0]
 800c6fc:	f840 3b04 	str.w	r3, [r0], #4
 800c700:	eba0 0009 	sub.w	r0, r0, r9
 800c704:	1080      	asrs	r0, r0, #2
 800c706:	0146      	lsls	r6, r0, #5
 800c708:	6120      	str	r0, [r4, #16]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 fbaa 	bl	800ce64 <__hi0bits>
 800c710:	1a30      	subs	r0, r6, r0
 800c712:	f8d8 6000 	ldr.w	r6, [r8]
 800c716:	42b0      	cmp	r0, r6
 800c718:	dd63      	ble.n	800c7e2 <__gethex+0x286>
 800c71a:	1b87      	subs	r7, r0, r6
 800c71c:	4639      	mov	r1, r7
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 ff44 	bl	800d5ac <__any_on>
 800c724:	4682      	mov	sl, r0
 800c726:	b1a8      	cbz	r0, 800c754 <__gethex+0x1f8>
 800c728:	1e7b      	subs	r3, r7, #1
 800c72a:	1159      	asrs	r1, r3, #5
 800c72c:	f003 021f 	and.w	r2, r3, #31
 800c730:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c734:	f04f 0a01 	mov.w	sl, #1
 800c738:	fa0a f202 	lsl.w	r2, sl, r2
 800c73c:	420a      	tst	r2, r1
 800c73e:	d009      	beq.n	800c754 <__gethex+0x1f8>
 800c740:	4553      	cmp	r3, sl
 800c742:	dd05      	ble.n	800c750 <__gethex+0x1f4>
 800c744:	1eb9      	subs	r1, r7, #2
 800c746:	4620      	mov	r0, r4
 800c748:	f000 ff30 	bl	800d5ac <__any_on>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d145      	bne.n	800c7dc <__gethex+0x280>
 800c750:	f04f 0a02 	mov.w	sl, #2
 800c754:	4639      	mov	r1, r7
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff fe99 	bl	800c48e <rshift>
 800c75c:	443d      	add	r5, r7
 800c75e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c762:	42ab      	cmp	r3, r5
 800c764:	da4c      	bge.n	800c800 <__gethex+0x2a4>
 800c766:	ee18 0a10 	vmov	r0, s16
 800c76a:	4621      	mov	r1, r4
 800c76c:	f000 fac4 	bl	800ccf8 <_Bfree>
 800c770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c772:	2300      	movs	r3, #0
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	27a3      	movs	r7, #163	; 0xa3
 800c778:	e785      	b.n	800c686 <__gethex+0x12a>
 800c77a:	1e73      	subs	r3, r6, #1
 800c77c:	9a05      	ldr	r2, [sp, #20]
 800c77e:	9303      	str	r3, [sp, #12]
 800c780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c784:	4293      	cmp	r3, r2
 800c786:	d019      	beq.n	800c7bc <__gethex+0x260>
 800c788:	f1bb 0f20 	cmp.w	fp, #32
 800c78c:	d107      	bne.n	800c79e <__gethex+0x242>
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	9a00      	ldr	r2, [sp, #0]
 800c792:	f843 2b04 	str.w	r2, [r3], #4
 800c796:	9302      	str	r3, [sp, #8]
 800c798:	2300      	movs	r3, #0
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	469b      	mov	fp, r3
 800c79e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c7a2:	f7ff fec6 	bl	800c532 <__hexdig_fun>
 800c7a6:	9b00      	ldr	r3, [sp, #0]
 800c7a8:	f000 000f 	and.w	r0, r0, #15
 800c7ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800c7b0:	4303      	orrs	r3, r0
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	f10b 0b04 	add.w	fp, fp, #4
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	e00d      	b.n	800c7d8 <__gethex+0x27c>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	9a06      	ldr	r2, [sp, #24]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	42bb      	cmp	r3, r7
 800c7c4:	d3e0      	bcc.n	800c788 <__gethex+0x22c>
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	9901      	ldr	r1, [sp, #4]
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	4652      	mov	r2, sl
 800c7ce:	f001 f97e 	bl	800dace <strncmp>
 800c7d2:	9b07      	ldr	r3, [sp, #28]
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d1d7      	bne.n	800c788 <__gethex+0x22c>
 800c7d8:	461e      	mov	r6, r3
 800c7da:	e78b      	b.n	800c6f4 <__gethex+0x198>
 800c7dc:	f04f 0a03 	mov.w	sl, #3
 800c7e0:	e7b8      	b.n	800c754 <__gethex+0x1f8>
 800c7e2:	da0a      	bge.n	800c7fa <__gethex+0x29e>
 800c7e4:	1a37      	subs	r7, r6, r0
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	ee18 0a10 	vmov	r0, s16
 800c7ec:	463a      	mov	r2, r7
 800c7ee:	f000 fc9f 	bl	800d130 <__lshift>
 800c7f2:	1bed      	subs	r5, r5, r7
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	f100 0914 	add.w	r9, r0, #20
 800c7fa:	f04f 0a00 	mov.w	sl, #0
 800c7fe:	e7ae      	b.n	800c75e <__gethex+0x202>
 800c800:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c804:	42a8      	cmp	r0, r5
 800c806:	dd72      	ble.n	800c8ee <__gethex+0x392>
 800c808:	1b45      	subs	r5, r0, r5
 800c80a:	42ae      	cmp	r6, r5
 800c80c:	dc36      	bgt.n	800c87c <__gethex+0x320>
 800c80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c812:	2b02      	cmp	r3, #2
 800c814:	d02a      	beq.n	800c86c <__gethex+0x310>
 800c816:	2b03      	cmp	r3, #3
 800c818:	d02c      	beq.n	800c874 <__gethex+0x318>
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d115      	bne.n	800c84a <__gethex+0x2ee>
 800c81e:	42ae      	cmp	r6, r5
 800c820:	d113      	bne.n	800c84a <__gethex+0x2ee>
 800c822:	2e01      	cmp	r6, #1
 800c824:	d10b      	bne.n	800c83e <__gethex+0x2e2>
 800c826:	9a04      	ldr	r2, [sp, #16]
 800c828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	2301      	movs	r3, #1
 800c830:	6123      	str	r3, [r4, #16]
 800c832:	f8c9 3000 	str.w	r3, [r9]
 800c836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c838:	2762      	movs	r7, #98	; 0x62
 800c83a:	601c      	str	r4, [r3, #0]
 800c83c:	e723      	b.n	800c686 <__gethex+0x12a>
 800c83e:	1e71      	subs	r1, r6, #1
 800c840:	4620      	mov	r0, r4
 800c842:	f000 feb3 	bl	800d5ac <__any_on>
 800c846:	2800      	cmp	r0, #0
 800c848:	d1ed      	bne.n	800c826 <__gethex+0x2ca>
 800c84a:	ee18 0a10 	vmov	r0, s16
 800c84e:	4621      	mov	r1, r4
 800c850:	f000 fa52 	bl	800ccf8 <_Bfree>
 800c854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c856:	2300      	movs	r3, #0
 800c858:	6013      	str	r3, [r2, #0]
 800c85a:	2750      	movs	r7, #80	; 0x50
 800c85c:	e713      	b.n	800c686 <__gethex+0x12a>
 800c85e:	bf00      	nop
 800c860:	0800f9d4 	.word	0x0800f9d4
 800c864:	0800f8f4 	.word	0x0800f8f4
 800c868:	0800f968 	.word	0x0800f968
 800c86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1eb      	bne.n	800c84a <__gethex+0x2ee>
 800c872:	e7d8      	b.n	800c826 <__gethex+0x2ca>
 800c874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1d5      	bne.n	800c826 <__gethex+0x2ca>
 800c87a:	e7e6      	b.n	800c84a <__gethex+0x2ee>
 800c87c:	1e6f      	subs	r7, r5, #1
 800c87e:	f1ba 0f00 	cmp.w	sl, #0
 800c882:	d131      	bne.n	800c8e8 <__gethex+0x38c>
 800c884:	b127      	cbz	r7, 800c890 <__gethex+0x334>
 800c886:	4639      	mov	r1, r7
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 fe8f 	bl	800d5ac <__any_on>
 800c88e:	4682      	mov	sl, r0
 800c890:	117b      	asrs	r3, r7, #5
 800c892:	2101      	movs	r1, #1
 800c894:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c898:	f007 071f 	and.w	r7, r7, #31
 800c89c:	fa01 f707 	lsl.w	r7, r1, r7
 800c8a0:	421f      	tst	r7, r3
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bf18      	it	ne
 800c8a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c8ac:	1b76      	subs	r6, r6, r5
 800c8ae:	f7ff fdee 	bl	800c48e <rshift>
 800c8b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c8b6:	2702      	movs	r7, #2
 800c8b8:	f1ba 0f00 	cmp.w	sl, #0
 800c8bc:	d048      	beq.n	800c950 <__gethex+0x3f4>
 800c8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d015      	beq.n	800c8f2 <__gethex+0x396>
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d017      	beq.n	800c8fa <__gethex+0x39e>
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d109      	bne.n	800c8e2 <__gethex+0x386>
 800c8ce:	f01a 0f02 	tst.w	sl, #2
 800c8d2:	d006      	beq.n	800c8e2 <__gethex+0x386>
 800c8d4:	f8d9 0000 	ldr.w	r0, [r9]
 800c8d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c8dc:	f01a 0f01 	tst.w	sl, #1
 800c8e0:	d10e      	bne.n	800c900 <__gethex+0x3a4>
 800c8e2:	f047 0710 	orr.w	r7, r7, #16
 800c8e6:	e033      	b.n	800c950 <__gethex+0x3f4>
 800c8e8:	f04f 0a01 	mov.w	sl, #1
 800c8ec:	e7d0      	b.n	800c890 <__gethex+0x334>
 800c8ee:	2701      	movs	r7, #1
 800c8f0:	e7e2      	b.n	800c8b8 <__gethex+0x35c>
 800c8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8f4:	f1c3 0301 	rsb	r3, r3, #1
 800c8f8:	9315      	str	r3, [sp, #84]	; 0x54
 800c8fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0f0      	beq.n	800c8e2 <__gethex+0x386>
 800c900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c904:	f104 0314 	add.w	r3, r4, #20
 800c908:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c90c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c910:	f04f 0c00 	mov.w	ip, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c91e:	d01c      	beq.n	800c95a <__gethex+0x3fe>
 800c920:	3201      	adds	r2, #1
 800c922:	6002      	str	r2, [r0, #0]
 800c924:	2f02      	cmp	r7, #2
 800c926:	f104 0314 	add.w	r3, r4, #20
 800c92a:	d13f      	bne.n	800c9ac <__gethex+0x450>
 800c92c:	f8d8 2000 	ldr.w	r2, [r8]
 800c930:	3a01      	subs	r2, #1
 800c932:	42b2      	cmp	r2, r6
 800c934:	d10a      	bne.n	800c94c <__gethex+0x3f0>
 800c936:	1171      	asrs	r1, r6, #5
 800c938:	2201      	movs	r2, #1
 800c93a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c93e:	f006 061f 	and.w	r6, r6, #31
 800c942:	fa02 f606 	lsl.w	r6, r2, r6
 800c946:	421e      	tst	r6, r3
 800c948:	bf18      	it	ne
 800c94a:	4617      	movne	r7, r2
 800c94c:	f047 0720 	orr.w	r7, r7, #32
 800c950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c952:	601c      	str	r4, [r3, #0]
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	601d      	str	r5, [r3, #0]
 800c958:	e695      	b.n	800c686 <__gethex+0x12a>
 800c95a:	4299      	cmp	r1, r3
 800c95c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c960:	d8d8      	bhi.n	800c914 <__gethex+0x3b8>
 800c962:	68a3      	ldr	r3, [r4, #8]
 800c964:	459b      	cmp	fp, r3
 800c966:	db19      	blt.n	800c99c <__gethex+0x440>
 800c968:	6861      	ldr	r1, [r4, #4]
 800c96a:	ee18 0a10 	vmov	r0, s16
 800c96e:	3101      	adds	r1, #1
 800c970:	f000 f982 	bl	800cc78 <_Balloc>
 800c974:	4681      	mov	r9, r0
 800c976:	b918      	cbnz	r0, 800c980 <__gethex+0x424>
 800c978:	4b1a      	ldr	r3, [pc, #104]	; (800c9e4 <__gethex+0x488>)
 800c97a:	4602      	mov	r2, r0
 800c97c:	2184      	movs	r1, #132	; 0x84
 800c97e:	e6a8      	b.n	800c6d2 <__gethex+0x176>
 800c980:	6922      	ldr	r2, [r4, #16]
 800c982:	3202      	adds	r2, #2
 800c984:	f104 010c 	add.w	r1, r4, #12
 800c988:	0092      	lsls	r2, r2, #2
 800c98a:	300c      	adds	r0, #12
 800c98c:	f7fd f8a8 	bl	8009ae0 <memcpy>
 800c990:	4621      	mov	r1, r4
 800c992:	ee18 0a10 	vmov	r0, s16
 800c996:	f000 f9af 	bl	800ccf8 <_Bfree>
 800c99a:	464c      	mov	r4, r9
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9a4:	6122      	str	r2, [r4, #16]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	615a      	str	r2, [r3, #20]
 800c9aa:	e7bb      	b.n	800c924 <__gethex+0x3c8>
 800c9ac:	6922      	ldr	r2, [r4, #16]
 800c9ae:	455a      	cmp	r2, fp
 800c9b0:	dd0b      	ble.n	800c9ca <__gethex+0x46e>
 800c9b2:	2101      	movs	r1, #1
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f7ff fd6a 	bl	800c48e <rshift>
 800c9ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9be:	3501      	adds	r5, #1
 800c9c0:	42ab      	cmp	r3, r5
 800c9c2:	f6ff aed0 	blt.w	800c766 <__gethex+0x20a>
 800c9c6:	2701      	movs	r7, #1
 800c9c8:	e7c0      	b.n	800c94c <__gethex+0x3f0>
 800c9ca:	f016 061f 	ands.w	r6, r6, #31
 800c9ce:	d0fa      	beq.n	800c9c6 <__gethex+0x46a>
 800c9d0:	449a      	add	sl, r3
 800c9d2:	f1c6 0620 	rsb	r6, r6, #32
 800c9d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c9da:	f000 fa43 	bl	800ce64 <__hi0bits>
 800c9de:	42b0      	cmp	r0, r6
 800c9e0:	dbe7      	blt.n	800c9b2 <__gethex+0x456>
 800c9e2:	e7f0      	b.n	800c9c6 <__gethex+0x46a>
 800c9e4:	0800f8f4 	.word	0x0800f8f4

0800c9e8 <L_shift>:
 800c9e8:	f1c2 0208 	rsb	r2, r2, #8
 800c9ec:	0092      	lsls	r2, r2, #2
 800c9ee:	b570      	push	{r4, r5, r6, lr}
 800c9f0:	f1c2 0620 	rsb	r6, r2, #32
 800c9f4:	6843      	ldr	r3, [r0, #4]
 800c9f6:	6804      	ldr	r4, [r0, #0]
 800c9f8:	fa03 f506 	lsl.w	r5, r3, r6
 800c9fc:	432c      	orrs	r4, r5
 800c9fe:	40d3      	lsrs	r3, r2
 800ca00:	6004      	str	r4, [r0, #0]
 800ca02:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca06:	4288      	cmp	r0, r1
 800ca08:	d3f4      	bcc.n	800c9f4 <L_shift+0xc>
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}

0800ca0c <__match>:
 800ca0c:	b530      	push	{r4, r5, lr}
 800ca0e:	6803      	ldr	r3, [r0, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca16:	b914      	cbnz	r4, 800ca1e <__match+0x12>
 800ca18:	6003      	str	r3, [r0, #0]
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	bd30      	pop	{r4, r5, pc}
 800ca1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca26:	2d19      	cmp	r5, #25
 800ca28:	bf98      	it	ls
 800ca2a:	3220      	addls	r2, #32
 800ca2c:	42a2      	cmp	r2, r4
 800ca2e:	d0f0      	beq.n	800ca12 <__match+0x6>
 800ca30:	2000      	movs	r0, #0
 800ca32:	e7f3      	b.n	800ca1c <__match+0x10>

0800ca34 <__hexnan>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	680b      	ldr	r3, [r1, #0]
 800ca3a:	6801      	ldr	r1, [r0, #0]
 800ca3c:	115e      	asrs	r6, r3, #5
 800ca3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca42:	f013 031f 	ands.w	r3, r3, #31
 800ca46:	b087      	sub	sp, #28
 800ca48:	bf18      	it	ne
 800ca4a:	3604      	addne	r6, #4
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	1f37      	subs	r7, r6, #4
 800ca50:	4682      	mov	sl, r0
 800ca52:	4690      	mov	r8, r2
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca5a:	46b9      	mov	r9, r7
 800ca5c:	463c      	mov	r4, r7
 800ca5e:	9502      	str	r5, [sp, #8]
 800ca60:	46ab      	mov	fp, r5
 800ca62:	784a      	ldrb	r2, [r1, #1]
 800ca64:	1c4b      	adds	r3, r1, #1
 800ca66:	9303      	str	r3, [sp, #12]
 800ca68:	b342      	cbz	r2, 800cabc <__hexnan+0x88>
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	9105      	str	r1, [sp, #20]
 800ca6e:	9204      	str	r2, [sp, #16]
 800ca70:	f7ff fd5f 	bl	800c532 <__hexdig_fun>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d14f      	bne.n	800cb18 <__hexnan+0xe4>
 800ca78:	9a04      	ldr	r2, [sp, #16]
 800ca7a:	9905      	ldr	r1, [sp, #20]
 800ca7c:	2a20      	cmp	r2, #32
 800ca7e:	d818      	bhi.n	800cab2 <__hexnan+0x7e>
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	459b      	cmp	fp, r3
 800ca84:	dd13      	ble.n	800caae <__hexnan+0x7a>
 800ca86:	454c      	cmp	r4, r9
 800ca88:	d206      	bcs.n	800ca98 <__hexnan+0x64>
 800ca8a:	2d07      	cmp	r5, #7
 800ca8c:	dc04      	bgt.n	800ca98 <__hexnan+0x64>
 800ca8e:	462a      	mov	r2, r5
 800ca90:	4649      	mov	r1, r9
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7ff ffa8 	bl	800c9e8 <L_shift>
 800ca98:	4544      	cmp	r4, r8
 800ca9a:	d950      	bls.n	800cb3e <__hexnan+0x10a>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f1a4 0904 	sub.w	r9, r4, #4
 800caa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800caa6:	f8cd b008 	str.w	fp, [sp, #8]
 800caaa:	464c      	mov	r4, r9
 800caac:	461d      	mov	r5, r3
 800caae:	9903      	ldr	r1, [sp, #12]
 800cab0:	e7d7      	b.n	800ca62 <__hexnan+0x2e>
 800cab2:	2a29      	cmp	r2, #41	; 0x29
 800cab4:	d156      	bne.n	800cb64 <__hexnan+0x130>
 800cab6:	3102      	adds	r1, #2
 800cab8:	f8ca 1000 	str.w	r1, [sl]
 800cabc:	f1bb 0f00 	cmp.w	fp, #0
 800cac0:	d050      	beq.n	800cb64 <__hexnan+0x130>
 800cac2:	454c      	cmp	r4, r9
 800cac4:	d206      	bcs.n	800cad4 <__hexnan+0xa0>
 800cac6:	2d07      	cmp	r5, #7
 800cac8:	dc04      	bgt.n	800cad4 <__hexnan+0xa0>
 800caca:	462a      	mov	r2, r5
 800cacc:	4649      	mov	r1, r9
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff ff8a 	bl	800c9e8 <L_shift>
 800cad4:	4544      	cmp	r4, r8
 800cad6:	d934      	bls.n	800cb42 <__hexnan+0x10e>
 800cad8:	f1a8 0204 	sub.w	r2, r8, #4
 800cadc:	4623      	mov	r3, r4
 800cade:	f853 1b04 	ldr.w	r1, [r3], #4
 800cae2:	f842 1f04 	str.w	r1, [r2, #4]!
 800cae6:	429f      	cmp	r7, r3
 800cae8:	d2f9      	bcs.n	800cade <__hexnan+0xaa>
 800caea:	1b3b      	subs	r3, r7, r4
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	3304      	adds	r3, #4
 800caf2:	3401      	adds	r4, #1
 800caf4:	3e03      	subs	r6, #3
 800caf6:	42b4      	cmp	r4, r6
 800caf8:	bf88      	it	hi
 800cafa:	2304      	movhi	r3, #4
 800cafc:	4443      	add	r3, r8
 800cafe:	2200      	movs	r2, #0
 800cb00:	f843 2b04 	str.w	r2, [r3], #4
 800cb04:	429f      	cmp	r7, r3
 800cb06:	d2fb      	bcs.n	800cb00 <__hexnan+0xcc>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	b91b      	cbnz	r3, 800cb14 <__hexnan+0xe0>
 800cb0c:	4547      	cmp	r7, r8
 800cb0e:	d127      	bne.n	800cb60 <__hexnan+0x12c>
 800cb10:	2301      	movs	r3, #1
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	2005      	movs	r0, #5
 800cb16:	e026      	b.n	800cb66 <__hexnan+0x132>
 800cb18:	3501      	adds	r5, #1
 800cb1a:	2d08      	cmp	r5, #8
 800cb1c:	f10b 0b01 	add.w	fp, fp, #1
 800cb20:	dd06      	ble.n	800cb30 <__hexnan+0xfc>
 800cb22:	4544      	cmp	r4, r8
 800cb24:	d9c3      	bls.n	800caae <__hexnan+0x7a>
 800cb26:	2300      	movs	r3, #0
 800cb28:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb2c:	2501      	movs	r5, #1
 800cb2e:	3c04      	subs	r4, #4
 800cb30:	6822      	ldr	r2, [r4, #0]
 800cb32:	f000 000f 	and.w	r0, r0, #15
 800cb36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb3a:	6022      	str	r2, [r4, #0]
 800cb3c:	e7b7      	b.n	800caae <__hexnan+0x7a>
 800cb3e:	2508      	movs	r5, #8
 800cb40:	e7b5      	b.n	800caae <__hexnan+0x7a>
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0df      	beq.n	800cb08 <__hexnan+0xd4>
 800cb48:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4c:	f1c3 0320 	rsb	r3, r3, #32
 800cb50:	fa22 f303 	lsr.w	r3, r2, r3
 800cb54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb58:	401a      	ands	r2, r3
 800cb5a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cb5e:	e7d3      	b.n	800cb08 <__hexnan+0xd4>
 800cb60:	3f04      	subs	r7, #4
 800cb62:	e7d1      	b.n	800cb08 <__hexnan+0xd4>
 800cb64:	2004      	movs	r0, #4
 800cb66:	b007      	add	sp, #28
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb6c <_localeconv_r>:
 800cb6c:	4800      	ldr	r0, [pc, #0]	; (800cb70 <_localeconv_r+0x4>)
 800cb6e:	4770      	bx	lr
 800cb70:	20000184 	.word	0x20000184

0800cb74 <__retarget_lock_init_recursive>:
 800cb74:	4770      	bx	lr

0800cb76 <__retarget_lock_acquire_recursive>:
 800cb76:	4770      	bx	lr

0800cb78 <__retarget_lock_release_recursive>:
 800cb78:	4770      	bx	lr

0800cb7a <__swhatbuf_r>:
 800cb7a:	b570      	push	{r4, r5, r6, lr}
 800cb7c:	460e      	mov	r6, r1
 800cb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb82:	2900      	cmp	r1, #0
 800cb84:	b096      	sub	sp, #88	; 0x58
 800cb86:	4614      	mov	r4, r2
 800cb88:	461d      	mov	r5, r3
 800cb8a:	da07      	bge.n	800cb9c <__swhatbuf_r+0x22>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	602b      	str	r3, [r5, #0]
 800cb90:	89b3      	ldrh	r3, [r6, #12]
 800cb92:	061a      	lsls	r2, r3, #24
 800cb94:	d410      	bmi.n	800cbb8 <__swhatbuf_r+0x3e>
 800cb96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9a:	e00e      	b.n	800cbba <__swhatbuf_r+0x40>
 800cb9c:	466a      	mov	r2, sp
 800cb9e:	f001 f807 	bl	800dbb0 <_fstat_r>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	dbf2      	blt.n	800cb8c <__swhatbuf_r+0x12>
 800cba6:	9a01      	ldr	r2, [sp, #4]
 800cba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbb0:	425a      	negs	r2, r3
 800cbb2:	415a      	adcs	r2, r3
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	e7ee      	b.n	800cb96 <__swhatbuf_r+0x1c>
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	2000      	movs	r0, #0
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	b016      	add	sp, #88	; 0x58
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbc4 <__smakebuf_r>:
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc8:	079d      	lsls	r5, r3, #30
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	d507      	bpl.n	800cbe0 <__smakebuf_r+0x1c>
 800cbd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	6163      	str	r3, [r4, #20]
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	ab01      	add	r3, sp, #4
 800cbe2:	466a      	mov	r2, sp
 800cbe4:	f7ff ffc9 	bl	800cb7a <__swhatbuf_r>
 800cbe8:	9900      	ldr	r1, [sp, #0]
 800cbea:	4605      	mov	r5, r0
 800cbec:	4630      	mov	r0, r6
 800cbee:	f000 fd5d 	bl	800d6ac <_malloc_r>
 800cbf2:	b948      	cbnz	r0, 800cc08 <__smakebuf_r+0x44>
 800cbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf8:	059a      	lsls	r2, r3, #22
 800cbfa:	d4ef      	bmi.n	800cbdc <__smakebuf_r+0x18>
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	f043 0302 	orr.w	r3, r3, #2
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	e7e3      	b.n	800cbd0 <__smakebuf_r+0xc>
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <__smakebuf_r+0x7c>)
 800cc0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	6020      	str	r0, [r4, #0]
 800cc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	6163      	str	r3, [r4, #20]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	6120      	str	r0, [r4, #16]
 800cc1e:	b15b      	cbz	r3, 800cc38 <__smakebuf_r+0x74>
 800cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f000 ffd5 	bl	800dbd4 <_isatty_r>
 800cc2a:	b128      	cbz	r0, 800cc38 <__smakebuf_r+0x74>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	89a0      	ldrh	r0, [r4, #12]
 800cc3a:	4305      	orrs	r5, r0
 800cc3c:	81a5      	strh	r5, [r4, #12]
 800cc3e:	e7cd      	b.n	800cbdc <__smakebuf_r+0x18>
 800cc40:	0800c2ed 	.word	0x0800c2ed

0800cc44 <malloc>:
 800cc44:	4b02      	ldr	r3, [pc, #8]	; (800cc50 <malloc+0xc>)
 800cc46:	4601      	mov	r1, r0
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	f000 bd2f 	b.w	800d6ac <_malloc_r>
 800cc4e:	bf00      	nop
 800cc50:	2000002c 	.word	0x2000002c

0800cc54 <__ascii_mbtowc>:
 800cc54:	b082      	sub	sp, #8
 800cc56:	b901      	cbnz	r1, 800cc5a <__ascii_mbtowc+0x6>
 800cc58:	a901      	add	r1, sp, #4
 800cc5a:	b142      	cbz	r2, 800cc6e <__ascii_mbtowc+0x1a>
 800cc5c:	b14b      	cbz	r3, 800cc72 <__ascii_mbtowc+0x1e>
 800cc5e:	7813      	ldrb	r3, [r2, #0]
 800cc60:	600b      	str	r3, [r1, #0]
 800cc62:	7812      	ldrb	r2, [r2, #0]
 800cc64:	1e10      	subs	r0, r2, #0
 800cc66:	bf18      	it	ne
 800cc68:	2001      	movne	r0, #1
 800cc6a:	b002      	add	sp, #8
 800cc6c:	4770      	bx	lr
 800cc6e:	4610      	mov	r0, r2
 800cc70:	e7fb      	b.n	800cc6a <__ascii_mbtowc+0x16>
 800cc72:	f06f 0001 	mvn.w	r0, #1
 800cc76:	e7f8      	b.n	800cc6a <__ascii_mbtowc+0x16>

0800cc78 <_Balloc>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	460d      	mov	r5, r1
 800cc80:	b976      	cbnz	r6, 800cca0 <_Balloc+0x28>
 800cc82:	2010      	movs	r0, #16
 800cc84:	f7ff ffde 	bl	800cc44 <malloc>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	6260      	str	r0, [r4, #36]	; 0x24
 800cc8c:	b920      	cbnz	r0, 800cc98 <_Balloc+0x20>
 800cc8e:	4b18      	ldr	r3, [pc, #96]	; (800ccf0 <_Balloc+0x78>)
 800cc90:	4818      	ldr	r0, [pc, #96]	; (800ccf4 <_Balloc+0x7c>)
 800cc92:	2166      	movs	r1, #102	; 0x66
 800cc94:	f000 ff4c 	bl	800db30 <__assert_func>
 800cc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc9c:	6006      	str	r6, [r0, #0]
 800cc9e:	60c6      	str	r6, [r0, #12]
 800cca0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cca2:	68f3      	ldr	r3, [r6, #12]
 800cca4:	b183      	cbz	r3, 800ccc8 <_Balloc+0x50>
 800cca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccae:	b9b8      	cbnz	r0, 800cce0 <_Balloc+0x68>
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	fa01 f605 	lsl.w	r6, r1, r5
 800ccb6:	1d72      	adds	r2, r6, #5
 800ccb8:	0092      	lsls	r2, r2, #2
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fc97 	bl	800d5ee <_calloc_r>
 800ccc0:	b160      	cbz	r0, 800ccdc <_Balloc+0x64>
 800ccc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccc6:	e00e      	b.n	800cce6 <_Balloc+0x6e>
 800ccc8:	2221      	movs	r2, #33	; 0x21
 800ccca:	2104      	movs	r1, #4
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 fc8e 	bl	800d5ee <_calloc_r>
 800ccd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd4:	60f0      	str	r0, [r6, #12]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1e4      	bne.n	800cca6 <_Balloc+0x2e>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	6802      	ldr	r2, [r0, #0]
 800cce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cce6:	2300      	movs	r3, #0
 800cce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccec:	e7f7      	b.n	800ccde <_Balloc+0x66>
 800ccee:	bf00      	nop
 800ccf0:	0800f87e 	.word	0x0800f87e
 800ccf4:	0800f9e8 	.word	0x0800f9e8

0800ccf8 <_Bfree>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b976      	cbnz	r6, 800cd20 <_Bfree+0x28>
 800cd02:	2010      	movs	r0, #16
 800cd04:	f7ff ff9e 	bl	800cc44 <malloc>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	6268      	str	r0, [r5, #36]	; 0x24
 800cd0c:	b920      	cbnz	r0, 800cd18 <_Bfree+0x20>
 800cd0e:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <_Bfree+0x3c>)
 800cd10:	4809      	ldr	r0, [pc, #36]	; (800cd38 <_Bfree+0x40>)
 800cd12:	218a      	movs	r1, #138	; 0x8a
 800cd14:	f000 ff0c 	bl	800db30 <__assert_func>
 800cd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd1c:	6006      	str	r6, [r0, #0]
 800cd1e:	60c6      	str	r6, [r0, #12]
 800cd20:	b13c      	cbz	r4, 800cd32 <_Bfree+0x3a>
 800cd22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd24:	6862      	ldr	r2, [r4, #4]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd2c:	6021      	str	r1, [r4, #0]
 800cd2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	0800f87e 	.word	0x0800f87e
 800cd38:	0800f9e8 	.word	0x0800f9e8

0800cd3c <__multadd>:
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	690e      	ldr	r6, [r1, #16]
 800cd42:	4607      	mov	r7, r0
 800cd44:	4698      	mov	r8, r3
 800cd46:	460c      	mov	r4, r1
 800cd48:	f101 0014 	add.w	r0, r1, #20
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	6805      	ldr	r5, [r0, #0]
 800cd50:	b2a9      	uxth	r1, r5
 800cd52:	fb02 8101 	mla	r1, r2, r1, r8
 800cd56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cd5a:	0c2d      	lsrs	r5, r5, #16
 800cd5c:	fb02 c505 	mla	r5, r2, r5, ip
 800cd60:	b289      	uxth	r1, r1
 800cd62:	3301      	adds	r3, #1
 800cd64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cd68:	429e      	cmp	r6, r3
 800cd6a:	f840 1b04 	str.w	r1, [r0], #4
 800cd6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cd72:	dcec      	bgt.n	800cd4e <__multadd+0x12>
 800cd74:	f1b8 0f00 	cmp.w	r8, #0
 800cd78:	d022      	beq.n	800cdc0 <__multadd+0x84>
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	42b3      	cmp	r3, r6
 800cd7e:	dc19      	bgt.n	800cdb4 <__multadd+0x78>
 800cd80:	6861      	ldr	r1, [r4, #4]
 800cd82:	4638      	mov	r0, r7
 800cd84:	3101      	adds	r1, #1
 800cd86:	f7ff ff77 	bl	800cc78 <_Balloc>
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	b928      	cbnz	r0, 800cd9a <__multadd+0x5e>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <__multadd+0x8c>)
 800cd92:	480e      	ldr	r0, [pc, #56]	; (800cdcc <__multadd+0x90>)
 800cd94:	21b5      	movs	r1, #181	; 0xb5
 800cd96:	f000 fecb 	bl	800db30 <__assert_func>
 800cd9a:	6922      	ldr	r2, [r4, #16]
 800cd9c:	3202      	adds	r2, #2
 800cd9e:	f104 010c 	add.w	r1, r4, #12
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	300c      	adds	r0, #12
 800cda6:	f7fc fe9b 	bl	8009ae0 <memcpy>
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4638      	mov	r0, r7
 800cdae:	f7ff ffa3 	bl	800ccf8 <_Bfree>
 800cdb2:	462c      	mov	r4, r5
 800cdb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cdb8:	3601      	adds	r6, #1
 800cdba:	f8c3 8014 	str.w	r8, [r3, #20]
 800cdbe:	6126      	str	r6, [r4, #16]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc6:	bf00      	nop
 800cdc8:	0800f8f4 	.word	0x0800f8f4
 800cdcc:	0800f9e8 	.word	0x0800f9e8

0800cdd0 <__s2b>:
 800cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	4615      	mov	r5, r2
 800cdd8:	461f      	mov	r7, r3
 800cdda:	2209      	movs	r2, #9
 800cddc:	3308      	adds	r3, #8
 800cdde:	4606      	mov	r6, r0
 800cde0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cde4:	2100      	movs	r1, #0
 800cde6:	2201      	movs	r2, #1
 800cde8:	429a      	cmp	r2, r3
 800cdea:	db09      	blt.n	800ce00 <__s2b+0x30>
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7ff ff43 	bl	800cc78 <_Balloc>
 800cdf2:	b940      	cbnz	r0, 800ce06 <__s2b+0x36>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <__s2b+0x8c>)
 800cdf8:	4819      	ldr	r0, [pc, #100]	; (800ce60 <__s2b+0x90>)
 800cdfa:	21ce      	movs	r1, #206	; 0xce
 800cdfc:	f000 fe98 	bl	800db30 <__assert_func>
 800ce00:	0052      	lsls	r2, r2, #1
 800ce02:	3101      	adds	r1, #1
 800ce04:	e7f0      	b.n	800cde8 <__s2b+0x18>
 800ce06:	9b08      	ldr	r3, [sp, #32]
 800ce08:	6143      	str	r3, [r0, #20]
 800ce0a:	2d09      	cmp	r5, #9
 800ce0c:	f04f 0301 	mov.w	r3, #1
 800ce10:	6103      	str	r3, [r0, #16]
 800ce12:	dd16      	ble.n	800ce42 <__s2b+0x72>
 800ce14:	f104 0909 	add.w	r9, r4, #9
 800ce18:	46c8      	mov	r8, r9
 800ce1a:	442c      	add	r4, r5
 800ce1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce20:	4601      	mov	r1, r0
 800ce22:	3b30      	subs	r3, #48	; 0x30
 800ce24:	220a      	movs	r2, #10
 800ce26:	4630      	mov	r0, r6
 800ce28:	f7ff ff88 	bl	800cd3c <__multadd>
 800ce2c:	45a0      	cmp	r8, r4
 800ce2e:	d1f5      	bne.n	800ce1c <__s2b+0x4c>
 800ce30:	f1a5 0408 	sub.w	r4, r5, #8
 800ce34:	444c      	add	r4, r9
 800ce36:	1b2d      	subs	r5, r5, r4
 800ce38:	1963      	adds	r3, r4, r5
 800ce3a:	42bb      	cmp	r3, r7
 800ce3c:	db04      	blt.n	800ce48 <__s2b+0x78>
 800ce3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce42:	340a      	adds	r4, #10
 800ce44:	2509      	movs	r5, #9
 800ce46:	e7f6      	b.n	800ce36 <__s2b+0x66>
 800ce48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	3b30      	subs	r3, #48	; 0x30
 800ce50:	220a      	movs	r2, #10
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7ff ff72 	bl	800cd3c <__multadd>
 800ce58:	e7ee      	b.n	800ce38 <__s2b+0x68>
 800ce5a:	bf00      	nop
 800ce5c:	0800f8f4 	.word	0x0800f8f4
 800ce60:	0800f9e8 	.word	0x0800f9e8

0800ce64 <__hi0bits>:
 800ce64:	0c03      	lsrs	r3, r0, #16
 800ce66:	041b      	lsls	r3, r3, #16
 800ce68:	b9d3      	cbnz	r3, 800cea0 <__hi0bits+0x3c>
 800ce6a:	0400      	lsls	r0, r0, #16
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce72:	bf04      	itt	eq
 800ce74:	0200      	lsleq	r0, r0, #8
 800ce76:	3308      	addeq	r3, #8
 800ce78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce7c:	bf04      	itt	eq
 800ce7e:	0100      	lsleq	r0, r0, #4
 800ce80:	3304      	addeq	r3, #4
 800ce82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce86:	bf04      	itt	eq
 800ce88:	0080      	lsleq	r0, r0, #2
 800ce8a:	3302      	addeq	r3, #2
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	db05      	blt.n	800ce9c <__hi0bits+0x38>
 800ce90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce94:	f103 0301 	add.w	r3, r3, #1
 800ce98:	bf08      	it	eq
 800ce9a:	2320      	moveq	r3, #32
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	4770      	bx	lr
 800cea0:	2300      	movs	r3, #0
 800cea2:	e7e4      	b.n	800ce6e <__hi0bits+0xa>

0800cea4 <__lo0bits>:
 800cea4:	6803      	ldr	r3, [r0, #0]
 800cea6:	f013 0207 	ands.w	r2, r3, #7
 800ceaa:	4601      	mov	r1, r0
 800ceac:	d00b      	beq.n	800cec6 <__lo0bits+0x22>
 800ceae:	07da      	lsls	r2, r3, #31
 800ceb0:	d424      	bmi.n	800cefc <__lo0bits+0x58>
 800ceb2:	0798      	lsls	r0, r3, #30
 800ceb4:	bf49      	itett	mi
 800ceb6:	085b      	lsrmi	r3, r3, #1
 800ceb8:	089b      	lsrpl	r3, r3, #2
 800ceba:	2001      	movmi	r0, #1
 800cebc:	600b      	strmi	r3, [r1, #0]
 800cebe:	bf5c      	itt	pl
 800cec0:	600b      	strpl	r3, [r1, #0]
 800cec2:	2002      	movpl	r0, #2
 800cec4:	4770      	bx	lr
 800cec6:	b298      	uxth	r0, r3
 800cec8:	b9b0      	cbnz	r0, 800cef8 <__lo0bits+0x54>
 800ceca:	0c1b      	lsrs	r3, r3, #16
 800cecc:	2010      	movs	r0, #16
 800cece:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ced2:	bf04      	itt	eq
 800ced4:	0a1b      	lsreq	r3, r3, #8
 800ced6:	3008      	addeq	r0, #8
 800ced8:	071a      	lsls	r2, r3, #28
 800ceda:	bf04      	itt	eq
 800cedc:	091b      	lsreq	r3, r3, #4
 800cede:	3004      	addeq	r0, #4
 800cee0:	079a      	lsls	r2, r3, #30
 800cee2:	bf04      	itt	eq
 800cee4:	089b      	lsreq	r3, r3, #2
 800cee6:	3002      	addeq	r0, #2
 800cee8:	07da      	lsls	r2, r3, #31
 800ceea:	d403      	bmi.n	800cef4 <__lo0bits+0x50>
 800ceec:	085b      	lsrs	r3, r3, #1
 800ceee:	f100 0001 	add.w	r0, r0, #1
 800cef2:	d005      	beq.n	800cf00 <__lo0bits+0x5c>
 800cef4:	600b      	str	r3, [r1, #0]
 800cef6:	4770      	bx	lr
 800cef8:	4610      	mov	r0, r2
 800cefa:	e7e8      	b.n	800cece <__lo0bits+0x2a>
 800cefc:	2000      	movs	r0, #0
 800cefe:	4770      	bx	lr
 800cf00:	2020      	movs	r0, #32
 800cf02:	4770      	bx	lr

0800cf04 <__i2b>:
 800cf04:	b510      	push	{r4, lr}
 800cf06:	460c      	mov	r4, r1
 800cf08:	2101      	movs	r1, #1
 800cf0a:	f7ff feb5 	bl	800cc78 <_Balloc>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	b928      	cbnz	r0, 800cf1e <__i2b+0x1a>
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <__i2b+0x24>)
 800cf14:	4805      	ldr	r0, [pc, #20]	; (800cf2c <__i2b+0x28>)
 800cf16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf1a:	f000 fe09 	bl	800db30 <__assert_func>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	6144      	str	r4, [r0, #20]
 800cf22:	6103      	str	r3, [r0, #16]
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	bf00      	nop
 800cf28:	0800f8f4 	.word	0x0800f8f4
 800cf2c:	0800f9e8 	.word	0x0800f9e8

0800cf30 <__multiply>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	4614      	mov	r4, r2
 800cf36:	690a      	ldr	r2, [r1, #16]
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	bfb8      	it	lt
 800cf3e:	460b      	movlt	r3, r1
 800cf40:	460d      	mov	r5, r1
 800cf42:	bfbc      	itt	lt
 800cf44:	4625      	movlt	r5, r4
 800cf46:	461c      	movlt	r4, r3
 800cf48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cf4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf50:	68ab      	ldr	r3, [r5, #8]
 800cf52:	6869      	ldr	r1, [r5, #4]
 800cf54:	eb0a 0709 	add.w	r7, sl, r9
 800cf58:	42bb      	cmp	r3, r7
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	bfb8      	it	lt
 800cf5e:	3101      	addlt	r1, #1
 800cf60:	f7ff fe8a 	bl	800cc78 <_Balloc>
 800cf64:	b930      	cbnz	r0, 800cf74 <__multiply+0x44>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4b42      	ldr	r3, [pc, #264]	; (800d074 <__multiply+0x144>)
 800cf6a:	4843      	ldr	r0, [pc, #268]	; (800d078 <__multiply+0x148>)
 800cf6c:	f240 115d 	movw	r1, #349	; 0x15d
 800cf70:	f000 fdde 	bl	800db30 <__assert_func>
 800cf74:	f100 0614 	add.w	r6, r0, #20
 800cf78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf7c:	4633      	mov	r3, r6
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4543      	cmp	r3, r8
 800cf82:	d31e      	bcc.n	800cfc2 <__multiply+0x92>
 800cf84:	f105 0c14 	add.w	ip, r5, #20
 800cf88:	f104 0314 	add.w	r3, r4, #20
 800cf8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cf94:	9202      	str	r2, [sp, #8]
 800cf96:	ebac 0205 	sub.w	r2, ip, r5
 800cf9a:	3a15      	subs	r2, #21
 800cf9c:	f022 0203 	bic.w	r2, r2, #3
 800cfa0:	3204      	adds	r2, #4
 800cfa2:	f105 0115 	add.w	r1, r5, #21
 800cfa6:	458c      	cmp	ip, r1
 800cfa8:	bf38      	it	cc
 800cfaa:	2204      	movcc	r2, #4
 800cfac:	9201      	str	r2, [sp, #4]
 800cfae:	9a02      	ldr	r2, [sp, #8]
 800cfb0:	9303      	str	r3, [sp, #12]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d808      	bhi.n	800cfc8 <__multiply+0x98>
 800cfb6:	2f00      	cmp	r7, #0
 800cfb8:	dc55      	bgt.n	800d066 <__multiply+0x136>
 800cfba:	6107      	str	r7, [r0, #16]
 800cfbc:	b005      	add	sp, #20
 800cfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc2:	f843 2b04 	str.w	r2, [r3], #4
 800cfc6:	e7db      	b.n	800cf80 <__multiply+0x50>
 800cfc8:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfcc:	f1ba 0f00 	cmp.w	sl, #0
 800cfd0:	d020      	beq.n	800d014 <__multiply+0xe4>
 800cfd2:	f105 0e14 	add.w	lr, r5, #20
 800cfd6:	46b1      	mov	r9, r6
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cfde:	f8d9 b000 	ldr.w	fp, [r9]
 800cfe2:	b2a1      	uxth	r1, r4
 800cfe4:	fa1f fb8b 	uxth.w	fp, fp
 800cfe8:	fb0a b101 	mla	r1, sl, r1, fp
 800cfec:	4411      	add	r1, r2
 800cfee:	f8d9 2000 	ldr.w	r2, [r9]
 800cff2:	0c24      	lsrs	r4, r4, #16
 800cff4:	0c12      	lsrs	r2, r2, #16
 800cff6:	fb0a 2404 	mla	r4, sl, r4, r2
 800cffa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cffe:	b289      	uxth	r1, r1
 800d000:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d004:	45f4      	cmp	ip, lr
 800d006:	f849 1b04 	str.w	r1, [r9], #4
 800d00a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d00e:	d8e4      	bhi.n	800cfda <__multiply+0xaa>
 800d010:	9901      	ldr	r1, [sp, #4]
 800d012:	5072      	str	r2, [r6, r1]
 800d014:	9a03      	ldr	r2, [sp, #12]
 800d016:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d01a:	3304      	adds	r3, #4
 800d01c:	f1b9 0f00 	cmp.w	r9, #0
 800d020:	d01f      	beq.n	800d062 <__multiply+0x132>
 800d022:	6834      	ldr	r4, [r6, #0]
 800d024:	f105 0114 	add.w	r1, r5, #20
 800d028:	46b6      	mov	lr, r6
 800d02a:	f04f 0a00 	mov.w	sl, #0
 800d02e:	880a      	ldrh	r2, [r1, #0]
 800d030:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d034:	fb09 b202 	mla	r2, r9, r2, fp
 800d038:	4492      	add	sl, r2
 800d03a:	b2a4      	uxth	r4, r4
 800d03c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d040:	f84e 4b04 	str.w	r4, [lr], #4
 800d044:	f851 4b04 	ldr.w	r4, [r1], #4
 800d048:	f8be 2000 	ldrh.w	r2, [lr]
 800d04c:	0c24      	lsrs	r4, r4, #16
 800d04e:	fb09 2404 	mla	r4, r9, r4, r2
 800d052:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d056:	458c      	cmp	ip, r1
 800d058:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d05c:	d8e7      	bhi.n	800d02e <__multiply+0xfe>
 800d05e:	9a01      	ldr	r2, [sp, #4]
 800d060:	50b4      	str	r4, [r6, r2]
 800d062:	3604      	adds	r6, #4
 800d064:	e7a3      	b.n	800cfae <__multiply+0x7e>
 800d066:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1a5      	bne.n	800cfba <__multiply+0x8a>
 800d06e:	3f01      	subs	r7, #1
 800d070:	e7a1      	b.n	800cfb6 <__multiply+0x86>
 800d072:	bf00      	nop
 800d074:	0800f8f4 	.word	0x0800f8f4
 800d078:	0800f9e8 	.word	0x0800f9e8

0800d07c <__pow5mult>:
 800d07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d080:	4615      	mov	r5, r2
 800d082:	f012 0203 	ands.w	r2, r2, #3
 800d086:	4606      	mov	r6, r0
 800d088:	460f      	mov	r7, r1
 800d08a:	d007      	beq.n	800d09c <__pow5mult+0x20>
 800d08c:	4c25      	ldr	r4, [pc, #148]	; (800d124 <__pow5mult+0xa8>)
 800d08e:	3a01      	subs	r2, #1
 800d090:	2300      	movs	r3, #0
 800d092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d096:	f7ff fe51 	bl	800cd3c <__multadd>
 800d09a:	4607      	mov	r7, r0
 800d09c:	10ad      	asrs	r5, r5, #2
 800d09e:	d03d      	beq.n	800d11c <__pow5mult+0xa0>
 800d0a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0a2:	b97c      	cbnz	r4, 800d0c4 <__pow5mult+0x48>
 800d0a4:	2010      	movs	r0, #16
 800d0a6:	f7ff fdcd 	bl	800cc44 <malloc>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	6270      	str	r0, [r6, #36]	; 0x24
 800d0ae:	b928      	cbnz	r0, 800d0bc <__pow5mult+0x40>
 800d0b0:	4b1d      	ldr	r3, [pc, #116]	; (800d128 <__pow5mult+0xac>)
 800d0b2:	481e      	ldr	r0, [pc, #120]	; (800d12c <__pow5mult+0xb0>)
 800d0b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0b8:	f000 fd3a 	bl	800db30 <__assert_func>
 800d0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0c0:	6004      	str	r4, [r0, #0]
 800d0c2:	60c4      	str	r4, [r0, #12]
 800d0c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0cc:	b94c      	cbnz	r4, 800d0e2 <__pow5mult+0x66>
 800d0ce:	f240 2171 	movw	r1, #625	; 0x271
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ff16 	bl	800cf04 <__i2b>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0de:	4604      	mov	r4, r0
 800d0e0:	6003      	str	r3, [r0, #0]
 800d0e2:	f04f 0900 	mov.w	r9, #0
 800d0e6:	07eb      	lsls	r3, r5, #31
 800d0e8:	d50a      	bpl.n	800d100 <__pow5mult+0x84>
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f7ff ff1e 	bl	800cf30 <__multiply>
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	4680      	mov	r8, r0
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f7ff fdfd 	bl	800ccf8 <_Bfree>
 800d0fe:	4647      	mov	r7, r8
 800d100:	106d      	asrs	r5, r5, #1
 800d102:	d00b      	beq.n	800d11c <__pow5mult+0xa0>
 800d104:	6820      	ldr	r0, [r4, #0]
 800d106:	b938      	cbnz	r0, 800d118 <__pow5mult+0x9c>
 800d108:	4622      	mov	r2, r4
 800d10a:	4621      	mov	r1, r4
 800d10c:	4630      	mov	r0, r6
 800d10e:	f7ff ff0f 	bl	800cf30 <__multiply>
 800d112:	6020      	str	r0, [r4, #0]
 800d114:	f8c0 9000 	str.w	r9, [r0]
 800d118:	4604      	mov	r4, r0
 800d11a:	e7e4      	b.n	800d0e6 <__pow5mult+0x6a>
 800d11c:	4638      	mov	r0, r7
 800d11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d122:	bf00      	nop
 800d124:	0800fb38 	.word	0x0800fb38
 800d128:	0800f87e 	.word	0x0800f87e
 800d12c:	0800f9e8 	.word	0x0800f9e8

0800d130 <__lshift>:
 800d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	460c      	mov	r4, r1
 800d136:	6849      	ldr	r1, [r1, #4]
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d13e:	68a3      	ldr	r3, [r4, #8]
 800d140:	4607      	mov	r7, r0
 800d142:	4691      	mov	r9, r2
 800d144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d148:	f108 0601 	add.w	r6, r8, #1
 800d14c:	42b3      	cmp	r3, r6
 800d14e:	db0b      	blt.n	800d168 <__lshift+0x38>
 800d150:	4638      	mov	r0, r7
 800d152:	f7ff fd91 	bl	800cc78 <_Balloc>
 800d156:	4605      	mov	r5, r0
 800d158:	b948      	cbnz	r0, 800d16e <__lshift+0x3e>
 800d15a:	4602      	mov	r2, r0
 800d15c:	4b28      	ldr	r3, [pc, #160]	; (800d200 <__lshift+0xd0>)
 800d15e:	4829      	ldr	r0, [pc, #164]	; (800d204 <__lshift+0xd4>)
 800d160:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d164:	f000 fce4 	bl	800db30 <__assert_func>
 800d168:	3101      	adds	r1, #1
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	e7ee      	b.n	800d14c <__lshift+0x1c>
 800d16e:	2300      	movs	r3, #0
 800d170:	f100 0114 	add.w	r1, r0, #20
 800d174:	f100 0210 	add.w	r2, r0, #16
 800d178:	4618      	mov	r0, r3
 800d17a:	4553      	cmp	r3, sl
 800d17c:	db33      	blt.n	800d1e6 <__lshift+0xb6>
 800d17e:	6920      	ldr	r0, [r4, #16]
 800d180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d184:	f104 0314 	add.w	r3, r4, #20
 800d188:	f019 091f 	ands.w	r9, r9, #31
 800d18c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d190:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d194:	d02b      	beq.n	800d1ee <__lshift+0xbe>
 800d196:	f1c9 0e20 	rsb	lr, r9, #32
 800d19a:	468a      	mov	sl, r1
 800d19c:	2200      	movs	r2, #0
 800d19e:	6818      	ldr	r0, [r3, #0]
 800d1a0:	fa00 f009 	lsl.w	r0, r0, r9
 800d1a4:	4302      	orrs	r2, r0
 800d1a6:	f84a 2b04 	str.w	r2, [sl], #4
 800d1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ae:	459c      	cmp	ip, r3
 800d1b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1b4:	d8f3      	bhi.n	800d19e <__lshift+0x6e>
 800d1b6:	ebac 0304 	sub.w	r3, ip, r4
 800d1ba:	3b15      	subs	r3, #21
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	f104 0015 	add.w	r0, r4, #21
 800d1c6:	4584      	cmp	ip, r0
 800d1c8:	bf38      	it	cc
 800d1ca:	2304      	movcc	r3, #4
 800d1cc:	50ca      	str	r2, [r1, r3]
 800d1ce:	b10a      	cbz	r2, 800d1d4 <__lshift+0xa4>
 800d1d0:	f108 0602 	add.w	r6, r8, #2
 800d1d4:	3e01      	subs	r6, #1
 800d1d6:	4638      	mov	r0, r7
 800d1d8:	612e      	str	r6, [r5, #16]
 800d1da:	4621      	mov	r1, r4
 800d1dc:	f7ff fd8c 	bl	800ccf8 <_Bfree>
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	e7c5      	b.n	800d17a <__lshift+0x4a>
 800d1ee:	3904      	subs	r1, #4
 800d1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1f8:	459c      	cmp	ip, r3
 800d1fa:	d8f9      	bhi.n	800d1f0 <__lshift+0xc0>
 800d1fc:	e7ea      	b.n	800d1d4 <__lshift+0xa4>
 800d1fe:	bf00      	nop
 800d200:	0800f8f4 	.word	0x0800f8f4
 800d204:	0800f9e8 	.word	0x0800f9e8

0800d208 <__mcmp>:
 800d208:	b530      	push	{r4, r5, lr}
 800d20a:	6902      	ldr	r2, [r0, #16]
 800d20c:	690c      	ldr	r4, [r1, #16]
 800d20e:	1b12      	subs	r2, r2, r4
 800d210:	d10e      	bne.n	800d230 <__mcmp+0x28>
 800d212:	f100 0314 	add.w	r3, r0, #20
 800d216:	3114      	adds	r1, #20
 800d218:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d21c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d220:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d224:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d228:	42a5      	cmp	r5, r4
 800d22a:	d003      	beq.n	800d234 <__mcmp+0x2c>
 800d22c:	d305      	bcc.n	800d23a <__mcmp+0x32>
 800d22e:	2201      	movs	r2, #1
 800d230:	4610      	mov	r0, r2
 800d232:	bd30      	pop	{r4, r5, pc}
 800d234:	4283      	cmp	r3, r0
 800d236:	d3f3      	bcc.n	800d220 <__mcmp+0x18>
 800d238:	e7fa      	b.n	800d230 <__mcmp+0x28>
 800d23a:	f04f 32ff 	mov.w	r2, #4294967295
 800d23e:	e7f7      	b.n	800d230 <__mcmp+0x28>

0800d240 <__mdiff>:
 800d240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	460c      	mov	r4, r1
 800d246:	4606      	mov	r6, r0
 800d248:	4611      	mov	r1, r2
 800d24a:	4620      	mov	r0, r4
 800d24c:	4617      	mov	r7, r2
 800d24e:	f7ff ffdb 	bl	800d208 <__mcmp>
 800d252:	1e05      	subs	r5, r0, #0
 800d254:	d110      	bne.n	800d278 <__mdiff+0x38>
 800d256:	4629      	mov	r1, r5
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff fd0d 	bl	800cc78 <_Balloc>
 800d25e:	b930      	cbnz	r0, 800d26e <__mdiff+0x2e>
 800d260:	4b39      	ldr	r3, [pc, #228]	; (800d348 <__mdiff+0x108>)
 800d262:	4602      	mov	r2, r0
 800d264:	f240 2132 	movw	r1, #562	; 0x232
 800d268:	4838      	ldr	r0, [pc, #224]	; (800d34c <__mdiff+0x10c>)
 800d26a:	f000 fc61 	bl	800db30 <__assert_func>
 800d26e:	2301      	movs	r3, #1
 800d270:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d278:	bfa4      	itt	ge
 800d27a:	463b      	movge	r3, r7
 800d27c:	4627      	movge	r7, r4
 800d27e:	4630      	mov	r0, r6
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	bfa6      	itte	ge
 800d284:	461c      	movge	r4, r3
 800d286:	2500      	movge	r5, #0
 800d288:	2501      	movlt	r5, #1
 800d28a:	f7ff fcf5 	bl	800cc78 <_Balloc>
 800d28e:	b920      	cbnz	r0, 800d29a <__mdiff+0x5a>
 800d290:	4b2d      	ldr	r3, [pc, #180]	; (800d348 <__mdiff+0x108>)
 800d292:	4602      	mov	r2, r0
 800d294:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d298:	e7e6      	b.n	800d268 <__mdiff+0x28>
 800d29a:	693e      	ldr	r6, [r7, #16]
 800d29c:	60c5      	str	r5, [r0, #12]
 800d29e:	6925      	ldr	r5, [r4, #16]
 800d2a0:	f107 0114 	add.w	r1, r7, #20
 800d2a4:	f104 0914 	add.w	r9, r4, #20
 800d2a8:	f100 0e14 	add.w	lr, r0, #20
 800d2ac:	f107 0210 	add.w	r2, r7, #16
 800d2b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d2b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d2b8:	46f2      	mov	sl, lr
 800d2ba:	2700      	movs	r7, #0
 800d2bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2c4:	fa1f f883 	uxth.w	r8, r3
 800d2c8:	fa17 f78b 	uxtah	r7, r7, fp
 800d2cc:	0c1b      	lsrs	r3, r3, #16
 800d2ce:	eba7 0808 	sub.w	r8, r7, r8
 800d2d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2da:	fa1f f888 	uxth.w	r8, r8
 800d2de:	141f      	asrs	r7, r3, #16
 800d2e0:	454d      	cmp	r5, r9
 800d2e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2e6:	f84a 3b04 	str.w	r3, [sl], #4
 800d2ea:	d8e7      	bhi.n	800d2bc <__mdiff+0x7c>
 800d2ec:	1b2b      	subs	r3, r5, r4
 800d2ee:	3b15      	subs	r3, #21
 800d2f0:	f023 0303 	bic.w	r3, r3, #3
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	3415      	adds	r4, #21
 800d2f8:	42a5      	cmp	r5, r4
 800d2fa:	bf38      	it	cc
 800d2fc:	2304      	movcc	r3, #4
 800d2fe:	4419      	add	r1, r3
 800d300:	4473      	add	r3, lr
 800d302:	469e      	mov	lr, r3
 800d304:	460d      	mov	r5, r1
 800d306:	4565      	cmp	r5, ip
 800d308:	d30e      	bcc.n	800d328 <__mdiff+0xe8>
 800d30a:	f10c 0203 	add.w	r2, ip, #3
 800d30e:	1a52      	subs	r2, r2, r1
 800d310:	f022 0203 	bic.w	r2, r2, #3
 800d314:	3903      	subs	r1, #3
 800d316:	458c      	cmp	ip, r1
 800d318:	bf38      	it	cc
 800d31a:	2200      	movcc	r2, #0
 800d31c:	441a      	add	r2, r3
 800d31e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d322:	b17b      	cbz	r3, 800d344 <__mdiff+0x104>
 800d324:	6106      	str	r6, [r0, #16]
 800d326:	e7a5      	b.n	800d274 <__mdiff+0x34>
 800d328:	f855 8b04 	ldr.w	r8, [r5], #4
 800d32c:	fa17 f488 	uxtah	r4, r7, r8
 800d330:	1422      	asrs	r2, r4, #16
 800d332:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d336:	b2a4      	uxth	r4, r4
 800d338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d33c:	f84e 4b04 	str.w	r4, [lr], #4
 800d340:	1417      	asrs	r7, r2, #16
 800d342:	e7e0      	b.n	800d306 <__mdiff+0xc6>
 800d344:	3e01      	subs	r6, #1
 800d346:	e7ea      	b.n	800d31e <__mdiff+0xde>
 800d348:	0800f8f4 	.word	0x0800f8f4
 800d34c:	0800f9e8 	.word	0x0800f9e8

0800d350 <__ulp>:
 800d350:	b082      	sub	sp, #8
 800d352:	ed8d 0b00 	vstr	d0, [sp]
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	4912      	ldr	r1, [pc, #72]	; (800d3a4 <__ulp+0x54>)
 800d35a:	4019      	ands	r1, r3
 800d35c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d360:	2900      	cmp	r1, #0
 800d362:	dd05      	ble.n	800d370 <__ulp+0x20>
 800d364:	2200      	movs	r2, #0
 800d366:	460b      	mov	r3, r1
 800d368:	ec43 2b10 	vmov	d0, r2, r3
 800d36c:	b002      	add	sp, #8
 800d36e:	4770      	bx	lr
 800d370:	4249      	negs	r1, r1
 800d372:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d376:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	f04f 0300 	mov.w	r3, #0
 800d382:	da04      	bge.n	800d38e <__ulp+0x3e>
 800d384:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d388:	fa41 f300 	asr.w	r3, r1, r0
 800d38c:	e7ec      	b.n	800d368 <__ulp+0x18>
 800d38e:	f1a0 0114 	sub.w	r1, r0, #20
 800d392:	291e      	cmp	r1, #30
 800d394:	bfda      	itte	le
 800d396:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d39a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d39e:	2101      	movgt	r1, #1
 800d3a0:	460a      	mov	r2, r1
 800d3a2:	e7e1      	b.n	800d368 <__ulp+0x18>
 800d3a4:	7ff00000 	.word	0x7ff00000

0800d3a8 <__b2d>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	6905      	ldr	r5, [r0, #16]
 800d3ac:	f100 0714 	add.w	r7, r0, #20
 800d3b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3b4:	1f2e      	subs	r6, r5, #4
 800d3b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7ff fd52 	bl	800ce64 <__hi0bits>
 800d3c0:	f1c0 0320 	rsb	r3, r0, #32
 800d3c4:	280a      	cmp	r0, #10
 800d3c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d444 <__b2d+0x9c>
 800d3ca:	600b      	str	r3, [r1, #0]
 800d3cc:	dc14      	bgt.n	800d3f8 <__b2d+0x50>
 800d3ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800d3d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d3d6:	42b7      	cmp	r7, r6
 800d3d8:	ea41 030c 	orr.w	r3, r1, ip
 800d3dc:	bf34      	ite	cc
 800d3de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3e2:	2100      	movcs	r1, #0
 800d3e4:	3015      	adds	r0, #21
 800d3e6:	fa04 f000 	lsl.w	r0, r4, r0
 800d3ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800d3ee:	ea40 0201 	orr.w	r2, r0, r1
 800d3f2:	ec43 2b10 	vmov	d0, r2, r3
 800d3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f8:	42b7      	cmp	r7, r6
 800d3fa:	bf3a      	itte	cc
 800d3fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d400:	f1a5 0608 	subcc.w	r6, r5, #8
 800d404:	2100      	movcs	r1, #0
 800d406:	380b      	subs	r0, #11
 800d408:	d017      	beq.n	800d43a <__b2d+0x92>
 800d40a:	f1c0 0c20 	rsb	ip, r0, #32
 800d40e:	fa04 f500 	lsl.w	r5, r4, r0
 800d412:	42be      	cmp	r6, r7
 800d414:	fa21 f40c 	lsr.w	r4, r1, ip
 800d418:	ea45 0504 	orr.w	r5, r5, r4
 800d41c:	bf8c      	ite	hi
 800d41e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d422:	2400      	movls	r4, #0
 800d424:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d428:	fa01 f000 	lsl.w	r0, r1, r0
 800d42c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d430:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d434:	ea40 0204 	orr.w	r2, r0, r4
 800d438:	e7db      	b.n	800d3f2 <__b2d+0x4a>
 800d43a:	ea44 030c 	orr.w	r3, r4, ip
 800d43e:	460a      	mov	r2, r1
 800d440:	e7d7      	b.n	800d3f2 <__b2d+0x4a>
 800d442:	bf00      	nop
 800d444:	3ff00000 	.word	0x3ff00000

0800d448 <__d2b>:
 800d448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	4689      	mov	r9, r1
 800d44e:	2101      	movs	r1, #1
 800d450:	ec57 6b10 	vmov	r6, r7, d0
 800d454:	4690      	mov	r8, r2
 800d456:	f7ff fc0f 	bl	800cc78 <_Balloc>
 800d45a:	4604      	mov	r4, r0
 800d45c:	b930      	cbnz	r0, 800d46c <__d2b+0x24>
 800d45e:	4602      	mov	r2, r0
 800d460:	4b25      	ldr	r3, [pc, #148]	; (800d4f8 <__d2b+0xb0>)
 800d462:	4826      	ldr	r0, [pc, #152]	; (800d4fc <__d2b+0xb4>)
 800d464:	f240 310a 	movw	r1, #778	; 0x30a
 800d468:	f000 fb62 	bl	800db30 <__assert_func>
 800d46c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d474:	bb35      	cbnz	r5, 800d4c4 <__d2b+0x7c>
 800d476:	2e00      	cmp	r6, #0
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	d028      	beq.n	800d4ce <__d2b+0x86>
 800d47c:	4668      	mov	r0, sp
 800d47e:	9600      	str	r6, [sp, #0]
 800d480:	f7ff fd10 	bl	800cea4 <__lo0bits>
 800d484:	9900      	ldr	r1, [sp, #0]
 800d486:	b300      	cbz	r0, 800d4ca <__d2b+0x82>
 800d488:	9a01      	ldr	r2, [sp, #4]
 800d48a:	f1c0 0320 	rsb	r3, r0, #32
 800d48e:	fa02 f303 	lsl.w	r3, r2, r3
 800d492:	430b      	orrs	r3, r1
 800d494:	40c2      	lsrs	r2, r0
 800d496:	6163      	str	r3, [r4, #20]
 800d498:	9201      	str	r2, [sp, #4]
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	61a3      	str	r3, [r4, #24]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	bf14      	ite	ne
 800d4a2:	2202      	movne	r2, #2
 800d4a4:	2201      	moveq	r2, #1
 800d4a6:	6122      	str	r2, [r4, #16]
 800d4a8:	b1d5      	cbz	r5, 800d4e0 <__d2b+0x98>
 800d4aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4ae:	4405      	add	r5, r0
 800d4b0:	f8c9 5000 	str.w	r5, [r9]
 800d4b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4b8:	f8c8 0000 	str.w	r0, [r8]
 800d4bc:	4620      	mov	r0, r4
 800d4be:	b003      	add	sp, #12
 800d4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4c8:	e7d5      	b.n	800d476 <__d2b+0x2e>
 800d4ca:	6161      	str	r1, [r4, #20]
 800d4cc:	e7e5      	b.n	800d49a <__d2b+0x52>
 800d4ce:	a801      	add	r0, sp, #4
 800d4d0:	f7ff fce8 	bl	800cea4 <__lo0bits>
 800d4d4:	9b01      	ldr	r3, [sp, #4]
 800d4d6:	6163      	str	r3, [r4, #20]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	6122      	str	r2, [r4, #16]
 800d4dc:	3020      	adds	r0, #32
 800d4de:	e7e3      	b.n	800d4a8 <__d2b+0x60>
 800d4e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4e8:	f8c9 0000 	str.w	r0, [r9]
 800d4ec:	6918      	ldr	r0, [r3, #16]
 800d4ee:	f7ff fcb9 	bl	800ce64 <__hi0bits>
 800d4f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4f6:	e7df      	b.n	800d4b8 <__d2b+0x70>
 800d4f8:	0800f8f4 	.word	0x0800f8f4
 800d4fc:	0800f9e8 	.word	0x0800f9e8

0800d500 <__ratio>:
 800d500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	4688      	mov	r8, r1
 800d506:	4669      	mov	r1, sp
 800d508:	4681      	mov	r9, r0
 800d50a:	f7ff ff4d 	bl	800d3a8 <__b2d>
 800d50e:	a901      	add	r1, sp, #4
 800d510:	4640      	mov	r0, r8
 800d512:	ec55 4b10 	vmov	r4, r5, d0
 800d516:	f7ff ff47 	bl	800d3a8 <__b2d>
 800d51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d51e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d522:	eba3 0c02 	sub.w	ip, r3, r2
 800d526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d52a:	1a9b      	subs	r3, r3, r2
 800d52c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d530:	ec51 0b10 	vmov	r0, r1, d0
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfd6      	itet	le
 800d538:	460a      	movle	r2, r1
 800d53a:	462a      	movgt	r2, r5
 800d53c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d540:	468b      	mov	fp, r1
 800d542:	462f      	mov	r7, r5
 800d544:	bfd4      	ite	le
 800d546:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d54a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d54e:	4620      	mov	r0, r4
 800d550:	ee10 2a10 	vmov	r2, s0
 800d554:	465b      	mov	r3, fp
 800d556:	4639      	mov	r1, r7
 800d558:	f7f3 f9a0 	bl	800089c <__aeabi_ddiv>
 800d55c:	ec41 0b10 	vmov	d0, r0, r1
 800d560:	b003      	add	sp, #12
 800d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d566 <__copybits>:
 800d566:	3901      	subs	r1, #1
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	1149      	asrs	r1, r1, #5
 800d56c:	6914      	ldr	r4, [r2, #16]
 800d56e:	3101      	adds	r1, #1
 800d570:	f102 0314 	add.w	r3, r2, #20
 800d574:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d578:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d57c:	1f05      	subs	r5, r0, #4
 800d57e:	42a3      	cmp	r3, r4
 800d580:	d30c      	bcc.n	800d59c <__copybits+0x36>
 800d582:	1aa3      	subs	r3, r4, r2
 800d584:	3b11      	subs	r3, #17
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	3211      	adds	r2, #17
 800d58c:	42a2      	cmp	r2, r4
 800d58e:	bf88      	it	hi
 800d590:	2300      	movhi	r3, #0
 800d592:	4418      	add	r0, r3
 800d594:	2300      	movs	r3, #0
 800d596:	4288      	cmp	r0, r1
 800d598:	d305      	bcc.n	800d5a6 <__copybits+0x40>
 800d59a:	bd70      	pop	{r4, r5, r6, pc}
 800d59c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5a4:	e7eb      	b.n	800d57e <__copybits+0x18>
 800d5a6:	f840 3b04 	str.w	r3, [r0], #4
 800d5aa:	e7f4      	b.n	800d596 <__copybits+0x30>

0800d5ac <__any_on>:
 800d5ac:	f100 0214 	add.w	r2, r0, #20
 800d5b0:	6900      	ldr	r0, [r0, #16]
 800d5b2:	114b      	asrs	r3, r1, #5
 800d5b4:	4298      	cmp	r0, r3
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	db11      	blt.n	800d5de <__any_on+0x32>
 800d5ba:	dd0a      	ble.n	800d5d2 <__any_on+0x26>
 800d5bc:	f011 011f 	ands.w	r1, r1, #31
 800d5c0:	d007      	beq.n	800d5d2 <__any_on+0x26>
 800d5c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5c6:	fa24 f001 	lsr.w	r0, r4, r1
 800d5ca:	fa00 f101 	lsl.w	r1, r0, r1
 800d5ce:	428c      	cmp	r4, r1
 800d5d0:	d10b      	bne.n	800d5ea <__any_on+0x3e>
 800d5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d803      	bhi.n	800d5e2 <__any_on+0x36>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	4603      	mov	r3, r0
 800d5e0:	e7f7      	b.n	800d5d2 <__any_on+0x26>
 800d5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d0f5      	beq.n	800d5d6 <__any_on+0x2a>
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7f6      	b.n	800d5dc <__any_on+0x30>

0800d5ee <_calloc_r>:
 800d5ee:	b513      	push	{r0, r1, r4, lr}
 800d5f0:	434a      	muls	r2, r1
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	9201      	str	r2, [sp, #4]
 800d5f6:	f000 f859 	bl	800d6ac <_malloc_r>
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	b118      	cbz	r0, 800d606 <_calloc_r+0x18>
 800d5fe:	9a01      	ldr	r2, [sp, #4]
 800d600:	2100      	movs	r1, #0
 800d602:	f7fc fa95 	bl	8009b30 <memset>
 800d606:	4620      	mov	r0, r4
 800d608:	b002      	add	sp, #8
 800d60a:	bd10      	pop	{r4, pc}

0800d60c <_free_r>:
 800d60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d60e:	2900      	cmp	r1, #0
 800d610:	d048      	beq.n	800d6a4 <_free_r+0x98>
 800d612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d616:	9001      	str	r0, [sp, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f1a1 0404 	sub.w	r4, r1, #4
 800d61e:	bfb8      	it	lt
 800d620:	18e4      	addlt	r4, r4, r3
 800d622:	f000 faf9 	bl	800dc18 <__malloc_lock>
 800d626:	4a20      	ldr	r2, [pc, #128]	; (800d6a8 <_free_r+0x9c>)
 800d628:	9801      	ldr	r0, [sp, #4]
 800d62a:	6813      	ldr	r3, [r2, #0]
 800d62c:	4615      	mov	r5, r2
 800d62e:	b933      	cbnz	r3, 800d63e <_free_r+0x32>
 800d630:	6063      	str	r3, [r4, #4]
 800d632:	6014      	str	r4, [r2, #0]
 800d634:	b003      	add	sp, #12
 800d636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d63a:	f000 baf3 	b.w	800dc24 <__malloc_unlock>
 800d63e:	42a3      	cmp	r3, r4
 800d640:	d90b      	bls.n	800d65a <_free_r+0x4e>
 800d642:	6821      	ldr	r1, [r4, #0]
 800d644:	1862      	adds	r2, r4, r1
 800d646:	4293      	cmp	r3, r2
 800d648:	bf04      	itt	eq
 800d64a:	681a      	ldreq	r2, [r3, #0]
 800d64c:	685b      	ldreq	r3, [r3, #4]
 800d64e:	6063      	str	r3, [r4, #4]
 800d650:	bf04      	itt	eq
 800d652:	1852      	addeq	r2, r2, r1
 800d654:	6022      	streq	r2, [r4, #0]
 800d656:	602c      	str	r4, [r5, #0]
 800d658:	e7ec      	b.n	800d634 <_free_r+0x28>
 800d65a:	461a      	mov	r2, r3
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b10b      	cbz	r3, 800d664 <_free_r+0x58>
 800d660:	42a3      	cmp	r3, r4
 800d662:	d9fa      	bls.n	800d65a <_free_r+0x4e>
 800d664:	6811      	ldr	r1, [r2, #0]
 800d666:	1855      	adds	r5, r2, r1
 800d668:	42a5      	cmp	r5, r4
 800d66a:	d10b      	bne.n	800d684 <_free_r+0x78>
 800d66c:	6824      	ldr	r4, [r4, #0]
 800d66e:	4421      	add	r1, r4
 800d670:	1854      	adds	r4, r2, r1
 800d672:	42a3      	cmp	r3, r4
 800d674:	6011      	str	r1, [r2, #0]
 800d676:	d1dd      	bne.n	800d634 <_free_r+0x28>
 800d678:	681c      	ldr	r4, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	6053      	str	r3, [r2, #4]
 800d67e:	4421      	add	r1, r4
 800d680:	6011      	str	r1, [r2, #0]
 800d682:	e7d7      	b.n	800d634 <_free_r+0x28>
 800d684:	d902      	bls.n	800d68c <_free_r+0x80>
 800d686:	230c      	movs	r3, #12
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	e7d3      	b.n	800d634 <_free_r+0x28>
 800d68c:	6825      	ldr	r5, [r4, #0]
 800d68e:	1961      	adds	r1, r4, r5
 800d690:	428b      	cmp	r3, r1
 800d692:	bf04      	itt	eq
 800d694:	6819      	ldreq	r1, [r3, #0]
 800d696:	685b      	ldreq	r3, [r3, #4]
 800d698:	6063      	str	r3, [r4, #4]
 800d69a:	bf04      	itt	eq
 800d69c:	1949      	addeq	r1, r1, r5
 800d69e:	6021      	streq	r1, [r4, #0]
 800d6a0:	6054      	str	r4, [r2, #4]
 800d6a2:	e7c7      	b.n	800d634 <_free_r+0x28>
 800d6a4:	b003      	add	sp, #12
 800d6a6:	bd30      	pop	{r4, r5, pc}
 800d6a8:	2000311c 	.word	0x2000311c

0800d6ac <_malloc_r>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	1ccd      	adds	r5, r1, #3
 800d6b0:	f025 0503 	bic.w	r5, r5, #3
 800d6b4:	3508      	adds	r5, #8
 800d6b6:	2d0c      	cmp	r5, #12
 800d6b8:	bf38      	it	cc
 800d6ba:	250c      	movcc	r5, #12
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	4606      	mov	r6, r0
 800d6c0:	db01      	blt.n	800d6c6 <_malloc_r+0x1a>
 800d6c2:	42a9      	cmp	r1, r5
 800d6c4:	d903      	bls.n	800d6ce <_malloc_r+0x22>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ce:	f000 faa3 	bl	800dc18 <__malloc_lock>
 800d6d2:	4921      	ldr	r1, [pc, #132]	; (800d758 <_malloc_r+0xac>)
 800d6d4:	680a      	ldr	r2, [r1, #0]
 800d6d6:	4614      	mov	r4, r2
 800d6d8:	b99c      	cbnz	r4, 800d702 <_malloc_r+0x56>
 800d6da:	4f20      	ldr	r7, [pc, #128]	; (800d75c <_malloc_r+0xb0>)
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	b923      	cbnz	r3, 800d6ea <_malloc_r+0x3e>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f000 f9a0 	bl	800da28 <_sbrk_r>
 800d6e8:	6038      	str	r0, [r7, #0]
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f000 f99b 	bl	800da28 <_sbrk_r>
 800d6f2:	1c43      	adds	r3, r0, #1
 800d6f4:	d123      	bne.n	800d73e <_malloc_r+0x92>
 800d6f6:	230c      	movs	r3, #12
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f000 fa92 	bl	800dc24 <__malloc_unlock>
 800d700:	e7e3      	b.n	800d6ca <_malloc_r+0x1e>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	1b5b      	subs	r3, r3, r5
 800d706:	d417      	bmi.n	800d738 <_malloc_r+0x8c>
 800d708:	2b0b      	cmp	r3, #11
 800d70a:	d903      	bls.n	800d714 <_malloc_r+0x68>
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	441c      	add	r4, r3
 800d710:	6025      	str	r5, [r4, #0]
 800d712:	e004      	b.n	800d71e <_malloc_r+0x72>
 800d714:	6863      	ldr	r3, [r4, #4]
 800d716:	42a2      	cmp	r2, r4
 800d718:	bf0c      	ite	eq
 800d71a:	600b      	streq	r3, [r1, #0]
 800d71c:	6053      	strne	r3, [r2, #4]
 800d71e:	4630      	mov	r0, r6
 800d720:	f000 fa80 	bl	800dc24 <__malloc_unlock>
 800d724:	f104 000b 	add.w	r0, r4, #11
 800d728:	1d23      	adds	r3, r4, #4
 800d72a:	f020 0007 	bic.w	r0, r0, #7
 800d72e:	1ac2      	subs	r2, r0, r3
 800d730:	d0cc      	beq.n	800d6cc <_malloc_r+0x20>
 800d732:	1a1b      	subs	r3, r3, r0
 800d734:	50a3      	str	r3, [r4, r2]
 800d736:	e7c9      	b.n	800d6cc <_malloc_r+0x20>
 800d738:	4622      	mov	r2, r4
 800d73a:	6864      	ldr	r4, [r4, #4]
 800d73c:	e7cc      	b.n	800d6d8 <_malloc_r+0x2c>
 800d73e:	1cc4      	adds	r4, r0, #3
 800d740:	f024 0403 	bic.w	r4, r4, #3
 800d744:	42a0      	cmp	r0, r4
 800d746:	d0e3      	beq.n	800d710 <_malloc_r+0x64>
 800d748:	1a21      	subs	r1, r4, r0
 800d74a:	4630      	mov	r0, r6
 800d74c:	f000 f96c 	bl	800da28 <_sbrk_r>
 800d750:	3001      	adds	r0, #1
 800d752:	d1dd      	bne.n	800d710 <_malloc_r+0x64>
 800d754:	e7cf      	b.n	800d6f6 <_malloc_r+0x4a>
 800d756:	bf00      	nop
 800d758:	2000311c 	.word	0x2000311c
 800d75c:	20003120 	.word	0x20003120

0800d760 <__sfputc_r>:
 800d760:	6893      	ldr	r3, [r2, #8]
 800d762:	3b01      	subs	r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	b410      	push	{r4}
 800d768:	6093      	str	r3, [r2, #8]
 800d76a:	da08      	bge.n	800d77e <__sfputc_r+0x1e>
 800d76c:	6994      	ldr	r4, [r2, #24]
 800d76e:	42a3      	cmp	r3, r4
 800d770:	db01      	blt.n	800d776 <__sfputc_r+0x16>
 800d772:	290a      	cmp	r1, #10
 800d774:	d103      	bne.n	800d77e <__sfputc_r+0x1e>
 800d776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d77a:	f7fd bd99 	b.w	800b2b0 <__swbuf_r>
 800d77e:	6813      	ldr	r3, [r2, #0]
 800d780:	1c58      	adds	r0, r3, #1
 800d782:	6010      	str	r0, [r2, #0]
 800d784:	7019      	strb	r1, [r3, #0]
 800d786:	4608      	mov	r0, r1
 800d788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <__sfputs_r>:
 800d78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d790:	4606      	mov	r6, r0
 800d792:	460f      	mov	r7, r1
 800d794:	4614      	mov	r4, r2
 800d796:	18d5      	adds	r5, r2, r3
 800d798:	42ac      	cmp	r4, r5
 800d79a:	d101      	bne.n	800d7a0 <__sfputs_r+0x12>
 800d79c:	2000      	movs	r0, #0
 800d79e:	e007      	b.n	800d7b0 <__sfputs_r+0x22>
 800d7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a4:	463a      	mov	r2, r7
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7ff ffda 	bl	800d760 <__sfputc_r>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d1f3      	bne.n	800d798 <__sfputs_r+0xa>
 800d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7b4 <_vfiprintf_r>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	460d      	mov	r5, r1
 800d7ba:	b09d      	sub	sp, #116	; 0x74
 800d7bc:	4614      	mov	r4, r2
 800d7be:	4698      	mov	r8, r3
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	b118      	cbz	r0, 800d7cc <_vfiprintf_r+0x18>
 800d7c4:	6983      	ldr	r3, [r0, #24]
 800d7c6:	b90b      	cbnz	r3, 800d7cc <_vfiprintf_r+0x18>
 800d7c8:	f7fe fdc4 	bl	800c354 <__sinit>
 800d7cc:	4b89      	ldr	r3, [pc, #548]	; (800d9f4 <_vfiprintf_r+0x240>)
 800d7ce:	429d      	cmp	r5, r3
 800d7d0:	d11b      	bne.n	800d80a <_vfiprintf_r+0x56>
 800d7d2:	6875      	ldr	r5, [r6, #4]
 800d7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7d6:	07d9      	lsls	r1, r3, #31
 800d7d8:	d405      	bmi.n	800d7e6 <_vfiprintf_r+0x32>
 800d7da:	89ab      	ldrh	r3, [r5, #12]
 800d7dc:	059a      	lsls	r2, r3, #22
 800d7de:	d402      	bmi.n	800d7e6 <_vfiprintf_r+0x32>
 800d7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7e2:	f7ff f9c8 	bl	800cb76 <__retarget_lock_acquire_recursive>
 800d7e6:	89ab      	ldrh	r3, [r5, #12]
 800d7e8:	071b      	lsls	r3, r3, #28
 800d7ea:	d501      	bpl.n	800d7f0 <_vfiprintf_r+0x3c>
 800d7ec:	692b      	ldr	r3, [r5, #16]
 800d7ee:	b9eb      	cbnz	r3, 800d82c <_vfiprintf_r+0x78>
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7fd fdae 	bl	800b354 <__swsetup_r>
 800d7f8:	b1c0      	cbz	r0, 800d82c <_vfiprintf_r+0x78>
 800d7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7fc:	07dc      	lsls	r4, r3, #31
 800d7fe:	d50e      	bpl.n	800d81e <_vfiprintf_r+0x6a>
 800d800:	f04f 30ff 	mov.w	r0, #4294967295
 800d804:	b01d      	add	sp, #116	; 0x74
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	4b7b      	ldr	r3, [pc, #492]	; (800d9f8 <_vfiprintf_r+0x244>)
 800d80c:	429d      	cmp	r5, r3
 800d80e:	d101      	bne.n	800d814 <_vfiprintf_r+0x60>
 800d810:	68b5      	ldr	r5, [r6, #8]
 800d812:	e7df      	b.n	800d7d4 <_vfiprintf_r+0x20>
 800d814:	4b79      	ldr	r3, [pc, #484]	; (800d9fc <_vfiprintf_r+0x248>)
 800d816:	429d      	cmp	r5, r3
 800d818:	bf08      	it	eq
 800d81a:	68f5      	ldreq	r5, [r6, #12]
 800d81c:	e7da      	b.n	800d7d4 <_vfiprintf_r+0x20>
 800d81e:	89ab      	ldrh	r3, [r5, #12]
 800d820:	0598      	lsls	r0, r3, #22
 800d822:	d4ed      	bmi.n	800d800 <_vfiprintf_r+0x4c>
 800d824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d826:	f7ff f9a7 	bl	800cb78 <__retarget_lock_release_recursive>
 800d82a:	e7e9      	b.n	800d800 <_vfiprintf_r+0x4c>
 800d82c:	2300      	movs	r3, #0
 800d82e:	9309      	str	r3, [sp, #36]	; 0x24
 800d830:	2320      	movs	r3, #32
 800d832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d836:	f8cd 800c 	str.w	r8, [sp, #12]
 800d83a:	2330      	movs	r3, #48	; 0x30
 800d83c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da00 <_vfiprintf_r+0x24c>
 800d840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d844:	f04f 0901 	mov.w	r9, #1
 800d848:	4623      	mov	r3, r4
 800d84a:	469a      	mov	sl, r3
 800d84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d850:	b10a      	cbz	r2, 800d856 <_vfiprintf_r+0xa2>
 800d852:	2a25      	cmp	r2, #37	; 0x25
 800d854:	d1f9      	bne.n	800d84a <_vfiprintf_r+0x96>
 800d856:	ebba 0b04 	subs.w	fp, sl, r4
 800d85a:	d00b      	beq.n	800d874 <_vfiprintf_r+0xc0>
 800d85c:	465b      	mov	r3, fp
 800d85e:	4622      	mov	r2, r4
 800d860:	4629      	mov	r1, r5
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff ff93 	bl	800d78e <__sfputs_r>
 800d868:	3001      	adds	r0, #1
 800d86a:	f000 80aa 	beq.w	800d9c2 <_vfiprintf_r+0x20e>
 800d86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d870:	445a      	add	r2, fp
 800d872:	9209      	str	r2, [sp, #36]	; 0x24
 800d874:	f89a 3000 	ldrb.w	r3, [sl]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 80a2 	beq.w	800d9c2 <_vfiprintf_r+0x20e>
 800d87e:	2300      	movs	r3, #0
 800d880:	f04f 32ff 	mov.w	r2, #4294967295
 800d884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d888:	f10a 0a01 	add.w	sl, sl, #1
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	9307      	str	r3, [sp, #28]
 800d890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d894:	931a      	str	r3, [sp, #104]	; 0x68
 800d896:	4654      	mov	r4, sl
 800d898:	2205      	movs	r2, #5
 800d89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89e:	4858      	ldr	r0, [pc, #352]	; (800da00 <_vfiprintf_r+0x24c>)
 800d8a0:	f7f2 fcc6 	bl	8000230 <memchr>
 800d8a4:	9a04      	ldr	r2, [sp, #16]
 800d8a6:	b9d8      	cbnz	r0, 800d8e0 <_vfiprintf_r+0x12c>
 800d8a8:	06d1      	lsls	r1, r2, #27
 800d8aa:	bf44      	itt	mi
 800d8ac:	2320      	movmi	r3, #32
 800d8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b2:	0713      	lsls	r3, r2, #28
 800d8b4:	bf44      	itt	mi
 800d8b6:	232b      	movmi	r3, #43	; 0x2b
 800d8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8c2:	d015      	beq.n	800d8f0 <_vfiprintf_r+0x13c>
 800d8c4:	9a07      	ldr	r2, [sp, #28]
 800d8c6:	4654      	mov	r4, sl
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f04f 0c0a 	mov.w	ip, #10
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d4:	3b30      	subs	r3, #48	; 0x30
 800d8d6:	2b09      	cmp	r3, #9
 800d8d8:	d94e      	bls.n	800d978 <_vfiprintf_r+0x1c4>
 800d8da:	b1b0      	cbz	r0, 800d90a <_vfiprintf_r+0x156>
 800d8dc:	9207      	str	r2, [sp, #28]
 800d8de:	e014      	b.n	800d90a <_vfiprintf_r+0x156>
 800d8e0:	eba0 0308 	sub.w	r3, r0, r8
 800d8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	46a2      	mov	sl, r4
 800d8ee:	e7d2      	b.n	800d896 <_vfiprintf_r+0xe2>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	1d19      	adds	r1, r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	9103      	str	r1, [sp, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bfbb      	ittet	lt
 800d8fc:	425b      	neglt	r3, r3
 800d8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d902:	9307      	strge	r3, [sp, #28]
 800d904:	9307      	strlt	r3, [sp, #28]
 800d906:	bfb8      	it	lt
 800d908:	9204      	strlt	r2, [sp, #16]
 800d90a:	7823      	ldrb	r3, [r4, #0]
 800d90c:	2b2e      	cmp	r3, #46	; 0x2e
 800d90e:	d10c      	bne.n	800d92a <_vfiprintf_r+0x176>
 800d910:	7863      	ldrb	r3, [r4, #1]
 800d912:	2b2a      	cmp	r3, #42	; 0x2a
 800d914:	d135      	bne.n	800d982 <_vfiprintf_r+0x1ce>
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	1d1a      	adds	r2, r3, #4
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	9203      	str	r2, [sp, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfb8      	it	lt
 800d922:	f04f 33ff 	movlt.w	r3, #4294967295
 800d926:	3402      	adds	r4, #2
 800d928:	9305      	str	r3, [sp, #20]
 800d92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da10 <_vfiprintf_r+0x25c>
 800d92e:	7821      	ldrb	r1, [r4, #0]
 800d930:	2203      	movs	r2, #3
 800d932:	4650      	mov	r0, sl
 800d934:	f7f2 fc7c 	bl	8000230 <memchr>
 800d938:	b140      	cbz	r0, 800d94c <_vfiprintf_r+0x198>
 800d93a:	2340      	movs	r3, #64	; 0x40
 800d93c:	eba0 000a 	sub.w	r0, r0, sl
 800d940:	fa03 f000 	lsl.w	r0, r3, r0
 800d944:	9b04      	ldr	r3, [sp, #16]
 800d946:	4303      	orrs	r3, r0
 800d948:	3401      	adds	r4, #1
 800d94a:	9304      	str	r3, [sp, #16]
 800d94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d950:	482c      	ldr	r0, [pc, #176]	; (800da04 <_vfiprintf_r+0x250>)
 800d952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d956:	2206      	movs	r2, #6
 800d958:	f7f2 fc6a 	bl	8000230 <memchr>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d03f      	beq.n	800d9e0 <_vfiprintf_r+0x22c>
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <_vfiprintf_r+0x254>)
 800d962:	bb1b      	cbnz	r3, 800d9ac <_vfiprintf_r+0x1f8>
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	3307      	adds	r3, #7
 800d968:	f023 0307 	bic.w	r3, r3, #7
 800d96c:	3308      	adds	r3, #8
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	443b      	add	r3, r7
 800d974:	9309      	str	r3, [sp, #36]	; 0x24
 800d976:	e767      	b.n	800d848 <_vfiprintf_r+0x94>
 800d978:	fb0c 3202 	mla	r2, ip, r2, r3
 800d97c:	460c      	mov	r4, r1
 800d97e:	2001      	movs	r0, #1
 800d980:	e7a5      	b.n	800d8ce <_vfiprintf_r+0x11a>
 800d982:	2300      	movs	r3, #0
 800d984:	3401      	adds	r4, #1
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	4619      	mov	r1, r3
 800d98a:	f04f 0c0a 	mov.w	ip, #10
 800d98e:	4620      	mov	r0, r4
 800d990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d994:	3a30      	subs	r2, #48	; 0x30
 800d996:	2a09      	cmp	r2, #9
 800d998:	d903      	bls.n	800d9a2 <_vfiprintf_r+0x1ee>
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0c5      	beq.n	800d92a <_vfiprintf_r+0x176>
 800d99e:	9105      	str	r1, [sp, #20]
 800d9a0:	e7c3      	b.n	800d92a <_vfiprintf_r+0x176>
 800d9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e7f0      	b.n	800d98e <_vfiprintf_r+0x1da>
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4b16      	ldr	r3, [pc, #88]	; (800da0c <_vfiprintf_r+0x258>)
 800d9b4:	a904      	add	r1, sp, #16
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f7fc f962 	bl	8009c80 <_printf_float>
 800d9bc:	4607      	mov	r7, r0
 800d9be:	1c78      	adds	r0, r7, #1
 800d9c0:	d1d6      	bne.n	800d970 <_vfiprintf_r+0x1bc>
 800d9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9c4:	07d9      	lsls	r1, r3, #31
 800d9c6:	d405      	bmi.n	800d9d4 <_vfiprintf_r+0x220>
 800d9c8:	89ab      	ldrh	r3, [r5, #12]
 800d9ca:	059a      	lsls	r2, r3, #22
 800d9cc:	d402      	bmi.n	800d9d4 <_vfiprintf_r+0x220>
 800d9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9d0:	f7ff f8d2 	bl	800cb78 <__retarget_lock_release_recursive>
 800d9d4:	89ab      	ldrh	r3, [r5, #12]
 800d9d6:	065b      	lsls	r3, r3, #25
 800d9d8:	f53f af12 	bmi.w	800d800 <_vfiprintf_r+0x4c>
 800d9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9de:	e711      	b.n	800d804 <_vfiprintf_r+0x50>
 800d9e0:	ab03      	add	r3, sp, #12
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	462a      	mov	r2, r5
 800d9e6:	4b09      	ldr	r3, [pc, #36]	; (800da0c <_vfiprintf_r+0x258>)
 800d9e8:	a904      	add	r1, sp, #16
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f7fc fbec 	bl	800a1c8 <_printf_i>
 800d9f0:	e7e4      	b.n	800d9bc <_vfiprintf_r+0x208>
 800d9f2:	bf00      	nop
 800d9f4:	0800f928 	.word	0x0800f928
 800d9f8:	0800f948 	.word	0x0800f948
 800d9fc:	0800f908 	.word	0x0800f908
 800da00:	0800fb44 	.word	0x0800fb44
 800da04:	0800fb4e 	.word	0x0800fb4e
 800da08:	08009c81 	.word	0x08009c81
 800da0c:	0800d78f 	.word	0x0800d78f
 800da10:	0800fb4a 	.word	0x0800fb4a
 800da14:	00000000 	.word	0x00000000

0800da18 <nan>:
 800da18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da20 <nan+0x8>
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	00000000 	.word	0x00000000
 800da24:	7ff80000 	.word	0x7ff80000

0800da28 <_sbrk_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d06      	ldr	r5, [pc, #24]	; (800da44 <_sbrk_r+0x1c>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	4608      	mov	r0, r1
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	f7f6 fe6a 	bl	800470c <_sbrk>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_sbrk_r+0x1a>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_sbrk_r+0x1a>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	2000c48c 	.word	0x2000c48c

0800da48 <__sread>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	460c      	mov	r4, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 f8ee 	bl	800dc30 <_read_r>
 800da54:	2800      	cmp	r0, #0
 800da56:	bfab      	itete	ge
 800da58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da5a:	89a3      	ldrhlt	r3, [r4, #12]
 800da5c:	181b      	addge	r3, r3, r0
 800da5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da62:	bfac      	ite	ge
 800da64:	6563      	strge	r3, [r4, #84]	; 0x54
 800da66:	81a3      	strhlt	r3, [r4, #12]
 800da68:	bd10      	pop	{r4, pc}

0800da6a <__swrite>:
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	898b      	ldrh	r3, [r1, #12]
 800da72:	05db      	lsls	r3, r3, #23
 800da74:	4605      	mov	r5, r0
 800da76:	460c      	mov	r4, r1
 800da78:	4616      	mov	r6, r2
 800da7a:	d505      	bpl.n	800da88 <__swrite+0x1e>
 800da7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da80:	2302      	movs	r3, #2
 800da82:	2200      	movs	r2, #0
 800da84:	f000 f8b6 	bl	800dbf4 <_lseek_r>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4628      	mov	r0, r5
 800da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9e:	f000 b835 	b.w	800db0c <_write_r>

0800daa2 <__sseek>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 f8a3 	bl	800dbf4 <_lseek_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	bf15      	itete	ne
 800dab4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dabe:	81a3      	strheq	r3, [r4, #12]
 800dac0:	bf18      	it	ne
 800dac2:	81a3      	strhne	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__sclose>:
 800dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daca:	f000 b84f 	b.w	800db6c <_close_r>

0800dace <strncmp>:
 800dace:	b510      	push	{r4, lr}
 800dad0:	b16a      	cbz	r2, 800daee <strncmp+0x20>
 800dad2:	3901      	subs	r1, #1
 800dad4:	1884      	adds	r4, r0, r2
 800dad6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dada:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dade:	4293      	cmp	r3, r2
 800dae0:	d103      	bne.n	800daea <strncmp+0x1c>
 800dae2:	42a0      	cmp	r0, r4
 800dae4:	d001      	beq.n	800daea <strncmp+0x1c>
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1f5      	bne.n	800dad6 <strncmp+0x8>
 800daea:	1a98      	subs	r0, r3, r2
 800daec:	bd10      	pop	{r4, pc}
 800daee:	4610      	mov	r0, r2
 800daf0:	e7fc      	b.n	800daec <strncmp+0x1e>

0800daf2 <__ascii_wctomb>:
 800daf2:	b149      	cbz	r1, 800db08 <__ascii_wctomb+0x16>
 800daf4:	2aff      	cmp	r2, #255	; 0xff
 800daf6:	bf85      	ittet	hi
 800daf8:	238a      	movhi	r3, #138	; 0x8a
 800dafa:	6003      	strhi	r3, [r0, #0]
 800dafc:	700a      	strbls	r2, [r1, #0]
 800dafe:	f04f 30ff 	movhi.w	r0, #4294967295
 800db02:	bf98      	it	ls
 800db04:	2001      	movls	r0, #1
 800db06:	4770      	bx	lr
 800db08:	4608      	mov	r0, r1
 800db0a:	4770      	bx	lr

0800db0c <_write_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	4d07      	ldr	r5, [pc, #28]	; (800db2c <_write_r+0x20>)
 800db10:	4604      	mov	r4, r0
 800db12:	4608      	mov	r0, r1
 800db14:	4611      	mov	r1, r2
 800db16:	2200      	movs	r2, #0
 800db18:	602a      	str	r2, [r5, #0]
 800db1a:	461a      	mov	r2, r3
 800db1c:	f7f6 fdda 	bl	80046d4 <_write>
 800db20:	1c43      	adds	r3, r0, #1
 800db22:	d102      	bne.n	800db2a <_write_r+0x1e>
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	b103      	cbz	r3, 800db2a <_write_r+0x1e>
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	2000c48c 	.word	0x2000c48c

0800db30 <__assert_func>:
 800db30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db32:	4614      	mov	r4, r2
 800db34:	461a      	mov	r2, r3
 800db36:	4b09      	ldr	r3, [pc, #36]	; (800db5c <__assert_func+0x2c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4605      	mov	r5, r0
 800db3c:	68d8      	ldr	r0, [r3, #12]
 800db3e:	b14c      	cbz	r4, 800db54 <__assert_func+0x24>
 800db40:	4b07      	ldr	r3, [pc, #28]	; (800db60 <__assert_func+0x30>)
 800db42:	9100      	str	r1, [sp, #0]
 800db44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db48:	4906      	ldr	r1, [pc, #24]	; (800db64 <__assert_func+0x34>)
 800db4a:	462b      	mov	r3, r5
 800db4c:	f000 f81e 	bl	800db8c <fiprintf>
 800db50:	f000 f880 	bl	800dc54 <abort>
 800db54:	4b04      	ldr	r3, [pc, #16]	; (800db68 <__assert_func+0x38>)
 800db56:	461c      	mov	r4, r3
 800db58:	e7f3      	b.n	800db42 <__assert_func+0x12>
 800db5a:	bf00      	nop
 800db5c:	2000002c 	.word	0x2000002c
 800db60:	0800fb55 	.word	0x0800fb55
 800db64:	0800fb62 	.word	0x0800fb62
 800db68:	0800fb90 	.word	0x0800fb90

0800db6c <_close_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d06      	ldr	r5, [pc, #24]	; (800db88 <_close_r+0x1c>)
 800db70:	2300      	movs	r3, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	f7f6 fdba 	bl	80046f0 <_close>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_close_r+0x1a>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_close_r+0x1a>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	2000c48c 	.word	0x2000c48c

0800db8c <fiprintf>:
 800db8c:	b40e      	push	{r1, r2, r3}
 800db8e:	b503      	push	{r0, r1, lr}
 800db90:	4601      	mov	r1, r0
 800db92:	ab03      	add	r3, sp, #12
 800db94:	4805      	ldr	r0, [pc, #20]	; (800dbac <fiprintf+0x20>)
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	6800      	ldr	r0, [r0, #0]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	f7ff fe09 	bl	800d7b4 <_vfiprintf_r>
 800dba2:	b002      	add	sp, #8
 800dba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dba8:	b003      	add	sp, #12
 800dbaa:	4770      	bx	lr
 800dbac:	2000002c 	.word	0x2000002c

0800dbb0 <_fstat_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	; (800dbd0 <_fstat_r+0x20>)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	4608      	mov	r0, r1
 800dbba:	4611      	mov	r1, r2
 800dbbc:	602b      	str	r3, [r5, #0]
 800dbbe:	f7f6 fd9b 	bl	80046f8 <_fstat>
 800dbc2:	1c43      	adds	r3, r0, #1
 800dbc4:	d102      	bne.n	800dbcc <_fstat_r+0x1c>
 800dbc6:	682b      	ldr	r3, [r5, #0]
 800dbc8:	b103      	cbz	r3, 800dbcc <_fstat_r+0x1c>
 800dbca:	6023      	str	r3, [r4, #0]
 800dbcc:	bd38      	pop	{r3, r4, r5, pc}
 800dbce:	bf00      	nop
 800dbd0:	2000c48c 	.word	0x2000c48c

0800dbd4 <_isatty_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d06      	ldr	r5, [pc, #24]	; (800dbf0 <_isatty_r+0x1c>)
 800dbd8:	2300      	movs	r3, #0
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4608      	mov	r0, r1
 800dbde:	602b      	str	r3, [r5, #0]
 800dbe0:	f7f6 fd90 	bl	8004704 <_isatty>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d102      	bne.n	800dbee <_isatty_r+0x1a>
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	b103      	cbz	r3, 800dbee <_isatty_r+0x1a>
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	bd38      	pop	{r3, r4, r5, pc}
 800dbf0:	2000c48c 	.word	0x2000c48c

0800dbf4 <_lseek_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	4d07      	ldr	r5, [pc, #28]	; (800dc14 <_lseek_r+0x20>)
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	4608      	mov	r0, r1
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	2200      	movs	r2, #0
 800dc00:	602a      	str	r2, [r5, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	f7f6 fd80 	bl	8004708 <_lseek>
 800dc08:	1c43      	adds	r3, r0, #1
 800dc0a:	d102      	bne.n	800dc12 <_lseek_r+0x1e>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b103      	cbz	r3, 800dc12 <_lseek_r+0x1e>
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	bd38      	pop	{r3, r4, r5, pc}
 800dc14:	2000c48c 	.word	0x2000c48c

0800dc18 <__malloc_lock>:
 800dc18:	4801      	ldr	r0, [pc, #4]	; (800dc20 <__malloc_lock+0x8>)
 800dc1a:	f7fe bfac 	b.w	800cb76 <__retarget_lock_acquire_recursive>
 800dc1e:	bf00      	nop
 800dc20:	2000c484 	.word	0x2000c484

0800dc24 <__malloc_unlock>:
 800dc24:	4801      	ldr	r0, [pc, #4]	; (800dc2c <__malloc_unlock+0x8>)
 800dc26:	f7fe bfa7 	b.w	800cb78 <__retarget_lock_release_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	2000c484 	.word	0x2000c484

0800dc30 <_read_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4d07      	ldr	r5, [pc, #28]	; (800dc50 <_read_r+0x20>)
 800dc34:	4604      	mov	r4, r0
 800dc36:	4608      	mov	r0, r1
 800dc38:	4611      	mov	r1, r2
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	602a      	str	r2, [r5, #0]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f7f6 fd3a 	bl	80046b8 <_read>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_read_r+0x1e>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_read_r+0x1e>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	2000c48c 	.word	0x2000c48c

0800dc54 <abort>:
 800dc54:	b508      	push	{r3, lr}
 800dc56:	2006      	movs	r0, #6
 800dc58:	f000 f82c 	bl	800dcb4 <raise>
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f7f6 fd25 	bl	80046ac <_exit>

0800dc62 <_raise_r>:
 800dc62:	291f      	cmp	r1, #31
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	d904      	bls.n	800dc76 <_raise_r+0x14>
 800dc6c:	2316      	movs	r3, #22
 800dc6e:	6003      	str	r3, [r0, #0]
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc78:	b112      	cbz	r2, 800dc80 <_raise_r+0x1e>
 800dc7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc7e:	b94b      	cbnz	r3, 800dc94 <_raise_r+0x32>
 800dc80:	4620      	mov	r0, r4
 800dc82:	f000 f831 	bl	800dce8 <_getpid_r>
 800dc86:	462a      	mov	r2, r5
 800dc88:	4601      	mov	r1, r0
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc90:	f000 b818 	b.w	800dcc4 <_kill_r>
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d00a      	beq.n	800dcae <_raise_r+0x4c>
 800dc98:	1c59      	adds	r1, r3, #1
 800dc9a:	d103      	bne.n	800dca4 <_raise_r+0x42>
 800dc9c:	2316      	movs	r3, #22
 800dc9e:	6003      	str	r3, [r0, #0]
 800dca0:	2001      	movs	r0, #1
 800dca2:	e7e7      	b.n	800dc74 <_raise_r+0x12>
 800dca4:	2400      	movs	r4, #0
 800dca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcaa:	4628      	mov	r0, r5
 800dcac:	4798      	blx	r3
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e7e0      	b.n	800dc74 <_raise_r+0x12>
	...

0800dcb4 <raise>:
 800dcb4:	4b02      	ldr	r3, [pc, #8]	; (800dcc0 <raise+0xc>)
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	6818      	ldr	r0, [r3, #0]
 800dcba:	f7ff bfd2 	b.w	800dc62 <_raise_r>
 800dcbe:	bf00      	nop
 800dcc0:	2000002c 	.word	0x2000002c

0800dcc4 <_kill_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d07      	ldr	r5, [pc, #28]	; (800dce4 <_kill_r+0x20>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4604      	mov	r4, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	4611      	mov	r1, r2
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	f7f6 fce3 	bl	800469c <_kill>
 800dcd6:	1c43      	adds	r3, r0, #1
 800dcd8:	d102      	bne.n	800dce0 <_kill_r+0x1c>
 800dcda:	682b      	ldr	r3, [r5, #0]
 800dcdc:	b103      	cbz	r3, 800dce0 <_kill_r+0x1c>
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	bd38      	pop	{r3, r4, r5, pc}
 800dce2:	bf00      	nop
 800dce4:	2000c48c 	.word	0x2000c48c

0800dce8 <_getpid_r>:
 800dce8:	f7f6 bcd6 	b.w	8004698 <_getpid>

0800dcec <round>:
 800dcec:	ec51 0b10 	vmov	r0, r1, d0
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dcf6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dcfa:	2c13      	cmp	r4, #19
 800dcfc:	ee10 2a10 	vmov	r2, s0
 800dd00:	460b      	mov	r3, r1
 800dd02:	dc19      	bgt.n	800dd38 <round+0x4c>
 800dd04:	2c00      	cmp	r4, #0
 800dd06:	da09      	bge.n	800dd1c <round+0x30>
 800dd08:	3401      	adds	r4, #1
 800dd0a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dd0e:	d103      	bne.n	800dd18 <round+0x2c>
 800dd10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dd14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd18:	2100      	movs	r1, #0
 800dd1a:	e028      	b.n	800dd6e <round+0x82>
 800dd1c:	4d15      	ldr	r5, [pc, #84]	; (800dd74 <round+0x88>)
 800dd1e:	4125      	asrs	r5, r4
 800dd20:	ea01 0605 	and.w	r6, r1, r5
 800dd24:	4332      	orrs	r2, r6
 800dd26:	d00e      	beq.n	800dd46 <round+0x5a>
 800dd28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dd2c:	fa42 f404 	asr.w	r4, r2, r4
 800dd30:	4423      	add	r3, r4
 800dd32:	ea23 0305 	bic.w	r3, r3, r5
 800dd36:	e7ef      	b.n	800dd18 <round+0x2c>
 800dd38:	2c33      	cmp	r4, #51	; 0x33
 800dd3a:	dd07      	ble.n	800dd4c <round+0x60>
 800dd3c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dd40:	d101      	bne.n	800dd46 <round+0x5a>
 800dd42:	f7f2 facb 	bl	80002dc <__adddf3>
 800dd46:	ec41 0b10 	vmov	d0, r0, r1
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dd50:	f04f 35ff 	mov.w	r5, #4294967295
 800dd54:	40f5      	lsrs	r5, r6
 800dd56:	4228      	tst	r0, r5
 800dd58:	d0f5      	beq.n	800dd46 <round+0x5a>
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dd60:	fa01 f404 	lsl.w	r4, r1, r4
 800dd64:	1912      	adds	r2, r2, r4
 800dd66:	bf28      	it	cs
 800dd68:	185b      	addcs	r3, r3, r1
 800dd6a:	ea22 0105 	bic.w	r1, r2, r5
 800dd6e:	4608      	mov	r0, r1
 800dd70:	4619      	mov	r1, r3
 800dd72:	e7e8      	b.n	800dd46 <round+0x5a>
 800dd74:	000fffff 	.word	0x000fffff

0800dd78 <exp>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	ed2d 8b02 	vpush	{d8}
 800dd7e:	ec55 4b10 	vmov	r4, r5, d0
 800dd82:	f000 f875 	bl	800de70 <__ieee754_exp>
 800dd86:	4b22      	ldr	r3, [pc, #136]	; (800de10 <exp+0x98>)
 800dd88:	eeb0 8a40 	vmov.f32	s16, s0
 800dd8c:	eef0 8a60 	vmov.f32	s17, s1
 800dd90:	f993 3000 	ldrsb.w	r3, [r3]
 800dd94:	3301      	adds	r3, #1
 800dd96:	d012      	beq.n	800ddbe <exp+0x46>
 800dd98:	ec45 4b10 	vmov	d0, r4, r5
 800dd9c:	f000 fa64 	bl	800e268 <finite>
 800dda0:	b168      	cbz	r0, 800ddbe <exp+0x46>
 800dda2:	a313      	add	r3, pc, #76	; (adr r3, 800ddf0 <exp+0x78>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	4620      	mov	r0, r4
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7f2 fedc 	bl	8000b68 <__aeabi_dcmpgt>
 800ddb0:	b160      	cbz	r0, 800ddcc <exp+0x54>
 800ddb2:	f7fb fe6b 	bl	8009a8c <__errno>
 800ddb6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800ddf8 <exp+0x80>
 800ddba:	2322      	movs	r3, #34	; 0x22
 800ddbc:	6003      	str	r3, [r0, #0]
 800ddbe:	eeb0 0a48 	vmov.f32	s0, s16
 800ddc2:	eef0 0a68 	vmov.f32	s1, s17
 800ddc6:	ecbd 8b02 	vpop	{d8}
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	a30c      	add	r3, pc, #48	; (adr r3, 800de00 <exp+0x88>)
 800ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	f7f2 fea9 	bl	8000b2c <__aeabi_dcmplt>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d0ef      	beq.n	800ddbe <exp+0x46>
 800ddde:	f7fb fe55 	bl	8009a8c <__errno>
 800dde2:	2322      	movs	r3, #34	; 0x22
 800dde4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800de08 <exp+0x90>
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	e7e8      	b.n	800ddbe <exp+0x46>
 800ddec:	f3af 8000 	nop.w
 800ddf0:	fefa39ef 	.word	0xfefa39ef
 800ddf4:	40862e42 	.word	0x40862e42
 800ddf8:	00000000 	.word	0x00000000
 800ddfc:	7ff00000 	.word	0x7ff00000
 800de00:	d52d3051 	.word	0xd52d3051
 800de04:	c0874910 	.word	0xc0874910
	...
 800de10:	20000200 	.word	0x20000200

0800de14 <fmodf>:
 800de14:	b508      	push	{r3, lr}
 800de16:	ed2d 8b02 	vpush	{d8}
 800de1a:	eef0 8a40 	vmov.f32	s17, s0
 800de1e:	eeb0 8a60 	vmov.f32	s16, s1
 800de22:	f000 f99f 	bl	800e164 <__ieee754_fmodf>
 800de26:	4b0f      	ldr	r3, [pc, #60]	; (800de64 <fmodf+0x50>)
 800de28:	f993 3000 	ldrsb.w	r3, [r3]
 800de2c:	3301      	adds	r3, #1
 800de2e:	d016      	beq.n	800de5e <fmodf+0x4a>
 800de30:	eeb4 8a48 	vcmp.f32	s16, s16
 800de34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de38:	d611      	bvs.n	800de5e <fmodf+0x4a>
 800de3a:	eef4 8a68 	vcmp.f32	s17, s17
 800de3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de42:	d60c      	bvs.n	800de5e <fmodf+0x4a>
 800de44:	eddf 8a08 	vldr	s17, [pc, #32]	; 800de68 <fmodf+0x54>
 800de48:	eeb4 8a68 	vcmp.f32	s16, s17
 800de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de50:	d105      	bne.n	800de5e <fmodf+0x4a>
 800de52:	f7fb fe1b 	bl	8009a8c <__errno>
 800de56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de5a:	2321      	movs	r3, #33	; 0x21
 800de5c:	6003      	str	r3, [r0, #0]
 800de5e:	ecbd 8b02 	vpop	{d8}
 800de62:	bd08      	pop	{r3, pc}
 800de64:	20000200 	.word	0x20000200
	...

0800de70 <__ieee754_exp>:
 800de70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de74:	ec55 4b10 	vmov	r4, r5, d0
 800de78:	49b1      	ldr	r1, [pc, #708]	; (800e140 <__ieee754_exp+0x2d0>)
 800de7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de7e:	428b      	cmp	r3, r1
 800de80:	ed2d 8b04 	vpush	{d8-d9}
 800de84:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800de88:	d937      	bls.n	800defa <__ieee754_exp+0x8a>
 800de8a:	49ae      	ldr	r1, [pc, #696]	; (800e144 <__ieee754_exp+0x2d4>)
 800de8c:	428b      	cmp	r3, r1
 800de8e:	d916      	bls.n	800debe <__ieee754_exp+0x4e>
 800de90:	ee10 3a10 	vmov	r3, s0
 800de94:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800de98:	4313      	orrs	r3, r2
 800de9a:	d009      	beq.n	800deb0 <__ieee754_exp+0x40>
 800de9c:	ee10 2a10 	vmov	r2, s0
 800dea0:	462b      	mov	r3, r5
 800dea2:	4620      	mov	r0, r4
 800dea4:	4629      	mov	r1, r5
 800dea6:	f7f2 fa19 	bl	80002dc <__adddf3>
 800deaa:	4604      	mov	r4, r0
 800deac:	460d      	mov	r5, r1
 800deae:	e000      	b.n	800deb2 <__ieee754_exp+0x42>
 800deb0:	bb06      	cbnz	r6, 800def4 <__ieee754_exp+0x84>
 800deb2:	ecbd 8b04 	vpop	{d8-d9}
 800deb6:	ec45 4b10 	vmov	d0, r4, r5
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	a38a      	add	r3, pc, #552	; (adr r3, 800e0e8 <__ieee754_exp+0x278>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	ee10 0a10 	vmov	r0, s0
 800dec8:	4629      	mov	r1, r5
 800deca:	f7f2 fe4d 	bl	8000b68 <__aeabi_dcmpgt>
 800dece:	b138      	cbz	r0, 800dee0 <__ieee754_exp+0x70>
 800ded0:	a387      	add	r3, pc, #540	; (adr r3, 800e0f0 <__ieee754_exp+0x280>)
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	4610      	mov	r0, r2
 800ded8:	4619      	mov	r1, r3
 800deda:	f7f2 fbb5 	bl	8000648 <__aeabi_dmul>
 800dede:	e7e4      	b.n	800deaa <__ieee754_exp+0x3a>
 800dee0:	a385      	add	r3, pc, #532	; (adr r3, 800e0f8 <__ieee754_exp+0x288>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	4620      	mov	r0, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	f7f2 fe1f 	bl	8000b2c <__aeabi_dcmplt>
 800deee:	2800      	cmp	r0, #0
 800def0:	f000 8087 	beq.w	800e002 <__ieee754_exp+0x192>
 800def4:	2400      	movs	r4, #0
 800def6:	2500      	movs	r5, #0
 800def8:	e7db      	b.n	800deb2 <__ieee754_exp+0x42>
 800defa:	4a93      	ldr	r2, [pc, #588]	; (800e148 <__ieee754_exp+0x2d8>)
 800defc:	4293      	cmp	r3, r2
 800defe:	f240 80ac 	bls.w	800e05a <__ieee754_exp+0x1ea>
 800df02:	4a92      	ldr	r2, [pc, #584]	; (800e14c <__ieee754_exp+0x2dc>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d87c      	bhi.n	800e002 <__ieee754_exp+0x192>
 800df08:	4b91      	ldr	r3, [pc, #580]	; (800e150 <__ieee754_exp+0x2e0>)
 800df0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	ee10 0a10 	vmov	r0, s0
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 f9de 	bl	80002d8 <__aeabi_dsub>
 800df1c:	4b8d      	ldr	r3, [pc, #564]	; (800e154 <__ieee754_exp+0x2e4>)
 800df1e:	00f7      	lsls	r7, r6, #3
 800df20:	443b      	add	r3, r7
 800df22:	ed93 7b00 	vldr	d7, [r3]
 800df26:	f1c6 0a01 	rsb	sl, r6, #1
 800df2a:	4680      	mov	r8, r0
 800df2c:	4689      	mov	r9, r1
 800df2e:	ebaa 0a06 	sub.w	sl, sl, r6
 800df32:	eeb0 8a47 	vmov.f32	s16, s14
 800df36:	eef0 8a67 	vmov.f32	s17, s15
 800df3a:	ec53 2b18 	vmov	r2, r3, d8
 800df3e:	4640      	mov	r0, r8
 800df40:	4649      	mov	r1, r9
 800df42:	f7f2 f9c9 	bl	80002d8 <__aeabi_dsub>
 800df46:	4604      	mov	r4, r0
 800df48:	460d      	mov	r5, r1
 800df4a:	4622      	mov	r2, r4
 800df4c:	462b      	mov	r3, r5
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 fb79 	bl	8000648 <__aeabi_dmul>
 800df56:	a36a      	add	r3, pc, #424	; (adr r3, 800e100 <__ieee754_exp+0x290>)
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	4606      	mov	r6, r0
 800df5e:	460f      	mov	r7, r1
 800df60:	f7f2 fb72 	bl	8000648 <__aeabi_dmul>
 800df64:	a368      	add	r3, pc, #416	; (adr r3, 800e108 <__ieee754_exp+0x298>)
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	f7f2 f9b5 	bl	80002d8 <__aeabi_dsub>
 800df6e:	4632      	mov	r2, r6
 800df70:	463b      	mov	r3, r7
 800df72:	f7f2 fb69 	bl	8000648 <__aeabi_dmul>
 800df76:	a366      	add	r3, pc, #408	; (adr r3, 800e110 <__ieee754_exp+0x2a0>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 f9ae 	bl	80002dc <__adddf3>
 800df80:	4632      	mov	r2, r6
 800df82:	463b      	mov	r3, r7
 800df84:	f7f2 fb60 	bl	8000648 <__aeabi_dmul>
 800df88:	a363      	add	r3, pc, #396	; (adr r3, 800e118 <__ieee754_exp+0x2a8>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	f7f2 f9a3 	bl	80002d8 <__aeabi_dsub>
 800df92:	4632      	mov	r2, r6
 800df94:	463b      	mov	r3, r7
 800df96:	f7f2 fb57 	bl	8000648 <__aeabi_dmul>
 800df9a:	a361      	add	r3, pc, #388	; (adr r3, 800e120 <__ieee754_exp+0x2b0>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 f99c 	bl	80002dc <__adddf3>
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	463b      	mov	r3, r7
 800dfa8:	f7f2 fb4e 	bl	8000648 <__aeabi_dmul>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 f990 	bl	80002d8 <__aeabi_dsub>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	f7f2 fb40 	bl	8000648 <__aeabi_dmul>
 800dfc8:	ec41 0b19 	vmov	d9, r0, r1
 800dfcc:	f1ba 0f00 	cmp.w	sl, #0
 800dfd0:	d15d      	bne.n	800e08e <__ieee754_exp+0x21e>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 f97c 	bl	80002d8 <__aeabi_dsub>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	ec51 0b19 	vmov	r0, r1, d9
 800dfe8:	f7f2 fc58 	bl	800089c <__aeabi_ddiv>
 800dfec:	4622      	mov	r2, r4
 800dfee:	462b      	mov	r3, r5
 800dff0:	f7f2 f972 	bl	80002d8 <__aeabi_dsub>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	2000      	movs	r0, #0
 800dffa:	4957      	ldr	r1, [pc, #348]	; (800e158 <__ieee754_exp+0x2e8>)
 800dffc:	f7f2 f96c 	bl	80002d8 <__aeabi_dsub>
 800e000:	e753      	b.n	800deaa <__ieee754_exp+0x3a>
 800e002:	4856      	ldr	r0, [pc, #344]	; (800e15c <__ieee754_exp+0x2ec>)
 800e004:	a348      	add	r3, pc, #288	; (adr r3, 800e128 <__ieee754_exp+0x2b8>)
 800e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800e00e:	4629      	mov	r1, r5
 800e010:	4620      	mov	r0, r4
 800e012:	f7f2 fb19 	bl	8000648 <__aeabi_dmul>
 800e016:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e01a:	f7f2 f95f 	bl	80002dc <__adddf3>
 800e01e:	f7f2 fdc3 	bl	8000ba8 <__aeabi_d2iz>
 800e022:	4682      	mov	sl, r0
 800e024:	f7f2 faa6 	bl	8000574 <__aeabi_i2d>
 800e028:	a341      	add	r3, pc, #260	; (adr r3, 800e130 <__ieee754_exp+0x2c0>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	4606      	mov	r6, r0
 800e030:	460f      	mov	r7, r1
 800e032:	f7f2 fb09 	bl	8000648 <__aeabi_dmul>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4620      	mov	r0, r4
 800e03c:	4629      	mov	r1, r5
 800e03e:	f7f2 f94b 	bl	80002d8 <__aeabi_dsub>
 800e042:	a33d      	add	r3, pc, #244	; (adr r3, 800e138 <__ieee754_exp+0x2c8>)
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	4680      	mov	r8, r0
 800e04a:	4689      	mov	r9, r1
 800e04c:	4630      	mov	r0, r6
 800e04e:	4639      	mov	r1, r7
 800e050:	f7f2 fafa 	bl	8000648 <__aeabi_dmul>
 800e054:	ec41 0b18 	vmov	d8, r0, r1
 800e058:	e76f      	b.n	800df3a <__ieee754_exp+0xca>
 800e05a:	4a41      	ldr	r2, [pc, #260]	; (800e160 <__ieee754_exp+0x2f0>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d811      	bhi.n	800e084 <__ieee754_exp+0x214>
 800e060:	a323      	add	r3, pc, #140	; (adr r3, 800e0f0 <__ieee754_exp+0x280>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	ee10 0a10 	vmov	r0, s0
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 f936 	bl	80002dc <__adddf3>
 800e070:	4b39      	ldr	r3, [pc, #228]	; (800e158 <__ieee754_exp+0x2e8>)
 800e072:	2200      	movs	r2, #0
 800e074:	f7f2 fd78 	bl	8000b68 <__aeabi_dcmpgt>
 800e078:	b138      	cbz	r0, 800e08a <__ieee754_exp+0x21a>
 800e07a:	4b37      	ldr	r3, [pc, #220]	; (800e158 <__ieee754_exp+0x2e8>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	4620      	mov	r0, r4
 800e080:	4629      	mov	r1, r5
 800e082:	e710      	b.n	800dea6 <__ieee754_exp+0x36>
 800e084:	f04f 0a00 	mov.w	sl, #0
 800e088:	e75f      	b.n	800df4a <__ieee754_exp+0xda>
 800e08a:	4682      	mov	sl, r0
 800e08c:	e75d      	b.n	800df4a <__ieee754_exp+0xda>
 800e08e:	4632      	mov	r2, r6
 800e090:	463b      	mov	r3, r7
 800e092:	2000      	movs	r0, #0
 800e094:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e098:	f7f2 f91e 	bl	80002d8 <__aeabi_dsub>
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	ec51 0b19 	vmov	r0, r1, d9
 800e0a4:	f7f2 fbfa 	bl	800089c <__aeabi_ddiv>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	ec51 0b18 	vmov	r0, r1, d8
 800e0b0:	f7f2 f912 	bl	80002d8 <__aeabi_dsub>
 800e0b4:	4642      	mov	r2, r8
 800e0b6:	464b      	mov	r3, r9
 800e0b8:	f7f2 f90e 	bl	80002d8 <__aeabi_dsub>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	4925      	ldr	r1, [pc, #148]	; (800e158 <__ieee754_exp+0x2e8>)
 800e0c4:	f7f2 f908 	bl	80002d8 <__aeabi_dsub>
 800e0c8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e0cc:	4592      	cmp	sl, r2
 800e0ce:	db02      	blt.n	800e0d6 <__ieee754_exp+0x266>
 800e0d0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e0d4:	e6e9      	b.n	800deaa <__ieee754_exp+0x3a>
 800e0d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e0da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e0e4:	e6f9      	b.n	800deda <__ieee754_exp+0x6a>
 800e0e6:	bf00      	nop
 800e0e8:	fefa39ef 	.word	0xfefa39ef
 800e0ec:	40862e42 	.word	0x40862e42
 800e0f0:	8800759c 	.word	0x8800759c
 800e0f4:	7e37e43c 	.word	0x7e37e43c
 800e0f8:	d52d3051 	.word	0xd52d3051
 800e0fc:	c0874910 	.word	0xc0874910
 800e100:	72bea4d0 	.word	0x72bea4d0
 800e104:	3e663769 	.word	0x3e663769
 800e108:	c5d26bf1 	.word	0xc5d26bf1
 800e10c:	3ebbbd41 	.word	0x3ebbbd41
 800e110:	af25de2c 	.word	0xaf25de2c
 800e114:	3f11566a 	.word	0x3f11566a
 800e118:	16bebd93 	.word	0x16bebd93
 800e11c:	3f66c16c 	.word	0x3f66c16c
 800e120:	5555553e 	.word	0x5555553e
 800e124:	3fc55555 	.word	0x3fc55555
 800e128:	652b82fe 	.word	0x652b82fe
 800e12c:	3ff71547 	.word	0x3ff71547
 800e130:	fee00000 	.word	0xfee00000
 800e134:	3fe62e42 	.word	0x3fe62e42
 800e138:	35793c76 	.word	0x35793c76
 800e13c:	3dea39ef 	.word	0x3dea39ef
 800e140:	40862e41 	.word	0x40862e41
 800e144:	7fefffff 	.word	0x7fefffff
 800e148:	3fd62e42 	.word	0x3fd62e42
 800e14c:	3ff0a2b1 	.word	0x3ff0a2b1
 800e150:	0800fba8 	.word	0x0800fba8
 800e154:	0800fbb8 	.word	0x0800fbb8
 800e158:	3ff00000 	.word	0x3ff00000
 800e15c:	0800fb98 	.word	0x0800fb98
 800e160:	3e2fffff 	.word	0x3e2fffff

0800e164 <__ieee754_fmodf>:
 800e164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e166:	ee10 6a90 	vmov	r6, s1
 800e16a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800e16e:	d009      	beq.n	800e184 <__ieee754_fmodf+0x20>
 800e170:	ee10 2a10 	vmov	r2, s0
 800e174:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e178:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e17c:	da02      	bge.n	800e184 <__ieee754_fmodf+0x20>
 800e17e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e182:	dd04      	ble.n	800e18e <__ieee754_fmodf+0x2a>
 800e184:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e188:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800e18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e18e:	42ab      	cmp	r3, r5
 800e190:	dbfc      	blt.n	800e18c <__ieee754_fmodf+0x28>
 800e192:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800e196:	d106      	bne.n	800e1a6 <__ieee754_fmodf+0x42>
 800e198:	4a32      	ldr	r2, [pc, #200]	; (800e264 <__ieee754_fmodf+0x100>)
 800e19a:	0fe3      	lsrs	r3, r4, #31
 800e19c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1a0:	ed93 0a00 	vldr	s0, [r3]
 800e1a4:	e7f2      	b.n	800e18c <__ieee754_fmodf+0x28>
 800e1a6:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800e1aa:	d13f      	bne.n	800e22c <__ieee754_fmodf+0xc8>
 800e1ac:	0219      	lsls	r1, r3, #8
 800e1ae:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	dc37      	bgt.n	800e226 <__ieee754_fmodf+0xc2>
 800e1b6:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e1ba:	d13d      	bne.n	800e238 <__ieee754_fmodf+0xd4>
 800e1bc:	022f      	lsls	r7, r5, #8
 800e1be:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800e1c2:	2f00      	cmp	r7, #0
 800e1c4:	da35      	bge.n	800e232 <__ieee754_fmodf+0xce>
 800e1c6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800e1ca:	bfbb      	ittet	lt
 800e1cc:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e1d0:	1a12      	sublt	r2, r2, r0
 800e1d2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800e1d6:	4093      	lsllt	r3, r2
 800e1d8:	bfa8      	it	ge
 800e1da:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800e1de:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e1e2:	bfb5      	itete	lt
 800e1e4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e1e8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800e1ec:	1a52      	sublt	r2, r2, r1
 800e1ee:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800e1f2:	bfb8      	it	lt
 800e1f4:	4095      	lsllt	r5, r2
 800e1f6:	1a40      	subs	r0, r0, r1
 800e1f8:	1b5a      	subs	r2, r3, r5
 800e1fa:	bb00      	cbnz	r0, 800e23e <__ieee754_fmodf+0xda>
 800e1fc:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800e200:	bf38      	it	cc
 800e202:	4613      	movcc	r3, r2
 800e204:	2b00      	cmp	r3, #0
 800e206:	d0c7      	beq.n	800e198 <__ieee754_fmodf+0x34>
 800e208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e20c:	db1f      	blt.n	800e24e <__ieee754_fmodf+0xea>
 800e20e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e212:	db1f      	blt.n	800e254 <__ieee754_fmodf+0xf0>
 800e214:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800e218:	317f      	adds	r1, #127	; 0x7f
 800e21a:	4323      	orrs	r3, r4
 800e21c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800e220:	ee00 3a10 	vmov	s0, r3
 800e224:	e7b2      	b.n	800e18c <__ieee754_fmodf+0x28>
 800e226:	3801      	subs	r0, #1
 800e228:	0049      	lsls	r1, r1, #1
 800e22a:	e7c2      	b.n	800e1b2 <__ieee754_fmodf+0x4e>
 800e22c:	15d8      	asrs	r0, r3, #23
 800e22e:	387f      	subs	r0, #127	; 0x7f
 800e230:	e7c1      	b.n	800e1b6 <__ieee754_fmodf+0x52>
 800e232:	3901      	subs	r1, #1
 800e234:	007f      	lsls	r7, r7, #1
 800e236:	e7c4      	b.n	800e1c2 <__ieee754_fmodf+0x5e>
 800e238:	15e9      	asrs	r1, r5, #23
 800e23a:	397f      	subs	r1, #127	; 0x7f
 800e23c:	e7c3      	b.n	800e1c6 <__ieee754_fmodf+0x62>
 800e23e:	2a00      	cmp	r2, #0
 800e240:	da02      	bge.n	800e248 <__ieee754_fmodf+0xe4>
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	3801      	subs	r0, #1
 800e246:	e7d7      	b.n	800e1f8 <__ieee754_fmodf+0x94>
 800e248:	d0a6      	beq.n	800e198 <__ieee754_fmodf+0x34>
 800e24a:	0053      	lsls	r3, r2, #1
 800e24c:	e7fa      	b.n	800e244 <__ieee754_fmodf+0xe0>
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	3901      	subs	r1, #1
 800e252:	e7d9      	b.n	800e208 <__ieee754_fmodf+0xa4>
 800e254:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e258:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e25c:	3182      	adds	r1, #130	; 0x82
 800e25e:	410b      	asrs	r3, r1
 800e260:	4323      	orrs	r3, r4
 800e262:	e7dd      	b.n	800e220 <__ieee754_fmodf+0xbc>
 800e264:	0800fbc8 	.word	0x0800fbc8

0800e268 <finite>:
 800e268:	b082      	sub	sp, #8
 800e26a:	ed8d 0b00 	vstr	d0, [sp]
 800e26e:	9801      	ldr	r0, [sp, #4]
 800e270:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e274:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e278:	0fc0      	lsrs	r0, r0, #31
 800e27a:	b002      	add	sp, #8
 800e27c:	4770      	bx	lr
	...

0800e280 <_init>:
 800e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e282:	bf00      	nop
 800e284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e286:	bc08      	pop	{r3}
 800e288:	469e      	mov	lr, r3
 800e28a:	4770      	bx	lr

0800e28c <_fini>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	bf00      	nop
 800e290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e292:	bc08      	pop	{r3}
 800e294:	469e      	mov	lr, r3
 800e296:	4770      	bx	lr
